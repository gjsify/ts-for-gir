<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Babl" version="0.1"/>
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="GdkPixbuf" version="2.0"/>
  <include name="Gegl" version="0.4"/>
  <include name="Gio" version="2.0"/>
  <include name="Pango" version="1.0"/>
  <include name="cairo" version="1.0"/>
  <package name="gimp-3.0"/>
  <c:include name="libgimp/gimp.h"/>
  <namespace name="Gimp"
             version="3.0"
             shared-library="libgimp-3.0.so.0,libgimpbase-3.0.so.0,libgimpcolor-3.0.so.0,libgimpconfig-3.0.so.0,libgimpmath-3.0.so.0,libgimpmodule-3.0.so.0"
             c:identifier-prefixes="Gimp"
             c:symbol-prefixes="gimp">
    <alias name="ColorArray" c:type="GimpColorArray">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparamspecs.h"
           line="332">A boxed type which is nothing more than an alias to a %NULL-terminated array
of [class@Gegl.Color].

The code fragments in the following example show the use of a property of
type %GIMP_TYPE_COLOR_ARRAY with g_object_class_install_property(),
g_object_set() and g_object_get().

```C
g_object_class_install_property (object_class,
                                 PROP_COLORS,
                                 g_param_spec_boxed ("colors",
                                                     _("Colors"),
                                                     _("List of colors"),
                                                     GIMP_TYPE_COLOR_ARRAY,
                                                     G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));

GeglColor *colors[] = { gegl_color_new ("red"), gegl_color_new ("blue"), NULL };

g_object_set (obj, "colors", colors, NULL);

GeglColors **colors;

g_object_get (obj, "colors", &amp;colors, NULL);
gimp_color_array_free (colors);
```</doc>
      <source-position filename="libgimpbase/gimpparamspecs.h" line="363"/>
      <type name="Gegl.Color" c:type="GeglColor**"/>
    </alias>
    <constant name="API_VERSION"
              value="3.0"
              c:type="GIMP_API_VERSION"
              version="2.2">
      <source-position filename="libgimpbase/gimpversion.h" line="57"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <enumeration name="AddMaskType"
                 glib:type-name="GimpAddMaskType"
                 glib:get-type="gimp_add_mask_type_get_type"
                 c:type="GimpAddMaskType">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="37">Modes of initialising a layer mask.</doc>
      <member name="white"
              value="0"
              c:identifier="GIMP_ADD_MASK_WHITE"
              glib:nick="white"
              glib:name="GIMP_ADD_MASK_WHITE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="39">White (full opacity)</doc>
      </member>
      <member name="black"
              value="1"
              c:identifier="GIMP_ADD_MASK_BLACK"
              glib:nick="black"
              glib:name="GIMP_ADD_MASK_BLACK">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="40">Black (full transparency)</doc>
      </member>
      <member name="alpha"
              value="2"
              c:identifier="GIMP_ADD_MASK_ALPHA"
              glib:nick="alpha"
              glib:name="GIMP_ADD_MASK_ALPHA">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="41">Layer's alpha channel</doc>
      </member>
      <member name="alpha_transfer"
              value="3"
              c:identifier="GIMP_ADD_MASK_ALPHA_TRANSFER"
              glib:nick="alpha-transfer"
              glib:name="GIMP_ADD_MASK_ALPHA_TRANSFER">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="42">Transfer layer's alpha channel</doc>
      </member>
      <member name="selection"
              value="4"
              c:identifier="GIMP_ADD_MASK_SELECTION"
              glib:nick="selection"
              glib:name="GIMP_ADD_MASK_SELECTION">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="43">Selection</doc>
      </member>
      <member name="copy"
              value="5"
              c:identifier="GIMP_ADD_MASK_COPY"
              glib:nick="copy"
              glib:name="GIMP_ADD_MASK_COPY">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="44">Grayscale copy of layer</doc>
      </member>
      <member name="channel"
              value="6"
              c:identifier="GIMP_ADD_MASK_CHANNEL"
              glib:nick="channel"
              glib:name="GIMP_ADD_MASK_CHANNEL">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="45">Channel</doc>
      </member>
    </enumeration>
    <enumeration name="ArgumentSync" version="3.0" c:type="GimpArgumentSync">
      <doc xml:space="preserve"
           filename="libgimp/gimpprocedure.h"
           line="52">Methods of syncing procedure arguments.</doc>
      <source-position filename="libgimp/gimpprocedure.h" line="65"/>
      <member name="none" value="0" c:identifier="GIMP_ARGUMENT_SYNC_NONE">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.h"
             line="54">Don't sync this argument</doc>
      </member>
      <member name="parasite"
              value="1"
              c:identifier="GIMP_ARGUMENT_SYNC_PARASITE">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.h"
             line="55">Sync this argument with an image parasite</doc>
      </member>
    </enumeration>
    <record name="Array"
            c:type="GimpArray"
            glib:type-name="GimpArray"
            glib:get-type="gimp_array_get_type"
            c:symbol-prefix="array">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="201"/>
      <field name="data" writable="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparamspecs.h"
             line="190">pointer to the array's data.</doc>
        <array length="1" zero-terminated="0" c:type="guint8*">
          <type name="guint8" c:type="guint8"/>
        </array>
      </field>
      <field name="length" writable="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparamspecs.h"
             line="191">length of @data, in bytes.</doc>
        <type name="gsize" c:type="gsize"/>
      </field>
      <field name="static_data" writable="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparamspecs.h"
             line="192">whether @data points to statically allocated memory.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <constructor name="new" c:identifier="gimp_array_new">
        <source-position filename="libgimpbase/gimpparamspecs.h" line="203"/>
        <return-value transfer-ownership="full">
          <type name="Array" c:type="GimpArray*"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <array length="1" zero-terminated="0" c:type="const guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="static_data" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy" c:identifier="gimp_array_copy">
        <source-position filename="libgimpbase/gimpparamspecs.h" line="206"/>
        <return-value transfer-ownership="full">
          <type name="Array" c:type="GimpArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <type name="Array" c:type="const GimpArray*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="gimp_array_free">
        <source-position filename="libgimpbase/gimpparamspecs.h" line="207"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <type name="Array" c:type="GimpArray*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <callback name="BatchFunc" c:type="GimpBatchFunc" version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimpbatchprocedure.h"
           line="32">The batch function is run during the lifetime of the GIMP session,
each time a plug-in batch procedure is called.</doc>
      <source-position filename="libgimp/gimpbatchprocedure.h" line="46"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimpbatchprocedure.h"
             line="42">the @procedure's return values.</doc>
        <type name="ValueArray" c:type="GimpValueArray*"/>
      </return-value>
      <parameters>
        <parameter name="procedure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbatchprocedure.h"
               line="34">the #GimpProcedure that runs.</doc>
          <type name="Procedure" c:type="GimpProcedure*"/>
        </parameter>
        <parameter name="run_mode" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbatchprocedure.h"
               line="35">the #GimpRunMode.</doc>
          <type name="RunMode" c:type="GimpRunMode"/>
        </parameter>
        <parameter name="command" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="config" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbatchprocedure.h"
               line="36">the @procedure's remaining arguments.</doc>
          <type name="ProcedureConfig" c:type="GimpProcedureConfig*"/>
        </parameter>
        <parameter name="run_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="4">
          <doc xml:space="preserve"
               filename="libgimp/gimpbatchprocedure.h"
               line="37">the run_data given in gimp_batch_procedure_new().</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="BatchProcedure"
           c:symbol-prefix="batch_procedure"
           c:type="GimpBatchProcedure"
           parent="Procedure"
           glib:type-name="GimpBatchProcedure"
           glib:get-type="gimp_batch_procedure_get_type"
           glib:type-struct="BatchProcedureClass">
      <doc xml:space="preserve"
           filename="libgimp/gimpbatchprocedure.c"
           line="29">Batch procedures implement an interpreter able to run commands as input.

In particular, batch procedures will be available on the command line
through the `--batch-interpreter` option to switch the chosen interpreter.
Then any command given through the `--batch` option will have to be in the
chosen language.

It makes GIMP usable on the command line, but also to process small scripts
(without making full-featured plug-ins), fully in command line without
graphical interface.</doc>
      <source-position filename="libgimp/gimpbatchprocedure.h" line="54"/>
      <constructor name="new"
                   c:identifier="gimp_batch_procedure_new"
                   version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpbatchprocedure.c"
             line="204">Creates a new batch interpreter procedure named @name which will call
@run_func when invoked.

See gimp_procedure_new() for information about @proc_type.

#GimpBatchProcedure is a #GimpProcedure subclass that makes it easier
to write batch interpreter procedures.

It automatically adds the standard

(#GimpRunMode, #gchar)

arguments of a batch procedure. It is possible to add additional
arguments.

When invoked via gimp_procedure_run(), it unpacks these standard
arguments and calls @run_func which is a #GimpBatchFunc. The "args"
#GimpValueArray of #GimpRunSaveFunc only contains additionally added
arguments.</doc>
        <source-position filename="libgimp/gimpbatchprocedure.h" line="57"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpbatchprocedure.c"
               line="234">a new #GimpProcedure.</doc>
          <type name="Procedure" c:type="GimpProcedure*"/>
        </return-value>
        <parameters>
          <parameter name="plug_in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbatchprocedure.c"
                 line="206">a #GimpPlugIn.</doc>
            <type name="PlugIn" c:type="GimpPlugIn*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbatchprocedure.c"
                 line="207">the new procedure's name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="interpreter_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbatchprocedure.c"
                 line="208">the public-facing name, e.g. "Python 3".</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="proc_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbatchprocedure.c"
                 line="209">the new procedure's #GimpPDBProcType.</doc>
            <type name="PDBProcType" c:type="GimpPDBProcType"/>
          </parameter>
          <parameter name="run_func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="5"
                     destroy="6">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbatchprocedure.c"
                 line="210">the run function for the new procedure.</doc>
            <type name="BatchFunc" c:type="GimpBatchFunc"/>
          </parameter>
          <parameter name="run_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbatchprocedure.c"
                 line="211">user data passed to @run_func.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="run_data_destroy"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbatchprocedure.c"
                 line="212">free function for @run_data, or %NULL.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_interpreter_name"
              c:identifier="gimp_batch_procedure_get_interpreter_name"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpbatchprocedure.c"
             line="307">Returns the procedure's interpreter name, as set with
[method@BatchProcedure.set_interpreter_name].</doc>
        <source-position filename="libgimp/gimpbatchprocedure.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbatchprocedure.c"
               line="314">The procedure's interpreter name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbatchprocedure.c"
                 line="309">A batch procedure object.</doc>
            <type name="BatchProcedure" c:type="GimpBatchProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_interpreter_name"
              c:identifier="gimp_batch_procedure_set_interpreter_name"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpbatchprocedure.c"
             line="271">Associates an interpreter name with a batch procedure.

This name can be used for any public-facing strings, such as
graphical interface labels or command line usage. E.g. the command
line interface could list all available interface, displaying both a
procedure name and a "pretty printing" title.

Note that since the format name is public-facing, it is recommended
to localize it at runtime, for instance through gettext, like:

```c
gimp_batch_procedure_set_interpreter_name (procedure, _("Python 3"));
```

Some language would indeed localize even some technical terms or
acronyms, even if sometimes just to rewrite them with the local
writing system.</doc>
        <source-position filename="libgimp/gimpbatchprocedure.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbatchprocedure.c"
                 line="273">A batch procedure.</doc>
            <type name="BatchProcedure" c:type="GimpBatchProcedure*"/>
          </instance-parameter>
          <parameter name="interpreter_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbatchprocedure.c"
                 line="274">A public-facing name for the interpreter, e.g. "Python 3".</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="BatchProcedureClass"
            c:type="GimpBatchProcedureClass"
            glib:is-gtype-struct-for="BatchProcedure">
      <source-position filename="libgimp/gimpbatchprocedure.h" line="54"/>
      <field name="parent_class">
        <type name="ProcedureClass" c:type="GimpProcedureClass"/>
      </field>
    </record>
    <class name="Brush"
           c:symbol-prefix="brush"
           c:type="GimpBrush"
           parent="Resource"
           glib:type-name="GimpBrush"
           glib:get-type="gimp_brush_get_type"
           glib:type-struct="BrushClass">
      <doc xml:space="preserve"
           filename="libgimp/gimpbrush_pdb.c"
           line="30">Installable object used by painting and stroking tools.</doc>
      <source-position filename="libgimp/gimpbrush.h" line="38"/>
      <implements name="ConfigInterface"/>
      <constructor name="new" c:identifier="gimp_brush_new" version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpbrush_pdb.c"
             line="39">Create a new generated brush having default parameters.

Creates a new, parametric brush.</doc>
        <source-position filename="libgimp/gimpbrush_pdb.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbrush_pdb.c"
               line="47">The brush.</doc>
          <type name="Brush" c:type="GimpBrush*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="41">The requested name of the new brush.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_by_name"
                c:identifier="gimp_brush_get_by_name"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpbrush_pdb.c"
             line="75">Returns the brush with the given name.

Return an existing brush having the given name. Returns %NULL when
no brush exists of that name.</doc>
        <source-position filename="libgimp/gimpbrush_pdb.h" line="36"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgimp/gimpbrush_pdb.c"
               line="84">The brush.</doc>
          <type name="Brush" c:type="GimpBrush*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="77">The name of the brush.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_angle"
              c:identifier="gimp_brush_get_angle"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpbrush_pdb.c"
             line="809">Gets the rotation angle of a generated brush.

Gets the angle of rotation for a generated brush. Returns an error
when called for a non-parametric brush.</doc>
        <source-position filename="libgimp/gimpbrush_pdb.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbrush_pdb.c"
               line="819">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="brush" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="811">The brush.</doc>
            <type name="Brush" c:type="GimpBrush*"/>
          </instance-parameter>
          <parameter name="angle"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="812">The rotation angle of the brush in degree.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_aspect_ratio"
              c:identifier="gimp_brush_get_aspect_ratio"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpbrush_pdb.c"
             line="718">Gets the aspect ratio of a generated brush.

Gets the aspect ratio of a generated brush. Returns an error when
called for a non-parametric brush. The aspect ratio is a float
between 0.0 and 1000.0.</doc>
        <source-position filename="libgimp/gimpbrush_pdb.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbrush_pdb.c"
               line="729">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="brush" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="720">The brush.</doc>
            <type name="Brush" c:type="GimpBrush*"/>
          </instance-parameter>
          <parameter name="aspect_ratio"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="721">The aspect ratio of the brush.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_buffer" c:identifier="gimp_brush_get_buffer">
        <doc xml:space="preserve"
             filename="libgimp/gimpbrush.c"
             line="73">Gets pixel data of the brush within the bounding box specified by @max_width
and @max_height. The data will be scaled down so that it fits within this
size without changing its ratio. If the brush is smaller than this size to
begin with, it will not be scaled up.

If @max_width or @max_height are %NULL, the buffer is returned in the brush's
native size.

When the brush is parametric or a raster mask, only the mask (as returned by
[method@Gimp.Brush.get_mask]) will be set. The returned buffer will be NULL.

Make sure you called [func@Gegl.init] before calling any function using
`GEGL`.</doc>
        <source-position filename="libgimp/gimpbrush.h" line="41"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpbrush.c"
               line="94">a [class@Gegl.Buffer] of %NULL if the brush is parametric
                          or mask only.</doc>
          <type name="Gegl.Buffer" c:type="GeglBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="brush" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush.c"
                 line="75">a [class@Brush].</doc>
            <type name="Brush" c:type="GimpBrush*"/>
          </instance-parameter>
          <parameter name="max_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush.c"
                 line="76">a maximum width for the returned buffer.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="max_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush.c"
                 line="77">a maximum height for the returned buffer.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush.c"
                 line="78">an optional Babl format.</doc>
            <type name="Babl.Object" c:type="const Babl*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_hardness"
              c:identifier="gimp_brush_get_hardness"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpbrush_pdb.c"
             line="626">Gets the hardness of a generated brush.

Gets the hardness of a generated brush. The hardness of a brush is
the amount its intensity fades at the outside edge, as a float
between 0.0 and 1.0. Returns an error when called for a
non-parametric brush.</doc>
        <source-position filename="libgimp/gimpbrush_pdb.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbrush_pdb.c"
               line="638">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="brush" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="628">The brush.</doc>
            <type name="Brush" c:type="GimpBrush*"/>
          </instance-parameter>
          <parameter name="hardness"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="629">The hardness of the brush.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_info" c:identifier="gimp_brush_get_info" version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpbrush_pdb.c"
             line="148">Gets information about the brush.

Gets information about the brush: brush extents (width and height),
color depth and mask depth (bpp). The color bpp is zero when the
brush is parametric versus raster.</doc>
        <source-position filename="libgimp/gimpbrush_pdb.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbrush_pdb.c"
               line="162">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="brush" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="150">The brush.</doc>
            <type name="Brush" c:type="GimpBrush*"/>
          </instance-parameter>
          <parameter name="width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="151">The brush width.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="152">The brush height.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="mask_bpp"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="153">The brush mask bpp.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="color_bpp"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="154">The brush color bpp.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_mask" c:identifier="gimp_brush_get_mask">
        <doc xml:space="preserve"
             filename="libgimp/gimpbrush.c"
             line="116">Gets mask data of the brush within the bounding box specified by @max_width
and @max_height. The data will be scaled down so that it fits within this
size without changing its ratio. If the brush is smaller than this size to
begin with, it will not be scaled up.

If @max_width or @max_height are %NULL, the buffer is returned in the brush's
native size.

Make sure you called [func@Gegl.init] before calling any function using
`GEGL`.</doc>
        <source-position filename="libgimp/gimpbrush.h" line="45"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpbrush.c"
               line="134">a [class@Gegl.Buffer] representing the @brush mask.</doc>
          <type name="Gegl.Buffer" c:type="GeglBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="brush" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush.c"
                 line="118">a [class@Brush].</doc>
            <type name="Brush" c:type="GimpBrush*"/>
          </instance-parameter>
          <parameter name="max_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush.c"
                 line="119">a maximum width for the returned buffer.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="max_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush.c"
                 line="120">a maximum height for the returned buffer.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush.c"
                 line="121">an optional Babl format.</doc>
            <type name="Babl.Object" c:type="const Babl*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_radius"
              c:identifier="gimp_brush_get_radius"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpbrush_pdb.c"
             line="446">Gets the radius of a generated brush.

Gets the radius of a generated brush. Returns an error when called
for a non-parametric brush.</doc>
        <source-position filename="libgimp/gimpbrush_pdb.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbrush_pdb.c"
               line="456">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="brush" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="448">The brush.</doc>
            <type name="Brush" c:type="GimpBrush*"/>
          </instance-parameter>
          <parameter name="radius"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="449">The radius of the brush in pixels.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_shape"
              c:identifier="gimp_brush_get_shape"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpbrush_pdb.c"
             line="352">Gets the shape of a generated brush.

Gets the shape of a generated brush. Returns an error when called
for a non-parametric brush. The choices for shape are Circle
(GIMP_BRUSH_GENERATED_CIRCLE), Square (GIMP_BRUSH_GENERATED_SQUARE),
and Diamond (GIMP_BRUSH_GENERATED_DIAMOND). Other shapes might be
added in the future.</doc>
        <source-position filename="libgimp/gimpbrush_pdb.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbrush_pdb.c"
               line="365">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="brush" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="354">The brush.</doc>
            <type name="Brush" c:type="GimpBrush*"/>
          </instance-parameter>
          <parameter name="shape"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="355">The brush shape.</doc>
            <type name="BrushGeneratedShape"
                  c:type="GimpBrushGeneratedShape*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_spacing"
              c:identifier="gimp_brush_get_spacing"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpbrush_pdb.c"
             line="272">Gets the brush spacing, the stamping frequency.

Returns the spacing setting for the brush. Spacing is an integer
between 0 and 1000 which represents a percentage of the maximum of
the width and height of the mask. Both parametric and raster brushes
have a spacing.</doc>
        <source-position filename="libgimp/gimpbrush_pdb.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbrush_pdb.c"
               line="283">The brush spacing.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="brush" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="274">The brush.</doc>
            <type name="Brush" c:type="GimpBrush*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_spikes"
              c:identifier="gimp_brush_get_spikes"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpbrush_pdb.c"
             line="536">Gets the number of spikes for a generated brush.

Gets the number of spikes for a generated brush. Returns an error
when called for a non-parametric brush.</doc>
        <source-position filename="libgimp/gimpbrush_pdb.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbrush_pdb.c"
               line="546">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="brush" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="538">The brush.</doc>
            <type name="Brush" c:type="GimpBrush*"/>
          </instance-parameter>
          <parameter name="spikes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="539">The number of spikes on the brush.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_generated"
              c:identifier="gimp_brush_is_generated"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpbrush_pdb.c"
             line="112">Whether the brush is generated (parametric versus raster).

Returns TRUE when brush is parametric.</doc>
        <source-position filename="libgimp/gimpbrush_pdb.h" line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbrush_pdb.c"
               line="120">TRUE if the brush is generated.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="brush" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="114">The brush.</doc>
            <type name="Brush" c:type="GimpBrush*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_angle"
              c:identifier="gimp_brush_set_angle"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpbrush_pdb.c"
             line="852">Sets the rotation angle of a generated brush.

Sets the rotation angle for a generated brush. Sets the angle modulo
180, in the range [-180.0, 180.0]. Returns the clamped value.
Returns an error when brush is non-parametric or not editable.</doc>
        <source-position filename="libgimp/gimpbrush_pdb.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbrush_pdb.c"
               line="864">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="brush" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="854">The brush.</doc>
            <type name="Brush" c:type="GimpBrush*"/>
          </instance-parameter>
          <parameter name="angle_in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="855">The desired brush rotation angle in degrees.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="angle_out"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="856">The brush rotation angle actually assigned.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_aspect_ratio"
              c:identifier="gimp_brush_set_aspect_ratio"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpbrush_pdb.c"
             line="762">Sets the aspect ratio of a generated brush.

Sets the aspect ratio for a generated brush. Clamps aspect ratio to
[0.0, 1000.0]. Returns the clamped value. Returns an error when
brush is non-parametric or not editable.</doc>
        <source-position filename="libgimp/gimpbrush_pdb.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbrush_pdb.c"
               line="774">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="brush" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="764">The brush.</doc>
            <type name="Brush" c:type="GimpBrush*"/>
          </instance-parameter>
          <parameter name="aspect_ratio_in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="765">The desired brush aspect ratio.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="aspect_ratio_out"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="766">The brush aspect ratio actually assigned.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hardness"
              c:identifier="gimp_brush_set_hardness"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpbrush_pdb.c"
             line="671">Sets the hardness of a generated brush.

Sets the hardness for a generated brush. Clamps hardness to [0.0,
1.0]. Returns the clamped value. Returns an error when brush is
non-parametric or not editable.</doc>
        <source-position filename="libgimp/gimpbrush_pdb.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbrush_pdb.c"
               line="683">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="brush" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="673">The brush.</doc>
            <type name="Brush" c:type="GimpBrush*"/>
          </instance-parameter>
          <parameter name="hardness_in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="674">The desired brush hardness.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="hardness_out"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="675">The brush hardness actually assigned.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_radius"
              c:identifier="gimp_brush_set_radius"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpbrush_pdb.c"
             line="489">Sets the radius of a generated brush.

Sets the radius for a generated brush. Clamps radius to [0.0,
32767.0]. Returns the clamped value. Returns an error when brush is
non-parametric or not editable.</doc>
        <source-position filename="libgimp/gimpbrush_pdb.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbrush_pdb.c"
               line="501">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="brush" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="491">The brush.</doc>
            <type name="Brush" c:type="GimpBrush*"/>
          </instance-parameter>
          <parameter name="radius_in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="492">The desired brush radius in pixel.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="radius_out"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="493">The brush radius actually assigned.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_shape"
              c:identifier="gimp_brush_set_shape"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpbrush_pdb.c"
             line="398">Sets the shape of a generated brush.

Sets the shape of a generated brush. Returns an error when brush is
non-parametric or not editable. The choices for shape are Circle
(GIMP_BRUSH_GENERATED_CIRCLE), Square (GIMP_BRUSH_GENERATED_SQUARE),
and Diamond (GIMP_BRUSH_GENERATED_DIAMOND).</doc>
        <source-position filename="libgimp/gimpbrush_pdb.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbrush_pdb.c"
               line="411">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="brush" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="400">The brush.</doc>
            <type name="Brush" c:type="GimpBrush*"/>
          </instance-parameter>
          <parameter name="shape_in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="401">The brush shape.</doc>
            <type name="BrushGeneratedShape" c:type="GimpBrushGeneratedShape"/>
          </parameter>
          <parameter name="shape_out"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="402">The brush shape actually assigned.</doc>
            <type name="BrushGeneratedShape"
                  c:type="GimpBrushGeneratedShape*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_spacing"
              c:identifier="gimp_brush_set_spacing"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpbrush_pdb.c"
             line="311">Sets the brush spacing.

Set the spacing for the brush. The spacing must be an integer
between 0 and 1000. Both parametric and raster brushes have a
spacing. Returns an error when the brush is not editable. Create a
new or copied brush or to get an editable brush.</doc>
        <source-position filename="libgimp/gimpbrush_pdb.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbrush_pdb.c"
               line="323">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="brush" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="313">The brush.</doc>
            <type name="Brush" c:type="GimpBrush*"/>
          </instance-parameter>
          <parameter name="spacing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="314">The brush spacing.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_spikes"
              c:identifier="gimp_brush_set_spikes"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpbrush_pdb.c"
             line="579">Sets the number of spikes for a generated brush.

Sets the number of spikes for a generated brush. Clamps spikes to
[2,20]. Returns the clamped value. Returns an error when brush is
non-parametric or not editable.</doc>
        <source-position filename="libgimp/gimpbrush_pdb.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbrush_pdb.c"
               line="591">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="brush" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="581">The brush.</doc>
            <type name="Brush" c:type="GimpBrush*"/>
          </instance-parameter>
          <parameter name="spikes_in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="582">The desired number of spikes.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="spikes_out"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpbrush_pdb.c"
                 line="583">The number of spikes actually assigned.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <enumeration name="BrushApplicationMode"
                 glib:type-name="GimpBrushApplicationMode"
                 glib:get-type="gimp_brush_application_mode_get_type"
                 c:type="GimpBrushApplicationMode">
      <doc xml:space="preserve"
           filename="libgimp/gimpenums.h"
           line="31">Extracted from app/paint/paint-enums.h</doc>
      <member name="hard"
              value="0"
              c:identifier="GIMP_BRUSH_HARD"
              glib:nick="hard"
              glib:name="GIMP_BRUSH_HARD">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="33">GIMP_BRUSH_HARD</doc>
      </member>
      <member name="soft"
              value="1"
              c:identifier="GIMP_BRUSH_SOFT"
              glib:nick="soft"
              glib:name="GIMP_BRUSH_SOFT">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="34">GIMP_BRUSH_SOFT</doc>
      </member>
    </enumeration>
    <record name="BrushClass"
            c:type="GimpBrushClass"
            glib:is-gtype-struct-for="Brush">
      <source-position filename="libgimp/gimpbrush.h" line="38"/>
      <field name="parent_class">
        <type name="ResourceClass" c:type="GimpResourceClass"/>
      </field>
    </record>
    <enumeration name="BrushGeneratedShape"
                 glib:type-name="GimpBrushGeneratedShape"
                 glib:get-type="gimp_brush_generated_shape_get_type"
                 c:type="GimpBrushGeneratedShape">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="65">Shapes of generated brushes.</doc>
      <member name="circle"
              value="0"
              c:identifier="GIMP_BRUSH_GENERATED_CIRCLE"
              glib:nick="circle"
              glib:name="GIMP_BRUSH_GENERATED_CIRCLE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="67">Circle</doc>
      </member>
      <member name="square"
              value="1"
              c:identifier="GIMP_BRUSH_GENERATED_SQUARE"
              glib:nick="square"
              glib:name="GIMP_BRUSH_GENERATED_SQUARE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="68">Square</doc>
      </member>
      <member name="diamond"
              value="2"
              c:identifier="GIMP_BRUSH_GENERATED_DIAMOND"
              glib:nick="diamond"
              glib:name="GIMP_BRUSH_GENERATED_DIAMOND">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="69">Diamond</doc>
      </member>
    </enumeration>
    <function-macro name="CAIRO_ARGB32_GET_PIXEL"
                    c:identifier="GIMP_CAIRO_ARGB32_GET_PIXEL"
                    version="2.8"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimpcairo.h"
           line="116">Gets a single pixel from a Cairo image surface in %CAIRO_FORMAT_ARGB32.</doc>
      <source-position filename="libgimpcolor/gimpcairo.h" line="129"/>
      <parameters>
        <parameter name="s">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcairo.h"
               line="118">pointer to the source buffer</doc>
        </parameter>
        <parameter name="r">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcairo.h"
               line="119">red component, not pre-multiplied</doc>
        </parameter>
        <parameter name="g">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcairo.h"
               line="120">green component, not pre-multiplied</doc>
        </parameter>
        <parameter name="b">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcairo.h"
               line="121">blue component, not pre-multiplied</doc>
        </parameter>
        <parameter name="a">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcairo.h"
               line="122">alpha component</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CAIRO_ARGB32_SET_PIXEL"
                    c:identifier="GIMP_CAIRO_ARGB32_SET_PIXEL"
                    version="2.6"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimpcairo.h"
           line="79">Sets a single pixel in an Cairo image surface in %CAIRO_FORMAT_ARGB32.</doc>
      <source-position filename="libgimpcolor/gimpcairo.h" line="92"/>
      <parameters>
        <parameter name="d">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcairo.h"
               line="81">pointer to the destination buffer</doc>
        </parameter>
        <parameter name="r">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcairo.h"
               line="82">red component, not pre-multiplied</doc>
        </parameter>
        <parameter name="g">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcairo.h"
               line="83">green component, not pre-multiplied</doc>
        </parameter>
        <parameter name="b">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcairo.h"
               line="84">blue component, not pre-multiplied</doc>
        </parameter>
        <parameter name="a">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcairo.h"
               line="85">alpha component</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CAIRO_RGB24_GET_PIXEL"
                    c:identifier="GIMP_CAIRO_RGB24_GET_PIXEL"
                    version="2.8"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimpcairo.h"
           line="59">Gets a single pixel from a Cairo image surface in %CAIRO_FORMAT_RGB24.</doc>
      <source-position filename="libgimpcolor/gimpcairo.h" line="71"/>
      <parameters>
        <parameter name="s">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcairo.h"
               line="61">pointer to the source buffer</doc>
        </parameter>
        <parameter name="r">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcairo.h"
               line="62">red component</doc>
        </parameter>
        <parameter name="g">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcairo.h"
               line="63">green component</doc>
        </parameter>
        <parameter name="b">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcairo.h"
               line="64">blue component</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CAIRO_RGB24_SET_PIXEL"
                    c:identifier="GIMP_CAIRO_RGB24_SET_PIXEL"
                    version="2.6"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimpcairo.h"
           line="39">Sets a single pixel in an Cairo image surface in %CAIRO_FORMAT_RGB24.</doc>
      <source-position filename="libgimpcolor/gimpcairo.h" line="51"/>
      <parameters>
        <parameter name="d">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcairo.h"
               line="41">pointer to the destination buffer</doc>
        </parameter>
        <parameter name="r">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcairo.h"
               line="42">red component</doc>
        </parameter>
        <parameter name="g">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcairo.h"
               line="43">green component</doc>
        </parameter>
        <parameter name="b">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcairo.h"
               line="44">blue component</doc>
        </parameter>
      </parameters>
    </function-macro>
    <constant name="CHECK_DARK" value="0.400000" c:type="GIMP_CHECK_DARK">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpchecks.h"
           line="46">The dark gray value for the default checkerboard pattern.</doc>
      <source-position filename="libgimpbase/gimpchecks.h" line="51"/>
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CHECK_LIGHT" value="0.600000" c:type="GIMP_CHECK_LIGHT">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpchecks.h"
           line="53">The dark light value for the default checkerboard pattern.</doc>
      <source-position filename="libgimpbase/gimpchecks.h" line="58"/>
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CHECK_SIZE" value="8" c:type="GIMP_CHECK_SIZE">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpchecks.h"
           line="29">The default checkerboard size in pixels. This is configurable in
the core but GIMP plug-ins can't access the user preference and
should use this constant instead.</doc>
      <source-position filename="libgimpbase/gimpchecks.h" line="36"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CHECK_SIZE_SM" value="4" c:type="GIMP_CHECK_SIZE_SM">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpchecks.h"
           line="38">The default small checkerboard size in pixels.</doc>
      <source-position filename="libgimpbase/gimpchecks.h" line="43"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="CHECK_VERSION"
                    c:identifier="GIMP_CHECK_VERSION"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpversion.h" line="59"/>
      <parameters>
        <parameter name="major">
        </parameter>
        <parameter name="minor">
        </parameter>
        <parameter name="micro">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="CONFIG_PARAM_AGGREGATE"
              value="2"
              c:type="GIMP_CONFIG_PARAM_AGGREGATE">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-params.h"
           line="42">The object property is to be treated as part of the parent object.</doc>
      <source-position filename="libgimpconfig/gimpconfig-params.h" line="47"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CONFIG_PARAM_CONFIRM"
              value="8"
              c:type="GIMP_CONFIG_PARAM_CONFIRM">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-params.h"
           line="56">Changes to this property should be confirmed by the user before
being applied.</doc>
      <source-position filename="libgimpconfig/gimpconfig-params.h" line="62"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CONFIG_PARAM_DEFAULTS"
              value="16"
              c:type="GIMP_CONFIG_PARAM_DEFAULTS">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-params.h"
           line="64">Don't serialize this property if it has the default value.</doc>
      <source-position filename="libgimpconfig/gimpconfig-params.h" line="69"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CONFIG_PARAM_DONT_COMPARE"
              value="64"
              c:type="GIMP_CONFIG_PARAM_DONT_COMPARE">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-params.h"
           line="79">Ignore this property when comparing objects.</doc>
      <source-position filename="libgimpconfig/gimpconfig-params.h" line="84"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CONFIG_PARAM_FLAGS"
              value="7"
              c:type="GIMP_CONFIG_PARAM_FLAGS">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-params.h"
           line="94">The default flags that should be used for serializable #GimpConfig
properties.</doc>
      <source-position filename="libgimpconfig/gimpconfig-params.h"
                       line="100"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CONFIG_PARAM_FLAG_SHIFT"
              value="7"
              c:type="GIMP_CONFIG_PARAM_FLAG_SHIFT">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-params.h"
           line="86">Minimum shift count to be used for core application defined
[flags@GObject.ParamFlags].</doc>
      <source-position filename="libgimpconfig/gimpconfig-params.h" line="92"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CONFIG_PARAM_IGNORE"
              value="32"
              c:type="GIMP_CONFIG_PARAM_IGNORE">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-params.h"
           line="71">This property exists for obscure reasons or is needed for backward
compatibility. Ignore the value read and don't serialize it.</doc>
      <source-position filename="libgimpconfig/gimpconfig-params.h" line="77"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CONFIG_PARAM_RESTART"
              value="4"
              c:type="GIMP_CONFIG_PARAM_RESTART">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-params.h"
           line="49">Changes to this property take effect only after a restart.</doc>
      <source-position filename="libgimpconfig/gimpconfig-params.h" line="54"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CONFIG_PARAM_SERIALIZE"
              value="1"
              c:type="GIMP_CONFIG_PARAM_SERIALIZE">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-params.h"
           line="35">A property that can and should be serialized and deserialized.</doc>
      <source-position filename="libgimpconfig/gimpconfig-params.h" line="40"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="CONFIG_PROP_BOOLEAN"
                    c:identifier="GIMP_CONFIG_PROP_BOOLEAN"
                    introspectable="0">
      <source-position filename="libgimpconfig/gimpconfig-params.h"
                       line="105"/>
      <parameters>
        <parameter name="class">
        </parameter>
        <parameter name="id">
        </parameter>
        <parameter name="name">
        </parameter>
        <parameter name="nick">
        </parameter>
        <parameter name="blurb">
        </parameter>
        <parameter name="default">
        </parameter>
        <parameter name="flags">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_PROP_BOXED"
                    c:identifier="GIMP_CONFIG_PROP_BOXED"
                    introspectable="0">
      <source-position filename="libgimpconfig/gimpconfig-params.h"
                       line="208"/>
      <parameters>
        <parameter name="class">
        </parameter>
        <parameter name="id">
        </parameter>
        <parameter name="name">
        </parameter>
        <parameter name="nick">
        </parameter>
        <parameter name="blurb">
        </parameter>
        <parameter name="boxed_type">
        </parameter>
        <parameter name="flags">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_PROP_COLOR"
                    c:identifier="GIMP_CONFIG_PROP_COLOR"
                    introspectable="0">
      <source-position filename="libgimpconfig/gimpconfig-params.h"
                       line="200"/>
      <parameters>
        <parameter name="class">
        </parameter>
        <parameter name="id">
        </parameter>
        <parameter name="name">
        </parameter>
        <parameter name="nick">
        </parameter>
        <parameter name="blurb">
        </parameter>
        <parameter name="has_alpha">
        </parameter>
        <parameter name="default">
        </parameter>
        <parameter name="flags">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_PROP_DOUBLE"
                    c:identifier="GIMP_CONFIG_PROP_DOUBLE"
                    introspectable="0">
      <source-position filename="libgimpconfig/gimpconfig-params.h"
                       line="147"/>
      <parameters>
        <parameter name="class">
        </parameter>
        <parameter name="id">
        </parameter>
        <parameter name="name">
        </parameter>
        <parameter name="nick">
        </parameter>
        <parameter name="blurb">
        </parameter>
        <parameter name="min">
        </parameter>
        <parameter name="max">
        </parameter>
        <parameter name="default">
        </parameter>
        <parameter name="flags">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_PROP_ENUM"
                    c:identifier="GIMP_CONFIG_PROP_ENUM"
                    introspectable="0">
      <source-position filename="libgimpconfig/gimpconfig-params.h"
                       line="160"/>
      <parameters>
        <parameter name="class">
        </parameter>
        <parameter name="id">
        </parameter>
        <parameter name="name">
        </parameter>
        <parameter name="nick">
        </parameter>
        <parameter name="blurb">
        </parameter>
        <parameter name="enum_type">
        </parameter>
        <parameter name="default">
        </parameter>
        <parameter name="flags">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_PROP_FONT"
                    c:identifier="GIMP_CONFIG_PROP_FONT"
                    introspectable="0">
      <source-position filename="libgimpconfig/gimpconfig-params.h"
                       line="184"/>
      <parameters>
        <parameter name="class">
        </parameter>
        <parameter name="id">
        </parameter>
        <parameter name="name">
        </parameter>
        <parameter name="nick">
        </parameter>
        <parameter name="blurb">
        </parameter>
        <parameter name="flags">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_PROP_INT"
                    c:identifier="GIMP_CONFIG_PROP_INT"
                    introspectable="0">
      <source-position filename="libgimpconfig/gimpconfig-params.h"
                       line="111"/>
      <parameters>
        <parameter name="class">
        </parameter>
        <parameter name="id">
        </parameter>
        <parameter name="name">
        </parameter>
        <parameter name="nick">
        </parameter>
        <parameter name="blurb">
        </parameter>
        <parameter name="min">
        </parameter>
        <parameter name="max">
        </parameter>
        <parameter name="default">
        </parameter>
        <parameter name="flags">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_PROP_INT64"
                    c:identifier="GIMP_CONFIG_PROP_INT64"
                    introspectable="0">
      <source-position filename="libgimpconfig/gimpconfig-params.h"
                       line="123"/>
      <parameters>
        <parameter name="class">
        </parameter>
        <parameter name="id">
        </parameter>
        <parameter name="name">
        </parameter>
        <parameter name="nick">
        </parameter>
        <parameter name="blurb">
        </parameter>
        <parameter name="min">
        </parameter>
        <parameter name="max">
        </parameter>
        <parameter name="default">
        </parameter>
        <parameter name="flags">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_PROP_MATRIX2"
                    c:identifier="GIMP_CONFIG_PROP_MATRIX2"
                    introspectable="0">
      <source-position filename="libgimpconfig/gimpconfig-params.h"
                       line="178"/>
      <parameters>
        <parameter name="class">
        </parameter>
        <parameter name="id">
        </parameter>
        <parameter name="name">
        </parameter>
        <parameter name="nick">
        </parameter>
        <parameter name="blurb">
        </parameter>
        <parameter name="default">
        </parameter>
        <parameter name="flags">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_PROP_MEMSIZE"
                    c:identifier="GIMP_CONFIG_PROP_MEMSIZE"
                    introspectable="0">
      <source-position filename="libgimpconfig/gimpconfig-params.h"
                       line="141"/>
      <parameters>
        <parameter name="class">
        </parameter>
        <parameter name="id">
        </parameter>
        <parameter name="name">
        </parameter>
        <parameter name="nick">
        </parameter>
        <parameter name="blurb">
        </parameter>
        <parameter name="min">
        </parameter>
        <parameter name="max">
        </parameter>
        <parameter name="default">
        </parameter>
        <parameter name="flags">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_PROP_OBJECT"
                    c:identifier="GIMP_CONFIG_PROP_OBJECT"
                    introspectable="0">
      <source-position filename="libgimpconfig/gimpconfig-params.h"
                       line="192"/>
      <parameters>
        <parameter name="class">
        </parameter>
        <parameter name="id">
        </parameter>
        <parameter name="name">
        </parameter>
        <parameter name="nick">
        </parameter>
        <parameter name="blurb">
        </parameter>
        <parameter name="object_type">
        </parameter>
        <parameter name="flags">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_PROP_PATH"
                    c:identifier="GIMP_CONFIG_PROP_PATH"
                    introspectable="0">
      <source-position filename="libgimpconfig/gimpconfig-params.h"
                       line="172"/>
      <parameters>
        <parameter name="class">
        </parameter>
        <parameter name="id">
        </parameter>
        <parameter name="name">
        </parameter>
        <parameter name="nick">
        </parameter>
        <parameter name="blurb">
        </parameter>
        <parameter name="path_type">
        </parameter>
        <parameter name="default">
        </parameter>
        <parameter name="flags">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_PROP_POINTER"
                    c:identifier="GIMP_CONFIG_PROP_POINTER"
                    introspectable="0">
      <source-position filename="libgimpconfig/gimpconfig-params.h"
                       line="216"/>
      <parameters>
        <parameter name="class">
        </parameter>
        <parameter name="id">
        </parameter>
        <parameter name="name">
        </parameter>
        <parameter name="nick">
        </parameter>
        <parameter name="blurb">
        </parameter>
        <parameter name="flags">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_PROP_RESOLUTION"
                    c:identifier="GIMP_CONFIG_PROP_RESOLUTION"
                    introspectable="0">
      <source-position filename="libgimpconfig/gimpconfig-params.h"
                       line="153"/>
      <parameters>
        <parameter name="class">
        </parameter>
        <parameter name="id">
        </parameter>
        <parameter name="name">
        </parameter>
        <parameter name="nick">
        </parameter>
        <parameter name="blurb">
        </parameter>
        <parameter name="default">
        </parameter>
        <parameter name="flags">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_PROP_STRING"
                    c:identifier="GIMP_CONFIG_PROP_STRING"
                    introspectable="0">
      <source-position filename="libgimpconfig/gimpconfig-params.h"
                       line="166"/>
      <parameters>
        <parameter name="class">
        </parameter>
        <parameter name="id">
        </parameter>
        <parameter name="name">
        </parameter>
        <parameter name="nick">
        </parameter>
        <parameter name="blurb">
        </parameter>
        <parameter name="default">
        </parameter>
        <parameter name="flags">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_PROP_UINT"
                    c:identifier="GIMP_CONFIG_PROP_UINT"
                    introspectable="0">
      <source-position filename="libgimpconfig/gimpconfig-params.h"
                       line="117"/>
      <parameters>
        <parameter name="class">
        </parameter>
        <parameter name="id">
        </parameter>
        <parameter name="name">
        </parameter>
        <parameter name="nick">
        </parameter>
        <parameter name="blurb">
        </parameter>
        <parameter name="min">
        </parameter>
        <parameter name="max">
        </parameter>
        <parameter name="default">
        </parameter>
        <parameter name="flags">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_PROP_UINT64"
                    c:identifier="GIMP_CONFIG_PROP_UINT64"
                    introspectable="0">
      <source-position filename="libgimpconfig/gimpconfig-params.h"
                       line="129"/>
      <parameters>
        <parameter name="class">
        </parameter>
        <parameter name="id">
        </parameter>
        <parameter name="name">
        </parameter>
        <parameter name="nick">
        </parameter>
        <parameter name="blurb">
        </parameter>
        <parameter name="min">
        </parameter>
        <parameter name="max">
        </parameter>
        <parameter name="default">
        </parameter>
        <parameter name="flags">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_PROP_UNIT"
                    c:identifier="GIMP_CONFIG_PROP_UNIT"
                    introspectable="0">
      <source-position filename="libgimpconfig/gimpconfig-params.h"
                       line="135"/>
      <parameters>
        <parameter name="class">
        </parameter>
        <parameter name="id">
        </parameter>
        <parameter name="name">
        </parameter>
        <parameter name="nick">
        </parameter>
        <parameter name="blurb">
        </parameter>
        <parameter name="pixels">
        </parameter>
        <parameter name="percent">
        </parameter>
        <parameter name="default">
        </parameter>
        <parameter name="flags">
        </parameter>
      </parameters>
    </function-macro>
    <enumeration name="CapStyle"
                 glib:type-name="GimpCapStyle"
                 glib:get-type="gimp_cap_style_get_type"
                 c:type="GimpCapStyle">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="85">Style of line endings.</doc>
      <member name="butt"
              value="0"
              c:identifier="GIMP_CAP_BUTT"
              glib:nick="butt"
              glib:name="GIMP_CAP_BUTT">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="87">Butt</doc>
      </member>
      <member name="round"
              value="1"
              c:identifier="GIMP_CAP_ROUND"
              glib:nick="round"
              glib:name="GIMP_CAP_ROUND">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="88">Round</doc>
      </member>
      <member name="square"
              value="2"
              c:identifier="GIMP_CAP_SQUARE"
              glib:nick="square"
              glib:name="GIMP_CAP_SQUARE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="89">Square</doc>
      </member>
    </enumeration>
    <class name="Channel"
           c:symbol-prefix="channel"
           c:type="GimpChannel"
           parent="Drawable"
           glib:type-name="GimpChannel"
           glib:get-type="gimp_channel_get_type"
           glib:type-struct="ChannelClass">
      <doc xml:space="preserve"
           filename="libgimp/gimpchannel_pdb.c"
           line="30">Functions for manipulating channels.</doc>
      <source-position filename="libgimp/gimpchannel.h" line="52"/>
      <constructor name="new" c:identifier="gimp_channel_new">
        <doc xml:space="preserve"
             filename="libgimp/gimpchannel.c"
             line="67">Create a new channel.

This procedure creates a new channel with the specified width and
height. Name, opacity, and color are also supplied parameters. The
new channel still needs to be added to the image, as this is not
automatic. Add the new channel with the gimp_image_insert_channel()
command. Other attributes such as channel show masked, should be
set with explicit procedure calls. The channel's contents are
undefined initially.</doc>
        <source-position filename="libgimp/gimpchannel.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpchannel.c"
               line="86">The newly created channel.
         The object belongs to libgimp and you should not free it.</doc>
          <type name="Channel" c:type="GimpChannel*"/>
        </return-value>
        <parameters>
          <parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpchannel.c"
                 line="69">The image to which to add the channel.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpchannel.c"
                 line="70">The channel name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpchannel.c"
                 line="71">The channel width.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpchannel.c"
                 line="72">The channel height.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="opacity" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpchannel.c"
                 line="73">The channel opacity.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpchannel.c"
                 line="74">The channel compositing color.</doc>
            <type name="Gegl.Color" c:type="GeglColor*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_component"
                   c:identifier="gimp_channel_new_from_component"
                   version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpchannel_pdb.c"
             line="94">Create a new channel from a color component

This procedure creates a new channel from a color component.
The new channel still needs to be added to the image, as this is not
automatic. Add the new channel with gimp_image_insert_channel().
Other attributes, such as channel visibility, should be set with
explicit procedure calls.</doc>
        <source-position filename="libgimp/gimpchannel_pdb.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpchannel_pdb.c"
               line="108">The newly created channel.</doc>
          <type name="Channel" c:type="GimpChannel*"/>
        </return-value>
        <parameters>
          <parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpchannel_pdb.c"
                 line="96">The image to which to add the channel.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </parameter>
          <parameter name="component" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpchannel_pdb.c"
                 line="97">The image component.</doc>
            <type name="ChannelType" c:type="GimpChannelType"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpchannel_pdb.c"
                 line="98">The channel name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_by_id"
                c:identifier="gimp_channel_get_by_id"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpchannel.c"
             line="41">Returns a #GimpChannel representing @channel_id. This function
calls gimp_item_get_by_id() and returns the item if it is channel
or %NULL otherwise.</doc>
        <source-position filename="libgimp/gimpchannel.h" line="55"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgimp/gimpchannel.c"
               line="49">a #GimpChannel for @channel_id
         or %NULL if @channel_id does not represent a valid
         channel. The object belongs to libgimp and you must not
         modify or unref it.</doc>
          <type name="Channel" c:type="GimpChannel*"/>
        </return-value>
        <parameters>
          <parameter name="channel_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpchannel.c"
                 line="43">The channel id.</doc>
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </function>
      <method name="combine_masks" c:identifier="gimp_channel_combine_masks">
        <doc xml:space="preserve"
             filename="libgimp/gimpchannel_pdb.c"
             line="176">Combine two channel masks.

This procedure combines two channel masks. The result is stored in
the first channel.</doc>
        <source-position filename="libgimp/gimpchannel_pdb.h" line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpchannel_pdb.c"
               line="189">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="channel1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpchannel_pdb.c"
                 line="178">The channel1.</doc>
            <type name="Channel" c:type="GimpChannel*"/>
          </instance-parameter>
          <parameter name="channel2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpchannel_pdb.c"
                 line="179">The channel2.</doc>
            <type name="Channel" c:type="GimpChannel*"/>
          </parameter>
          <parameter name="operation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpchannel_pdb.c"
                 line="180">The selection operation.</doc>
            <type name="ChannelOps" c:type="GimpChannelOps"/>
          </parameter>
          <parameter name="offx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpchannel_pdb.c"
                 line="181">x offset between upper left corner of channels: (second - first).</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="offy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpchannel_pdb.c"
                 line="182">y offset between upper left corner of channels: (second - first).</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="gimp_channel_copy">
        <doc xml:space="preserve"
             filename="libgimp/gimpchannel_pdb.c"
             line="140">Copy a channel.

This procedure copies the specified channel and returns the copy.
The new channel still needs to be added to the image, as this is not
automatic. Add the new channel with gimp_image_insert_channel().</doc>
        <source-position filename="libgimp/gimpchannel_pdb.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpchannel_pdb.c"
               line="150">The newly copied channel.</doc>
          <type name="Channel" c:type="GimpChannel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpchannel_pdb.c"
                 line="142">The channel to copy.</doc>
            <type name="Channel" c:type="GimpChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_color" c:identifier="gimp_channel_get_color">
        <doc xml:space="preserve"
             filename="libgimp/gimpchannel_pdb.c"
             line="366">Get the compositing color of the specified channel.

This procedure returns the specified channel's compositing color.</doc>
        <source-position filename="libgimp/gimpchannel_pdb.h" line="56"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpchannel_pdb.c"
               line="374">The channel compositing color.</doc>
          <type name="Gegl.Color" c:type="GeglColor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpchannel_pdb.c"
                 line="368">The channel.</doc>
            <type name="Channel" c:type="GimpChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_opacity" c:identifier="gimp_channel_get_opacity">
        <doc xml:space="preserve"
             filename="libgimp/gimpchannel_pdb.c"
             line="296">Get the opacity of the specified channel.

This procedure returns the specified channel's opacity.</doc>
        <source-position filename="libgimp/gimpchannel_pdb.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpchannel_pdb.c"
               line="304">The channel opacity.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpchannel_pdb.c"
                 line="298">The channel.</doc>
            <type name="Channel" c:type="GimpChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_masked"
              c:identifier="gimp_channel_get_show_masked">
        <doc xml:space="preserve"
             filename="libgimp/gimpchannel_pdb.c"
             line="222">Get the composite method of the specified channel.

This procedure returns the specified channel's composite method. If
it is TRUE, then the channel is composited with the image so that
masked regions are shown. Otherwise, selected regions are shown.</doc>
        <source-position filename="libgimp/gimpchannel_pdb.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpchannel_pdb.c"
               line="232">The channel composite method.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpchannel_pdb.c"
                 line="224">The channel.</doc>
            <type name="Channel" c:type="GimpChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_color" c:identifier="gimp_channel_set_color">
        <doc xml:space="preserve"
             filename="libgimp/gimpchannel_pdb.c"
             line="400">Set the compositing color of the specified channel.

This procedure sets the specified channel's compositing color.</doc>
        <source-position filename="libgimp/gimpchannel_pdb.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpchannel_pdb.c"
               line="409">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpchannel_pdb.c"
                 line="402">The channel.</doc>
            <type name="Channel" c:type="GimpChannel*"/>
          </instance-parameter>
          <parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpchannel_pdb.c"
                 line="403">The new channel compositing color.</doc>
            <type name="Gegl.Color" c:type="GeglColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_opacity" c:identifier="gimp_channel_set_opacity">
        <doc xml:space="preserve"
             filename="libgimp/gimpchannel_pdb.c"
             line="330">Set the opacity of the specified channel.

This procedure sets the specified channel's opacity.</doc>
        <source-position filename="libgimp/gimpchannel_pdb.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpchannel_pdb.c"
               line="339">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpchannel_pdb.c"
                 line="332">The channel.</doc>
            <type name="Channel" c:type="GimpChannel*"/>
          </instance-parameter>
          <parameter name="opacity" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpchannel_pdb.c"
                 line="333">The new channel opacity.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_masked"
              c:identifier="gimp_channel_set_show_masked">
        <doc xml:space="preserve"
             filename="libgimp/gimpchannel_pdb.c"
             line="258">Set the composite method of the specified channel.

This procedure sets the specified channel's composite method. If it
is TRUE, then the channel is composited with the image so that
masked regions are shown. Otherwise, selected regions are shown.</doc>
        <source-position filename="libgimp/gimpchannel_pdb.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpchannel_pdb.c"
               line="269">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpchannel_pdb.c"
                 line="260">The channel.</doc>
            <type name="Channel" c:type="GimpChannel*"/>
          </instance-parameter>
          <parameter name="show_masked" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpchannel_pdb.c"
                 line="261">The new channel composite method.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Drawable" c:type="GimpDrawable"/>
      </field>
    </class>
    <record name="ChannelClass"
            c:type="GimpChannelClass"
            glib:is-gtype-struct-for="Channel">
      <source-position filename="libgimp/gimpchannel.h" line="52"/>
      <field name="parent_class">
        <type name="DrawableClass" c:type="GimpDrawableClass"/>
      </field>
      <field name="_gimp_reserved1" introspectable="0">
        <callback name="_gimp_reserved1">
          <source-position filename="libgimp/gimpchannel.h" line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved2" introspectable="0">
        <callback name="_gimp_reserved2">
          <source-position filename="libgimp/gimpchannel.h" line="45"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved3" introspectable="0">
        <callback name="_gimp_reserved3">
          <source-position filename="libgimp/gimpchannel.h" line="46"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved4" introspectable="0">
        <callback name="_gimp_reserved4">
          <source-position filename="libgimp/gimpchannel.h" line="47"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved5" introspectable="0">
        <callback name="_gimp_reserved5">
          <source-position filename="libgimp/gimpchannel.h" line="48"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved6" introspectable="0">
        <callback name="_gimp_reserved6">
          <source-position filename="libgimp/gimpchannel.h" line="49"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved7" introspectable="0">
        <callback name="_gimp_reserved7">
          <source-position filename="libgimp/gimpchannel.h" line="50"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved8" introspectable="0">
        <callback name="_gimp_reserved8">
          <source-position filename="libgimp/gimpchannel.h" line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="ChannelOps"
                 glib:type-name="GimpChannelOps"
                 glib:get-type="gimp_channel_ops_get_type"
                 c:type="GimpChannelOps">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="105">Operations to combine channels and selections.</doc>
      <member name="add"
              value="0"
              c:identifier="GIMP_CHANNEL_OP_ADD"
              glib:nick="add"
              glib:name="GIMP_CHANNEL_OP_ADD">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="107">Add to the current selection</doc>
      </member>
      <member name="subtract"
              value="1"
              c:identifier="GIMP_CHANNEL_OP_SUBTRACT"
              glib:nick="subtract"
              glib:name="GIMP_CHANNEL_OP_SUBTRACT">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="108">Subtract from the current selection</doc>
      </member>
      <member name="replace"
              value="2"
              c:identifier="GIMP_CHANNEL_OP_REPLACE"
              glib:nick="replace"
              glib:name="GIMP_CHANNEL_OP_REPLACE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="109">Replace the current selection</doc>
      </member>
      <member name="intersect"
              value="3"
              c:identifier="GIMP_CHANNEL_OP_INTERSECT"
              glib:nick="intersect"
              glib:name="GIMP_CHANNEL_OP_INTERSECT">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="110">Intersect with the current selection</doc>
      </member>
    </enumeration>
    <enumeration name="ChannelType"
                 glib:type-name="GimpChannelType"
                 glib:get-type="gimp_channel_type_get_type"
                 c:type="GimpChannelType">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="127">Channels (as in color components).</doc>
      <member name="red"
              value="0"
              c:identifier="GIMP_CHANNEL_RED"
              glib:nick="red"
              glib:name="GIMP_CHANNEL_RED">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="129">Red</doc>
      </member>
      <member name="green"
              value="1"
              c:identifier="GIMP_CHANNEL_GREEN"
              glib:nick="green"
              glib:name="GIMP_CHANNEL_GREEN">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="130">Green</doc>
      </member>
      <member name="blue"
              value="2"
              c:identifier="GIMP_CHANNEL_BLUE"
              glib:nick="blue"
              glib:name="GIMP_CHANNEL_BLUE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="131">Blue</doc>
      </member>
      <member name="gray"
              value="3"
              c:identifier="GIMP_CHANNEL_GRAY"
              glib:nick="gray"
              glib:name="GIMP_CHANNEL_GRAY">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="132">Gray</doc>
      </member>
      <member name="indexed"
              value="4"
              c:identifier="GIMP_CHANNEL_INDEXED"
              glib:nick="indexed"
              glib:name="GIMP_CHANNEL_INDEXED">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="133">Indexed</doc>
      </member>
      <member name="alpha"
              value="5"
              c:identifier="GIMP_CHANNEL_ALPHA"
              glib:nick="alpha"
              glib:name="GIMP_CHANNEL_ALPHA">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="134">Alpha</doc>
      </member>
    </enumeration>
    <enumeration name="CheckSize"
                 glib:type-name="GimpCheckSize"
                 glib:get-type="gimp_check_size_get_type"
                 c:type="GimpCheckSize">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="153">Size of the checkerboard indicating transparency.</doc>
      <member name="small_checks"
              value="0"
              c:identifier="GIMP_CHECK_SIZE_SMALL_CHECKS"
              glib:nick="small-checks"
              glib:name="GIMP_CHECK_SIZE_SMALL_CHECKS">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="155">Small</doc>
      </member>
      <member name="medium_checks"
              value="1"
              c:identifier="GIMP_CHECK_SIZE_MEDIUM_CHECKS"
              glib:nick="medium-checks"
              glib:name="GIMP_CHECK_SIZE_MEDIUM_CHECKS">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="156">Medium</doc>
      </member>
      <member name="large_checks"
              value="2"
              c:identifier="GIMP_CHECK_SIZE_LARGE_CHECKS"
              glib:nick="large-checks"
              glib:name="GIMP_CHECK_SIZE_LARGE_CHECKS">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="157">Large</doc>
      </member>
    </enumeration>
    <enumeration name="CheckType"
                 glib:type-name="GimpCheckType"
                 glib:get-type="gimp_check_type_get_type"
                 c:type="GimpCheckType">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="173">Color/Brightness of the checkerboard indicating transparency.</doc>
      <member name="light_checks"
              value="0"
              c:identifier="GIMP_CHECK_TYPE_LIGHT_CHECKS"
              glib:nick="light-checks"
              glib:name="GIMP_CHECK_TYPE_LIGHT_CHECKS">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="175">Light checks</doc>
      </member>
      <member name="gray_checks"
              value="1"
              c:identifier="GIMP_CHECK_TYPE_GRAY_CHECKS"
              glib:nick="gray-checks"
              glib:name="GIMP_CHECK_TYPE_GRAY_CHECKS">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="176">Mid-tone checks</doc>
      </member>
      <member name="dark_checks"
              value="2"
              c:identifier="GIMP_CHECK_TYPE_DARK_CHECKS"
              glib:nick="dark-checks"
              glib:name="GIMP_CHECK_TYPE_DARK_CHECKS">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="177">Dark checks</doc>
      </member>
      <member name="white_only"
              value="3"
              c:identifier="GIMP_CHECK_TYPE_WHITE_ONLY"
              glib:nick="white-only"
              glib:name="GIMP_CHECK_TYPE_WHITE_ONLY">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="178">White only</doc>
      </member>
      <member name="gray_only"
              value="4"
              c:identifier="GIMP_CHECK_TYPE_GRAY_ONLY"
              glib:nick="gray-only"
              glib:name="GIMP_CHECK_TYPE_GRAY_ONLY">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="179">Gray only</doc>
      </member>
      <member name="black_only"
              value="5"
              c:identifier="GIMP_CHECK_TYPE_BLACK_ONLY"
              glib:nick="black-only"
              glib:name="GIMP_CHECK_TYPE_BLACK_ONLY">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="180">Black only</doc>
      </member>
      <member name="custom_checks"
              value="6"
              c:identifier="GIMP_CHECK_TYPE_CUSTOM_CHECKS"
              glib:nick="custom-checks"
              glib:name="GIMP_CHECK_TYPE_CUSTOM_CHECKS">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="181">Custom checks</doc>
      </member>
    </enumeration>
    <class name="Choice"
           c:symbol-prefix="choice"
           c:type="GimpChoice"
           parent="GObject.Object"
           glib:type-name="GimpChoice"
           glib:get-type="gimp_choice_get_type"
           glib:type-struct="ChoiceClass">
      <source-position filename="libgimpbase/gimpchoice.h" line="37"/>
      <constructor name="new" c:identifier="gimp_choice_new" version="3.0">
        <source-position filename="libgimpbase/gimpchoice.h" line="40"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpchoice.c"
               line="104">a #GimpChoice.</doc>
          <type name="Choice" c:type="GimpChoice*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_values"
                   c:identifier="gimp_choice_new_with_values"
                   version="3.0"
                   introspectable="0">
        <source-position filename="libgimpbase/gimpchoice.h" line="41"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpchoice.c"
               line="126">a #GimpChoice.</doc>
          <type name="Choice" c:type="GimpChoice*"/>
        </return-value>
        <parameters>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpchoice.c"
                 line="120">the first value.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpchoice.c"
                 line="121">integer ID for @nick.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpchoice.c"
                 line="122">the label of @nick.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="help" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpchoice.c"
                 line="123">longer help text for @nick.
...:    more triplets of string to pre-fill the created %GimpChoice.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add" c:identifier="gimp_choice_add" version="3.0">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpchoice.c"
             line="169">This procedure adds a new possible value to @choice list of values.
The @id is an optional integer identifier. This can be useful for instance
when you want to work with different enum values mapped to each @nick.</doc>
        <source-position filename="libgimpbase/gimpchoice.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="choice" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpchoice.c"
                 line="171">the %GimpChoice.</doc>
            <type name="Choice" c:type="GimpChoice*"/>
          </instance-parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpchoice.c"
                 line="172">the nick of @choice.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpchoice.c"
                 line="173">optional integer ID for @nick.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpchoice.c"
                 line="174">the label of @choice.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="help" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpchoice.c"
                 line="175">optional longer help text for @nick.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_documentation"
              c:identifier="gimp_choice_get_documentation"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpchoice.c"
             line="324">Returns the documentation strings for @nick.</doc>
        <source-position filename="libgimpbase/gimpchoice.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpchoice.c"
               line="333">%TRUE if @nick is found, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="choice" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpchoice.c"
                 line="326">the %GimpChoice.</doc>
            <type name="Choice" c:type="GimpChoice*"/>
          </instance-parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpchoice.c"
                 line="327">the possible value's nick you need documentation for.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpchoice.c"
                 line="328">the label of @nick.</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
          <parameter name="help" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpchoice.c"
                 line="329">the help text of @nick.</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_help"
              c:identifier="gimp_choice_get_help"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpchoice.c"
             line="300">Returns the longer documentation for @nick.</doc>
        <source-position filename="libgimpbase/gimpchoice.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpchoice.c"
               line="307">the help text of @nick.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="choice" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpchoice.c"
                 line="302">a %GimpChoice.</doc>
            <type name="Choice" c:type="GimpChoice*"/>
          </instance-parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpchoice.c"
                 line="303">the nick to lookup.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="gimp_choice_get_id" version="3.0">
        <source-position filename="libgimpbase/gimpchoice.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpchoice.c"
               line="261">the ID of @nick.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="choice" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpchoice.c"
                 line="258">a %GimpChoice.</doc>
            <type name="Choice" c:type="GimpChoice*"/>
          </instance-parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpchoice.c"
                 line="259">the nick to lookup.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_label"
              c:identifier="gimp_choice_get_label"
              version="3.0">
        <source-position filename="libgimpbase/gimpchoice.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpchoice.c"
               line="283">the label of @nick.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="choice" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpchoice.c"
                 line="280">a %GimpChoice.</doc>
            <type name="Choice" c:type="GimpChoice*"/>
          </instance-parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpchoice.c"
                 line="281">the nick to lookup.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_valid"
              c:identifier="gimp_choice_is_valid"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpchoice.c"
             line="212">This procedure checks if the given @nick is valid and refers to
an existing choice.</doc>
        <source-position filename="libgimpbase/gimpchoice.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpchoice.c"
               line="220">Whether the choice is valid.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="choice" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpchoice.c"
                 line="214">a %GimpChoice.</doc>
            <type name="Choice" c:type="GimpChoice*"/>
          </instance-parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpchoice.c"
                 line="215">the nick to check.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_nicks"
              c:identifier="gimp_choice_list_nicks"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpchoice.c"
             line="237">This procedure returns the list of nicks allowed for @choice.</doc>
        <source-position filename="libgimpbase/gimpchoice.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpchoice.c"
               line="243">The list of @choice's nicks.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="choice" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpchoice.c"
                 line="239">a %GimpChoice.</doc>
            <type name="Choice" c:type="GimpChoice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_sensitive"
              c:identifier="gimp_choice_set_sensitive"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpchoice.c"
             line="356">Change the sensitivity of a possible @nick. Technically a non-sensitive @nick
means it cannot be chosen anymore (so [method@Gimp.Choice.is_valid] will
return %FALSE; nevertheless [method@Gimp.Choice.list_nicks] and other
functions to get information about a choice will still function).</doc>
        <source-position filename="libgimpbase/gimpchoice.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="choice" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpchoice.c"
                 line="358">the %GimpChoice.</doc>
            <type name="Choice" c:type="GimpChoice*"/>
          </instance-parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpchoice.c"
                 line="359">the nick to lookup.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="sensitive" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="sensitivity-changed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ChoiceClass"
            c:type="GimpChoiceClass"
            glib:is-gtype-struct-for="Choice">
      <source-position filename="libgimpbase/gimpchoice.h" line="37"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="CloneType"
                 glib:type-name="GimpCloneType"
                 glib:get-type="gimp_clone_type_get_type"
                 c:type="GimpCloneType">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="201">Clone sources.</doc>
      <member name="image"
              value="0"
              c:identifier="GIMP_CLONE_IMAGE"
              glib:nick="image"
              glib:name="GIMP_CLONE_IMAGE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="203">Clone from an image/drawable source</doc>
      </member>
      <member name="pattern"
              value="1"
              c:identifier="GIMP_CLONE_PATTERN"
              glib:nick="pattern"
              glib:name="GIMP_CLONE_PATTERN">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="204">Clone from a pattern source</doc>
      </member>
    </enumeration>
    <class name="ColorConfig"
           c:symbol-prefix="color_config"
           c:type="GimpColorConfig"
           parent="GObject.Object"
           glib:type-name="GimpColorConfig"
           glib:get-type="gimp_color_config_get_type"
           glib:type-struct="ColorConfigClass">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpcolorconfig.c"
           line="42">Color management settings.</doc>
      <source-position filename="libgimpconfig/gimpcolorconfig.h" line="45"/>
      <implements name="ConfigInterface"/>
      <method name="get_cmyk_color_profile"
              c:identifier="gimp_color_config_get_cmyk_color_profile"
              version="2.10"
              throws="1">
        <source-position filename="libgimpconfig/gimpcolorconfig.h" line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpcolorconfig.c"
               line="769">the default CMYK color profile.</doc>
          <type name="ColorProfile" c:type="GimpColorProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpcolorconfig.c"
                 line="766">a #GimpColorConfig</doc>
            <type name="ColorConfig" c:type="GimpColorConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display_bpc"
              c:identifier="gimp_color_config_get_display_bpc"
              version="2.10">
        <source-position filename="libgimpconfig/gimpcolorconfig.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpcolorconfig.c"
                 line="563">a #GimpColorConfig</doc>
            <type name="ColorConfig" c:type="GimpColorConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display_color_profile"
              c:identifier="gimp_color_config_get_display_color_profile"
              version="2.10"
              throws="1">
        <source-position filename="libgimpconfig/gimpcolorconfig.h" line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpcolorconfig.c"
               line="813">the default display color profile.</doc>
          <type name="ColorProfile" c:type="GimpColorProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpcolorconfig.c"
                 line="810">a #GimpColorConfig</doc>
            <type name="ColorConfig" c:type="GimpColorConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display_intent"
              c:identifier="gimp_color_config_get_display_intent"
              version="2.10">
        <source-position filename="libgimpconfig/gimpcolorconfig.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="ColorRenderingIntent" c:type="GimpColorRenderingIntent"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpcolorconfig.c"
                 line="548">a #GimpColorConfig</doc>
            <type name="ColorConfig" c:type="GimpColorConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display_optimize"
              c:identifier="gimp_color_config_get_display_optimize"
              glib:get-property="display-optimize"
              version="2.10">
        <source-position filename="libgimpconfig/gimpcolorconfig.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpcolorconfig.c"
                 line="577">a #GimpColorConfig</doc>
            <type name="ColorConfig" c:type="GimpColorConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display_profile_from_gdk"
              c:identifier="gimp_color_config_get_display_profile_from_gdk"
              glib:get-property="display-profile-from-gdk"
              version="2.10">
        <source-position filename="libgimpconfig/gimpcolorconfig.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpcolorconfig.c"
                 line="591">a #GimpColorConfig</doc>
            <type name="ColorConfig" c:type="GimpColorConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gray_color_profile"
              c:identifier="gimp_color_config_get_gray_color_profile"
              version="2.10"
              throws="1">
        <source-position filename="libgimpconfig/gimpcolorconfig.h" line="66"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpcolorconfig.c"
               line="725">the default grayscale color profile.</doc>
          <type name="ColorProfile" c:type="GimpColorProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpcolorconfig.c"
                 line="722">a #GimpColorConfig</doc>
            <type name="ColorConfig" c:type="GimpColorConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mode"
              c:identifier="gimp_color_config_get_mode"
              glib:get-property="mode"
              version="2.10">
        <source-position filename="libgimpconfig/gimpcolorconfig.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="ColorManagementMode" c:type="GimpColorManagementMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpcolorconfig.c"
                 line="533">a #GimpColorConfig</doc>
            <type name="ColorConfig" c:type="GimpColorConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_out_of_gamut_color"
              c:identifier="gimp_color_config_get_out_of_gamut_color"
              glib:get-property="out-of-gamut-color"
              version="3.0">
        <source-position filename="libgimpconfig/gimpcolorconfig.h" line="62"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpcolorconfig.c"
               line="664">the [class@Gegl.Color] to use to represent
                          out-of-gamut pixels.</doc>
          <type name="Gegl.Color" c:type="GeglColor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpcolorconfig.c"
                 line="662">a #GimpColorConfig</doc>
            <type name="ColorConfig" c:type="GimpColorConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rgb_color_profile"
              c:identifier="gimp_color_config_get_rgb_color_profile"
              version="2.10"
              throws="1">
        <source-position filename="libgimpconfig/gimpcolorconfig.h" line="64"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpcolorconfig.c"
               line="681">the default RGB color profile.</doc>
          <type name="ColorProfile" c:type="GimpColorProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpcolorconfig.c"
                 line="678">a #GimpColorConfig</doc>
            <type name="ColorConfig" c:type="GimpColorConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_simulation_bpc"
              c:identifier="gimp_color_config_get_simulation_bpc"
              version="2.10">
        <source-position filename="libgimpconfig/gimpcolorconfig.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpcolorconfig.c"
                 line="620">a #GimpColorConfig</doc>
            <type name="ColorConfig" c:type="GimpColorConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_simulation_color_profile"
              c:identifier="gimp_color_config_get_simulation_color_profile"
              version="2.10"
              throws="1">
        <source-position filename="libgimpconfig/gimpcolorconfig.h" line="72"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpcolorconfig.c"
               line="847">the default soft-proofing color
                               profile.</doc>
          <type name="ColorProfile" c:type="GimpColorProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpcolorconfig.c"
                 line="844">a #GimpColorConfig</doc>
            <type name="ColorConfig" c:type="GimpColorConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_simulation_gamut_check"
              c:identifier="gimp_color_config_get_simulation_gamut_check"
              glib:get-property="simulation-gamut-check"
              version="2.10">
        <source-position filename="libgimpconfig/gimpcolorconfig.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpcolorconfig.c"
                 line="648">a #GimpColorConfig</doc>
            <type name="ColorConfig" c:type="GimpColorConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_simulation_intent"
              c:identifier="gimp_color_config_get_simulation_intent"
              version="2.10">
        <source-position filename="libgimpconfig/gimpcolorconfig.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="ColorRenderingIntent" c:type="GimpColorRenderingIntent"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpcolorconfig.c"
                 line="605">a #GimpColorConfig</doc>
            <type name="ColorConfig" c:type="GimpColorConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_simulation_optimize"
              c:identifier="gimp_color_config_get_simulation_optimize"
              glib:get-property="simulation-optimize"
              version="2.10">
        <source-position filename="libgimpconfig/gimpcolorconfig.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpcolorconfig.c"
                 line="634">a #GimpColorConfig</doc>
            <type name="ColorConfig" c:type="GimpColorConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="cmyk-profile"
                writable="1"
                construct="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="ConfigPath"/>
      </property>
      <property name="display-optimize"
                writable="1"
                construct="1"
                transfer-ownership="none"
                getter="get_display_optimize"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="display-profile"
                writable="1"
                construct="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="ConfigPath"/>
      </property>
      <property name="display-profile-from-gdk"
                writable="1"
                construct="1"
                transfer-ownership="none"
                getter="get_display_profile_from_gdk"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="display-rendering-intent"
                writable="1"
                construct="1"
                transfer-ownership="none"
                default-value="GIMP_COLOR_RENDERING_INTENT_RELATIVE_COLORIMETRIC">
        <type name="ColorRenderingIntent"/>
      </property>
      <property name="display-use-black-point-compensation"
                writable="1"
                construct="1"
                transfer-ownership="none"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="gray-profile"
                writable="1"
                construct="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="ConfigPath"/>
      </property>
      <property name="mode"
                writable="1"
                construct="1"
                transfer-ownership="none"
                getter="get_mode"
                default-value="GIMP_COLOR_MANAGEMENT_DISPLAY">
        <type name="ColorManagementMode"/>
      </property>
      <property name="out-of-gamut-color"
                writable="1"
                transfer-ownership="none"
                getter="get_out_of_gamut_color">
        <type name="Gegl.Color"/>
      </property>
      <property name="rgb-profile"
                writable="1"
                construct="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="ConfigPath"/>
      </property>
      <property name="show-hsv"
                writable="1"
                construct="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-rgb-u8"
                writable="1"
                construct="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="simulation-gamut-check"
                writable="1"
                construct="1"
                transfer-ownership="none"
                getter="get_simulation_gamut_check"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="simulation-optimize"
                writable="1"
                construct="1"
                transfer-ownership="none"
                getter="get_simulation_optimize"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="simulation-profile"
                writable="1"
                construct="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="ConfigPath"/>
      </property>
      <property name="simulation-rendering-intent"
                writable="1"
                construct="1"
                transfer-ownership="none"
                default-value="GIMP_COLOR_RENDERING_INTENT_PERCEPTUAL">
        <type name="ColorRenderingIntent"/>
      </property>
      <property name="simulation-use-black-point-compensation"
                writable="1"
                construct="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ColorConfigClass"
            c:type="GimpColorConfigClass"
            glib:is-gtype-struct-for="ColorConfig">
      <source-position filename="libgimpconfig/gimpcolorconfig.h" line="45"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_gimp_reserved1" introspectable="0">
        <callback name="_gimp_reserved1">
          <source-position filename="libgimpconfig/gimpcolorconfig.h"
                           line="37"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved2" introspectable="0">
        <callback name="_gimp_reserved2">
          <source-position filename="libgimpconfig/gimpcolorconfig.h"
                           line="38"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved3" introspectable="0">
        <callback name="_gimp_reserved3">
          <source-position filename="libgimpconfig/gimpcolorconfig.h"
                           line="39"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved4" introspectable="0">
        <callback name="_gimp_reserved4">
          <source-position filename="libgimpconfig/gimpcolorconfig.h"
                           line="40"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved5" introspectable="0">
        <callback name="_gimp_reserved5">
          <source-position filename="libgimpconfig/gimpcolorconfig.h"
                           line="41"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved6" introspectable="0">
        <callback name="_gimp_reserved6">
          <source-position filename="libgimpconfig/gimpcolorconfig.h"
                           line="42"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved7" introspectable="0">
        <callback name="_gimp_reserved7">
          <source-position filename="libgimpconfig/gimpcolorconfig.h"
                           line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved8" introspectable="0">
        <callback name="_gimp_reserved8">
          <source-position filename="libgimpconfig/gimpcolorconfig.h"
                           line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <interface name="ColorManaged"
               c:symbol-prefix="color_managed"
               c:type="GimpColorManaged"
               glib:type-name="GimpColorManaged"
               glib:get-type="gimp_color_managed_get_type"
               glib:type-struct="ColorManagedInterface">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimpcolormanaged.c"
           line="33">An interface dealing with color profiles.</doc>
      <source-position filename="libgimpcolor/gimpcolormanaged.h" line="85"/>
      <virtual-method name="get_color_profile"
                      invoker="get_color_profile"
                      version="2.10">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolormanaged.c"
             line="134">This function always returns a #GimpColorProfile and falls back to
gimp_color_profile_new_rgb_srgb() if the method is not implemented.</doc>
        <source-position filename="libgimpcolor/gimpcolormanaged.h" line="80"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolormanaged.c"
               line="141">The @managed's #GimpColorProfile.</doc>
          <type name="ColorProfile" c:type="GimpColorProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="managed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolormanaged.c"
                 line="136">an object the implements the #GimpColorManaged interface</doc>
            <type name="ColorManaged" c:type="GimpColorManaged*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_icc_profile"
                      invoker="get_icc_profile"
                      version="2.4">
        <source-position filename="libgimpcolor/gimpcolormanaged.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolormanaged.c"
               line="110">A blob of data that represents an ICC color
                             profile.</doc>
          <array length="0" zero-terminated="0" c:type="const guint8*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="managed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolormanaged.c"
                 line="107">an object the implements the #GimpColorManaged interface</doc>
            <type name="ColorManaged" c:type="GimpColorManaged*"/>
          </instance-parameter>
          <parameter name="len"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolormanaged.c"
                 line="108">return location for the number of bytes in the profile data</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_simulation_bpc"
                      invoker="get_simulation_bpc"
                      version="3.0">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolormanaged.c"
             line="211">This function always returns a gboolean representing whether
Black Point Compensation is enabled</doc>
        <source-position filename="libgimpcolor/gimpcolormanaged.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolormanaged.c"
               line="218">The @managed's simulation Black Point Compensation value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="managed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolormanaged.c"
                 line="213">an object the implements the #GimpColorManaged interface</doc>
            <type name="ColorManaged" c:type="GimpColorManaged*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_simulation_intent"
                      invoker="get_simulation_intent"
                      version="3.0">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolormanaged.c"
             line="185">This function always returns a #GimpColorRenderingIntent</doc>
        <source-position filename="libgimpcolor/gimpcolormanaged.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolormanaged.c"
               line="191">The @managed's simulation #GimpColorRenderingIntent.</doc>
          <type name="ColorRenderingIntent" c:type="GimpColorRenderingIntent"/>
        </return-value>
        <parameters>
          <instance-parameter name="managed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolormanaged.c"
                 line="187">an object the implements the #GimpColorManaged interface</doc>
            <type name="ColorManaged" c:type="GimpColorManaged*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_simulation_profile"
                      invoker="get_simulation_profile"
                      version="3.0">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolormanaged.c"
             line="160">This function always returns a #GimpColorProfile</doc>
        <source-position filename="libgimpcolor/gimpcolormanaged.h" line="81"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolormanaged.c"
               line="166">The @managed's simulation #GimpColorProfile.</doc>
          <type name="ColorProfile" c:type="GimpColorProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="managed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolormanaged.c"
                 line="162">an object the implements the #GimpColorManaged interface</doc>
            <type name="ColorManaged" c:type="GimpColorManaged*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="profile_changed"
                      invoker="profile_changed"
                      version="2.4">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolormanaged.c"
             line="238">Emits the "profile-changed" signal.</doc>
        <source-position filename="libgimpcolor/gimpcolormanaged.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="managed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolormanaged.c"
                 line="240">an object that implements the #GimpColorManaged interface</doc>
            <type name="ColorManaged" c:type="GimpColorManaged*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="simulation_bpc_changed"
                      invoker="simulation_bpc_changed"
                      version="3.0">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolormanaged.c"
             line="286">Emits the "simulation-bpc-changed" signal.</doc>
        <source-position filename="libgimpcolor/gimpcolormanaged.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="managed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolormanaged.c"
                 line="288">an object that implements the #GimpColorManaged interface</doc>
            <type name="ColorManaged" c:type="GimpColorManaged*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="simulation_intent_changed"
                      invoker="simulation_intent_changed"
                      version="3.0">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolormanaged.c"
             line="270">Emits the "simulation-intent-changed" signal.</doc>
        <source-position filename="libgimpcolor/gimpcolormanaged.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="managed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolormanaged.c"
                 line="272">an object that implements the #GimpColorManaged interface</doc>
            <type name="ColorManaged" c:type="GimpColorManaged*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="simulation_profile_changed"
                      invoker="simulation_profile_changed"
                      version="3.0">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolormanaged.c"
             line="254">Emits the "simulation-profile-changed" signal.</doc>
        <source-position filename="libgimpcolor/gimpcolormanaged.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="managed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolormanaged.c"
                 line="256">an object that implements the #GimpColorManaged interface</doc>
            <type name="ColorManaged" c:type="GimpColorManaged*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_color_profile"
              c:identifier="gimp_color_managed_get_color_profile"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolormanaged.c"
             line="134">This function always returns a #GimpColorProfile and falls back to
gimp_color_profile_new_rgb_srgb() if the method is not implemented.</doc>
        <source-position filename="libgimpcolor/gimpcolormanaged.h" line="90"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolormanaged.c"
               line="141">The @managed's #GimpColorProfile.</doc>
          <type name="ColorProfile" c:type="GimpColorProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="managed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolormanaged.c"
                 line="136">an object the implements the #GimpColorManaged interface</doc>
            <type name="ColorManaged" c:type="GimpColorManaged*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icc_profile"
              c:identifier="gimp_color_managed_get_icc_profile"
              version="2.4">
        <source-position filename="libgimpcolor/gimpcolormanaged.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolormanaged.c"
               line="110">A blob of data that represents an ICC color
                             profile.</doc>
          <array length="0" zero-terminated="0" c:type="const guint8*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="managed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolormanaged.c"
                 line="107">an object the implements the #GimpColorManaged interface</doc>
            <type name="ColorManaged" c:type="GimpColorManaged*"/>
          </instance-parameter>
          <parameter name="len"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolormanaged.c"
                 line="108">return location for the number of bytes in the profile data</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_simulation_bpc"
              c:identifier="gimp_color_managed_get_simulation_bpc"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolormanaged.c"
             line="211">This function always returns a gboolean representing whether
Black Point Compensation is enabled</doc>
        <source-position filename="libgimpcolor/gimpcolormanaged.h" line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolormanaged.c"
               line="218">The @managed's simulation Black Point Compensation value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="managed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolormanaged.c"
                 line="213">an object the implements the #GimpColorManaged interface</doc>
            <type name="ColorManaged" c:type="GimpColorManaged*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_simulation_intent"
              c:identifier="gimp_color_managed_get_simulation_intent"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolormanaged.c"
             line="185">This function always returns a #GimpColorRenderingIntent</doc>
        <source-position filename="libgimpcolor/gimpcolormanaged.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolormanaged.c"
               line="191">The @managed's simulation #GimpColorRenderingIntent.</doc>
          <type name="ColorRenderingIntent" c:type="GimpColorRenderingIntent"/>
        </return-value>
        <parameters>
          <instance-parameter name="managed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolormanaged.c"
                 line="187">an object the implements the #GimpColorManaged interface</doc>
            <type name="ColorManaged" c:type="GimpColorManaged*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_simulation_profile"
              c:identifier="gimp_color_managed_get_simulation_profile"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolormanaged.c"
             line="160">This function always returns a #GimpColorProfile</doc>
        <source-position filename="libgimpcolor/gimpcolormanaged.h" line="92"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolormanaged.c"
               line="166">The @managed's simulation #GimpColorProfile.</doc>
          <type name="ColorProfile" c:type="GimpColorProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="managed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolormanaged.c"
                 line="162">an object the implements the #GimpColorManaged interface</doc>
            <type name="ColorManaged" c:type="GimpColorManaged*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="profile_changed"
              c:identifier="gimp_color_managed_profile_changed"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolormanaged.c"
             line="238">Emits the "profile-changed" signal.</doc>
        <source-position filename="libgimpcolor/gimpcolormanaged.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="managed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolormanaged.c"
                 line="240">an object that implements the #GimpColorManaged interface</doc>
            <type name="ColorManaged" c:type="GimpColorManaged*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="simulation_bpc_changed"
              c:identifier="gimp_color_managed_simulation_bpc_changed"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolormanaged.c"
             line="286">Emits the "simulation-bpc-changed" signal.</doc>
        <source-position filename="libgimpcolor/gimpcolormanaged.h"
                         line="104"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="managed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolormanaged.c"
                 line="288">an object that implements the #GimpColorManaged interface</doc>
            <type name="ColorManaged" c:type="GimpColorManaged*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="simulation_intent_changed"
              c:identifier="gimp_color_managed_simulation_intent_changed"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolormanaged.c"
             line="270">Emits the "simulation-intent-changed" signal.</doc>
        <source-position filename="libgimpcolor/gimpcolormanaged.h"
                         line="102"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="managed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolormanaged.c"
                 line="272">an object that implements the #GimpColorManaged interface</doc>
            <type name="ColorManaged" c:type="GimpColorManaged*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="simulation_profile_changed"
              c:identifier="gimp_color_managed_simulation_profile_changed"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolormanaged.c"
             line="254">Emits the "simulation-profile-changed" signal.</doc>
        <source-position filename="libgimpcolor/gimpcolormanaged.h"
                         line="100"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="managed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolormanaged.c"
                 line="256">an object that implements the #GimpColorManaged interface</doc>
            <type name="ColorManaged" c:type="GimpColorManaged*"/>
          </instance-parameter>
        </parameters>
      </method>
      <glib:signal name="profile-changed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="simulation-bpc-changed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="simulation-intent-changed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="simulation-profile-changed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </interface>
    <record name="ColorManagedInterface"
            c:type="GimpColorManagedInterface"
            glib:is-gtype-struct-for="ColorManaged">
      <source-position filename="libgimpcolor/gimpcolormanaged.h" line="85"/>
      <field name="base_iface">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolormanaged.h"
             line="39">The parent interface</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_icc_profile">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolormanaged.h"
             line="40">Returns the ICC profile of the pixels managed by
                  the object</doc>
        <callback name="get_icc_profile">
          <source-position filename="libgimpcolor/gimpcolormanaged.h"
                           line="67"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolormanaged.c"
                 line="110">A blob of data that represents an ICC color
                             profile.</doc>
            <array length="1" zero-terminated="0" c:type="const guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="managed" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libgimpcolor/gimpcolormanaged.c"
                   line="107">an object the implements the #GimpColorManaged interface</doc>
              <type name="ColorManaged" c:type="GimpColorManaged*"/>
            </parameter>
            <parameter name="len"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="libgimpcolor/gimpcolormanaged.c"
                   line="108">return location for the number of bytes in the profile data</doc>
              <type name="gsize" c:type="gsize*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="profile_changed">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolormanaged.h"
             line="42">This signal is emitted when the object's color profile
                  has changed</doc>
        <callback name="profile_changed">
          <source-position filename="libgimpcolor/gimpcolormanaged.h"
                           line="71"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="managed" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libgimpcolor/gimpcolormanaged.c"
                   line="240">an object that implements the #GimpColorManaged interface</doc>
              <type name="ColorManaged" c:type="GimpColorManaged*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="simulation_profile_changed">
        <callback name="simulation_profile_changed">
          <source-position filename="libgimpcolor/gimpcolormanaged.h"
                           line="73"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="managed" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libgimpcolor/gimpcolormanaged.c"
                   line="256">an object that implements the #GimpColorManaged interface</doc>
              <type name="ColorManaged" c:type="GimpColorManaged*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="simulation_intent_changed">
        <callback name="simulation_intent_changed">
          <source-position filename="libgimpcolor/gimpcolormanaged.h"
                           line="75"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="managed" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libgimpcolor/gimpcolormanaged.c"
                   line="272">an object that implements the #GimpColorManaged interface</doc>
              <type name="ColorManaged" c:type="GimpColorManaged*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="simulation_bpc_changed">
        <callback name="simulation_bpc_changed">
          <source-position filename="libgimpcolor/gimpcolormanaged.h"
                           line="77"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="managed" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libgimpcolor/gimpcolormanaged.c"
                   line="288">an object that implements the #GimpColorManaged interface</doc>
              <type name="ColorManaged" c:type="GimpColorManaged*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_color_profile">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolormanaged.h"
             line="44">Returns the #GimpColorProfile of the pixels managed
                    by the object</doc>
        <callback name="get_color_profile">
          <source-position filename="libgimpcolor/gimpcolormanaged.h"
                           line="80"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolormanaged.c"
                 line="141">The @managed's #GimpColorProfile.</doc>
            <type name="ColorProfile" c:type="GimpColorProfile*"/>
          </return-value>
          <parameters>
            <parameter name="managed" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libgimpcolor/gimpcolormanaged.c"
                   line="136">an object the implements the #GimpColorManaged interface</doc>
              <type name="ColorManaged" c:type="GimpColorManaged*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_simulation_profile">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolormanaged.h"
             line="46">Returns the simulation #GimpColorProfile of the
                         pixels managed by the object</doc>
        <callback name="get_simulation_profile">
          <source-position filename="libgimpcolor/gimpcolormanaged.h"
                           line="81"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolormanaged.c"
                 line="166">The @managed's simulation #GimpColorProfile.</doc>
            <type name="ColorProfile" c:type="GimpColorProfile*"/>
          </return-value>
          <parameters>
            <parameter name="managed" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libgimpcolor/gimpcolormanaged.c"
                   line="162">an object the implements the #GimpColorManaged interface</doc>
              <type name="ColorManaged" c:type="GimpColorManaged*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_simulation_intent">
        <callback name="get_simulation_intent">
          <source-position filename="libgimpcolor/gimpcolormanaged.h"
                           line="83"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolormanaged.c"
                 line="191">The @managed's simulation #GimpColorRenderingIntent.</doc>
            <type name="ColorRenderingIntent"
                  c:type="GimpColorRenderingIntent"/>
          </return-value>
          <parameters>
            <parameter name="managed" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libgimpcolor/gimpcolormanaged.c"
                   line="187">an object the implements the #GimpColorManaged interface</doc>
              <type name="ColorManaged" c:type="GimpColorManaged*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_simulation_bpc">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolormanaged.h"
             line="50">Returns whether black point compensation is enabled for the
                     simulation of the pixels managed by the object</doc>
        <callback name="get_simulation_bpc">
          <source-position filename="libgimpcolor/gimpcolormanaged.h"
                           line="84"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolormanaged.c"
                 line="218">The @managed's simulation Black Point Compensation value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="managed" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libgimpcolor/gimpcolormanaged.c"
                   line="213">an object the implements the #GimpColorManaged interface</doc>
              <type name="ColorManaged" c:type="GimpColorManaged*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="ColorManagementMode"
                 glib:type-name="GimpColorManagementMode"
                 glib:get-type="gimp_color_management_mode_get_type"
                 c:type="GimpColorManagementMode">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfigenums.h"
           line="30">Modes of color management.</doc>
      <member name="off"
              value="0"
              c:identifier="GIMP_COLOR_MANAGEMENT_OFF"
              glib:nick="off"
              glib:name="GIMP_COLOR_MANAGEMENT_OFF">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfigenums.h"
             line="32">Color management is off</doc>
      </member>
      <member name="display"
              value="1"
              c:identifier="GIMP_COLOR_MANAGEMENT_DISPLAY"
              glib:nick="display"
              glib:name="GIMP_COLOR_MANAGEMENT_DISPLAY">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfigenums.h"
             line="33">Color managed display</doc>
      </member>
      <member name="softproof"
              value="2"
              c:identifier="GIMP_COLOR_MANAGEMENT_SOFTPROOF"
              glib:nick="softproof"
              glib:name="GIMP_COLOR_MANAGEMENT_SOFTPROOF">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfigenums.h"
             line="34">Soft-proofing</doc>
      </member>
    </enumeration>
    <class name="ColorProfile"
           c:symbol-prefix="color_profile"
           c:type="GimpColorProfile"
           parent="GObject.Object"
           glib:type-name="GimpColorProfile"
           glib:get-type="gimp_color_profile_get_type"
           glib:type-struct="ColorProfileClass">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimpcolorprofile.c"
           line="75">Definitions and Functions relating to LCMS.</doc>
      <source-position filename="libgimpcolor/gimpcolorprofile.h" line="36"/>
      <constructor name="new_d50_gray_lab_trc"
                   c:identifier="gimp_color_profile_new_d50_gray_lab_trc"
                   version="2.10">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolorprofile.c"
             line="1462">This function creates a grayscale #GimpColorProfile with the
D50 ICC profile illuminant as the profile white point and the
LAB companding curve as the TRC.</doc>
        <source-position filename="libgimpcolor/gimpcolorprofile.h" line="45"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolorprofile.c"
               line="1469">a gray profile with the D50 ICC profile illuminant
as the profile white point and the LAB companding curve as the TRC.
as the TRC.</doc>
          <type name="ColorProfile" c:type="GimpColorProfile*"/>
        </return-value>
      </constructor>
      <constructor name="new_d65_gray_linear"
                   c:identifier="gimp_color_profile_new_d65_gray_linear">
        <source-position filename="libgimpcolor/gimpcolorprofile.h" line="44"/>
        <return-value transfer-ownership="full">
          <type name="ColorProfile" c:type="GimpColorProfile*"/>
        </return-value>
      </constructor>
      <constructor name="new_d65_gray_srgb_trc"
                   c:identifier="gimp_color_profile_new_d65_gray_srgb_trc"
                   version="2.10">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolorprofile.c"
             line="1341">This function creates a grayscale #GimpColorProfile with an
sRGB TRC. See gimp_color_profile_new_rgb_srgb().</doc>
        <source-position filename="libgimpcolor/gimpcolorprofile.h" line="43"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolorprofile.c"
               line="1347">the sRGB-gamma grayscale #GimpColorProfile.</doc>
          <type name="ColorProfile" c:type="GimpColorProfile*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_file"
                   c:identifier="gimp_color_profile_new_from_file"
                   version="2.10"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolorprofile.c"
             line="164">This function opens an ICC color profile from @file.</doc>
        <source-position filename="libgimpcolor/gimpcolorprofile.h" line="52"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolorprofile.c"
               line="171">the #GimpColorProfile, or %NULL. On error, %NULL is
              returned and @error is set.</doc>
          <type name="ColorProfile" c:type="GimpColorProfile*"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorprofile.c"
                 line="166">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_icc_profile"
                   c:identifier="gimp_color_profile_new_from_icc_profile"
                   version="2.10"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolorprofile.c"
             line="267">This function opens an ICC color profile from memory. On error,
%NULL is returned and @error is set.</doc>
        <source-position filename="libgimpcolor/gimpcolorprofile.h" line="55"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolorprofile.c"
               line="276">the #GimpColorProfile, or %NULL.</doc>
          <type name="ColorProfile" c:type="GimpColorProfile*"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorprofile.c"
                 line="269">The memory containing an ICC profile</doc>
            <array length="1" zero-terminated="0" c:type="const guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorprofile.c"
                 line="270">length of the profile in memory, in bytes</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_lcms_profile"
                   c:identifier="gimp_color_profile_new_from_lcms_profile"
                   version="2.10"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolorprofile.c"
             line="311">This function creates a GimpColorProfile from a cmsHPROFILE. On
error, %NULL is returned and @error is set. The passed
@lcms_profile pointer is not retained by the created
#GimpColorProfile.</doc>
        <source-position filename="libgimpcolor/gimpcolorprofile.h" line="58"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolorprofile.c"
               line="321">the #GimpColorProfile, or %NULL.</doc>
          <type name="ColorProfile" c:type="GimpColorProfile*"/>
        </return-value>
        <parameters>
          <parameter name="lcms_profile"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorprofile.c"
                 line="313">an LCMS cmsHPROFILE pointer</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_rgb_adobe"
                   c:identifier="gimp_color_profile_new_rgb_adobe"
                   version="2.10">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolorprofile.c"
             line="1280">This function creates a profile compatible with AbobeRGB (1998).</doc>
        <source-position filename="libgimpcolor/gimpcolorprofile.h" line="41"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolorprofile.c"
               line="1285">the AdobeRGB-compatible #GimpColorProfile.</doc>
          <type name="ColorProfile" c:type="GimpColorProfile*"/>
        </return-value>
      </constructor>
      <constructor name="new_rgb_srgb"
                   c:identifier="gimp_color_profile_new_rgb_srgb"
                   version="2.10">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolorprofile.c"
             line="1104">This function is a replacement for cmsCreate_sRGBProfile() and
returns an sRGB profile that is functionally the same as the
ArgyllCMS sRGB.icm profile. "Functionally the same" means it has
the same red, green, and blue colorants and the V4 "chad"
equivalent of the ArgyllCMS V2 white point. The profile TRC is also
functionally equivalent to the ArgyllCMS sRGB.icm TRC and is the
same as the LCMS sRGB built-in profile TRC.

The actual primaries in the sRGB specification are
red xy:   {0.6400, 0.3300, 1.0}
green xy: {0.3000, 0.6000, 1.0}
blue xy:  {0.1500, 0.0600, 1.0}

The sRGB primaries given below are "pre-quantized" to compensate
for hexadecimal quantization during the profile-making process.
Unless the profile-making code compensates for this quantization,
the resulting profile's red, green, and blue colorants will deviate
slightly from the correct XYZ values.

LCMS2 doesn't compensate for hexadecimal quantization. The
"pre-quantized" primaries below were back-calculated from the
ArgyllCMS sRGB.icm profile. The resulting sRGB profile's colorants
exactly matches the ArgyllCMS sRGB.icm profile colorants.</doc>
        <source-position filename="libgimpcolor/gimpcolorprofile.h" line="39"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolorprofile.c"
               line="1131">the sRGB #GimpColorProfile.</doc>
          <type name="ColorProfile" c:type="GimpColorProfile*"/>
        </return-value>
      </constructor>
      <constructor name="new_rgb_srgb_linear"
                   c:identifier="gimp_color_profile_new_rgb_srgb_linear"
                   version="2.10">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolorprofile.c"
             line="1200">This function creates a profile for babl_model("RGB"). Please
somebody write something smarter here.</doc>
        <source-position filename="libgimpcolor/gimpcolorprofile.h" line="40"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolorprofile.c"
               line="1206">the linear RGB #GimpColorProfile.</doc>
          <type name="ColorProfile" c:type="GimpColorProfile*"/>
        </return-value>
      </constructor>
      <function name="get_lcms_format"
                c:identifier="gimp_color_profile_get_lcms_format"
                version="2.10">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolorprofile.c"
             line="1569">This function takes a #Babl format and returns the lcms format to
be used with that @format. It also returns a #Babl format to be
used instead of the passed @format, which usually is the same as
@format, unless lcms doesn't support @format.

Note that this function currently only supports RGB, RGBA, R'G'B',
R'G'B'A, Y, YA, Y', Y'A and the cairo-RGB24 and cairo-ARGB32 formats.</doc>
        <source-position filename="libgimpcolor/gimpcolorprofile.h" line="94"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolorprofile.c"
               line="1582">the #Babl format to be used instead of @format, or %NULL
              if the passed @format is not supported at all.</doc>
          <type name="Babl.Object" c:type="const Babl*"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorprofile.c"
                 line="1571">a #Babl format</doc>
            <type name="Babl.Object" c:type="const Babl*"/>
          </parameter>
          <parameter name="lcms_format"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorprofile.c"
                 line="1572">return location for an lcms format</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_copyright"
              c:identifier="gimp_color_profile_get_copyright"
              version="2.10">
        <source-position filename="libgimpcolor/gimpcolorprofile.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolorprofile.c"
               line="535">a string containing @profile's copyright. The
              returned value belongs to @profile and must not be
              modified or freed.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorprofile.c"
                 line="533">a #GimpColorProfile</doc>
            <type name="ColorProfile" c:type="GimpColorProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="gimp_color_profile_get_description"
              version="2.10">
        <source-position filename="libgimpcolor/gimpcolorprofile.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolorprofile.c"
               line="469">a string containing @profile's description. The
              returned value belongs to @profile and must not be
              modified or freed.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorprofile.c"
                 line="467">a #GimpColorProfile</doc>
            <type name="ColorProfile" c:type="GimpColorProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_format"
              c:identifier="gimp_color_profile_get_format"
              version="2.10"
              throws="1">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolorprofile.c"
             line="1534">This function takes a #GimpColorProfile and a #Babl format and
returns a new #Babl format with @profile's RGB primaries and TRC,
and @format's pixel layout.</doc>
        <source-position filename="libgimpcolor/gimpcolorprofile.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolorprofile.c"
               line="1545">the new #Babl format.</doc>
          <type name="Babl.Object" c:type="const Babl*"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorprofile.c"
                 line="1536">a #GimpColorProfile</doc>
            <type name="ColorProfile" c:type="GimpColorProfile*"/>
          </instance-parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorprofile.c"
                 line="1537">a #Babl format</doc>
            <type name="Babl.Object" c:type="const Babl*"/>
          </parameter>
          <parameter name="intent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorprofile.c"
                 line="1538">a #GimpColorRenderingIntent</doc>
            <type name="ColorRenderingIntent"
                  c:type="GimpColorRenderingIntent"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_icc_profile"
              c:identifier="gimp_color_profile_get_icc_profile"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolorprofile.c"
             line="398">This function returns @profile as ICC profile data. The returned
memory belongs to @profile and must not be modified or freed.</doc>
        <source-position filename="libgimpcolor/gimpcolorprofile.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolorprofile.c"
               line="406">a pointer to the IIC profile data.</doc>
          <array length="0" zero-terminated="0" c:type="const guint8*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorprofile.c"
                 line="400">a #GimpColorProfile</doc>
            <type name="ColorProfile" c:type="GimpColorProfile*"/>
          </instance-parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorprofile.c"
                 line="401">return location for the number of bytes</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_label"
              c:identifier="gimp_color_profile_get_label"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolorprofile.c"
             line="553">This function returns a string containing @profile's "title", a
string that can be used to label the profile in a user interface.

Unlike gimp_color_profile_get_description(), this function always
returns a string (as a fallback, it returns "(unnamed profile)").</doc>
        <source-position filename="libgimpcolor/gimpcolorprofile.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolorprofile.c"
               line="563">the @profile's label. The returned value belongs to
              @profile and must not be modified or freed.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorprofile.c"
                 line="555">a #GimpColorProfile</doc>
            <type name="ColorProfile" c:type="GimpColorProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lcms_profile"
              c:identifier="gimp_color_profile_get_lcms_profile"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolorprofile.c"
             line="422">This function returns @profile's cmsHPROFILE. The returned
value belongs to @profile and must not be modified or freed.</doc>
        <source-position filename="libgimpcolor/gimpcolorprofile.h" line="67"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolorprofile.c"
               line="429">a pointer to the cmsHPROFILE.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorprofile.c"
                 line="424">a #GimpColorProfile</doc>
            <type name="ColorProfile" c:type="GimpColorProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_manufacturer"
              c:identifier="gimp_color_profile_get_manufacturer"
              version="2.10">
        <source-position filename="libgimpcolor/gimpcolorprofile.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolorprofile.c"
               line="491">a string containing @profile's manufacturer. The
              returned value belongs to @profile and must not be
              modified or freed.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorprofile.c"
                 line="489">a #GimpColorProfile</doc>
            <type name="ColorProfile" c:type="GimpColorProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_model"
              c:identifier="gimp_color_profile_get_model"
              version="2.10">
        <source-position filename="libgimpcolor/gimpcolorprofile.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolorprofile.c"
               line="513">a string containing @profile's model. The returned
              value belongs to @profile and must not be modified or
              freed.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorprofile.c"
                 line="511">a #GimpColorProfile</doc>
            <type name="ColorProfile" c:type="GimpColorProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_space"
              c:identifier="gimp_color_profile_get_space"
              version="2.10.6"
              throws="1">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolorprofile.c"
             line="1497">This function returns the #Babl space of @profile, for the
specified @intent.</doc>
        <source-position filename="libgimpcolor/gimpcolorprofile.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolorprofile.c"
               line="1506">the new #Babl space.</doc>
          <type name="Babl.Object" c:type="const Babl*"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorprofile.c"
                 line="1499">a #GimpColorProfile</doc>
            <type name="ColorProfile" c:type="GimpColorProfile*"/>
          </instance-parameter>
          <parameter name="intent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorprofile.c"
                 line="1500">a #GimpColorRenderingIntent</doc>
            <type name="ColorRenderingIntent"
                  c:type="GimpColorRenderingIntent"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_summary"
              c:identifier="gimp_color_profile_get_summary"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolorprofile.c"
             line="587">This function return a string containing a multi-line summary of
@profile's description, model, manufacturer and copyright, to be
used as detailed information about the profile in a user
interface.</doc>
        <source-position filename="libgimpcolor/gimpcolorprofile.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolorprofile.c"
               line="596">the @profile's summary. The returned value belongs to
              @profile and must not be modified or freed.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorprofile.c"
                 line="589">a #GimpColorProfile</doc>
            <type name="ColorProfile" c:type="GimpColorProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_cmyk"
              c:identifier="gimp_color_profile_is_cmyk"
              version="2.10">
        <source-position filename="libgimpcolor/gimpcolorprofile.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolorprofile.c"
               line="713">%TRUE if the profile's color space is CMYK, %FALSE
otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorprofile.c"
                 line="711">a #GimpColorProfile</doc>
            <type name="ColorProfile" c:type="GimpColorProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_equal"
              c:identifier="gimp_color_profile_is_equal"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolorprofile.c"
             line="648">Compares two profiles.</doc>
        <source-position filename="libgimpcolor/gimpcolorprofile.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolorprofile.c"
               line="655">%TRUE if the profiles are equal, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorprofile.c"
                 line="650">a #GimpColorProfile</doc>
            <type name="ColorProfile" c:type="GimpColorProfile*"/>
          </instance-parameter>
          <parameter name="profile2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorprofile.c"
                 line="651">a #GimpColorProfile</doc>
            <type name="ColorProfile" c:type="GimpColorProfile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_gray"
              c:identifier="gimp_color_profile_is_gray"
              version="2.10">
        <source-position filename="libgimpcolor/gimpcolorprofile.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolorprofile.c"
               line="696">%TRUE if the profile's color space is grayscale, %FALSE
otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorprofile.c"
                 line="694">a #GimpColorProfile</doc>
            <type name="ColorProfile" c:type="GimpColorProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_linear"
              c:identifier="gimp_color_profile_is_linear"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolorprofile.c"
             line="727">This function determines is the ICC profile represented by a GimpColorProfile
is a linear RGB profile or not, some profiles that are LUTs though linear
will also return FALSE;</doc>
        <source-position filename="libgimpcolor/gimpcolorprofile.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolorprofile.c"
               line="735">%TRUE if the profile is a matrix shaping profile with linear
TRCs, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorprofile.c"
                 line="729">a #GimpColorProfile</doc>
            <type name="ColorProfile" c:type="GimpColorProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_rgb"
              c:identifier="gimp_color_profile_is_rgb"
              version="2.10">
        <source-position filename="libgimpcolor/gimpcolorprofile.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolorprofile.c"
               line="679">%TRUE if the profile's color space is RGB, %FALSE
otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorprofile.c"
                 line="677">a #GimpColorProfile</doc>
            <type name="ColorProfile" c:type="GimpColorProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="new_linear_from_color_profile"
              c:identifier="gimp_color_profile_new_linear_from_color_profile"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolorprofile.c"
             line="1027">This function creates a new RGB #GimpColorProfile with a linear TRC
and @profile's RGB chromacities and whitepoint.</doc>
        <source-position filename="libgimpcolor/gimpcolorprofile.h" line="50"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolorprofile.c"
               line="1034">the new #GimpColorProfile, or %NULL if
              @profile is not an RGB profile or not matrix-based.</doc>
          <type name="ColorProfile" c:type="GimpColorProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorprofile.c"
                 line="1029">a #GimpColorProfile</doc>
            <type name="ColorProfile" c:type="GimpColorProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="new_srgb_trc_from_color_profile"
              c:identifier="gimp_color_profile_new_srgb_trc_from_color_profile"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolorprofile.c"
             line="1007">This function creates a new RGB #GimpColorProfile with a sRGB gamma
TRC and @profile's RGB chromacities and whitepoint.</doc>
        <source-position filename="libgimpcolor/gimpcolorprofile.h" line="48"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolorprofile.c"
               line="1014">the new #GimpColorProfile, or %NULL if
              @profile is not an RGB profile or not matrix-based.</doc>
          <type name="ColorProfile" c:type="GimpColorProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorprofile.c"
                 line="1009">a #GimpColorProfile</doc>
            <type name="ColorProfile" c:type="GimpColorProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="save_to_file"
              c:identifier="gimp_color_profile_save_to_file"
              version="2.10"
              throws="1">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolorprofile.c"
             line="367">This function saves @profile to @file as ICC profile.</doc>
        <source-position filename="libgimpcolor/gimpcolorprofile.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolorprofile.c"
               line="375">%TRUE on success, %FALSE if an error occurred.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorprofile.c"
                 line="369">a #GimpColorProfile</doc>
            <type name="ColorProfile" c:type="GimpColorProfile*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorprofile.c"
                 line="370">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="ColorProfileClass"
            c:type="GimpColorProfileClass"
            glib:is-gtype-struct-for="ColorProfile">
      <source-position filename="libgimpcolor/gimpcolorprofile.h" line="36"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="ColorRenderingIntent"
                 glib:type-name="GimpColorRenderingIntent"
                 glib:get-type="gimp_color_rendering_intent_get_type"
                 c:type="GimpColorRenderingIntent">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfigenums.h"
           line="50">Intents for color management.</doc>
      <member name="perceptual"
              value="0"
              c:identifier="GIMP_COLOR_RENDERING_INTENT_PERCEPTUAL"
              glib:nick="perceptual"
              glib:name="GIMP_COLOR_RENDERING_INTENT_PERCEPTUAL">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfigenums.h"
             line="52">Perceptual</doc>
      </member>
      <member name="relative_colorimetric"
              value="1"
              c:identifier="GIMP_COLOR_RENDERING_INTENT_RELATIVE_COLORIMETRIC"
              glib:nick="relative-colorimetric"
              glib:name="GIMP_COLOR_RENDERING_INTENT_RELATIVE_COLORIMETRIC">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfigenums.h"
             line="53">Relative colorimetric</doc>
      </member>
      <member name="saturation"
              value="2"
              c:identifier="GIMP_COLOR_RENDERING_INTENT_SATURATION"
              glib:nick="saturation"
              glib:name="GIMP_COLOR_RENDERING_INTENT_SATURATION">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfigenums.h"
             line="54">Saturation</doc>
      </member>
      <member name="absolute_colorimetric"
              value="3"
              c:identifier="GIMP_COLOR_RENDERING_INTENT_ABSOLUTE_COLORIMETRIC"
              glib:nick="absolute-colorimetric"
              glib:name="GIMP_COLOR_RENDERING_INTENT_ABSOLUTE_COLORIMETRIC">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfigenums.h"
             line="55">Absolute colorimetric</doc>
      </member>
    </enumeration>
    <enumeration name="ColorTag"
                 version="2.10"
                 glib:type-name="GimpColorTag"
                 glib:get-type="gimp_color_tag_get_type"
                 c:type="GimpColorTag">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="219">Possible tag colors.</doc>
      <member name="none"
              value="0"
              c:identifier="GIMP_COLOR_TAG_NONE"
              glib:nick="none"
              glib:name="GIMP_COLOR_TAG_NONE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="221">None</doc>
      </member>
      <member name="blue"
              value="1"
              c:identifier="GIMP_COLOR_TAG_BLUE"
              glib:nick="blue"
              glib:name="GIMP_COLOR_TAG_BLUE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="222">Blue</doc>
      </member>
      <member name="green"
              value="2"
              c:identifier="GIMP_COLOR_TAG_GREEN"
              glib:nick="green"
              glib:name="GIMP_COLOR_TAG_GREEN">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="223">Green</doc>
      </member>
      <member name="yellow"
              value="3"
              c:identifier="GIMP_COLOR_TAG_YELLOW"
              glib:nick="yellow"
              glib:name="GIMP_COLOR_TAG_YELLOW">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="224">Yellow</doc>
      </member>
      <member name="orange"
              value="4"
              c:identifier="GIMP_COLOR_TAG_ORANGE"
              glib:nick="orange"
              glib:name="GIMP_COLOR_TAG_ORANGE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="225">Orange</doc>
      </member>
      <member name="brown"
              value="5"
              c:identifier="GIMP_COLOR_TAG_BROWN"
              glib:nick="brown"
              glib:name="GIMP_COLOR_TAG_BROWN">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="226">Brown</doc>
      </member>
      <member name="red"
              value="6"
              c:identifier="GIMP_COLOR_TAG_RED"
              glib:nick="red"
              glib:name="GIMP_COLOR_TAG_RED">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="227">Red</doc>
      </member>
      <member name="violet"
              value="7"
              c:identifier="GIMP_COLOR_TAG_VIOLET"
              glib:nick="violet"
              glib:name="GIMP_COLOR_TAG_VIOLET">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="228">Violet</doc>
      </member>
      <member name="gray"
              value="8"
              c:identifier="GIMP_COLOR_TAG_GRAY"
              glib:nick="gray"
              glib:name="GIMP_COLOR_TAG_GRAY">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="229">Gray</doc>
      </member>
    </enumeration>
    <class name="ColorTransform"
           c:symbol-prefix="color_transform"
           c:type="GimpColorTransform"
           parent="GObject.Object"
           glib:type-name="GimpColorTransform"
           glib:get-type="gimp_color_transform_get_type"
           glib:type-struct="ColorTransformClass">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimpcolortransform.c"
           line="44">Definitions and Functions relating to LCMS.</doc>
      <source-position filename="libgimpcolor/gimpcolortransform.h" line="74"/>
      <constructor name="new"
                   c:identifier="gimp_color_transform_new"
                   version="2.10">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolortransform.c"
             line="154">This function creates an color transform.

The color transform is determined exclusively by @src_profile and
@dest_profile. The color spaces of @src_format and @dest_format are
ignored, the formats are only used to decide between what pixel
encodings to transform.

Note: this function used to return %NULL if
gimp_color_transform_can_gegl_copy() returned %TRUE for
@src_profile and @dest_profile. This is no longer the case because
special care has to be taken not to perform multiple implicit color
transforms caused by babl formats with color spaces. Now, it always
returns a non-%NULL transform and the code takes care of doing only
exactly the requested color transform.</doc>
        <source-position filename="libgimpcolor/gimpcolortransform.h"
                         line="78"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolortransform.c"
               line="178">the #GimpColorTransform, or %NULL if there was an error.</doc>
          <type name="ColorTransform" c:type="GimpColorTransform*"/>
        </return-value>
        <parameters>
          <parameter name="src_profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolortransform.c"
                 line="156">the source #GimpColorProfile</doc>
            <type name="ColorProfile" c:type="GimpColorProfile*"/>
          </parameter>
          <parameter name="src_format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolortransform.c"
                 line="157">the source #Babl format</doc>
            <type name="Babl.Object" c:type="const Babl*"/>
          </parameter>
          <parameter name="dest_profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolortransform.c"
                 line="158">the destination #GimpColorProfile</doc>
            <type name="ColorProfile" c:type="GimpColorProfile*"/>
          </parameter>
          <parameter name="dest_format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolortransform.c"
                 line="159">the destination #Babl format</doc>
            <type name="Babl.Object" c:type="const Babl*"/>
          </parameter>
          <parameter name="rendering_intent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolortransform.c"
                 line="160">the rendering intent</doc>
            <type name="ColorRenderingIntent"
                  c:type="GimpColorRenderingIntent"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolortransform.c"
                 line="161">transform flags</doc>
            <type name="ColorTransformFlags" c:type="GimpColorTransformFlags"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_proofing"
                   c:identifier="gimp_color_transform_new_proofing"
                   version="2.10">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolortransform.c"
             line="292">This function creates a simulation / proofing color transform.

See gimp_color_transform_new() about the color spaces to transform
between.</doc>
        <source-position filename="libgimpcolor/gimpcolortransform.h"
                         line="86"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolortransform.c"
               line="308">the #GimpColorTransform, or %NULL if there was an error.</doc>
          <type name="ColorTransform" c:type="GimpColorTransform*"/>
        </return-value>
        <parameters>
          <parameter name="src_profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolortransform.c"
                 line="294">the source #GimpColorProfile</doc>
            <type name="ColorProfile" c:type="GimpColorProfile*"/>
          </parameter>
          <parameter name="src_format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolortransform.c"
                 line="295">the source #Babl format</doc>
            <type name="Babl.Object" c:type="const Babl*"/>
          </parameter>
          <parameter name="dest_profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolortransform.c"
                 line="296">the destination #GimpColorProfile</doc>
            <type name="ColorProfile" c:type="GimpColorProfile*"/>
          </parameter>
          <parameter name="dest_format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolortransform.c"
                 line="297">the destination #Babl format</doc>
            <type name="Babl.Object" c:type="const Babl*"/>
          </parameter>
          <parameter name="proof_profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolortransform.c"
                 line="298">the proof #GimpColorProfile</doc>
            <type name="ColorProfile" c:type="GimpColorProfile*"/>
          </parameter>
          <parameter name="proof_intent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolortransform.c"
                 line="299">the proof intent</doc>
            <type name="ColorRenderingIntent"
                  c:type="GimpColorRenderingIntent"/>
          </parameter>
          <parameter name="display_intent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolortransform.c"
                 line="300">the display intent</doc>
            <type name="ColorRenderingIntent"
                  c:type="GimpColorRenderingIntent"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolortransform.c"
                 line="301">transform flags</doc>
            <type name="ColorTransformFlags" c:type="GimpColorTransformFlags"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="can_gegl_copy"
                c:identifier="gimp_color_transform_can_gegl_copy"
                version="2.10">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolortransform.c"
             line="608">This function checks if a GimpColorTransform is needed at all.</doc>
        <source-position filename="libgimpcolor/gimpcolortransform.h"
                         line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolortransform.c"
               line="615">%TRUE if pixels can be correctly converted between
              @src_profile and @dest_profile by simply using
              gegl_buffer_copy(), babl_process() or similar.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="src_profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolortransform.c"
                 line="610">source #GimpColorProfile</doc>
            <type name="ColorProfile" c:type="GimpColorProfile*"/>
          </parameter>
          <parameter name="dest_profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolortransform.c"
                 line="611">destination #GimpColorProfile</doc>
            <type name="ColorProfile" c:type="GimpColorProfile*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="progress">
        <source-position filename="libgimpcolor/gimpcolortransform.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="transform" transfer-ownership="none">
            <type name="ColorTransform" c:type="GimpColorTransform*"/>
          </instance-parameter>
          <parameter name="fraction" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="process_buffer"
              c:identifier="gimp_color_transform_process_buffer"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolortransform.c"
             line="482">This function transforms buffer into another buffer.

See gimp_color_transform_new(): only the pixel encoding of
@src_buffer's and @dest_buffer's formats honored, their color
spaces are ignored. The transform always takes place between the
color spaces determined by @transform's color profiles.</doc>
        <source-position filename="libgimpcolor/gimpcolortransform.h"
                         line="102"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="transform" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolortransform.c"
                 line="484">a #GimpColorTransform</doc>
            <type name="ColorTransform" c:type="GimpColorTransform*"/>
          </instance-parameter>
          <parameter name="src_buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolortransform.c"
                 line="485">source #GeglBuffer</doc>
            <type name="Gegl.Buffer" c:type="GeglBuffer*"/>
          </parameter>
          <parameter name="src_rect" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolortransform.c"
                 line="486">rectangle in @src_buffer</doc>
            <type name="Gegl.Rectangle" c:type="const GeglRectangle*"/>
          </parameter>
          <parameter name="dest_buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolortransform.c"
                 line="487">destination #GeglBuffer</doc>
            <type name="Gegl.Buffer" c:type="GeglBuffer*"/>
          </parameter>
          <parameter name="dest_rect" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolortransform.c"
                 line="488">rectangle in @dest_buffer</doc>
            <type name="Gegl.Rectangle" c:type="const GeglRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="process_pixels"
              c:identifier="gimp_color_transform_process_pixels"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolortransform.c"
             line="386">This function transforms a contiguous line of pixels.

See gimp_color_transform_new(): only the pixel encoding of
@src_format and @dest_format is honored, their color spaces are
ignored. The transform always takes place between the color spaces
determined by @transform's color profiles.</doc>
        <source-position filename="libgimpcolor/gimpcolortransform.h"
                         line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="transform" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolortransform.c"
                 line="388">a #GimpColorTransform</doc>
            <type name="ColorTransform" c:type="GimpColorTransform*"/>
          </instance-parameter>
          <parameter name="src_format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolortransform.c"
                 line="389">#Babl format of @src_pixels</doc>
            <type name="Babl.Object" c:type="const Babl*"/>
          </parameter>
          <parameter name="src_pixels"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolortransform.c"
                 line="390">pointer to the source pixels</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="dest_format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolortransform.c"
                 line="391">#Babl format of @dest_pixels</doc>
            <type name="Babl.Object" c:type="const Babl*"/>
          </parameter>
          <parameter name="dest_pixels"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolortransform.c"
                 line="392">pointer to the destination pixels</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolortransform.c"
                 line="393">number of pixels to process</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="progress" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ColorTransformClass"
            c:type="GimpColorTransformClass"
            glib:is-gtype-struct-for="ColorTransform">
      <source-position filename="libgimpcolor/gimpcolortransform.h" line="74"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="progress">
        <callback name="progress">
          <source-position filename="libgimpcolor/gimpcolortransform.h"
                           line="62"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="transform" transfer-ownership="none">
              <type name="ColorTransform" c:type="GimpColorTransform*"/>
            </parameter>
            <parameter name="fraction" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gimp_reserved1" introspectable="0">
        <callback name="_gimp_reserved1">
          <source-position filename="libgimpcolor/gimpcolortransform.h"
                           line="66"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved2" introspectable="0">
        <callback name="_gimp_reserved2">
          <source-position filename="libgimpcolor/gimpcolortransform.h"
                           line="67"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved3" introspectable="0">
        <callback name="_gimp_reserved3">
          <source-position filename="libgimpcolor/gimpcolortransform.h"
                           line="68"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved4" introspectable="0">
        <callback name="_gimp_reserved4">
          <source-position filename="libgimpcolor/gimpcolortransform.h"
                           line="69"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved5" introspectable="0">
        <callback name="_gimp_reserved5">
          <source-position filename="libgimpcolor/gimpcolortransform.h"
                           line="70"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved6" introspectable="0">
        <callback name="_gimp_reserved6">
          <source-position filename="libgimpcolor/gimpcolortransform.h"
                           line="71"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved7" introspectable="0">
        <callback name="_gimp_reserved7">
          <source-position filename="libgimpcolor/gimpcolortransform.h"
                           line="72"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved8" introspectable="0">
        <callback name="_gimp_reserved8">
          <source-position filename="libgimpcolor/gimpcolortransform.h"
                           line="73"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="ColorTransformFlags" c:type="GimpColorTransformFlags">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimpcolortransform.h"
           line="35">Flags for modifying #GimpColorTransform's behavior.</doc>
      <source-position filename="libgimpcolor/gimpcolortransform.h" line="51"/>
      <member name="nooptimize"
              value="256"
              c:identifier="GIMP_COLOR_TRANSFORM_FLAGS_NOOPTIMIZE">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolortransform.h"
             line="37">optimize for accuracy rather
  than for speed</doc>
      </member>
      <member name="gamut_check"
              value="4096"
              c:identifier="GIMP_COLOR_TRANSFORM_FLAGS_GAMUT_CHECK">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolortransform.h"
             line="39">mark out of gamut colors in the
  transform result</doc>
      </member>
      <member name="black_point_compensation"
              value="8192"
              c:identifier="GIMP_COLOR_TRANSFORM_FLAGS_BLACK_POINT_COMPENSATION">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolortransform.h"
             line="41">do black point
  compensation</doc>
      </member>
    </enumeration>
    <enumeration name="ComponentType"
                 version="2.10"
                 glib:type-name="GimpComponentType"
                 glib:get-type="gimp_component_type_get_type"
                 c:type="GimpComponentType">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="253">Encoding types of image components.</doc>
      <member name="u8"
              value="100"
              c:identifier="GIMP_COMPONENT_TYPE_U8"
              glib:nick="u8"
              glib:name="GIMP_COMPONENT_TYPE_U8">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="255">8-bit integer</doc>
      </member>
      <member name="u16"
              value="200"
              c:identifier="GIMP_COMPONENT_TYPE_U16"
              glib:nick="u16"
              glib:name="GIMP_COMPONENT_TYPE_U16">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="256">16-bit integer</doc>
      </member>
      <member name="u32"
              value="300"
              c:identifier="GIMP_COMPONENT_TYPE_U32"
              glib:nick="u32"
              glib:name="GIMP_COMPONENT_TYPE_U32">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="257">32-bit integer</doc>
      </member>
      <member name="half"
              value="500"
              c:identifier="GIMP_COMPONENT_TYPE_HALF"
              glib:nick="half"
              glib:name="GIMP_COMPONENT_TYPE_HALF">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="258">16-bit floating point</doc>
      </member>
      <member name="float"
              value="600"
              c:identifier="GIMP_COMPONENT_TYPE_FLOAT"
              glib:nick="float"
              glib:name="GIMP_COMPONENT_TYPE_FLOAT">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="259">32-bit floating point</doc>
      </member>
      <member name="double"
              value="700"
              c:identifier="GIMP_COMPONENT_TYPE_DOUBLE"
              glib:nick="double"
              glib:name="GIMP_COMPONENT_TYPE_DOUBLE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="260">64-bit floating point</doc>
      </member>
    </enumeration>
    <record name="Config" c:type="GimpConfig" disguised="1" opaque="1">
      <source-position filename="libgimpconfig/gimpconfigtypes.h" line="29"/>
      <method name="copy" c:identifier="gimp_config_copy" version="2.6">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-iface.c"
             line="804">Compares all read- and write-able properties from @src and @dest
that have all @flags set. Differing values are then copied from
@src to @dest. If @flags is 0, all differing read/write properties.

Properties marked as "construct-only" are not touched.</doc>
        <source-position filename="libgimpconfig/gimpconfig-iface.h"
                         line="128"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-iface.c"
               line="816">%TRUE if @dest was modified, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="806">a #GObject that implements the #GimpConfigInterface.</doc>
            <type name="Config" c:type="GimpConfig*"/>
          </instance-parameter>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="807">another #GObject of the same type as @a.</doc>
            <type name="Config" c:type="GimpConfig*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="808">a mask of GParamFlags</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="deserialize"
              c:identifier="gimp_config_deserialize"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-iface.c"
             line="708">Deserialize the #GimpConfig object.</doc>
        <source-position filename="libgimpconfig/gimpconfig-iface.h"
                         line="120"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-iface.c"
               line="717">Whether serialization succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="710">a #GObject that implements the #GimpConfigInterface.</doc>
            <type name="Config" c:type="GimpConfig*"/>
          </instance-parameter>
          <parameter name="scanner" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="711">the #GScanner to use.</doc>
            <type name="GLib.Scanner" c:type="GScanner*"/>
          </parameter>
          <parameter name="nest_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="712">the nest level.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="713">client data.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="deserialize_file"
              c:identifier="gimp_config_deserialize_file"
              version="2.10"
              throws="1">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-iface.c"
             line="455">Opens the file specified by @file, reads configuration data from it
and configures @config accordingly. Basically this function creates
a properly configured [struct@GLib.Scanner] for you and calls the deserialize
function of the @config's [iface@ConfigInterface].</doc>
        <source-position filename="libgimpconfig/gimpconfig-iface.h"
                         line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-iface.c"
               line="467">Whether deserialization succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="457">an object that implements the #GimpConfigInterface.</doc>
            <type name="Config" c:type="GimpConfig*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="458">the file to read configuration from.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="459">user data passed to the deserialize implementation.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="deserialize_parasite"
              c:identifier="gimp_config_deserialize_parasite"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-iface.c"
             line="603">Configures @config from @parasite. Basically this function creates
a properly configured #GScanner for you and calls the deserialize
function of the @config's #GimpConfigInterface.</doc>
        <source-position filename="libgimpconfig/gimpconfig-iface.h"
                         line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-iface.c"
               line="614">%TRUE if deserialization succeeded, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="605">a #GObject that implements the #GimpConfigInterface.</doc>
            <type name="Config" c:type="GimpConfig*"/>
          </instance-parameter>
          <parameter name="parasite" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="606">parasite containing a serialized config string</doc>
            <type name="Parasite" c:type="const GimpParasite*"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="607">client data</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="deserialize_properties"
              c:identifier="gimp_config_deserialize_properties"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-deserialize.c"
             line="127">This function uses the @scanner to configure the properties of @config.</doc>
        <source-position filename="libgimpconfig/gimpconfig-deserialize.h"
                         line="34"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-deserialize.c"
               line="135">%TRUE on success, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-deserialize.c"
                 line="129">a #GimpConfig.</doc>
            <type name="Config" c:type="GimpConfig*"/>
          </instance-parameter>
          <parameter name="scanner" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-deserialize.c"
                 line="130">a #GScanner.</doc>
            <type name="GLib.Scanner" c:type="GScanner*"/>
          </parameter>
          <parameter name="nest_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-deserialize.c"
                 line="131">the nest level</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="deserialize_property"
              c:identifier="gimp_config_deserialize_property"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-deserialize.c"
             line="230">This function deserializes a single property of @config. You
shouldn't need to call this function directly. If possible, use
gimp_config_deserialize_properties() instead.</doc>
        <source-position filename="libgimpconfig/gimpconfig-deserialize.h"
                         line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-deserialize.c"
               line="240">%G_TOKEN_RIGHT_PAREN on success, otherwise the
expected #GTokenType or %G_TOKEN_NONE if the expected token was
found but couldn't be parsed.</doc>
          <type name="GLib.TokenType" c:type="GTokenType"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-deserialize.c"
                 line="232">a #GimpConfig.</doc>
            <type name="Config" c:type="GimpConfig*"/>
          </instance-parameter>
          <parameter name="scanner" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-deserialize.c"
                 line="233">a #GScanner.</doc>
            <type name="GLib.Scanner" c:type="GScanner*"/>
          </parameter>
          <parameter name="nest_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-deserialize.c"
                 line="234">the nest level</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="deserialize_stream"
              c:identifier="gimp_config_deserialize_stream"
              version="2.10"
              throws="1">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-iface.c"
             line="508">Reads configuration data from @input and configures @config
accordingly. Basically this function creates a properly configured
#GScanner for you and calls the deserialize function of the
@config's #GimpConfigInterface.</doc>
        <source-position filename="libgimpconfig/gimpconfig-iface.h"
                         line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-iface.c"
               line="520">Whether deserialization succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="510">an object that implements the #GimpConfigInterface.</doc>
            <type name="Config" c:type="GimpConfig*"/>
          </instance-parameter>
          <parameter name="input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="511">the input stream to read configuration from.</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="512">user data passed to the deserialize implementation.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="deserialize_string"
              c:identifier="gimp_config_deserialize_string"
              version="2.4"
              throws="1">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-iface.c"
             line="556">Configures @config from @text. Basically this function creates a
properly configured #GScanner for you and calls the deserialize
function of the @config's #GimpConfigInterface.</doc>
        <source-position filename="libgimpconfig/gimpconfig-iface.h"
                         line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-iface.c"
               line="568">%TRUE if deserialization succeeded, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="558">a #GObject that implements the #GimpConfigInterface.</doc>
            <type name="Config" c:type="GimpConfig*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="559">string to deserialize (in UTF-8 encoding)</doc>
            <array length="1" zero-terminated="0" c:type="const gchar*">
              <type name="utf8" c:type="gchar"/>
            </array>
          </parameter>
          <parameter name="text_len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="560">length of @text in bytes or -1</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="561">client data</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="duplicate"
              c:identifier="gimp_config_duplicate"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-iface.c"
             line="735">Creates a copy of the passed object by copying all object
properties. The default implementation of the #GimpConfigInterface
only works for objects that are completely defined by their
properties.</doc>
        <source-position filename="libgimpconfig/gimpconfig-iface.h"
                         line="124"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-iface.c"
               line="744">the duplicated #GimpConfig object</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="737">a #GObject that implements the #GimpConfigInterface.</doc>
            <type name="Config" c:type="GimpConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_equal_to"
              c:identifier="gimp_config_is_equal_to"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-iface.c"
             line="756">Compares the two objects. The default implementation of the
#GimpConfigInterface compares the object properties and thus only
works for objects that are completely defined by their
properties.</doc>
        <source-position filename="libgimpconfig/gimpconfig-iface.h"
                         line="125"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-iface.c"
               line="766">%TRUE if the two objects are equal.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="758">a #GObject that implements the #GimpConfigInterface.</doc>
            <type name="Config" c:type="GimpConfig*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="759">another #GObject of the same type as @a.</doc>
            <type name="Config" c:type="GimpConfig*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="gimp_config_reset" version="2.4">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-iface.c"
             line="782">Resets the object to its default state. The default implementation of the
#GimpConfigInterface only works for objects that are completely defined by
their properties.</doc>
        <source-position filename="libgimpconfig/gimpconfig-iface.h"
                         line="127"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="784">a #GObject that implements the #GimpConfigInterface.</doc>
            <type name="Config" c:type="GimpConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="serialize"
              c:identifier="gimp_config_serialize"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-iface.c"
             line="686">Serialize the #GimpConfig object.</doc>
        <source-position filename="libgimpconfig/gimpconfig-iface.h"
                         line="117"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-iface.c"
               line="694">Whether serialization succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="688">an object that implements the #GimpConfigInterface.</doc>
            <type name="Config" c:type="GimpConfig*"/>
          </instance-parameter>
          <parameter name="writer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="689">the #GimpConfigWriter to use.</doc>
            <type name="ConfigWriter" c:type="GimpConfigWriter*"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="690">client data</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="serialize_changed_properties"
              c:identifier="gimp_config_serialize_changed_properties"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-serialize.c"
             line="101">This function writes all object properties that have been changed from
their default values to the @writer.</doc>
        <source-position filename="libgimpconfig/gimpconfig-serialize.h"
                         line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-serialize.c"
               line="109">%TRUE if serialization succeeded, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-serialize.c"
                 line="103">a #GimpConfig.</doc>
            <type name="Config" c:type="GimpConfig*"/>
          </instance-parameter>
          <parameter name="writer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-serialize.c"
                 line="104">a #GimpConfigWriter.</doc>
            <type name="ConfigWriter" c:type="GimpConfigWriter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="serialize_properties"
              c:identifier="gimp_config_serialize_properties"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-serialize.c"
             line="52">This function writes all object properties to the @writer.</doc>
        <source-position filename="libgimpconfig/gimpconfig-serialize.h"
                         line="34"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-serialize.c"
               line="59">%TRUE if serialization succeeded, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-serialize.c"
                 line="54">a #GimpConfig.</doc>
            <type name="Config" c:type="GimpConfig*"/>
          </instance-parameter>
          <parameter name="writer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-serialize.c"
                 line="55">a #GimpConfigWriter.</doc>
            <type name="ConfigWriter" c:type="GimpConfigWriter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="serialize_property"
              c:identifier="gimp_config_serialize_property"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-serialize.c"
             line="160">This function serializes a single object property to the @writer.</doc>
        <source-position filename="libgimpconfig/gimpconfig-serialize.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-serialize.c"
               line="168">%TRUE if serialization succeeded, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-serialize.c"
                 line="162">a #GimpConfig.</doc>
            <type name="Config" c:type="GimpConfig*"/>
          </instance-parameter>
          <parameter name="param_spec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-serialize.c"
                 line="163">a #GParamSpec.</doc>
            <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
          </parameter>
          <parameter name="writer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-serialize.c"
                 line="164">a #GimpConfigWriter.</doc>
            <type name="ConfigWriter" c:type="GimpConfigWriter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="serialize_property_by_name"
              c:identifier="gimp_config_serialize_property_by_name"
              version="2.6">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-serialize.c"
             line="469">This function serializes a single object property to the @writer.</doc>
        <source-position filename="libgimpconfig/gimpconfig-serialize.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-serialize.c"
               line="477">%TRUE if serialization succeeded, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-serialize.c"
                 line="471">a #GimpConfig.</doc>
            <type name="Config" c:type="GimpConfig*"/>
          </instance-parameter>
          <parameter name="prop_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-serialize.c"
                 line="472">the property's name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="writer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-serialize.c"
                 line="473">a #GimpConfigWriter.</doc>
            <type name="ConfigWriter" c:type="GimpConfigWriter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="serialize_to_fd"
              c:identifier="gimp_config_serialize_to_fd"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-iface.c"
             line="353">Serializes the object properties of @config to the given file
descriptor.</doc>
        <source-position filename="libgimpconfig/gimpconfig-iface.h"
                         line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-iface.c"
               line="362">%TRUE if serialization succeeded, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="355">an object that implements [iface@ConfigInterface].</doc>
            <type name="Config" c:type="GimpConfig*"/>
          </instance-parameter>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="356">a file descriptor, opened for writing</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="357">user data passed to the serialize implementation.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="serialize_to_file"
              c:identifier="gimp_config_serialize_to_file"
              version="2.10"
              throws="1">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-iface.c"
             line="273">Serializes the object properties of @config to the file specified
by @file. If a file with that name already exists, it is
overwritten. Basically this function opens @file for you and calls
the serialize function of the @config's [iface@ConfigInterface].</doc>
        <source-position filename="libgimpconfig/gimpconfig-iface.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-iface.c"
               line="287">%TRUE if serialization succeeded, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="275">an object that implements [iface@ConfigInterface].</doc>
            <type name="Config" c:type="GimpConfig*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="276">the file to write the configuration to.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="header"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="277">optional file header (must be ASCII only)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="footer"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="278">optional file footer (must be ASCII only)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="279">user data passed to the serialize implementation.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="serialize_to_parasite"
              c:identifier="gimp_config_serialize_to_parasite"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-iface.c"
             line="415">Serializes the object properties of @config to a [struct@Parasite].</doc>
        <source-position filename="libgimpconfig/gimpconfig-iface.h"
                         line="90"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-iface.c"
               line="424">the newly allocated parasite.</doc>
          <type name="Parasite" c:type="GimpParasite*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="417">an object that implements the [iface@ConfigInterface].</doc>
            <type name="Config" c:type="GimpConfig*"/>
          </instance-parameter>
          <parameter name="parasite_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="418">the new parasite's name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="parasite_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="419">the new parasite's flags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="420">user data passed to the serialize implementation.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="serialize_to_stream"
              c:identifier="gimp_config_serialize_to_stream"
              version="2.10"
              throws="1">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-iface.c"
             line="314">Serializes the object properties of @config to the stream specified
by @output.</doc>
        <source-position filename="libgimpconfig/gimpconfig-iface.h"
                         line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-iface.c"
               line="326">Whether serialization succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="316">an object that implements [iface@ConfigInterface].</doc>
            <type name="Config" c:type="GimpConfig*"/>
          </instance-parameter>
          <parameter name="output" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="317">the #GOutputStream to write the configuration to.</doc>
            <type name="Gio.OutputStream" c:type="GOutputStream*"/>
          </parameter>
          <parameter name="header"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="318">optional file header (must be ASCII only)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="footer"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="319">optional file footer (must be ASCII only)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="320">user data passed to the serialize implementation.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="serialize_to_string"
              c:identifier="gimp_config_serialize_to_string"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-iface.c"
             line="385">Serializes the object properties of @config to a string.</doc>
        <source-position filename="libgimpconfig/gimpconfig-iface.h"
                         line="87"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-iface.c"
               line="392">a newly allocated NUL-terminated string.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="387">an object that implements the [iface@ConfigInterface].</doc>
            <type name="Config" c:type="GimpConfig*"/>
          </instance-parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="388">user data passed to the serialize implementation.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="ConfigError"
                 c:type="GimpConfigError"
                 glib:error-domain="gimp-config-error-quark">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-error.h"
           line="33">The possible values of a #GError thrown by libgimpconfig.</doc>
      <source-position filename="libgimpconfig/gimpconfig-error.h" line="50"/>
      <member name="open" value="0" c:identifier="GIMP_CONFIG_ERROR_OPEN">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-error.h"
             line="35">open failed</doc>
      </member>
      <member name="open_enoent"
              value="1"
              c:identifier="GIMP_CONFIG_ERROR_OPEN_ENOENT">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-error.h"
             line="36">file does not exist</doc>
      </member>
      <member name="write" value="2" c:identifier="GIMP_CONFIG_ERROR_WRITE">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-error.h"
             line="37">write failed</doc>
      </member>
      <member name="parse" value="3" c:identifier="GIMP_CONFIG_ERROR_PARSE">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-error.h"
             line="38">parser error</doc>
      </member>
      <member name="version"
              value="4"
              c:identifier="GIMP_CONFIG_ERROR_VERSION">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-error.h"
             line="39">parser failed due to version mismatch</doc>
      </member>
    </enumeration>
    <interface name="ConfigInterface"
               c:symbol-prefix="config"
               c:type="GimpConfigInterface"
               glib:type-name="GimpConfigInterface"
               glib:get-type="gimp_config_get_type">
      <function name="build_data_path"
                c:identifier="gimp_config_build_data_path"
                version="2.4">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-path.c"
             line="196">Creates a search path as it is used in the gimprc file.  The path
returned by gimp_config_build_data_path() includes a directory
below the user's gimp directory and one in the system-wide data
directory.

Note that you cannot use this path directly with gimp_path_parse().
As it is in the gimprc notation, you first need to expand and
recode it using gimp_config_path_expand().</doc>
        <source-position filename="libgimpconfig/gimpconfig-path.h"
                         line="101"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-path.c"
               line="209">a newly allocated string</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-path.c"
                 line="198">directory name (in UTF-8 encoding)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="build_plug_in_path"
                c:identifier="gimp_config_build_plug_in_path"
                version="2.4">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-path.c"
             line="229">Creates a search path as it is used in the gimprc file.  The path
returned by gimp_config_build_plug_in_path() includes a directory
below the user's gimp directory and one in the system-wide plug-in
directory.

Note that you cannot use this path directly with gimp_path_parse().
As it is in the gimprc notation, you first need to expand and
recode it using gimp_config_path_expand().</doc>
        <source-position filename="libgimpconfig/gimpconfig-path.h"
                         line="103"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-path.c"
               line="242">a newly allocated string</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-path.c"
                 line="231">directory name (in UTF-8 encoding)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="build_system_path"
                c:identifier="gimp_config_build_system_path"
                version="2.10.6">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-path.c"
             line="277">Creates a search path as it is used in the gimprc file.  The path
returned by gimp_config_build_system_path() is just the read-only
parts of the search path constructed by gimp_config_build_plug_in_path().

Note that you cannot use this path directly with gimp_path_parse().
As it is in the gimprc notation, you first need to expand and
recode it using gimp_config_path_expand().</doc>
        <source-position filename="libgimpconfig/gimpconfig-path.h"
                         line="104"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-path.c"
               line="289">a newly allocated string</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-path.c"
                 line="279">directory name (in UTF-8 encoding)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="build_writable_path"
                c:identifier="gimp_config_build_writable_path"
                version="2.4">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-path.c"
             line="255">Creates a search path as it is used in the gimprc file.  The path
returned by gimp_config_build_writable_path() is just the writable
parts of the search path constructed by gimp_config_build_data_path().

Note that you cannot use this path directly with gimp_path_parse().
As it is in the gimprc notation, you first need to expand and
recode it using gimp_config_path_expand().</doc>
        <source-position filename="libgimpconfig/gimpconfig-path.h"
                         line="102"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-path.c"
               line="267">a newly allocated string</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-path.c"
                 line="257">directory name (in UTF-8 encoding)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="deserialize_return"
                c:identifier="gimp_config_deserialize_return"
                version="2.4">
        <source-position filename="libgimpconfig/gimpconfig-iface.h"
                         line="113"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="scanner" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="641">a #GScanner</doc>
            <type name="GLib.Scanner" c:type="GScanner*"/>
          </parameter>
          <parameter name="expected_token" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="642">the expected token</doc>
            <type name="GLib.TokenType" c:type="GTokenType"/>
          </parameter>
          <parameter name="nest_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-iface.c"
                 line="643">the nest level</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="deserialize_strv"
                c:identifier="gimp_config_deserialize_strv"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-array.c"
             line="82">Sets @value to new #GStrv.
Scans i.e. consumes serialization to fill the GStrv.

Requires @value to be initialized to hold type #G_TYPE_BOXED.</doc>
        <source-position filename="libgimpconfig/gimpconfig-array.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-array.c"
               line="92">G_TOKEN_RIGHT_PAREN on success.
G_TOKEN_INT on failure to scan length.
G_TOKEN_STRING on failure to scan enough quoted strings.

On failure, the value in @value is not touched and could be NULL.</doc>
          <type name="GLib.TokenType" c:type="GTokenType"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-array.c"
                 line="84">destination #GValue to hold a #GStrv</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
          <parameter name="scanner" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-array.c"
                 line="85">#GScanner positioned in serialization stream</doc>
            <type name="GLib.Scanner" c:type="GScanner*"/>
          </parameter>
        </parameters>
      </function>
      <function name="diff" c:identifier="gimp_config_diff" version="2.4">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-utils.c"
             line="161">Compares all properties of @a and @b that have all @flags set. If
@flags is 0, all properties are compared.

If the two objects are not of the same type, only properties that
exist in both object classes and are of the same value_type are
compared.</doc>
        <source-position filename="libgimpconfig/gimpconfig-utils.h"
                         line="34"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-utils.c"
               line="174">a GList of differing GParamSpecs.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="GObject.ParamSpec"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-utils.c"
                 line="163">a #GObject</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-utils.c"
                 line="164">another #GObject object</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-utils.c"
                 line="165">a mask of GParamFlags</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </function>
      <function name="error_quark"
                c:identifier="gimp_config_error_quark"
                version="2.4">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-error.c"
             line="38">This function is never called directly. Use GIMP_CONFIG_ERROR() instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-error.c"
               line="43">the #GQuark that defines the GimpConfig error domain.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="param_spec_duplicate"
                c:identifier="gimp_config_param_spec_duplicate"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-params.c"
             line="60">Creates an exact copy of @pspec, with all its properties, returns
%NULL if @pspec is of an unknown type that can't be duplicated.</doc>
        <source-position filename="libgimpconfig/gimpconfig-params.h"
                         line="229"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-params.c"
               line="67">The new #GParamSpec, or %NULL.</doc>
          <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
        </return-value>
        <parameters>
          <parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-params.c"
                 line="62">the #GParamSpec to duplicate</doc>
            <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </function>
      <function name="reset_properties"
                c:identifier="gimp_config_reset_properties"
                version="2.4">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-utils.c"
             line="265">Resets all writable properties of @object to the default values as
defined in their #GParamSpec. Properties marked as "construct-only"
are not touched.

If you want to reset a #GimpConfig object, please use gimp_config_reset().</doc>
        <source-position filename="libgimpconfig/gimpconfig-utils.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-utils.c"
                 line="267">a #GObject</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </function>
      <function name="reset_property"
                c:identifier="gimp_config_reset_property"
                version="2.4">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-utils.c"
             line="351">Resets the property named @property_name to its default value.  The
property must be writable and must not be marked as "construct-only".</doc>
        <source-position filename="libgimpconfig/gimpconfig-utils.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-utils.c"
                 line="353">a #GObject</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-utils.c"
                 line="354">name of the property to reset</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="serialize_strv"
                c:identifier="gimp_config_serialize_strv"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-array.c"
             line="36">Appends a string repr of the #GStrv value of #GValue to @str.
Repr is an integer literal greater than or equal to zero,
followed by a possibly empty sequence
of quoted and escaped string literals.</doc>
        <source-position filename="libgimpconfig/gimpconfig-array.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-array.c"
               line="46">%TRUE always</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-array.c"
                 line="38">source #GValue holding a #GStrv</doc>
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-array.c"
                 line="39">destination string</doc>
            <type name="GLib.String" c:type="GString*"/>
          </parameter>
        </parameters>
      </function>
      <function name="serialize_value"
                c:identifier="gimp_config_serialize_value"
                version="2.4">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-serialize.c"
             line="497">This utility function appends a string representation of #GValue to @str.</doc>
        <source-position filename="libgimpconfig/gimpconfig-serialize.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-serialize.c"
               line="505">%TRUE if serialization succeeded, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-serialize.c"
                 line="499">a #GValue.</doc>
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-serialize.c"
                 line="500">a #GString.</doc>
            <type name="GLib.String" c:type="GString*"/>
          </parameter>
          <parameter name="escaped" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-serialize.c"
                 line="501">whether to escape string values.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="string_append_escaped"
                c:identifier="gimp_config_string_append_escaped"
                version="2.4">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-utils.c"
             line="416">Escapes and quotes @val and appends it to @string. The escape
algorithm is different from the one used by g_strescape() since it
leaves non-ASCII characters intact and thus preserves UTF-8
strings. Only control characters and quotes are being escaped.</doc>
        <source-position filename="libgimpconfig/gimpconfig-utils.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-utils.c"
                 line="418">pointer to a #GString</doc>
            <type name="GLib.String" c:type="GString*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-utils.c"
                 line="419">a string to append or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="sync" c:identifier="gimp_config_sync" version="2.4">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-utils.c"
             line="196">Compares all read- and write-able properties from @src and @dest
that have all @flags set. Differing values are then copied from
@src to @dest. If @flags is 0, all differing read/write properties.

Properties marked as "construct-only" are not touched.

If the two objects are not of the same type, only properties that
exist in both object classes and are of the same value_type are
synchronized</doc>
        <source-position filename="libgimpconfig/gimpconfig-utils.h"
                         line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-utils.c"
               line="212">%TRUE if @dest was modified, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-utils.c"
                 line="198">a #GObject</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-utils.c"
                 line="199">another #GObject</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-utils.c"
                 line="200">a mask of GParamFlags</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </function>
      <function name="type_register"
                c:identifier="gimp_config_type_register"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-register.c"
             line="55">This function is a fancy wrapper around g_type_register_static().
It creates a new object type as subclass of @parent_type, installs
@pspecs on it and makes the new type implement the #GimpConfig
interface.</doc>
        <source-position filename="libgimpconfig/gimpconfig-register.h"
                         line="34"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-register.c"
               line="67">the newly registered #GType</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <parameter name="parent_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-register.c"
                 line="57">type from which this type will be derived</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="type_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-register.c"
                 line="58">string used as the name of the new type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="pspecs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-register.c"
                 line="59">array of #GParamSpec to install as properties on the new type</doc>
            <array length="3" zero-terminated="0" c:type="GParamSpec**">
              <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
            </array>
          </parameter>
          <parameter name="n_pspecs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-register.c"
                 line="60">the number of param specs in @pspecs</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
    </interface>
    <class name="ConfigPath"
           c:symbol-prefix="config_path"
           glib:type-name="GimpConfigPath"
           glib:get-type="gimp_config_path_get_type"
           glib:fundamental="1">
      <function name="expand"
                c:identifier="gimp_config_path_expand"
                version="2.4"
                throws="1">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-path.c"
             line="299">Paths as stored in gimprc and other config files have to be treated
special.  The string may contain special identifiers such as for
example ${gimp_dir} that have to be substituted before use. Also
the user's filesystem may be in a different encoding than UTF-8
(which is what is used for the gimprc). This function does the
variable substitution for you and can also attempt to convert to
the filesystem encoding.

To reverse the expansion, use gimp_config_path_unexpand().</doc>
        <source-position filename="libgimpconfig/gimpconfig-path.h" line="86"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-path.c"
               line="315">a newly allocated NUL-terminated string</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-path.c"
                 line="301">a NUL-terminated string in UTF-8 encoding</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="recode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-path.c"
                 line="302">whether to convert to the filesystem's encoding</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="expand_to_files"
                c:identifier="gimp_config_path_expand_to_files"
                version="2.10"
                throws="1">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-path.c"
             line="345">Paths as stored in the gimprc have to be treated special. The
string may contain special identifiers such as for example
${gimp_dir} that have to be substituted before use. Also the user's
filesystem may be in a different encoding than UTF-8 (which is what
is used for the gimprc).

This function runs @path through gimp_config_path_expand() and
gimp_path_parse(), then turns the filenames returned by
gimp_path_parse() into GFile using g_file_new_for_path().</doc>
        <source-position filename="libgimpconfig/gimpconfig-path.h" line="89"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-path.c"
               line="360">
                 a #GList of newly allocated #GFile objects.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Gio.File"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-path.c"
                 line="347">a NUL-terminated string in UTF-8 encoding</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="unexpand"
                c:identifier="gimp_config_path_unexpand"
                version="2.10"
                throws="1">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-path.c"
             line="396">The inverse operation of gimp_config_path_expand()

This function takes a @path and tries to substitute the first
elements by well-known special identifiers such as for example
${gimp_dir}. The unexpanded path can then be stored in gimprc and
other config files.

If @recode is %TRUE then @path is in local filesystem encoding,
if @recode is %FALSE then @path is assumed to be UTF-8.</doc>
        <source-position filename="libgimpconfig/gimpconfig-path.h" line="92"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-path.c"
               line="412">a newly allocated NUL-terminated UTF-8 string</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-path.c"
                 line="398">a NUL-terminated string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="recode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfig-path.c"
                 line="399">whether @path is in filesystem encoding or UTF-8</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
    </class>
    <enumeration name="ConfigPathType" c:type="GimpConfigPathType">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-path.h"
           line="49">Types of config paths.</doc>
      <source-position filename="libgimpconfig/gimpconfig-path.h" line="64"/>
      <member name="file" value="0" c:identifier="GIMP_CONFIG_PATH_FILE">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-path.h"
             line="51">A single file</doc>
      </member>
      <member name="file_list"
              value="1"
              c:identifier="GIMP_CONFIG_PATH_FILE_LIST">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-path.h"
             line="52">A list of files</doc>
      </member>
      <member name="dir" value="2" c:identifier="GIMP_CONFIG_PATH_DIR">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-path.h"
             line="53">A single folder</doc>
      </member>
      <member name="dir_list"
              value="3"
              c:identifier="GIMP_CONFIG_PATH_DIR_LIST">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-path.h"
             line="54">A list of folders</doc>
      </member>
    </enumeration>
    <record name="ConfigWriter"
            c:type="GimpConfigWriter"
            opaque="1"
            glib:type-name="GimpConfigWriter"
            glib:get-type="gimp_config_writer_get_type"
            c:symbol-prefix="config_writer">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfigwriter.c"
           line="47">Functions for writing config info to a file for libgimpconfig.</doc>
      <source-position filename="libgimpconfig/gimpconfigtypes.h" line="30"/>
      <constructor name="new_from_fd"
                   c:identifier="gimp_config_writer_new_from_fd"
                   version="2.4">
        <source-position filename="libgimpconfig/gimpconfigwriter.h"
                         line="50"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfigwriter.c"
               line="241">a new #GimpConfigWriter or %NULL in case of an error</doc>
          <type name="ConfigWriter" c:type="GimpConfigWriter*"/>
        </return-value>
        <parameters>
          <parameter name="fd" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_file"
                   c:identifier="gimp_config_writer_new_from_file"
                   version="2.10"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfigwriter.c"
             line="119">Creates a new #GimpConfigWriter and sets it up to write to
@file. If @atomic is %TRUE, a temporary file is used to avoid
possible race conditions. The temporary file is then moved to @file
when the writer is closed.</doc>
        <source-position filename="libgimpconfig/gimpconfigwriter.h"
                         line="43"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfigwriter.c"
               line="131">a new #GimpConfigWriter or %NULL in case of an error</doc>
          <type name="ConfigWriter" c:type="GimpConfigWriter*"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfigwriter.c"
                 line="121">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="atomic" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfigwriter.c"
                 line="122">if %TRUE the file is written atomically</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="header" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfigwriter.c"
                 line="123">text to include as comment at the top of the file</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_stream"
                   c:identifier="gimp_config_writer_new_from_stream"
                   version="2.10"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfigwriter.c"
             line="199">Creates a new #GimpConfigWriter and sets it up to write to
@output.</doc>
        <source-position filename="libgimpconfig/gimpconfigwriter.h"
                         line="47"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfigwriter.c"
               line="208">a new #GimpConfigWriter or %NULL in case of an error</doc>
          <type name="ConfigWriter" c:type="GimpConfigWriter*"/>
        </return-value>
        <parameters>
          <parameter name="output" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfigwriter.c"
                 line="201">a #GOutputStream</doc>
            <type name="Gio.OutputStream" c:type="GOutputStream*"/>
          </parameter>
          <parameter name="header" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfigwriter.c"
                 line="202">text to include as comment at the top of the file</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_string"
                   c:identifier="gimp_config_writer_new_from_string"
                   version="2.4">
        <source-position filename="libgimpconfig/gimpconfigwriter.h"
                         line="51"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfigwriter.c"
               line="271">a new #GimpConfigWriter or %NULL in case of an error</doc>
          <type name="ConfigWriter" c:type="GimpConfigWriter*"/>
        </return-value>
        <parameters>
          <parameter name="string" transfer-ownership="none">
            <type name="GLib.String" c:type="GString*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="close"
              c:identifier="gimp_config_writer_close"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfigwriter.c"
             line="608">Closes an element opened with gimp_config_writer_open().</doc>
        <source-position filename="libgimpconfig/gimpconfigwriter.h"
                         line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="writer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfigwriter.c"
                 line="610">a #GimpConfigWriter</doc>
            <type name="ConfigWriter" c:type="GimpConfigWriter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="comment"
              c:identifier="gimp_config_writer_comment"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfigwriter.c"
             line="740">Appends the @comment to @str and inserts linebreaks and hash-marks to
format it as a comment. Note that this function does not handle non-ASCII
characters.</doc>
        <source-position filename="libgimpconfig/gimpconfigwriter.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="writer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfigwriter.c"
                 line="742">a #GimpConfigWriter</doc>
            <type name="ConfigWriter" c:type="GimpConfigWriter*"/>
          </instance-parameter>
          <parameter name="comment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfigwriter.c"
                 line="743">the comment to write (ASCII only)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="comment_mode"
              c:identifier="gimp_config_writer_comment_mode"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfigwriter.c"
             line="351">This function toggles whether the @writer should create commented
or uncommented output. This feature is used to generate the
system-wide installed gimprc that documents the default settings.

Since comments have to start at the beginning of a line, this
function will insert a newline if necessary.</doc>
        <source-position filename="libgimpconfig/gimpconfigwriter.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="writer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfigwriter.c"
                 line="353">a #GimpConfigWriter</doc>
            <type name="ConfigWriter" c:type="GimpConfigWriter*"/>
          </instance-parameter>
          <parameter name="enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfigwriter.c"
                 line="354">%TRUE to enable comment mode, %FALSE to disable it</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="data" c:identifier="gimp_config_writer_data" version="2.4">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfigwriter.c"
             line="542">Writes data to @writer.</doc>
        <source-position filename="libgimpconfig/gimpconfigwriter.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="writer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfigwriter.c"
                 line="544">a #GimpConfigWriter</doc>
            <type name="ConfigWriter" c:type="GimpConfigWriter*"/>
          </instance-parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfigwriter.c"
                 line="545">The size of @data</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfigwriter.c"
                 line="546">The data to write</doc>
            <array length="0" zero-terminated="0" c:type="const guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="finish"
              c:identifier="gimp_config_writer_finish"
              version="2.4"
              throws="1">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfigwriter.c"
             line="637">This function finishes the work of @writer and unrefs it
afterwards.  It closes all open elements, appends an optional
comment and releases all resources allocated by @writer.

Using any function except gimp_config_writer_ref() or
gimp_config_writer_unref() after this function is forbidden
and will trigger warnings.</doc>
        <source-position filename="libgimpconfig/gimpconfigwriter.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfigwriter.c"
               line="651">%TRUE if everything could be successfully written,
         %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="writer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfigwriter.c"
                 line="639">a #GimpConfigWriter</doc>
            <type name="ConfigWriter" c:type="GimpConfigWriter*"/>
          </instance-parameter>
          <parameter name="footer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfigwriter.c"
                 line="640">text to include as comment at the bottom of the file</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="identifier"
              c:identifier="gimp_config_writer_identifier"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfigwriter.c"
             line="517">Writes an identifier to @writer. The @string is *not* quoted and special
characters are *not* escaped.</doc>
        <source-position filename="libgimpconfig/gimpconfigwriter.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="writer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfigwriter.c"
                 line="519">a #GimpConfigWriter</doc>
            <type name="ConfigWriter" c:type="GimpConfigWriter*"/>
          </instance-parameter>
          <parameter name="identifier" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfigwriter.c"
                 line="520">a NUL-terminated string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="linefeed" c:identifier="gimp_config_writer_linefeed">
        <source-position filename="libgimpconfig/gimpconfigwriter.h"
                         line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="writer" transfer-ownership="none">
            <type name="ConfigWriter" c:type="GimpConfigWriter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="open" c:identifier="gimp_config_writer_open" version="2.4">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfigwriter.c"
             line="392">This function writes the opening parenthesis followed by @name.
It also increases the indentation level and sets a mark that
can be used by gimp_config_writer_revert().</doc>
        <source-position filename="libgimpconfig/gimpconfigwriter.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="writer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfigwriter.c"
                 line="394">a #GimpConfigWriter</doc>
            <type name="ConfigWriter" c:type="GimpConfigWriter*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfigwriter.c"
                 line="395">name of the element to open</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="print"
              c:identifier="gimp_config_writer_print"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfigwriter.c"
             line="425">Appends a space followed by @string to the @writer. Note that string
must not contain any special characters that might need to be escaped.</doc>
        <source-position filename="libgimpconfig/gimpconfigwriter.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="writer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfigwriter.c"
                 line="427">a #GimpConfigWriter</doc>
            <type name="ConfigWriter" c:type="GimpConfigWriter*"/>
          </instance-parameter>
          <parameter name="string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfigwriter.c"
                 line="428">a string to write</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfigwriter.c"
                 line="429">number of bytes from @string or -1 if @string is NUL-terminated.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="printf"
              c:identifier="gimp_config_writer_printf"
              version="2.4"
              introspectable="0">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfigwriter.c"
             line="458">A printf-like function for #GimpConfigWriter.</doc>
        <source-position filename="libgimpconfig/gimpconfigwriter.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="writer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfigwriter.c"
                 line="460">a #GimpConfigWriter</doc>
            <type name="ConfigWriter" c:type="GimpConfigWriter*"/>
          </instance-parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfigwriter.c"
                 line="461">a format string as described for g_strdup_printf().</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfigwriter.c"
                 line="462">list of arguments according to @format</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="gimp_config_writer_ref" version="3.0">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfigwriter.c"
             line="290">Adds a reference to a #GimpConfigWriter.</doc>
        <source-position filename="libgimpconfig/gimpconfigwriter.h"
                         line="53"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfigwriter.c"
               line="296">the same @writer.</doc>
          <type name="ConfigWriter" c:type="GimpConfigWriter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="writer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfigwriter.c"
                 line="292">#GimpConfigWriter to ref</doc>
            <type name="ConfigWriter" c:type="GimpConfigWriter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="revert"
              c:identifier="gimp_config_writer_revert"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfigwriter.c"
             line="580">Reverts all changes to @writer that were done since the last call
to gimp_config_writer_open(). This can only work if you didn't call
gimp_config_writer_close() yet.</doc>
        <source-position filename="libgimpconfig/gimpconfigwriter.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="writer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfigwriter.c"
                 line="582">a #GimpConfigWriter</doc>
            <type name="ConfigWriter" c:type="GimpConfigWriter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="string"
              c:identifier="gimp_config_writer_string"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfigwriter.c"
             line="493">Writes a string value to @writer. The @string is quoted and special
characters are escaped.</doc>
        <source-position filename="libgimpconfig/gimpconfigwriter.h"
                         line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="writer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfigwriter.c"
                 line="495">a #GimpConfigWriter</doc>
            <type name="ConfigWriter" c:type="GimpConfigWriter*"/>
          </instance-parameter>
          <parameter name="string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfigwriter.c"
                 line="496">a NUL-terminated string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref"
              c:identifier="gimp_config_writer_unref"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfigwriter.c"
             line="310">Unref a #GimpConfigWriter. If the reference count drops to zero, the
writer is freed.

Note that at least one of the references has to be dropped using
gimp_config_writer_finish().</doc>
        <source-position filename="libgimpconfig/gimpconfigwriter.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="writer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpconfigwriter.c"
                 line="312">#GimpConfigWriter to unref</doc>
            <type name="ConfigWriter" c:type="GimpConfigWriter*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="ConvertDitherType"
                 glib:type-name="GimpConvertDitherType"
                 glib:get-type="gimp_convert_dither_type_get_type"
                 c:type="GimpConvertDitherType">
      <doc xml:space="preserve"
           filename="libgimp/gimpenums.h"
           line="49">Extracted from app/core/core-enums.h</doc>
      <member name="none"
              value="0"
              c:identifier="GIMP_CONVERT_DITHER_NONE"
              glib:nick="none"
              glib:name="GIMP_CONVERT_DITHER_NONE">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="51">GIMP_CONVERT_DITHER_NONE</doc>
      </member>
      <member name="fs"
              value="1"
              c:identifier="GIMP_CONVERT_DITHER_FS"
              glib:nick="fs"
              glib:name="GIMP_CONVERT_DITHER_FS">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="52">GIMP_CONVERT_DITHER_FS</doc>
      </member>
      <member name="fs_lowbleed"
              value="2"
              c:identifier="GIMP_CONVERT_DITHER_FS_LOWBLEED"
              glib:nick="fs-lowbleed"
              glib:name="GIMP_CONVERT_DITHER_FS_LOWBLEED">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="53">GIMP_CONVERT_DITHER_FS_LOWBLEED</doc>
      </member>
      <member name="fixed"
              value="3"
              c:identifier="GIMP_CONVERT_DITHER_FIXED"
              glib:nick="fixed"
              glib:name="GIMP_CONVERT_DITHER_FIXED">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="54">GIMP_CONVERT_DITHER_FIXED</doc>
      </member>
    </enumeration>
    <enumeration name="ConvertPaletteType"
                 glib:type-name="GimpConvertPaletteType"
                 glib:get-type="gimp_convert_palette_type_get_type"
                 c:type="GimpConvertPaletteType">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="281">Types of palettes for indexed conversion.</doc>
      <member name="generate"
              value="0"
              c:identifier="GIMP_CONVERT_PALETTE_GENERATE"
              glib:nick="generate"
              glib:name="GIMP_CONVERT_PALETTE_GENERATE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="283">Generate optimum palette</doc>
      </member>
      <member name="web"
              value="1"
              c:identifier="GIMP_CONVERT_PALETTE_WEB"
              glib:nick="web"
              glib:name="GIMP_CONVERT_PALETTE_WEB">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="284">Use web-optimized palette</doc>
      </member>
      <member name="mono"
              value="2"
              c:identifier="GIMP_CONVERT_PALETTE_MONO"
              glib:nick="mono"
              glib:name="GIMP_CONVERT_PALETTE_MONO">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="285">Use black and white (1-bit) palette</doc>
      </member>
      <member name="custom"
              value="3"
              c:identifier="GIMP_CONVERT_PALETTE_CUSTOM"
              glib:nick="custom"
              glib:name="GIMP_CONVERT_PALETTE_CUSTOM">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="286">Use custom palette</doc>
      </member>
    </enumeration>
    <enumeration name="ConvolveType"
                 glib:type-name="GimpConvolveType"
                 glib:get-type="gimp_convolve_type_get_type"
                 c:type="GimpConvolveType">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="303">Types of convolutions.</doc>
      <member name="blur"
              value="0"
              c:identifier="GIMP_CONVOLVE_BLUR"
              glib:nick="blur"
              glib:name="GIMP_CONVOLVE_BLUR">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="305">Blur</doc>
      </member>
      <member name="sharpen"
              value="1"
              c:identifier="GIMP_CONVOLVE_SHARPEN"
              glib:nick="sharpen"
              glib:name="GIMP_CONVOLVE_SHARPEN">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="306">Sharpen</doc>
      </member>
    </enumeration>
    <enumeration name="CpuAccelFlags" c:type="GimpCpuAccelFlags">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpcpuaccel.h"
           line="29">Types of detectable CPU accelerations</doc>
      <source-position filename="libgimpbase/gimpcpuaccel.h" line="64"/>
      <member name="none" value="0" c:identifier="GIMP_CPU_ACCEL_NONE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpcpuaccel.h"
             line="31">None</doc>
      </member>
      <member name="x86_mmx"
              value="2147483648"
              c:identifier="GIMP_CPU_ACCEL_X86_MMX">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpcpuaccel.h"
             line="32">MMX</doc>
      </member>
      <member name="x86_3dnow"
              value="1073741824"
              c:identifier="GIMP_CPU_ACCEL_X86_3DNOW">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpcpuaccel.h"
             line="33">3dNow</doc>
      </member>
      <member name="x86_mmxext"
              value="536870912"
              c:identifier="GIMP_CPU_ACCEL_X86_MMXEXT">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpcpuaccel.h"
             line="34">MMXEXT</doc>
      </member>
      <member name="x86_sse"
              value="268435456"
              c:identifier="GIMP_CPU_ACCEL_X86_SSE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpcpuaccel.h"
             line="35">SSE</doc>
      </member>
      <member name="x86_sse2"
              value="134217728"
              c:identifier="GIMP_CPU_ACCEL_X86_SSE2">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpcpuaccel.h"
             line="36">SSE2</doc>
      </member>
      <member name="x86_sse3"
              value="33554432"
              c:identifier="GIMP_CPU_ACCEL_X86_SSE3">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpcpuaccel.h"
             line="37">SSE3</doc>
      </member>
      <member name="x86_ssse3"
              value="16777216"
              c:identifier="GIMP_CPU_ACCEL_X86_SSSE3">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpcpuaccel.h"
             line="38">SSSE3</doc>
      </member>
      <member name="x86_sse4_1"
              value="8388608"
              c:identifier="GIMP_CPU_ACCEL_X86_SSE4_1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpcpuaccel.h"
             line="39">SSE4_1</doc>
      </member>
      <member name="x86_sse4_2"
              value="4194304"
              c:identifier="GIMP_CPU_ACCEL_X86_SSE4_2">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpcpuaccel.h"
             line="40">SSE4_2</doc>
      </member>
      <member name="x86_avx"
              value="2097152"
              c:identifier="GIMP_CPU_ACCEL_X86_AVX">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpcpuaccel.h"
             line="41">AVX</doc>
      </member>
      <member name="ppc_altivec"
              value="67108864"
              c:identifier="GIMP_CPU_ACCEL_PPC_ALTIVEC">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpcpuaccel.h"
             line="42">Altivec</doc>
      </member>
    </enumeration>
    <function-macro name="DEPRECATED_FOR"
                    c:identifier="GIMP_DEPRECATED_FOR"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpbasetypes.h" line="38"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <enumeration name="DesaturateMode"
                 glib:type-name="GimpDesaturateMode"
                 glib:get-type="gimp_desaturate_mode_get_type"
                 c:type="GimpDesaturateMode">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="321">Grayscale conversion methods.</doc>
      <member name="lightness"
              value="0"
              c:identifier="GIMP_DESATURATE_LIGHTNESS"
              glib:nick="lightness"
              glib:name="GIMP_DESATURATE_LIGHTNESS">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="323">Lightness (HSL)</doc>
      </member>
      <member name="luma"
              value="1"
              c:identifier="GIMP_DESATURATE_LUMA"
              glib:nick="luma"
              glib:name="GIMP_DESATURATE_LUMA">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="324">Luma</doc>
      </member>
      <member name="average"
              value="2"
              c:identifier="GIMP_DESATURATE_AVERAGE"
              glib:nick="average"
              glib:name="GIMP_DESATURATE_AVERAGE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="325">Average (HSI Intensity)</doc>
      </member>
      <member name="luminance"
              value="3"
              c:identifier="GIMP_DESATURATE_LUMINANCE"
              glib:nick="luminance"
              glib:name="GIMP_DESATURATE_LUMINANCE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="326">Luminance</doc>
      </member>
      <member name="value"
              value="4"
              c:identifier="GIMP_DESATURATE_VALUE"
              glib:nick="value"
              glib:name="GIMP_DESATURATE_VALUE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="327">Value (HSV)</doc>
      </member>
    </enumeration>
    <class name="Display"
           c:symbol-prefix="display"
           c:type="GimpDisplay"
           parent="GObject.Object"
           glib:type-name="GimpDisplay"
           glib:get-type="gimp_display_get_type"
           glib:type-struct="DisplayClass">
      <doc xml:space="preserve"
           filename="libgimp/gimpdisplay_pdb.c"
           line="30">Functions to create, delete and flush displays (views) on an image.</doc>
      <source-position filename="libgimp/gimpdisplay.h" line="36"/>
      <constructor name="new" c:identifier="gimp_display_new">
        <doc xml:space="preserve"
             filename="libgimp/gimpdisplay_pdb.c"
             line="80">Create a new display for the specified image.

Creates a new display for the specified image. If the image already
has a display, another is added. Multiple displays are handled
transparently by GIMP. The newly created display is returned and can
be subsequently destroyed with a call to gimp_display_delete(). This
procedure only makes sense for use with the GIMP UI, and will result
in an execution error if called when GIMP has no UI.</doc>
        <source-position filename="libgimp/gimpdisplay_pdb.h" line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdisplay_pdb.c"
               line="93">The new display.</doc>
          <type name="Display" c:type="GimpDisplay*"/>
        </return-value>
        <parameters>
          <parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdisplay_pdb.c"
                 line="82">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_by_id"
                c:identifier="gimp_display_get_by_id"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpdisplay.c"
             line="147">Returns a #GimpDisplay representing @display_id.

Note: in most use cases, you should not need to retrieve a
#GimpDisplay by its ID, which is mostly internal data and not
reusable across sessions. Use the appropriate functions for your use
case instead.</doc>
        <source-position filename="libgimp/gimpdisplay.h" line="40"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgimp/gimpdisplay.c"
               line="158">a #GimpDisplay for @display_id or
         %NULL if @display_id does not represent a valid display.
         The object belongs to libgimp and you must not modify or
         unref it.</doc>
          <type name="Display" c:type="GimpDisplay*"/>
        </return-value>
        <parameters>
          <parameter name="display_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdisplay.c"
                 line="149">The display id.</doc>
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </function>
      <function name="id_is_valid"
                c:identifier="gimp_display_id_is_valid"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpdisplay_pdb.c"
             line="39">Returns TRUE if the display ID is valid.

This procedure checks if the given display ID is valid and refers to
an existing display.

*Note*: in most use cases, you should not use this function. If you
got a [class@Gimp.Display] from the API, you should trust it is
valid. This function is mostly for internal usage.</doc>
        <source-position filename="libgimp/gimpdisplay_pdb.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdisplay_pdb.c"
               line="52">Whether the display ID is valid.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="display_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdisplay_pdb.c"
                 line="41">The display ID to check.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="name" c:identifier="gimp_display_name">
        <doc xml:space="preserve"
             filename="libgimp/gimp.c"
             line="853">Returns the display to be used for plug-in windows.

This is a constant value given at plug-in configuration time.
Will return %NULL if GIMP has been started with no GUI, either
via "--no-interface" flag, or a console build.</doc>
        <source-position filename="libgimp/gimp.h" line="194"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimp.c"
               line="862">the display name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
      </function>
      <method name="delete" c:identifier="gimp_display_delete">
        <doc xml:space="preserve"
             filename="libgimp/gimpdisplay_pdb.c"
             line="119">Delete the specified display.

This procedure removes the specified display. If this is the last
remaining display for the underlying image, then the image is
deleted also. Note that the display is closed no matter if the image
is dirty or not. Better save the image before calling this
procedure.</doc>
        <source-position filename="libgimp/gimpdisplay_pdb.h" line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdisplay_pdb.c"
               line="131">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdisplay_pdb.c"
                 line="121">The display to delete.</doc>
            <type name="Display" c:type="GimpDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="gimp_display_get_id"
              glib:get-property="id"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpdisplay.c"
             line="130">Note: in most use cases, you should not need a display's ID which is
mostly internal data and not reusable across sessions.</doc>
        <source-position filename="libgimp/gimpdisplay.h" line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdisplay.c"
               line="137">the display ID.</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdisplay.c"
                 line="132">The display.</doc>
            <type name="Display" c:type="GimpDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_window_handle"
              c:identifier="gimp_display_get_window_handle"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpdisplay_pdb.c"
             line="156">Get a handle to the native window for an image display.

This procedure returns a handle to the native window for a given
image display.
It can be different types of data depending on the platform you are
running on. For example in the X backend of GDK, a native window
handle is an Xlib XID whereas on Wayland, it is a string handle. A
value of NULL is returned for an invalid display or if this function
is unimplemented for the windowing system that is being used.</doc>
        <source-position filename="libgimp/gimpdisplay_pdb.h" line="38"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpdisplay_pdb.c"
               line="170">The native window handle or NULL.</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdisplay_pdb.c"
                 line="158">The display to get the window handle from.</doc>
            <type name="Display" c:type="GimpDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_valid"
              c:identifier="gimp_display_is_valid"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpdisplay.c"
             line="178">Returns TRUE if the display is valid.

This procedure checks if the given display is valid and refers to
an existing display.</doc>
        <source-position filename="libgimp/gimpdisplay.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdisplay.c"
               line="187">Whether the display is valid.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdisplay.c"
                 line="180">The display to check.</doc>
            <type name="Display" c:type="GimpDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="present" c:identifier="gimp_display_present" version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpdisplay_pdb.c"
             line="198">Present the specified display.

This procedure presents the specified display at the top of the
display stack.</doc>
        <source-position filename="libgimp/gimpdisplay_pdb.h" line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdisplay_pdb.c"
               line="207">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdisplay_pdb.c"
                 line="200">The display to present.</doc>
            <type name="Display" c:type="GimpDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_id"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
    </class>
    <record name="DisplayClass"
            c:type="GimpDisplayClass"
            glib:is-gtype-struct-for="Display">
      <source-position filename="libgimp/gimpdisplay.h" line="36"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="DodgeBurnType"
                 glib:type-name="GimpDodgeBurnType"
                 glib:get-type="gimp_dodge_burn_type_get_type"
                 c:type="GimpDodgeBurnType">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="345">Methods for the dodge/burn operation.</doc>
      <member name="dodge"
              value="0"
              c:identifier="GIMP_DODGE_BURN_TYPE_DODGE"
              glib:nick="dodge"
              glib:name="GIMP_DODGE_BURN_TYPE_DODGE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="347">Dodge</doc>
      </member>
      <member name="burn"
              value="1"
              c:identifier="GIMP_DODGE_BURN_TYPE_BURN"
              glib:nick="burn"
              glib:name="GIMP_DODGE_BURN_TYPE_BURN">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="348">Burn</doc>
      </member>
    </enumeration>
    <class name="Drawable"
           c:symbol-prefix="drawable"
           c:type="GimpDrawable"
           parent="Item"
           abstract="1"
           glib:type-name="GimpDrawable"
           glib:get-type="gimp_drawable_get_type"
           glib:type-struct="DrawableClass">
      <doc xml:space="preserve"
           filename="libgimp/gimpdrawable_pdb.c"
           line="30">Functions to manipulate drawables.</doc>
      <source-position filename="libgimp/gimpdrawable.h" line="54"/>
      <function name="get_by_id"
                c:identifier="gimp_drawable_get_by_id"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawable.c"
             line="47">Returns a #GimpDrawable representing @drawable_id. This function
calls gimp_item_get_by_id() and returns the item if it is drawable
or %NULL otherwise.</doc>
        <source-position filename="libgimp/gimpdrawable.h" line="57"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawable.c"
               line="55">a #GimpDrawable for
         @drawable_id or %NULL if @drawable_id does not represent a
         valid drawable. The object belongs to libgimp and you must
         not modify or unref it.</doc>
          <type name="Drawable" c:type="GimpDrawable*"/>
        </return-value>
        <parameters>
          <parameter name="drawable_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="49">The drawable id.</doc>
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </function>
      <method name="brightness_contrast"
              c:identifier="gimp_drawable_brightness_contrast"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawablecolor_pdb.c"
             line="40">Modify brightness/contrast in the specified drawable.

This procedures allows the brightness and contrast of the specified
drawable to be modified. Both 'brightness' and 'contrast' parameters
are defined between -1.0 and 1.0.</doc>
        <source-position filename="libgimp/gimpdrawablecolor_pdb.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawablecolor_pdb.c"
               line="52">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="42">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="brightness" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="43">Brightness adjustment.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="contrast" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="44">Contrast adjustment.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="color_balance"
              c:identifier="gimp_drawable_color_balance"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawablecolor_pdb.c"
             line="83">Modify the color balance of the specified drawable.

Modify the color balance of the specified drawable. There are three
axis which can be modified: cyan-red, magenta-green, and
yellow-blue. Negative values increase the amount of the former,
positive values increase the amount of the latter. Color balance can
be controlled with the 'transfer_mode' setting, which allows
shadows, mid-tones, and highlights in an image to be affected
differently. The 'preserve-lum' parameter, if TRUE, ensures that the
luminosity of each pixel remains fixed.</doc>
        <source-position filename="libgimp/gimpdrawablecolor_pdb.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawablecolor_pdb.c"
               line="103">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="85">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="transfer_mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="86">Transfer mode.</doc>
            <type name="TransferMode" c:type="GimpTransferMode"/>
          </parameter>
          <parameter name="preserve_lum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="87">Preserve luminosity values at each pixel.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cyan_red" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="88">Cyan-Red color balance.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="magenta_green" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="89">Magenta-Green color balance.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="yellow_blue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="90">Yellow-Blue color balance.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="colorize_hsl"
              c:identifier="gimp_drawable_colorize_hsl"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawablecolor_pdb.c"
             line="140">Render the drawable as a grayscale image seen through a colored
glass.

Desaturates the drawable, then tints it with the specified color.
This tool is only valid on RGB color images. It will not operate on
grayscale drawables.</doc>
        <source-position filename="libgimp/gimpdrawablecolor_pdb.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawablecolor_pdb.c"
               line="154">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="142">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="hue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="143">Hue in degrees.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="saturation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="144">Saturation in percent.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="lightness" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="145">Lightness in percent.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="curves_explicit"
              c:identifier="gimp_drawable_curves_explicit"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawablecolor_pdb.c"
             line="187">Modifies the intensity curve(s) for specified drawable.

Modifies the intensity mapping for one channel in the specified
drawable. The channel can be either an intensity component, or the
value. The 'values' parameter is an array of doubles which
explicitly defines how each pixel value in the drawable will be
modified. Use the gimp_drawable_curves_spline() function to modify
intensity levels with Catmull Rom splines.</doc>
        <source-position filename="libgimp/gimpdrawablecolor_pdb.h" line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawablecolor_pdb.c"
               line="203">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="189">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="190">The channel to modify.</doc>
            <type name="HistogramChannel" c:type="GimpHistogramChannel"/>
          </parameter>
          <parameter name="num_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="191">The number of values in the new curve.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="192">The explicit curve.</doc>
            <array length="1" zero-terminated="0" c:type="const gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="curves_spline"
              c:identifier="gimp_drawable_curves_spline"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawablecolor_pdb.c"
             line="237">Modifies the intensity curve(s) for specified drawable.

Modifies the intensity mapping for one channel in the specified
drawable. The channel can be either an intensity component, or the
value. The 'points' parameter is an array of doubles which define a
set of control points which describe a Catmull Rom spline which
yields the final intensity curve. Use the
gimp_drawable_curves_explicit() function to explicitly modify
intensity levels.</doc>
        <source-position filename="libgimp/gimpdrawablecolor_pdb.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawablecolor_pdb.c"
               line="254">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="239">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="240">The channel to modify.</doc>
            <type name="HistogramChannel" c:type="GimpHistogramChannel"/>
          </parameter>
          <parameter name="num_points" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="241">The number of values in the control point array.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="points" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="242">The spline control points: { cp1.x, cp1.y, cp2.x, cp2.y, ... }.</doc>
            <array length="1" zero-terminated="0" c:type="const gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="desaturate"
              c:identifier="gimp_drawable_desaturate"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawablecolor_pdb.c"
             line="332">Desaturate the contents of the specified drawable, with the
specified formula.

This procedure desaturates the contents of the specified drawable,
with the specified formula. This procedure only works on drawables
of type RGB color.</doc>
        <source-position filename="libgimp/gimpdrawablecolor_pdb.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawablecolor_pdb.c"
               line="344">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="334">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="desaturate_mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="335">The formula to use to desaturate.</doc>
            <type name="DesaturateMode" c:type="GimpDesaturateMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="edit_bucket_fill"
              c:identifier="gimp_drawable_edit_bucket_fill"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawableedit_pdb.c"
             line="123">Fill the area by a seed fill starting at the specified coordinates.

This procedure does a seed fill at the specified coordinates, using
various parameters from the current context.
In the case of merged sampling, the x and y coordinates are relative
to the image's origin; otherwise, they are relative to the
drawable's origin.

This procedure is affected by the following context setters:
gimp_context_set_opacity(), gimp_context_set_paint_mode(),
gimp_context_set_foreground(), gimp_context_set_background(),
gimp_context_set_pattern(), gimp_context_set_sample_threshold(),
gimp_context_set_sample_merged(),
gimp_context_set_sample_criterion(),
gimp_context_set_diagonal_neighbors(), gimp_context_set_antialias().</doc>
        <source-position filename="libgimp/gimpdrawableedit_pdb.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawableedit_pdb.c"
               line="146">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawableedit_pdb.c"
                 line="125">The affected drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="fill_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawableedit_pdb.c"
                 line="126">The type of fill.</doc>
            <type name="FillType" c:type="GimpFillType"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawableedit_pdb.c"
                 line="127">The x coordinate of this bucket fill's application.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawableedit_pdb.c"
                 line="128">The y coordinate of this bucket fill's application.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="edit_clear" c:identifier="gimp_drawable_edit_clear">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawableedit_pdb.c"
             line="39">Clear selected area of drawable.

This procedure clears the specified drawable. If the drawable has an
alpha channel, the cleared pixels will become transparent. If the
drawable does not have an alpha channel, cleared pixels will be set
to the background color. This procedure only affects regions within
a selection if there is a selection active.

This procedure is affected by the following context setters:
gimp_context_set_background().</doc>
        <source-position filename="libgimp/gimpdrawableedit_pdb.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawableedit_pdb.c"
               line="54">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawableedit_pdb.c"
                 line="41">The drawable to clear from.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="edit_fill" c:identifier="gimp_drawable_edit_fill">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawableedit_pdb.c"
             line="79">Fill selected area of drawable.

This procedure fills the specified drawable according to fill mode.
This procedure only affects regions within a selection if there is a
selection active. If you want to fill the whole drawable, regardless
of the selection, use gimp_drawable_fill().

This procedure is affected by the following context setters:
gimp_context_set_opacity(), gimp_context_set_paint_mode(),
gimp_context_set_foreground(), gimp_context_set_background(),
gimp_context_set_pattern().</doc>
        <source-position filename="libgimp/gimpdrawableedit_pdb.h" line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawableedit_pdb.c"
               line="96">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawableedit_pdb.c"
                 line="81">The drawable to fill to.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="fill_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawableedit_pdb.c"
                 line="82">The type of fill.</doc>
            <type name="FillType" c:type="GimpFillType"/>
          </parameter>
        </parameters>
      </method>
      <method name="edit_gradient_fill"
              c:identifier="gimp_drawable_edit_gradient_fill"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawableedit_pdb.c"
             line="179">Draw a gradient between the starting and ending coordinates with the
specified gradient type.

This tool requires information on the gradient type. It creates the
specified variety of gradient using the starting and ending
coordinates as defined for each gradient type. For shapeburst
gradient types, the context's distance metric is also relevant and
can be updated with gimp_context_set_distance_metric().

This procedure is affected by the following context setters:
gimp_context_set_opacity(), gimp_context_set_paint_mode(),
gimp_context_set_foreground(), gimp_context_set_background(),
gimp_context_set_gradient() and all gradient property settings,
gimp_context_set_distance_metric().</doc>
        <source-position filename="libgimp/gimpdrawableedit_pdb.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawableedit_pdb.c"
               line="208">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawableedit_pdb.c"
                 line="181">The affected drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="gradient_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawableedit_pdb.c"
                 line="182">The type of gradient.</doc>
            <type name="GradientType" c:type="GimpGradientType"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawableedit_pdb.c"
                 line="183">Offset relates to the starting and ending coordinates specified for the blend. This parameter is mode dependent.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="supersample" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawableedit_pdb.c"
                 line="184">Do adaptive supersampling.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="supersample_max_depth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawableedit_pdb.c"
                 line="185">Maximum recursion levels for supersampling.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="supersample_threshold" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawableedit_pdb.c"
                 line="186">Supersampling threshold.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="dither" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawableedit_pdb.c"
                 line="187">Use dithering to reduce banding.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="x1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawableedit_pdb.c"
                 line="188">The x coordinate of this gradient's starting point.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawableedit_pdb.c"
                 line="189">The y coordinate of this gradient's starting point.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="x2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawableedit_pdb.c"
                 line="190">The x coordinate of this gradient's ending point.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawableedit_pdb.c"
                 line="191">The y coordinate of this gradient's ending point.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="edit_stroke_item"
              c:identifier="gimp_drawable_edit_stroke_item"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawableedit_pdb.c"
             line="299">Stroke the specified item

This procedure strokes the specified item, painting along its
outline (e.g. along a path, or along a channel's boundary), with the
active paint method and brush, or using a plain line with
configurable properties.

This procedure is affected by the following context setters:
gimp_context_set_opacity(), gimp_context_set_paint_mode(),
gimp_context_set_paint_method(), gimp_context_set_stroke_method(),
gimp_context_set_foreground(), gimp_context_set_brush() and all
brush property settings, gimp_context_set_gradient() and all
gradient property settings, gimp_context_set_line_width() and all
line property settings, gimp_context_set_antialias().</doc>
        <source-position filename="libgimp/gimpdrawableedit_pdb.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawableedit_pdb.c"
               line="319">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawableedit_pdb.c"
                 line="301">The drawable to stroke to.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawableedit_pdb.c"
                 line="302">The item to stroke.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="edit_stroke_selection"
              c:identifier="gimp_drawable_edit_stroke_selection">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawableedit_pdb.c"
             line="255">Stroke the current selection

This procedure strokes the current selection, painting along the
selection boundary with the active paint method and brush, or using
a plain line with configurable properties. The paint is applied to
the specified drawable regardless of the active selection.

This procedure is affected by the following context setters:
gimp_context_set_opacity(), gimp_context_set_paint_mode(),
gimp_context_set_paint_method(), gimp_context_set_stroke_method(),
gimp_context_set_foreground(), gimp_context_set_brush() and all
brush property settings, gimp_context_set_gradient() and all
gradient property settings, gimp_context_set_line_width() and all
line property settings, gimp_context_set_antialias().</doc>
        <source-position filename="libgimp/gimpdrawableedit_pdb.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawableedit_pdb.c"
               line="274">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawableedit_pdb.c"
                 line="257">The drawable to stroke to.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="equalize"
              c:identifier="gimp_drawable_equalize"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawablecolor_pdb.c"
             line="373">Equalize the contents of the specified drawable.

This procedure equalizes the contents of the specified drawable.
Each intensity channel is equalized independently. The equalized
intensity is given as inten' = (255 - inten). The 'mask_only' option
specifies whether to adjust only the area of the image within the
selection bounds, or the entire image based on the histogram of the
selected area. If there is no selection, the entire image is
adjusted based on the histogram for the entire image.</doc>
        <source-position filename="libgimp/gimpdrawablecolor_pdb.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawablecolor_pdb.c"
               line="388">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="375">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="mask_only" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="376">Equalization option.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="extract_component"
              c:identifier="gimp_drawable_extract_component"
              version="2.10.34">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawablecolor_pdb.c"
             line="288">Extract a color model component.

Extract a color model component.</doc>
        <source-position filename="libgimp/gimpdrawablecolor_pdb.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawablecolor_pdb.c"
               line="299">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="290">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="component" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="291">Component (RGB Red (0), RGB Green (1), RGB Blue (2), Hue (3), HSV Saturation (4), HSV Value (5), HSL Saturation (6), HSL Lightness (7), CMYK Cyan (8), CMYK Magenta (9), CMYK Yellow (10), CMYK Key (11), Y'CbCr Y' (12), Y'CbCr Cb (13), Y'CbCr Cr (14), LAB L (15), LAB A (16), LAB B (17), LCH C(ab) (18), LCH H(ab) (19), Alpha (20)).</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="invert" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="292">Invert the extracted component.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="linear" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="293">Use linear output instead of gamma corrected.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="fill" c:identifier="gimp_drawable_fill">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawable_pdb.c"
             line="838">Fill the drawable with the specified fill mode.

This procedure fills the drawable. If the fill mode is foreground
the current foreground color is used. If the fill mode is
background, the current background color is used. If the fill type
is white, then white is used. Transparent fill only affects layers
with an alpha channel, in which case the alpha channel is set to
transparent. If the drawable has no alpha channel, it is filled to
white. No fill leaves the drawable's contents undefined.
This procedure is unlike gimp_drawable_edit_fill() or the bucket
fill tool because it fills regardless of a selection. Its main
purpose is to fill a newly created drawable before adding it to the
image. This operation cannot be undone.</doc>
        <source-position filename="libgimp/gimpdrawable_pdb.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawable_pdb.c"
               line="857">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="840">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="fill_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="841">The type of fill.</doc>
            <type name="FillType" c:type="GimpFillType"/>
          </parameter>
        </parameters>
      </method>
      <method name="foreground_extract"
              c:identifier="gimp_drawable_foreground_extract"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawable_pdb.c"
             line="1075">Extract the foreground of a drawable using a given trimap.

Image Segmentation by Uniform Color Clustering, see
https://www.inf.fu-berlin.de/inst/pubs/tr-b-05-07.pdf</doc>
        <source-position filename="libgimp/gimpdrawable_pdb.h" line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawable_pdb.c"
               line="1086">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="1077">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="1078">The algorithm to use.</doc>
            <type name="ForegroundExtractMode"
                  c:type="GimpForegroundExtractMode"/>
          </parameter>
          <parameter name="mask" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="1079">Tri-Map.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free_shadow"
              c:identifier="gimp_drawable_free_shadow"
              version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawable_pdb.c"
             line="752">Free the specified drawable's shadow data (if it exists).

This procedure is intended as a memory saving device. If any shadow
memory has been allocated, it will be freed automatically when the
drawable is removed from the image, or when the plug-in procedure
which allocated it returns.</doc>
        <source-position filename="libgimp/gimpdrawable_pdb.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawable_pdb.c"
               line="763">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="754">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bpp" c:identifier="gimp_drawable_get_bpp">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawable_pdb.c"
             line="414">Returns the bytes per pixel.

This procedure returns the number of bytes per pixel.</doc>
        <source-position filename="libgimp/gimpdrawable_pdb.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawable_pdb.c"
               line="422">Bytes per pixel.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="416">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_buffer"
              c:identifier="gimp_drawable_get_buffer"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawable.c"
             line="263">Returns a #GeglBuffer of a specified drawable. The buffer can be used
like any other GEGL buffer. Its data will we synced back with the core
drawable when the buffer gets destroyed, or when gegl_buffer_flush()
is called.</doc>
        <source-position filename="libgimp/gimpdrawable.h" line="59"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawable.c"
               line="272">The #GeglBuffer.

See Also: gimp_drawable_get_shadow_buffer()</doc>
          <type name="Gegl.Buffer" c:type="GeglBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="265">the ID of the #GimpDrawable to get the buffer for.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_format"
              c:identifier="gimp_drawable_get_format"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawable.c"
             line="327">Returns the #Babl format of the drawable.</doc>
        <source-position filename="libgimp/gimpdrawable.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawable.c"
               line="333">The #Babl format.</doc>
          <type name="Babl.Object" c:type="const Babl*"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="329">the ID of the #GimpDrawable to get the format for.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_height" c:identifier="gimp_drawable_get_height">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawable_pdb.c"
             line="482">Returns the height of the drawable.

This procedure returns the specified drawable's height in pixels.</doc>
        <source-position filename="libgimp/gimpdrawable_pdb.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawable_pdb.c"
               line="490">Height of drawable.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="484">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_offsets" c:identifier="gimp_drawable_get_offsets">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawable_pdb.c"
             line="516">Returns the offsets for the drawable.

This procedure returns the specified drawable's offsets. This only
makes sense if the drawable is a layer since channels are anchored.
The offsets of a channel will be returned as 0.</doc>
        <source-position filename="libgimp/gimpdrawable_pdb.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawable_pdb.c"
               line="528">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="518">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="offset_x"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="519">x offset of drawable.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="offset_y"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="520">y offset of drawable.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pixel" c:identifier="gimp_drawable_get_pixel">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawable_pdb.c"
             line="118">Gets the value of the pixel at the specified coordinates.

This procedure gets the pixel value at the specified coordinates.</doc>
        <source-position filename="libgimp/gimpdrawable_pdb.h" line="37"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawable_pdb.c"
               line="128">The pixel color.</doc>
          <type name="Gegl.Color" c:type="GeglColor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="120">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="x_coord" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="121">The x coordinate.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y_coord" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="122">The y coordinate.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_shadow_buffer"
              c:identifier="gimp_drawable_get_shadow_buffer"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawable.c"
             line="296">Returns a #GeglBuffer of a specified drawable's shadow tiles. The
buffer can be used like any other GEGL buffer. Its data will we
synced back with the core drawable's shadow tiles when the buffer
gets destroyed, or when gegl_buffer_flush() is called.</doc>
        <source-position filename="libgimp/gimpdrawable.h" line="60"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawable.c"
               line="305">The #GeglBuffer.</doc>
          <type name="Gegl.Buffer" c:type="GeglBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="298">the ID of the #GimpDrawable to get the buffer for.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sub_thumbnail"
              c:identifier="gimp_drawable_get_sub_thumbnail"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawable.c"
             line="203">Retrieves a thumbnail pixbuf for the drawable identified by
@drawable. The thumbnail will be not larger than the requested
size.</doc>
        <source-position filename="libgimp/gimpdrawable.h" line="86"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawable.c"
               line="218">a new #GdkPixbuf</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="205">the drawable ID</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="src_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="206">the x coordinate of the area</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="src_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="207">the y coordinate of the area</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="src_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="208">the width of the area</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="src_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="209">the height of the area</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="dest_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="210">the requested thumbnail width  (&lt;= 1024 pixels)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="dest_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="211">the requested thumbnail height (&lt;= 1024 pixels)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="212">how to handle an alpha channel</doc>
            <type name="PixbufTransparency" c:type="GimpPixbufTransparency"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sub_thumbnail_data"
              c:identifier="gimp_drawable_get_sub_thumbnail_data">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawable.c"
             line="157">Retrieves thumbnail data for the drawable identified by @drawable.
The thumbnail will be not larger than the requested size.</doc>
        <source-position filename="libgimp/gimpdrawable.h" line="76"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawable.c"
               line="173">thumbnail data or %NULL if
         @drawable is invalid.</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="159">the drawable ID</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="src_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="160">the x coordinate of the area</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="src_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="161">the y coordinate of the area</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="src_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="162">the width of the area</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="src_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="163">the height of the area</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="dest_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="164">the requested thumbnail width  (&lt;= 1024 pixels)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="dest_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="165">the requested thumbnail height (&lt;= 1024 pixels)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="actual_width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="166">the width of the returned thumbnail</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="actual_height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="167">the height of the returned thumbnail</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="bpp"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="168">the bytes per pixel of the returned thumbnail data</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_thumbnail"
              c:identifier="gimp_drawable_get_thumbnail"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawable.c"
             line="113">Retrieves a thumbnail pixbuf for the drawable identified by
@drawable. The thumbnail will be not larger than the requested
size.</doc>
        <source-position filename="libgimp/gimpdrawable.h" line="71"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawable.c"
               line="124">a new #GdkPixbuf</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="115">the drawable</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="116">the requested thumbnail width  (&lt;= 1024 pixels)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="117">the requested thumbnail height (&lt;= 1024 pixels)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="118">how to handle an alpha channel</doc>
            <type name="PixbufTransparency" c:type="GimpPixbufTransparency"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_thumbnail_data"
              c:identifier="gimp_drawable_get_thumbnail_data">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawable.c"
             line="73">Retrieves thumbnail data for the drawable identified by @drawable.
The thumbnail will be not larger than the requested size.</doc>
        <source-position filename="libgimp/gimpdrawable.h" line="65"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawable.c"
               line="85">thumbnail data or %NULL if
         @drawable is invalid.</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="75">the drawable</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="76">the requested thumbnail width  (&lt;= 1024 pixels)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="77">the requested thumbnail height (&lt;= 1024 pixels)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="actual_width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="78">the resulting thumbnail's actual width</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="actual_height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="79">the resulting thumbnail's actual height</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="bpp"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="80">the bytes per pixel of the returned thubmnail data</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_thumbnail_format"
              c:identifier="gimp_drawable_get_thumbnail_format"
              version="2.10.14">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawable.c"
             line="413">Returns the #Babl thumbnail format of the drawable.</doc>
        <source-position filename="libgimp/gimpdrawable.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawable.c"
               line="419">The #Babl thumbnail format.</doc>
          <type name="Babl.Object" c:type="const Babl*"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable.c"
                 line="415">the ID of the #GimpDrawable to get the thumbnail format for.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_width" c:identifier="gimp_drawable_get_width">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawable_pdb.c"
             line="448">Returns the width of the drawable.

This procedure returns the specified drawable's width in pixels.</doc>
        <source-position filename="libgimp/gimpdrawable_pdb.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawable_pdb.c"
               line="456">Width of drawable.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="450">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_alpha" c:identifier="gimp_drawable_has_alpha">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawable_pdb.c"
             line="273">Returns TRUE if the drawable has an alpha channel.

This procedure returns whether the specified drawable has an alpha
channel. This can only be true for layers, and the associated type
will be one of: { RGBA , GRAYA, INDEXEDA }.</doc>
        <source-position filename="libgimp/gimpdrawable_pdb.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawable_pdb.c"
               line="283">Does the drawable have an alpha channel?</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="275">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="histogram"
              c:identifier="gimp_drawable_histogram"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawablecolor_pdb.c"
             line="417">Returns information on the intensity histogram for the specified
drawable.

This tool makes it possible to gather information about the
intensity histogram of a drawable. A channel to examine is first
specified. This can be either value, red, green, or blue, depending
on whether the drawable is of type color or grayscale. Second, a
range of intensities are specified. The gimp_drawable_histogram()
function returns statistics based on the pixels in the drawable that
fall under this range of values. Mean, standard deviation, median,
number of pixels, and percentile are all returned. Additionally, the
total count of pixels in the image is returned. Counts of pixels are
weighted by any associated alpha values and by the current selection
mask. That is, pixels that lie outside an active selection mask will
not be counted. Similarly, pixels with transparent alpha values will
not be counted. The returned mean, std_dev and median are in the
range (0..255) for 8-bit images or if the plug-in is not
precision-aware, and in the range (0.0..1.0) otherwise.</doc>
        <source-position filename="libgimp/gimpdrawablecolor_pdb.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawablecolor_pdb.c"
               line="449">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="419">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="420">The channel to query.</doc>
            <type name="HistogramChannel" c:type="GimpHistogramChannel"/>
          </parameter>
          <parameter name="start_range" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="421">Start of the intensity measurement range.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="end_range" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="422">End of the intensity measurement range.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="mean"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="423">Mean intensity value.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="std_dev"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="424">Standard deviation of intensity values.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="median"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="425">Median intensity value.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="pixels"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="426">Alpha-weighted pixel count for entire image.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="count"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="427">Alpha-weighted pixel count for range.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="percentile"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="428">Percentile that range falls under.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="hue_saturation"
              c:identifier="gimp_drawable_hue_saturation"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawablecolor_pdb.c"
             line="505">Modify hue, lightness, and saturation in the specified drawable.

This procedure allows the hue, lightness, and saturation in the
specified drawable to be modified. The 'hue-range' parameter
provides the capability to limit range of affected hues. The
'overlap' parameter provides blending into neighboring hue channels
when rendering.</doc>
        <source-position filename="libgimp/gimpdrawablecolor_pdb.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawablecolor_pdb.c"
               line="522">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="507">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="hue_range" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="508">Range of affected hues.</doc>
            <type name="HueRange" c:type="GimpHueRange"/>
          </parameter>
          <parameter name="hue_offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="509">Hue offset in degrees.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="lightness" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="510">Lightness modification.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="saturation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="511">Saturation modification.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="overlap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="512">Overlap other hue channels.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="invert" c:identifier="gimp_drawable_invert" version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawablecolor_pdb.c"
             line="559">Invert the contents of the specified drawable.

This procedure inverts the contents of the specified drawable. Each
intensity channel is inverted independently. The inverted intensity
is given as inten' = (255 - inten). If 'linear' is TRUE, the
drawable is inverted in linear space.</doc>
        <source-position filename="libgimp/gimpdrawablecolor_pdb.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawablecolor_pdb.c"
               line="571">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="561">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="linear" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="562">Whether to invert in linear space.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_gray" c:identifier="gimp_drawable_is_gray">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawable_pdb.c"
             line="344">Returns whether the drawable is a grayscale type.

This procedure returns TRUE if the specified drawable is of type {
Gray, GrayA }.</doc>
        <source-position filename="libgimp/gimpdrawable_pdb.h" line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawable_pdb.c"
               line="353">TRUE if the drawable is a grayscale type.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="346">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_indexed" c:identifier="gimp_drawable_is_indexed">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawable_pdb.c"
             line="379">Returns whether the drawable is an indexed type.

This procedure returns TRUE if the specified drawable is of type {
Indexed, IndexedA }.</doc>
        <source-position filename="libgimp/gimpdrawable_pdb.h" line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawable_pdb.c"
               line="388">TRUE if the drawable is an indexed type.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="381">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_rgb" c:identifier="gimp_drawable_is_rgb">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawable_pdb.c"
             line="309">Returns whether the drawable is an RGB type.

This procedure returns TRUE if the specified drawable is of type {
RGB, RGBA }.</doc>
        <source-position filename="libgimp/gimpdrawable_pdb.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawable_pdb.c"
               line="318">TRUE if the drawable is an RGB type.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="311">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="levels" c:identifier="gimp_drawable_levels" version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawablecolor_pdb.c"
             line="600">Modifies intensity levels in the specified drawable.

This tool allows intensity levels in the specified drawable to be
remapped according to a set of parameters. The low/high input levels
specify an initial mapping from the source intensities. The gamma
value determines how intensities between the low and high input
intensities are interpolated. A gamma value of 1.0 results in a
linear interpolation. Higher gamma values result in more high-level
intensities. Lower gamma values result in more low-level
intensities. The low/high output levels constrain the final
intensity mapping--that is, no final intensity will be lower than
the low output level and no final intensity will be higher than the
high output level. This tool is only valid on RGB color and
grayscale images.</doc>
        <source-position filename="libgimp/gimpdrawablecolor_pdb.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawablecolor_pdb.c"
               line="627">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="602">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="603">The channel to modify.</doc>
            <type name="HistogramChannel" c:type="GimpHistogramChannel"/>
          </parameter>
          <parameter name="low_input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="604">Intensity of lowest input.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="high_input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="605">Intensity of highest input.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="clamp_input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="606">Clamp input values before applying output levels.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="gamma" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="607">Gamma adjustment factor.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="low_output" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="608">Intensity of lowest output.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="high_output" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="609">Intensity of highest output.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="clamp_output" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="610">Clamp final output values.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="levels_stretch"
              c:identifier="gimp_drawable_levels_stretch"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawablecolor_pdb.c"
             line="670">Automatically modifies intensity levels in the specified drawable.

This procedure allows intensity levels in the specified drawable to
be remapped according to a set of guessed parameters. It is
equivalent to clicking the \"Auto\" button in the Levels tool.</doc>
        <source-position filename="libgimp/gimpdrawablecolor_pdb.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawablecolor_pdb.c"
               line="680">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="672">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="mask_bounds" c:identifier="gimp_drawable_mask_bounds">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawable_pdb.c"
             line="564">Find the bounding box of the current selection in relation to the
specified drawable.

This procedure returns whether there is a selection. If there is
one, the upper left and lower right-hand corners of its bounding box
are returned. These coordinates are specified relative to the
drawable's origin, and bounded by the drawable's extents. Please
note that the pixel specified by the lower right-hand coordinate of
the bounding box is not part of the selection. The selection ends at
the upper left corner of this pixel. This means the width of the
selection can be calculated as (x2 - x1), its height as (y2 - y1).
Note that the returned boolean does NOT correspond with the returned
region being empty or not, it always returns whether the selection
is non_empty. See gimp_drawable_mask_intersect() for a boolean
return value which is more useful in most cases.</doc>
        <source-position filename="libgimp/gimpdrawable_pdb.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawable_pdb.c"
               line="588">TRUE if there is a selection.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="566">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="x1"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="567">x coordinate of the upper left corner of selection bounds.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y1"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="568">y coordinate of the upper left corner of selection bounds.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="x2"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="569">x coordinate of the lower right corner of selection bounds.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y2"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="570">y coordinate of the lower right corner of selection bounds.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mask_intersect"
              c:identifier="gimp_drawable_mask_intersect"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawable_pdb.c"
             line="624">Find the bounding box of the current selection in relation to the
specified drawable.

This procedure returns whether there is an intersection between the
drawable and the selection. Unlike gimp_drawable_mask_bounds(), the
intersection's bounds are returned as x, y, width, height.
If there is no selection this function returns TRUE and the returned
bounds are the extents of the whole drawable.</doc>
        <source-position filename="libgimp/gimpdrawable_pdb.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawable_pdb.c"
               line="641">TRUE if the returned area is not empty.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="626">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="x"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="627">x coordinate of the upper left corner of the intersection.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="628">y coordinate of the upper left corner of the intersection.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="629">width of the intersection.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="630">height of the intersection.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="merge_filters" c:identifier="gimp_drawable_merge_filters">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawable_pdb.c"
             line="679">Merge the layer effect filters to the specified drawable.

This procedure combines the contents of the drawable's filter stack
(for export) with the specified drawable.</doc>
        <source-position filename="libgimp/gimpdrawable_pdb.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawable_pdb.c"
               line="688">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="681">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="merge_shadow" c:identifier="gimp_drawable_merge_shadow">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawable_pdb.c"
             line="713">Merge the shadow buffer with the specified drawable.

This procedure combines the contents of the drawable's shadow buffer
(for temporary processing) with the specified drawable. The 'undo'
parameter specifies whether to add an undo step for the operation.
Requesting no undo is useful for such applications as 'auto-apply'.</doc>
        <source-position filename="libgimp/gimpdrawable_pdb.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawable_pdb.c"
               line="725">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="715">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="undo" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="716">Push merge to undo stack?</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="offset" c:identifier="gimp_drawable_offset">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawable_pdb.c"
             line="884">Offset the drawable by the specified amounts in the X and Y
directions

This procedure offsets the specified drawable by the amounts
specified by 'offset_x' and 'offset_y'. If 'wrap_around' is set to
TRUE, then portions of the drawable which are offset out of bounds
are wrapped around. Alternatively, the undefined regions of the
drawable can be filled with transparency or the background color, as
specified by the 'fill-type' parameter.</doc>
        <source-position filename="libgimp/gimpdrawable_pdb.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawable_pdb.c"
               line="902">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="886">The drawable to offset.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="wrap_around" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="887">wrap image around or fill vacated regions.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="fill_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="888">fill vacated regions of drawable with background or transparent.</doc>
            <type name="OffsetType" c:type="GimpOffsetType"/>
          </parameter>
          <parameter name="offset_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="889">offset by this amount in X direction.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="offset_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="890">offset by this amount in Y direction.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="posterize"
              c:identifier="gimp_drawable_posterize"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawablecolor_pdb.c"
             line="765">Posterize the specified drawable.

This procedures reduces the number of shades allows in each
intensity channel to the specified 'levels' parameter.</doc>
        <source-position filename="libgimp/gimpdrawablecolor_pdb.h"
                         line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawablecolor_pdb.c"
               line="775">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="767">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="levels" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="768">Levels of posterization.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pixel" c:identifier="gimp_drawable_set_pixel">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawable_pdb.c"
             line="158">Sets the value of the pixel at the specified coordinates.

This procedure sets the pixel value at the specified coordinates.
Note that this function is not undoable, you should use it only on
drawables you just created yourself.</doc>
        <source-position filename="libgimp/gimpdrawable_pdb.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawable_pdb.c"
               line="171">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="160">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="x_coord" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="161">The x coordinate.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y_coord" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="162">The y coordinate.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="163">The pixel color.</doc>
            <type name="Gegl.Color" c:type="GeglColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="shadows_highlights"
              c:identifier="gimp_drawable_shadows_highlights"
              version="2.10.34">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawablecolor_pdb.c"
             line="707">Perform shadows and highlights correction.

This filter allows adjusting shadows and highlights in the image
separately. The implementation closely follow its counterpart in the
Darktable photography software.</doc>
        <source-position filename="libgimp/gimpdrawablecolor_pdb.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawablecolor_pdb.c"
               line="724">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="709">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="shadows" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="710">Adjust exposure of shadows.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="highlights" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="711">Adjust exposure of highlights.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="whitepoint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="712">Shift white point.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="radius" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="713">Spatial extent.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="compress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="714">Compress the effect on shadows/highlights and preserve midtones.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="shadows_ccorrect" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="715">Adjust saturation of shadows.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="highlights_ccorrect" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="716">Adjust saturation of highlights.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="threshold"
              c:identifier="gimp_drawable_threshold"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawablecolor_pdb.c"
             line="804">Threshold the specified drawable.

This procedures generates a threshold map of the specified drawable.
All pixels between the values of 'low_threshold' and
'high_threshold', on the scale of 'channel' are replaced with white,
and all other pixels with black.</doc>
        <source-position filename="libgimp/gimpdrawablecolor_pdb.h"
                         line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawablecolor_pdb.c"
               line="818">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="806">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="807">The channel to base the threshold on.</doc>
            <type name="HistogramChannel" c:type="GimpHistogramChannel"/>
          </parameter>
          <parameter name="low_threshold" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="808">The low threshold value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="high_threshold" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawablecolor_pdb.c"
                 line="809">The high threshold value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="type" c:identifier="gimp_drawable_type">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawable_pdb.c"
             line="202">Returns the drawable's type.

This procedure returns the drawable's type.</doc>
        <source-position filename="libgimp/gimpdrawable_pdb.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawable_pdb.c"
               line="210">The drawable's type.</doc>
          <type name="ImageType" c:type="GimpImageType"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="204">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="type_with_alpha"
              c:identifier="gimp_drawable_type_with_alpha">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawable_pdb.c"
             line="236">Returns the drawable's type with alpha.

This procedure returns the drawable's type as if had an alpha
channel. If the type is currently Gray, for instance, the returned
type would be GrayA. If the drawable already has an alpha channel,
the drawable's type is simply returned.</doc>
        <source-position filename="libgimp/gimpdrawable_pdb.h" line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawable_pdb.c"
               line="247">The drawable's type with alpha.</doc>
          <type name="ImageType" c:type="GimpImageType"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="238">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="update" c:identifier="gimp_drawable_update">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawable_pdb.c"
             line="790">Update the specified region of the drawable.

This procedure updates the specified region of the drawable. The (x,
y) coordinate pair is relative to the drawable's origin, not to the
image origin. Therefore, the entire drawable can be updated using
(0, 0, width, height).</doc>
        <source-position filename="libgimp/gimpdrawable_pdb.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawable_pdb.c"
               line="805">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="792">The drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="793">x coordinate of upper left corner of update region.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="794">y coordinate of upper left corner of update region.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="795">Width of update region.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpdrawable_pdb.c"
                 line="796">Height of update region.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Item" c:type="GimpItem"/>
      </field>
    </class>
    <record name="DrawableClass"
            c:type="GimpDrawableClass"
            glib:is-gtype-struct-for="Drawable">
      <source-position filename="libgimp/gimpdrawable.h" line="54"/>
      <field name="parent_class">
        <type name="ItemClass" c:type="GimpItemClass"/>
      </field>
      <field name="_gimp_reserved1" introspectable="0">
        <callback name="_gimp_reserved1">
          <source-position filename="libgimp/gimpdrawable.h" line="45"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved2" introspectable="0">
        <callback name="_gimp_reserved2">
          <source-position filename="libgimp/gimpdrawable.h" line="46"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved3" introspectable="0">
        <callback name="_gimp_reserved3">
          <source-position filename="libgimp/gimpdrawable.h" line="47"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved4" introspectable="0">
        <callback name="_gimp_reserved4">
          <source-position filename="libgimp/gimpdrawable.h" line="48"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved5" introspectable="0">
        <callback name="_gimp_reserved5">
          <source-position filename="libgimp/gimpdrawable.h" line="49"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved6" introspectable="0">
        <callback name="_gimp_reserved6">
          <source-position filename="libgimp/gimpdrawable.h" line="50"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved7" introspectable="0">
        <callback name="_gimp_reserved7">
          <source-position filename="libgimp/gimpdrawable.h" line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved8" introspectable="0">
        <callback name="_gimp_reserved8">
          <source-position filename="libgimp/gimpdrawable.h" line="52"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved9" introspectable="0">
        <callback name="_gimp_reserved9">
          <source-position filename="libgimp/gimpdrawable.h" line="53"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="EnumDesc" c:type="GimpEnumDesc">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbasetypes.h"
           line="58">This structure is used to register translatable descriptions and
help texts for enum values. See gimp_enum_set_value_descriptions().</doc>
      <source-position filename="libgimpbase/gimpbasetypes.h" line="72"/>
      <field name="value" writable="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbasetypes.h"
             line="60">An enum value.</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="value_desc" writable="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbasetypes.h"
             line="61">The value's description.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="value_help" writable="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbasetypes.h"
             line="62">The value's help text.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
    </record>
    <bitfield name="ExportCapabilities" c:type="GimpExportCapabilities">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpexportoptions.h"
           line="40">The types of images and layers an export procedure can handle</doc>
      <source-position filename="libgimpbase/gimpexportoptions.h" line="69"/>
      <member name="can_handle_rgb"
              value="1"
              c:identifier="GIMP_EXPORT_CAN_HANDLE_RGB">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpexportoptions.h"
             line="42">Handles RGB images</doc>
      </member>
      <member name="can_handle_gray"
              value="2"
              c:identifier="GIMP_EXPORT_CAN_HANDLE_GRAY">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpexportoptions.h"
             line="43">Handles grayscale images</doc>
      </member>
      <member name="can_handle_indexed"
              value="4"
              c:identifier="GIMP_EXPORT_CAN_HANDLE_INDEXED">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpexportoptions.h"
             line="44">Handles indexed images</doc>
      </member>
      <member name="can_handle_bitmap"
              value="8"
              c:identifier="GIMP_EXPORT_CAN_HANDLE_BITMAP">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpexportoptions.h"
             line="45">Handles two-color indexed images</doc>
      </member>
      <member name="can_handle_alpha"
              value="16"
              c:identifier="GIMP_EXPORT_CAN_HANDLE_ALPHA">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpexportoptions.h"
             line="46">Handles alpha channels</doc>
      </member>
      <member name="can_handle_layers"
              value="32"
              c:identifier="GIMP_EXPORT_CAN_HANDLE_LAYERS">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpexportoptions.h"
             line="47">Handles layers</doc>
      </member>
      <member name="can_handle_layers_as_animation"
              value="64"
              c:identifier="GIMP_EXPORT_CAN_HANDLE_LAYERS_AS_ANIMATION">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpexportoptions.h"
             line="48">Handles animation of layers</doc>
      </member>
      <member name="can_handle_layer_masks"
              value="128"
              c:identifier="GIMP_EXPORT_CAN_HANDLE_LAYER_MASKS">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpexportoptions.h"
             line="50">Handles layer masks</doc>
      </member>
      <member name="can_handle_layer_effects"
              value="256"
              c:identifier="GIMP_EXPORT_CAN_HANDLE_LAYER_EFFECTS">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpexportoptions.h"
             line="49">Handles layer effects</doc>
      </member>
      <member name="needs_alpha"
              value="512"
              c:identifier="GIMP_EXPORT_NEEDS_ALPHA">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpexportoptions.h"
             line="51">Needs alpha channels</doc>
      </member>
      <member name="needs_crop"
              value="1024"
              c:identifier="GIMP_EXPORT_NEEDS_CROP">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpexportoptions.h"
             line="52">Needs to crop content to image bounds</doc>
      </member>
    </bitfield>
    <class name="ExportOptions"
           c:symbol-prefix="export_options"
           c:type="GimpExportOptions"
           parent="GObject.Object"
           glib:type-name="GimpExportOptions"
           glib:get-type="gimp_export_options_get_type"
           glib:type-struct="ExportOptionsClass">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpexportoptions.c"
           line="29">A class holding generic export options.

Note: right now, GIMP does not provide any generic export option to
manipulate, and there is practically no reason for you to create this
object yourself. In Export PDB procedure, or again in functions such
as [func@Gimp.file_save], you may just pass %NULL.

In the future, this object will enable to pass various generic
options, such as ability to crop or resize images at export time.</doc>
      <source-position filename="libgimpbase/gimpexportoptions.h" line="37"/>
      <method name="get_image"
              c:identifier="gimp_export_options_get_image"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpexportoptions.c"
             line="529">Takes an image to be exported, possibly creating a temporary copy
modified according to export settings in @options (such as the
capabilities of the export format).

If necessary, a copy is created, converted and modified, @image
changed to point to the new image and the procedure returns
[enum@Gimp.ExportReturn.EXPORT].
In this case, you must take care of deleting the created image using
[method@Image.delete] once the image has been exported, unless you
were planning to display it with [ctor@Display.new], or you will leak
memory.

If [enum@Gimp.ExportReturn.IGNORE] is returned, then @image is still the
original image. You should neither modify it, nor should you delete
it in the end. If you wish to temporarily modify the image before
export anyway, call [method@Image.duplicate] when
[enum@Gimp.ExportReturn.IGNORE] was returned.</doc>
        <source-position filename="libgimp/gimpexportoptions.h" line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpexportoptions.c"
               line="552">An enum of #GimpExportReturn.</doc>
          <type name="ExportReturn" c:type="GimpExportReturn"/>
        </return-value>
        <parameters>
          <instance-parameter name="options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpexportoptions.c"
                 line="531">The #GimpExportOptions object.</doc>
            <type name="ExportOptions" c:type="GimpExportOptions*"/>
          </instance-parameter>
          <parameter name="image"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpexportoptions.c"
                 line="532">the image.</doc>
            <type name="Image" c:type="GimpImage**"/>
          </parameter>
        </parameters>
      </method>
      <property name="capabilities"
                version="3.0.0"
                writable="1"
                construct="1"
                transfer-ownership="none"
                default-value="0">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpexportoptions.c"
             line="86">What [flags@ExportCapabilities] are supported.</doc>
        <type name="gint" c:type="gint"/>
      </property>
    </class>
    <record name="ExportOptionsClass"
            c:type="GimpExportOptionsClass"
            glib:is-gtype-struct-for="ExportOptions">
      <source-position filename="libgimpbase/gimpexportoptions.h" line="37"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <callback name="ExportOptionsEditFunc"
              c:type="GimpExportOptionsEditFunc"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimpexportprocedure.h"
           line="66">To be described.</doc>
      <source-position filename="libgimp/gimpexportprocedure.h" line="78"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="procedure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpexportprocedure.h"
               line="68">the #GimpProcedure that runs.</doc>
          <type name="Procedure" c:type="GimpProcedure*"/>
        </parameter>
        <parameter name="config" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpexportprocedure.h"
               line="69">the #GimpProcedureConfig.</doc>
          <type name="ProcedureConfig" c:type="GimpProcedureConfig*"/>
        </parameter>
        <parameter name="options" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpexportprocedure.h"
               line="70">the @GimpExportOptions object to update.</doc>
          <type name="ExportOptions" c:type="GimpExportOptions*"/>
        </parameter>
        <parameter name="create_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="libgimp/gimpexportprocedure.h"
               line="71">the create_data given.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="ExportProcedure"
           c:symbol-prefix="export_procedure"
           c:type="GimpExportProcedure"
           parent="FileProcedure"
           glib:type-name="GimpExportProcedure"
           glib:get-type="gimp_export_procedure_get_type"
           glib:type-struct="ExportProcedureClass">
      <doc xml:space="preserve"
           filename="libgimp/gimpexportprocedure.c"
           line="35">Export procedures implement image export.

Registered export procedures will be automatically available in the export
interfaces and functions of GIMP. The detection (to decide which file is
redirected to which plug-in procedure) depends on the various methods set
with [class@FileProcedure] API.</doc>
      <source-position filename="libgimp/gimpexportprocedure.h" line="85"/>
      <constructor name="new"
                   c:identifier="gimp_export_procedure_new"
                   version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpexportprocedure.c"
             line="596">Creates a new export procedure named @name which will call @run_func
when invoked.

See gimp_procedure_new() for information about @proc_type.

#GimpExportProcedure is a #GimpProcedure subclass that makes it easier
to write file export procedures.

It automatically adds the standard

(#GimpRunMode, #GimpImage, #GFile, #GimpExportOptions)

arguments of an export procedure. It is possible to add additional
arguments.

When invoked via gimp_procedure_run(), it unpacks these standard
arguments and calls @run_func which is a #GimpRunExportFunc. The
#GimpProcedureConfig of #GimpRunExportFunc only contains additionally added
arguments.

If @export_metadata is TRUE, then the class will also handle the metadata
export if the format is supported by our backend. This requires you to also
set appropriate MimeType with gimp_file_procedure_set_mime_types().</doc>
        <source-position filename="libgimp/gimpexportprocedure.h" line="88"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpexportprocedure.c"
               line="630">a new #GimpProcedure.</doc>
          <type name="Procedure" c:type="GimpProcedure*"/>
        </return-value>
        <parameters>
          <parameter name="plug_in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpexportprocedure.c"
                 line="598">a #GimpPlugIn.</doc>
            <type name="PlugIn" c:type="GimpPlugIn*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpexportprocedure.c"
                 line="599">the new procedure's name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="proc_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpexportprocedure.c"
                 line="600">the new procedure's #GimpPDBProcType.</doc>
            <type name="PDBProcType" c:type="GimpPDBProcType"/>
          </parameter>
          <parameter name="export_metadata" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpexportprocedure.c"
                 line="601">whether GIMP should handle metadata exporting.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="run_func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="5"
                     destroy="6">
            <doc xml:space="preserve"
                 filename="libgimp/gimpexportprocedure.c"
                 line="602">the run function for the new procedure.</doc>
            <type name="RunExportFunc" c:type="GimpRunExportFunc"/>
          </parameter>
          <parameter name="run_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpexportprocedure.c"
                 line="603">user data passed to @run_func.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="run_data_destroy"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="libgimp/gimpexportprocedure.c"
                 line="604">free function for @run_data, or %NULL.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_support_comment"
              c:identifier="gimp_export_procedure_get_support_comment"
              version="3.0">
        <source-position filename="libgimp/gimpexportprocedure.h" line="121"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpexportprocedure.c"
               line="1021">%TRUE if @procedure supports comment exporting.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpexportprocedure.c"
                 line="1019">a #GimpProcedure.</doc>
            <type name="ExportProcedure" c:type="GimpExportProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_support_exif"
              c:identifier="gimp_export_procedure_get_support_exif"
              version="3.0">
        <source-position filename="libgimp/gimpexportprocedure.h" line="116"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpexportprocedure.c"
               line="941">%TRUE if @procedure supports Exif exporting.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpexportprocedure.c"
                 line="939">a #GimpProcedure.</doc>
            <type name="ExportProcedure" c:type="GimpExportProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_support_iptc"
              c:identifier="gimp_export_procedure_get_support_iptc"
              version="3.0">
        <source-position filename="libgimp/gimpexportprocedure.h" line="117"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpexportprocedure.c"
               line="957">%TRUE if @procedure supports IPTC exporting.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpexportprocedure.c"
                 line="955">a #GimpProcedure.</doc>
            <type name="ExportProcedure" c:type="GimpExportProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_support_profile"
              c:identifier="gimp_export_procedure_get_support_profile"
              version="3.0">
        <source-position filename="libgimp/gimpexportprocedure.h" line="119"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpexportprocedure.c"
               line="989">%TRUE if @procedure supports ICC color profile exporting.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpexportprocedure.c"
                 line="987">a #GimpProcedure.</doc>
            <type name="ExportProcedure" c:type="GimpExportProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_support_thumbnail"
              c:identifier="gimp_export_procedure_get_support_thumbnail"
              version="3.0">
        <source-position filename="libgimp/gimpexportprocedure.h" line="120"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpexportprocedure.c"
               line="1005">%TRUE if @procedure supports thumbnail exporting.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpexportprocedure.c"
                 line="1003">a #GimpProcedure.</doc>
            <type name="ExportProcedure" c:type="GimpExportProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_support_xmp"
              c:identifier="gimp_export_procedure_get_support_xmp"
              version="3.0">
        <source-position filename="libgimp/gimpexportprocedure.h" line="118"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpexportprocedure.c"
               line="973">%TRUE if @procedure supports XMP exporting.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpexportprocedure.c"
                 line="971">a #GimpProcedure.</doc>
            <type name="ExportProcedure" c:type="GimpExportProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_capabilities"
              c:identifier="gimp_export_procedure_set_capabilities"
              glib:set-property="capabilities"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpexportprocedure.c"
             line="665">Sets default #GimpExportCapabilities for image export.</doc>
        <source-position filename="libgimp/gimpexportprocedure.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpexportprocedure.c"
                 line="667">a #GimpProcedure.</doc>
            <type name="ExportProcedure" c:type="GimpExportProcedure*"/>
          </instance-parameter>
          <parameter name="capabilities" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpexportprocedure.c"
                 line="668">a #GimpExportCapabilities enum</doc>
            <type name="ExportCapabilities" c:type="GimpExportCapabilities"/>
          </parameter>
          <parameter name="edit_func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="2"
                     destroy="3">
            <doc xml:space="preserve"
                 filename="libgimp/gimpexportprocedure.c"
                 line="669">callback function to update export options</doc>
            <type name="ExportOptionsEditFunc"
                  c:type="GimpExportOptionsEditFunc"/>
          </parameter>
          <parameter name="edit_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpexportprocedure.c"
                 line="670">data for @edit_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="edit_data_destroy"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="libgimp/gimpexportprocedure.c"
                 line="671">free function for @edit_data, or %NULL</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_support_comment"
              c:identifier="gimp_export_procedure_set_support_comment"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpexportprocedure.c"
             line="897">Determine whether @procedure supports exporting a comment. By default,
it won't (so there is usually no reason to run this function with
%FALSE).

This will have several consequences:

- Automatically adds a standard auxiliary argument "save-comment"
  in the end of the argument list of @procedure, with relevant blurb
  and description.
- If used with other gimp_export_procedure_set_support_*() functions,
  they will always be ordered the same (the order of the calls don't
  matter), keeping all export procedures consistent.
- Generated GimpExportProcedureDialog will contain the metadata
  options, once again always in the same order and with consistent
  GUI style across plug-ins.
- API from [class@ProcedureConfig] will automatically process these
  properties to decide whether to export a given metadata or not.

Note that since this is an auxiliary argument, it won't be part of
the PDB arguments. By default, the value will be
[func@export_comment].</doc>
        <source-position filename="libgimp/gimpexportprocedure.h" line="113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpexportprocedure.c"
                 line="899">a #GimpProcedure.</doc>
            <type name="ExportProcedure" c:type="GimpExportProcedure*"/>
          </instance-parameter>
          <parameter name="supports" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpexportprocedure.c"
                 line="900">whether a comment can be stored.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_support_exif"
              c:identifier="gimp_export_procedure_set_support_exif"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpexportprocedure.c"
             line="701">Determine whether @procedure supports exporting Exif data. By default,
it won't (so there is usually no reason to run this function with
%FALSE).

This will have several consequences:

- Automatically adds a standard auxiliary argument "save-exif" in the
  end of the argument list of @procedure, with relevant blurb and
  description.
- If used with other gimp_export_procedure_set_support_*() functions,
  they will always be ordered the same (the order of the calls don't
  matter), keeping all export procedures consistent.
- Generated GimpExportProcedureDialog will contain the metadata
  options, once again always in the same order and with consistent
  GUI style across plug-ins.
- API from [class@ProcedureConfig] will automatically process these
  properties to decide whether to export a given metadata or not.

Note that since this is an auxiliary argument, it won't be part of
the PDB arguments. By default, the value will be [func@export_exif].</doc>
        <source-position filename="libgimp/gimpexportprocedure.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpexportprocedure.c"
                 line="703">a #GimpProcedure.</doc>
            <type name="ExportProcedure" c:type="GimpExportProcedure*"/>
          </instance-parameter>
          <parameter name="supports" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpexportprocedure.c"
                 line="704">whether Exif metadata are supported.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_support_iptc"
              c:identifier="gimp_export_procedure_set_support_iptc"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpexportprocedure.c"
             line="740">Determine whether @procedure supports exporting IPTC data. By default,
it won't (so there is usually no reason to run this function with
%FALSE).

This will have several consequences:

- Automatically adds a standard auxiliary argument "save-iptc" in the
  end of the argument list of @procedure, with relevant blurb and
  description.
- If used with other gimp_export_procedure_set_support_*() functions,
  they will always be ordered the same (the order of the calls don't
  matter), keeping all export procedures consistent.
- Generated GimpExportProcedureDialog will contain the metadata
  options, once again always in the same order and with consistent
  GUI style across plug-ins.
- API from [class@ProcedureConfig] will automatically process these
  properties to decide whether to export a given metadata or not.

Note that since this is an auxiliary argument, it won't be part of
the PDB arguments. By default, the value will be [func@export_iptc].</doc>
        <source-position filename="libgimp/gimpexportprocedure.h" line="105"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpexportprocedure.c"
                 line="742">a #GimpProcedure.</doc>
            <type name="ExportProcedure" c:type="GimpExportProcedure*"/>
          </instance-parameter>
          <parameter name="supports" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpexportprocedure.c"
                 line="743">whether IPTC metadata are supported.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_support_profile"
              c:identifier="gimp_export_procedure_set_support_profile"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpexportprocedure.c"
             line="818">Determine whether @procedure supports exporting ICC color profiles. By
default, it won't (so there is usually no reason to run this function
with %FALSE).

This will have several consequences:

- Automatically adds a standard auxiliary argument
  "save-color-profile" in the end of the argument list of @procedure,
  with relevant blurb and description.
- If used with other gimp_export_procedure_set_support_*() functions,
  they will always be ordered the same (the order of the calls don't
  matter), keeping all export procedures consistent.
- Generated GimpExportProcedureDialog will contain the metadata
  options, once again always in the same order and with consistent
  GUI style across plug-ins.
- API from [class@ProcedureConfig] will automatically process these
  properties to decide whether to export a given metadata or not.

Note that since this is an auxiliary argument, it won't be part of
the PDB arguments. By default, the value will be [func@export_color_profile].</doc>
        <source-position filename="libgimp/gimpexportprocedure.h" line="109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpexportprocedure.c"
                 line="820">a #GimpProcedure.</doc>
            <type name="ExportProcedure" c:type="GimpExportProcedure*"/>
          </instance-parameter>
          <parameter name="supports" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpexportprocedure.c"
                 line="821">whether color profiles can be stored.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_support_thumbnail"
              c:identifier="gimp_export_procedure_set_support_thumbnail"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpexportprocedure.c"
             line="857">Determine whether @procedure supports exporting a thumbnail. By default,
it won't (so there is usually no reason to run this function with
%FALSE).

This will have several consequences:

- Automatically adds a standard auxiliary argument "save-thumbnail"
  in the end of the argument list of @procedure, with relevant blurb
  and description.
- If used with other gimp_export_procedure_set_support_*() functions,
  they will always be ordered the same (the order of the calls don't
  matter), keeping all export procedures consistent.
- Generated GimpExportProcedureDialog will contain the metadata
  options, once again always in the same order and with consistent
  GUI style across plug-ins.
- API from [class@ProcedureConfig] will automatically process these
  properties to decide whether to export a given metadata or not.

Note that since this is an auxiliary argument, it won't be part of
the PDB arguments. By default, the value will be
[func@export_thumbnail].</doc>
        <source-position filename="libgimp/gimpexportprocedure.h" line="111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpexportprocedure.c"
                 line="859">a #GimpProcedure.</doc>
            <type name="ExportProcedure" c:type="GimpExportProcedure*"/>
          </instance-parameter>
          <parameter name="supports" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpexportprocedure.c"
                 line="860">whether a thumbnail can be stored.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_support_xmp"
              c:identifier="gimp_export_procedure_set_support_xmp"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpexportprocedure.c"
             line="779">Determine whether @procedure supports exporting XMP data. By default,
it won't (so there is usually no reason to run this function with
%FALSE).

This will have several consequences:

- Automatically adds a standard auxiliary argument "save-xmp" in the
  end of the argument list of @procedure, with relevant blurb and
  description.
- If used with other gimp_export_procedure_set_support_*() functions,
  they will always be ordered the same (the order of the calls don't
  matter), keeping all export procedures consistent.
- Generated GimpExportProcedureDialog will contain the metadata
  options, once again always in the same order and with consistent
  GUI style across plug-ins.
- API from [class@ProcedureConfig] will automatically process these
  properties to decide whether to export a given metadata or not.

Note that since this is an auxiliary argument, it won't be part of
the PDB arguments. By default, the value will be [func@export_xmp].</doc>
        <source-position filename="libgimp/gimpexportprocedure.h" line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpexportprocedure.c"
                 line="781">a #GimpProcedure.</doc>
            <type name="ExportProcedure" c:type="GimpExportProcedure*"/>
          </instance-parameter>
          <parameter name="supports" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpexportprocedure.c"
                 line="782">whether XMP metadata are supported.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="capabilities"
                version="3.0.0"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_capabilities"
                default-value="0">
        <doc xml:space="preserve"
             filename="libgimp/gimpexportprocedure.c"
             line="131">What #GimpExportCapabilities are supported</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="supports-comment"
                version="3.0.0"
                writable="1"
                construct="1"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="libgimp/gimpexportprocedure.c"
             line="210">Whether the export procedure supports storing a comment.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="supports-exif"
                version="3.0.0"
                writable="1"
                construct="1"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="libgimp/gimpexportprocedure.c"
             line="145">Whether the export procedure supports EXIF.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="supports-iptc"
                version="3.0.0"
                writable="1"
                construct="1"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="libgimp/gimpexportprocedure.c"
             line="158">Whether the export procedure supports IPTC.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="supports-profile"
                version="3.0.0"
                writable="1"
                construct="1"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="libgimp/gimpexportprocedure.c"
             line="184">Whether the export procedure supports ICC color profiles.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="supports-thumbnail"
                version="3.0.0"
                writable="1"
                construct="1"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="libgimp/gimpexportprocedure.c"
             line="197">Whether the export procedure supports storing a thumbnail.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="supports-xmp"
                version="3.0.0"
                writable="1"
                construct="1"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="libgimp/gimpexportprocedure.c"
             line="171">Whether the export procedure supports XMP.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="ExportProcedureClass"
            c:type="GimpExportProcedureClass"
            glib:is-gtype-struct-for="ExportProcedure">
      <source-position filename="libgimp/gimpexportprocedure.h" line="85"/>
      <field name="parent_class">
        <type name="FileProcedureClass" c:type="GimpFileProcedureClass"/>
      </field>
    </record>
    <enumeration name="ExportReturn" c:type="GimpExportReturn">
      <doc xml:space="preserve"
           filename="libgimp/gimpexportoptions.h"
           line="34">Possible return values of [method@ExportOptions.get_image].</doc>
      <source-position filename="libgimp/gimpexportoptions.h" line="45"/>
      <member name="ignore" value="0" c:identifier="GIMP_EXPORT_IGNORE">
        <doc xml:space="preserve"
             filename="libgimp/gimpexportoptions.h"
             line="36">The image is unmodified but export shall continue anyway</doc>
      </member>
      <member name="export" value="1" c:identifier="GIMP_EXPORT_EXPORT">
        <doc xml:space="preserve"
             filename="libgimp/gimpexportoptions.h"
             line="37">The chosen transforms were applied to a new image</doc>
      </member>
    </enumeration>
    <callback name="ExtractVectorFunc"
              c:type="GimpExtractVectorFunc"
              version="3.0"
              throws="1">
      <doc xml:space="preserve"
           filename="libgimp/gimpvectorloadprocedure.h"
           line="107">Loading a vector image happens in 2 steps:

1. this function is first run to determine which size should be actually requested.
2. [callback@RunVectorLoadFunc] is called with the suggested @width and @height.

This function is run during the lifetime of the GIMP session, as the first
step above. It should extract the maximum of information from the source
document to help GIMP take appropriate decisions for default values and also
for displaying relevant information in the load dialog (if necessary).

The best case scenario is to be able to extract proper dimensions (@width and
@height) with valid units supported by GIMP. If not possible, returning
already processed dimensions then setting @exact_width and @exact_height to
%FALSE in @extracted_data is also an option. If all you can get are no-unit
dimensions, set them with %GIMP_UNIT_PIXEL and %correct_ratio to %TRUE to at
least give a valid ratio as a default.

If there is no way to extract any valid default dimensions, not even a ratio,
then return %FALSE but leave %error as %NULL. [callback@RunVectorLoadFunc]
will still be called but default values might be bogus.
If the return value is %FALSE and %error is set, it means that the file is
invalid and cannot even be loaded. Thus [callback@RunVectorLoadFunc] won't be
run and %error is passed as the main run error.

Note: when @procedure is run, the original arguments will be passed as
@config. Nevertheless it may happen that this function is called with a %NULL
@config, in particular when [method@VectorLoadProcedure.extract_dimensions] is
called. In such a case, the callback is expected to return whatever can be
considered "best judgement" defaults.</doc>
      <source-position filename="libgimp/gimpvectorloadprocedure.h"
                       line="154"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpvectorloadprocedure.h"
             line="150">%TRUE if any information could be extracted from @file.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="procedure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpvectorloadprocedure.h"
               line="109">the [class@Gimp.Procedure].</doc>
          <type name="Procedure" c:type="GimpProcedure*"/>
        </parameter>
        <parameter name="run_mode" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpvectorloadprocedure.h"
               line="110">the [enum@RunMode].</doc>
          <type name="RunMode" c:type="GimpRunMode"/>
        </parameter>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpvectorloadprocedure.h"
               line="113">the [iface@Gio.File] to load from.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="metadata" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpvectorloadprocedure.h"
               line="111">the [class@Gimp.Metadata] which will be added to the new image.</doc>
          <type name="Metadata" c:type="GimpMetadata*"/>
        </parameter>
        <parameter name="config"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimp/gimpvectorloadprocedure.h"
               line="112">the @procedure's remaining arguments.</doc>
          <type name="ProcedureConfig" c:type="GimpProcedureConfig*"/>
        </parameter>
        <parameter name="extracted_data"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpvectorloadprocedure.h"
               line="114">dimensions and pixel density extracted from @file.</doc>
          <type name="VectorLoadData" c:type="GimpVectorLoadData*"/>
        </parameter>
        <parameter name="data_for_run"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   nullable="1">
          <doc xml:space="preserve"
               filename="libgimp/gimpvectorloadprocedure.h"
               line="115">will be passed as @data_from_extract in [callback@RunVectorLoadFunc].</doc>
          <type name="gpointer" c:type="gpointer*"/>
        </parameter>
        <parameter name="data_for_run_destroy"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="none"
                   nullable="1"
                   scope="async">
          <doc xml:space="preserve"
               filename="libgimp/gimpvectorloadprocedure.h"
               line="116">the free function for @data_for_run.</doc>
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify*"/>
        </parameter>
        <parameter name="extract_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="8">
          <doc xml:space="preserve"
               filename="libgimp/gimpvectorloadprocedure.h"
               line="117">the @extract_data given in [ctor@VectorLoadProcedure.new].</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="FileProcedure"
           c:symbol-prefix="file_procedure"
           c:type="GimpFileProcedure"
           parent="Procedure"
           abstract="1"
           glib:type-name="GimpFileProcedure"
           glib:get-type="gimp_file_procedure_get_type"
           glib:type-struct="FileProcedureClass">
      <doc xml:space="preserve"
           filename="libgimp/gimpfileprocedure.c"
           line="27">File procedures implement file support. They cannot be created directly.
Instead, you will create an instance of one of the sublasses (such as export
or load procedures). This provides a common interface for file-related
functions on these objects.</doc>
      <source-position filename="libgimp/gimpfileprocedure.h" line="49"/>
      <method name="get_extensions"
              c:identifier="gimp_file_procedure_get_extensions"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpfileprocedure.c"
             line="244">Returns the procedure's extensions as set with
[method@FileProcedure.set_extensions].</doc>
        <source-position filename="libgimp/gimpfileprocedure.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfileprocedure.c"
               line="251">The procedure's registered extensions.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpfileprocedure.c"
                 line="246">A file procedure object.</doc>
            <type name="FileProcedure" c:type="GimpFileProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_format_name"
              c:identifier="gimp_file_procedure_get_format_name"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpfileprocedure.c"
             line="145">Returns the procedure's format name, as set with
[method@FileProcedure.set_format_name].</doc>
        <source-position filename="libgimp/gimpfileprocedure.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfileprocedure.c"
               line="152">The procedure's format name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpfileprocedure.c"
                 line="147">A file procedure object.</doc>
            <type name="FileProcedure" c:type="GimpFileProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_handles_remote"
              c:identifier="gimp_file_procedure_get_handles_remote"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpfileprocedure.c"
             line="437">Returns the procedure's 'handles remote' flags as set with
[method@FileProcedure.set_handles_remote].</doc>
        <source-position filename="libgimp/gimpfileprocedure.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfileprocedure.c"
               line="444">The procedure's 'handles remote' flag</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpfileprocedure.c"
                 line="439">A file procedure object.</doc>
            <type name="FileProcedure" c:type="GimpFileProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_magics"
              c:identifier="gimp_file_procedure_get_magics"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpfileprocedure.c"
             line="336">Returns the procedure's magics as set with [method@FileProcedure.set_magics].</doc>
        <source-position filename="libgimp/gimpfileprocedure.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfileprocedure.c"
               line="342">The procedure's registered magics.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpfileprocedure.c"
                 line="338">A file procedure object.</doc>
            <type name="FileProcedure" c:type="GimpFileProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mime_types"
              c:identifier="gimp_file_procedure_get_mime_types"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpfileprocedure.c"
             line="197">Returns the procedure's mime-type as set with
[method@FileProcedure.set_mime_types].</doc>
        <source-position filename="libgimp/gimpfileprocedure.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfileprocedure.c"
               line="204">The procedure's registered mime-types.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpfileprocedure.c"
                 line="199">A file procedure.</doc>
            <type name="FileProcedure" c:type="GimpFileProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_prefixes"
              c:identifier="gimp_file_procedure_get_prefixes"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpfileprocedure.c"
             line="291">Returns the procedure's prefixes as set with
[method@FileProcedure.set_prefixes].</doc>
        <source-position filename="libgimp/gimpfileprocedure.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfileprocedure.c"
               line="298">The procedure's registered prefixes.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpfileprocedure.c"
                 line="293">A file procedure object.</doc>
            <type name="FileProcedure" c:type="GimpFileProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_priority"
              c:identifier="gimp_file_procedure_get_priority"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpfileprocedure.c"
             line="384">Returns the procedure's priority as set with
[method@FileProcedure.set_priority].</doc>
        <source-position filename="libgimp/gimpfileprocedure.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfileprocedure.c"
               line="391">The procedure's registered priority.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpfileprocedure.c"
                 line="386">A file procedure object.</doc>
            <type name="FileProcedure" c:type="GimpFileProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_extensions"
              c:identifier="gimp_file_procedure_set_extensions"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpfileprocedure.c"
             line="220">Registers the given list of extensions as something this procedure can
handle.</doc>
        <source-position filename="libgimp/gimpfileprocedure.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpfileprocedure.c"
                 line="222">A file procedure.</doc>
            <type name="FileProcedure" c:type="GimpFileProcedure*"/>
          </instance-parameter>
          <parameter name="extensions" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpfileprocedure.c"
                 line="223">A comma separated list of extensions this procedure can
             handle (i.e. "jpg,jpeg").</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_format_name"
              c:identifier="gimp_file_procedure_set_format_name"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpfileprocedure.c"
             line="108">Associates a format name with a file handler procedure.

This name can be used for any public-facing strings, such as
graphical interface labels. An example usage would be
%GimpExportProcedureDialog title looking like "Export Image as %s".

Note that since the format name is public-facing, it is recommended
to localize it at runtime, for instance through gettext, like:

```c
gimp_file_procedure_set_format_name (procedure, _("JPEG"));
```

Some language would indeed localize even some technical terms or
acronyms, even if sometimes just to rewrite them with the local
writing system.</doc>
        <source-position filename="libgimp/gimpfileprocedure.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpfileprocedure.c"
                 line="110">A file procedure.</doc>
            <type name="FileProcedure" c:type="GimpFileProcedure*"/>
          </instance-parameter>
          <parameter name="format_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpfileprocedure.c"
                 line="111">A public-facing name for the format, e.g. "PNG".</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_handles_remote"
              c:identifier="gimp_file_procedure_set_handles_remote"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpfileprocedure.c"
             line="407">Registers a file procedure as capable of handling arbitrary remote
URIs via GIO.

When @handles_remote is set to %TRUE, the procedure will get a
#GFile passed that can point to a remote file.

When @handles_remote is set to %FALSE, the procedure will get a
local [iface@Gio.File] passed and can use [method@Gio.File.get_path] to get
to a filename that can be used with whatever non-GIO means of dealing with
the file.</doc>
        <source-position filename="libgimp/gimpfileprocedure.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpfileprocedure.c"
                 line="409">A #GimpFileProcedure.</doc>
            <type name="FileProcedure" c:type="GimpFileProcedure*"/>
          </instance-parameter>
          <parameter name="handles_remote" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpfileprocedure.c"
                 line="410">The procedure's 'handles remote' flag.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_magics"
              c:identifier="gimp_file_procedure_set_magics"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpfileprocedure.c"
             line="314">Registers the list of magic file information this procedure can handle.</doc>
        <source-position filename="libgimp/gimpfileprocedure.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpfileprocedure.c"
                 line="316">A file procedure object.</doc>
            <type name="FileProcedure" c:type="GimpFileProcedure*"/>
          </instance-parameter>
          <parameter name="magics" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpfileprocedure.c"
                 line="317">A comma-separated list of magic file information (i.e. "0,string,GIF").</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mime_types"
              c:identifier="gimp_file_procedure_set_mime_types"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpfileprocedure.c"
             line="168">Associates MIME types with a file handler procedure.

Registers MIME types for a file handler procedure. This allows GIMP
to determine the MIME type of the file opened or saved using this
procedure. It is recommended that only one MIME type is registered
per file procedure; when registering more than one MIME type, GIMP
will associate the first one with files opened or saved with this
procedure.</doc>
        <source-position filename="libgimp/gimpfileprocedure.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpfileprocedure.c"
                 line="170">A file procedure object.</doc>
            <type name="FileProcedure" c:type="GimpFileProcedure*"/>
          </instance-parameter>
          <parameter name="mime_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpfileprocedure.c"
                 line="171">A comma-separated list of MIME types, such as "image/jpeg".</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_prefixes"
              c:identifier="gimp_file_procedure_set_prefixes"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpfileprocedure.c"
             line="267">It should almost never be necessary to register prefixes with file
procedures, because most sorts of URIs should be handled by GIO.</doc>
        <source-position filename="libgimp/gimpfileprocedure.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpfileprocedure.c"
                 line="269">A file procedure object.</doc>
            <type name="FileProcedure" c:type="GimpFileProcedure*"/>
          </instance-parameter>
          <parameter name="prefixes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpfileprocedure.c"
                 line="270">A comma separated list of prefixes this procedure can
            handle (i.e. "http:,ftp:").</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_priority"
              c:identifier="gimp_file_procedure_set_priority"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpfileprocedure.c"
             line="358">Sets the priority of a file handler procedure.

When more than one procedure matches a given file, the procedure with the
lowest priority is used; if more than one procedure has the lowest priority,
it is unspecified which one of them is used. The default priority for file
handler procedures is 0.</doc>
        <source-position filename="libgimp/gimpfileprocedure.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpfileprocedure.c"
                 line="360">A file procedure object.</doc>
            <type name="FileProcedure" c:type="GimpFileProcedure*"/>
          </instance-parameter>
          <parameter name="priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpfileprocedure.c"
                 line="361">The procedure's priority.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Procedure" c:type="GimpProcedure"/>
      </field>
    </class>
    <record name="FileProcedureClass"
            c:type="GimpFileProcedureClass"
            glib:is-gtype-struct-for="FileProcedure">
      <source-position filename="libgimp/gimpfileprocedure.h" line="49"/>
      <field name="parent_class">
        <type name="ProcedureClass" c:type="GimpProcedureClass"/>
      </field>
      <field name="_gimp_reserved1" introspectable="0">
        <callback name="_gimp_reserved1">
          <source-position filename="libgimp/gimpfileprocedure.h" line="40"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved2" introspectable="0">
        <callback name="_gimp_reserved2">
          <source-position filename="libgimp/gimpfileprocedure.h" line="41"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved3" introspectable="0">
        <callback name="_gimp_reserved3">
          <source-position filename="libgimp/gimpfileprocedure.h" line="42"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved4" introspectable="0">
        <callback name="_gimp_reserved4">
          <source-position filename="libgimp/gimpfileprocedure.h" line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved5" introspectable="0">
        <callback name="_gimp_reserved5">
          <source-position filename="libgimp/gimpfileprocedure.h" line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved6" introspectable="0">
        <callback name="_gimp_reserved6">
          <source-position filename="libgimp/gimpfileprocedure.h" line="45"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved7" introspectable="0">
        <callback name="_gimp_reserved7">
          <source-position filename="libgimp/gimpfileprocedure.h" line="46"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved8" introspectable="0">
        <callback name="_gimp_reserved8">
          <source-position filename="libgimp/gimpfileprocedure.h" line="47"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved9" introspectable="0">
        <callback name="_gimp_reserved9">
          <source-position filename="libgimp/gimpfileprocedure.h" line="48"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="FillType"
                 glib:type-name="GimpFillType"
                 glib:get-type="gimp_fill_type_get_type"
                 c:type="GimpFillType">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="363">Types of filling.</doc>
      <member name="foreground"
              value="0"
              c:identifier="GIMP_FILL_FOREGROUND"
              glib:nick="foreground"
              glib:name="GIMP_FILL_FOREGROUND">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="365">Foreground color</doc>
      </member>
      <member name="background"
              value="1"
              c:identifier="GIMP_FILL_BACKGROUND"
              glib:nick="background"
              glib:name="GIMP_FILL_BACKGROUND">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="366">Background color</doc>
      </member>
      <member name="cielab_middle_gray"
              value="2"
              c:identifier="GIMP_FILL_CIELAB_MIDDLE_GRAY"
              glib:nick="cielab-middle-gray"
              glib:name="GIMP_FILL_CIELAB_MIDDLE_GRAY">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="367">Middle Gray (CIELAB)</doc>
      </member>
      <member name="white"
              value="3"
              c:identifier="GIMP_FILL_WHITE"
              glib:nick="white"
              glib:name="GIMP_FILL_WHITE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="368">White</doc>
      </member>
      <member name="transparent"
              value="4"
              c:identifier="GIMP_FILL_TRANSPARENT"
              glib:nick="transparent"
              glib:name="GIMP_FILL_TRANSPARENT">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="369">Transparency</doc>
      </member>
      <member name="pattern"
              value="5"
              c:identifier="GIMP_FILL_PATTERN"
              glib:nick="pattern"
              glib:name="GIMP_FILL_PATTERN">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="370">Pattern</doc>
      </member>
    </enumeration>
    <record name="FlagsDesc" c:type="GimpFlagsDesc">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbasetypes.h"
           line="74">This structure is used to register translatable descriptions and
help texts for flag values. See gimp_flags_set_value_descriptions().</doc>
      <source-position filename="libgimpbase/gimpbasetypes.h" line="88"/>
      <field name="value" writable="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbasetypes.h"
             line="76">A flag value.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="value_desc" writable="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbasetypes.h"
             line="77">The value's description.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="value_help" writable="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbasetypes.h"
             line="78">The value's help text.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
    </record>
    <glib:boxed glib:name="FloatArray"
                c:symbol-prefix="float_array"
                glib:type-name="GimpFloatArray"
                glib:get-type="gimp_float_array_get_type">
    </glib:boxed>
    <class name="Font"
           c:symbol-prefix="font"
           c:type="GimpFont"
           parent="Resource"
           glib:type-name="GimpFont"
           glib:get-type="gimp_font_get_type"
           glib:type-struct="FontClass">
      <doc xml:space="preserve"
           filename="libgimp/gimpfont_pdb.c"
           line="30">Installable object used by text tools.</doc>
      <source-position filename="libgimp/gimpfont.h" line="38"/>
      <implements name="ConfigInterface"/>
      <function name="get_by_name"
                c:identifier="gimp_font_get_by_name"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpfont_pdb.c"
             line="74">Returns a font with the given name.

If several fonts are named identically, the one which is returned by
this function should be considered random. This can be used when you
know you won't have multiple fonts of this name or that you don't
want to choose (non-interactive scripts, etc.).
If you need more control, you should use gimp_fonts_get_by_name()
instead.
Returns %NULL when no font exists of that name.</doc>
        <source-position filename="libgimp/gimpfont_pdb.h" line="36"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgimp/gimpfont_pdb.c"
               line="88">The font.</doc>
          <type name="Font" c:type="GimpFont*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpfont_pdb.c"
                 line="76">The name of the font.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_pango_font_description"
              c:identifier="gimp_font_get_pango_font_description"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpfont.c"
             line="46">Returns a [struct@Pango.FontDescription] representing @font.</doc>
        <source-position filename="libgimp/gimpfont.h" line="41"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpfont.c"
               line="52">a %PangoFontDescription representing @font.</doc>
          <type name="Pango.FontDescription" c:type="PangoFontDescription*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpfont.c"
                 line="48">the [class@Gimp.Font]</doc>
            <type name="Font" c:type="GimpFont*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <record name="FontClass"
            c:type="GimpFontClass"
            glib:is-gtype-struct-for="Font">
      <source-position filename="libgimp/gimpfont.h" line="38"/>
      <field name="parent_class">
        <type name="ResourceClass" c:type="GimpResourceClass"/>
      </field>
    </record>
    <enumeration name="ForegroundExtractMode"
                 glib:type-name="GimpForegroundExtractMode"
                 glib:get-type="gimp_foreground_extract_mode_get_type"
                 c:type="GimpForegroundExtractMode">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="389">Foreground extract engines.</doc>
      <member name="matting"
              value="0"
              c:identifier="GIMP_FOREGROUND_EXTRACT_MATTING"
              glib:nick="matting"
              glib:name="GIMP_FOREGROUND_EXTRACT_MATTING">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="391">Matting (Since 2.10)</doc>
      </member>
    </enumeration>
    <class name="Gradient"
           c:symbol-prefix="gradient"
           c:type="GimpGradient"
           parent="Resource"
           glib:type-name="GimpGradient"
           glib:get-type="gimp_gradient_get_type"
           glib:type-struct="GradientClass">
      <doc xml:space="preserve"
           filename="libgimp/gimpgradient_pdb.c"
           line="30">Installable object used by the gradient rendering tool.</doc>
      <source-position filename="libgimp/gimpgradient.h" line="38"/>
      <implements name="ConfigInterface"/>
      <constructor name="new" c:identifier="gimp_gradient_new" version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradient_pdb.c"
             line="39">Creates a new gradient

Creates a new gradient having no segments.</doc>
        <source-position filename="libgimp/gimpgradient_pdb.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradient_pdb.c"
               line="47">The gradient.</doc>
          <type name="Gradient" c:type="GimpGradient*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="41">The requested name of the new gradient.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_by_name"
                c:identifier="gimp_gradient_get_by_name"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradient_pdb.c"
             line="75">Returns the gradient with the given name.

Returns an existing gradient having the given name. Returns %NULL
when no gradient exists of that name.</doc>
        <source-position filename="libgimp/gimpgradient_pdb.h" line="36"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradient_pdb.c"
               line="84">The gradient.</doc>
          <type name="Gradient" c:type="GimpGradient*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="77">The name of the gradient.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_custom_samples"
              c:identifier="gimp_gradient_get_custom_samples"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradient_pdb.c"
             line="207">Sample the gradient in custom positions.

Samples the color of the gradient at positions from a list. The left
endpoint of the gradient corresponds to position 0.0, and the right
endpoint corresponds to 1.0. Returns a list of floating-point
values, four for each sample (RGBA.)</doc>
        <source-position filename="libgimp/gimpgradient_pdb.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradient_pdb.c"
               line="223">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="gradient" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="209">The gradient.</doc>
            <type name="Gradient" c:type="GimpGradient*"/>
          </instance-parameter>
          <parameter name="num_samples" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="210">The number of samples to take.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="positions" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="211">The list of positions to sample along the gradient.</doc>
            <array length="0" zero-terminated="0" c:type="const gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="reverse" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="212">Use the reverse gradient.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="num_color_samples"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="213">Length of the color_samples array (4 * num_samples).</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="color_samples"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="214">Color samples: { R1, G1, B1, A1, ..., Rn, Gn, Bn, An }.</doc>
            <array length="3" zero-terminated="0" c:type="gdouble**">
              <type name="gdouble"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_number_of_segments"
              c:identifier="gimp_gradient_get_number_of_segments"
              version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradient_pdb.c"
             line="112">Gets the number of segments of the gradient

Gets the number of segments of the gradient</doc>
        <source-position filename="libgimp/gimpgradient_pdb.h" line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradient_pdb.c"
               line="120">Number of segments.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="gradient" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="114">The gradient.</doc>
            <type name="Gradient" c:type="GimpGradient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uniform_samples"
              c:identifier="gimp_gradient_get_uniform_samples"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradient_pdb.c"
             line="148">Sample the gradient in uniform parts.

Samples colors uniformly across the gradient. It returns a list of
floating-point values which correspond to the RGBA values for each
sample. The minimum number of samples to take is 2, in which case
the returned colors will correspond to the { 0.0, 1.0 } positions in
the gradient. For example, if the number of samples is 3, the
procedure will return the colors at positions { 0.0, 0.5, 1.0 }.</doc>
        <source-position filename="libgimp/gimpgradient_pdb.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradient_pdb.c"
               line="165">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="gradient" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="150">The gradient.</doc>
            <type name="Gradient" c:type="GimpGradient*"/>
          </instance-parameter>
          <parameter name="num_samples" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="151">The number of samples to take.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="reverse" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="152">Use the reverse gradient.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="num_color_samples"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="153">Length of the color_samples array (4 * num_samples).</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="color_samples"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="154">Color samples: { R1, G1, B1, A1, ..., Rn, Gn, Bn, An }.</doc>
            <array length="2" zero-terminated="0" c:type="gdouble**">
              <type name="gdouble"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="segment_get_blending_function"
              c:identifier="gimp_gradient_segment_get_blending_function"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradient_pdb.c"
             line="734">Gets the gradient segment's blending function

Gets the blending function of the segment at the index.
Returns an error when the segment index is out of range.</doc>
        <source-position filename="libgimp/gimpgradient_pdb.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradient_pdb.c"
               line="745">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="gradient" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="736">The gradient.</doc>
            <type name="Gradient" c:type="GimpGradient*"/>
          </instance-parameter>
          <parameter name="segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="737">The index of a segment within the gradient.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="blend_func"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="738">The blending function of the segment.</doc>
            <type name="GradientSegmentType"
                  c:type="GimpGradientSegmentType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="segment_get_coloring_type"
              c:identifier="gimp_gradient_segment_get_coloring_type"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradient_pdb.c"
             line="780">Gets the gradient segment's coloring type

Gets the coloring type of the segment at the index.
Returns an error when the segment index is out of range.</doc>
        <source-position filename="libgimp/gimpgradient_pdb.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradient_pdb.c"
               line="791">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="gradient" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="782">The gradient.</doc>
            <type name="Gradient" c:type="GimpGradient*"/>
          </instance-parameter>
          <parameter name="segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="783">The index of a segment within the gradient.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="coloring_type"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="784">The coloring type of the segment.</doc>
            <type name="GradientSegmentColor"
                  c:type="GimpGradientSegmentColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="segment_get_left_color"
              c:identifier="gimp_gradient_segment_get_left_color"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradient_pdb.c"
             line="268">Gets the left endpoint color of the segment

Gets the left endpoint color of the indexed segment of the gradient.
Returns an error when the segment index is out of range.</doc>
        <source-position filename="libgimp/gimpgradient_pdb.h" line="49"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradient_pdb.c"
               line="278">The return color.</doc>
          <type name="Gegl.Color" c:type="GeglColor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="gradient" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="270">The gradient.</doc>
            <type name="Gradient" c:type="GimpGradient*"/>
          </instance-parameter>
          <parameter name="segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="271">The index of a segment within the gradient.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="segment_get_left_pos"
              c:identifier="gimp_gradient_segment_get_left_pos"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradient_pdb.c"
             line="438">Gets the left endpoint position of a segment

Gets the position of the left endpoint of the segment of the
gradient.
Returns an error when the segment index is out of range.</doc>
        <source-position filename="libgimp/gimpgradient_pdb.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradient_pdb.c"
               line="450">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="gradient" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="440">The gradient.</doc>
            <type name="Gradient" c:type="GimpGradient*"/>
          </instance-parameter>
          <parameter name="segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="441">The index of a segment within the gradient.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="pos"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="442">The return position.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="segment_get_middle_pos"
              c:identifier="gimp_gradient_segment_get_middle_pos"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradient_pdb.c"
             line="537">Gets the midpoint position of the segment

Gets the position of the midpoint of the segment of the gradient.
Returns an error when the segment index is out of range.</doc>
        <source-position filename="libgimp/gimpgradient_pdb.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradient_pdb.c"
               line="548">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="gradient" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="539">The gradient.</doc>
            <type name="Gradient" c:type="GimpGradient*"/>
          </instance-parameter>
          <parameter name="segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="540">The index of a segment within the gradient.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="pos"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="541">The return position.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="segment_get_right_color"
              c:identifier="gimp_gradient_segment_get_right_color"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradient_pdb.c"
             line="353">Gets the right endpoint color of the segment

Gets the color of the right endpoint color of the segment of the
gradient.
Returns an error when the segment index is out of range.</doc>
        <source-position filename="libgimp/gimpgradient_pdb.h" line="54"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradient_pdb.c"
               line="364">The return color.</doc>
          <type name="Gegl.Color" c:type="GeglColor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="gradient" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="355">The gradient.</doc>
            <type name="Gradient" c:type="GimpGradient*"/>
          </instance-parameter>
          <parameter name="segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="356">The index of a segment within the gradient.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="segment_get_right_pos"
              c:identifier="gimp_gradient_segment_get_right_pos"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradient_pdb.c"
             line="635">Gets the right endpoint position of the segment

Gets the position of the right endpoint of the segment of the
gradient.
Returns an error when the segment index is out of range.</doc>
        <source-position filename="libgimp/gimpgradient_pdb.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradient_pdb.c"
               line="647">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="gradient" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="637">The gradient.</doc>
            <type name="Gradient" c:type="GimpGradient*"/>
          </instance-parameter>
          <parameter name="segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="638">The index of a segment within the gradient.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="pos"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="639">The return position.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="segment_range_blend_colors"
              c:identifier="gimp_gradient_segment_range_blend_colors"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradient_pdb.c"
             line="1189">Blend the colors of the segment range.

Blends the colors (but not the opacity) of the range of segments.
The colors' transition will then be uniform across the range.
Returns an error when a segment index is out of range, or gradient
is not editable.</doc>
        <source-position filename="libgimp/gimpgradient_pdb.h" line="114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradient_pdb.c"
               line="1202">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="gradient" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="1191">The gradient.</doc>
            <type name="Gradient" c:type="GimpGradient*"/>
          </instance-parameter>
          <parameter name="start_segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="1192">Index of the first segment to operate on.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="end_segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="1193">Index of the last segment to operate on. If negative, the range will extend to the end segment.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="segment_range_blend_opacity"
              c:identifier="gimp_gradient_segment_range_blend_opacity"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradient_pdb.c"
             line="1233">Blend the opacity of the segment range.

Blends the opacity (but not the colors) of the range of segments.
The opacity's transition will then be uniform across the range.
Returns an error when a segment index is out of range, or gradient
is not editable.</doc>
        <source-position filename="libgimp/gimpgradient_pdb.h" line="117"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradient_pdb.c"
               line="1246">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="gradient" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="1235">The gradient.</doc>
            <type name="Gradient" c:type="GimpGradient*"/>
          </instance-parameter>
          <parameter name="start_segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="1236">Index of the first segment to operate on.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="end_segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="1237">Index of the last segment to operate on. If negative, the range will extend to the end segment.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="segment_range_delete"
              c:identifier="gimp_gradient_segment_range_delete"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradient_pdb.c"
             line="1101">Delete the segment range

Deletes a range of segments.
Returns an error when a segment index is out of range, or gradient
is not editable. Deleting all the segments is undefined behavior.</doc>
        <source-position filename="libgimp/gimpgradient_pdb.h" line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradient_pdb.c"
               line="1113">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="gradient" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="1103">The gradient.</doc>
            <type name="Gradient" c:type="GimpGradient*"/>
          </instance-parameter>
          <parameter name="start_segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="1104">Index of the first segment to operate on.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="end_segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="1105">Index of the last segment to operate on. If negative, the range will extend to the end segment.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="segment_range_flip"
              c:identifier="gimp_gradient_segment_range_flip"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradient_pdb.c"
             line="918">Flip the segment range

Reverses the order of segments in a range, and swaps the left and
right colors in each segment. As if the range as a 1D line were
rotated in a plane.
Returns an error when a segment index is out of range, or gradient
is not editable.</doc>
        <source-position filename="libgimp/gimpgradient_pdb.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradient_pdb.c"
               line="932">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="gradient" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="920">The gradient.</doc>
            <type name="Gradient" c:type="GimpGradient*"/>
          </instance-parameter>
          <parameter name="start_segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="921">Index of the first segment to operate on.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="end_segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="922">Index of the last segment to operate on. If negative, the range will extend to the end segment.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="segment_range_move"
              c:identifier="gimp_gradient_segment_range_move"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradient_pdb.c"
             line="1277">Move the position of an entire segment range by a delta.

Moves the position of an entire segment range by a delta. The actual
delta (which is returned) will be limited by the control points of
the neighboring segments.
Returns the actual delta. Returns an error when a segment index is
out of range, or gradient is not editable.</doc>
        <source-position filename="libgimp/gimpgradient_pdb.h" line="120"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradient_pdb.c"
               line="1293">The final delta by which the range moved.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="gradient" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="1279">The gradient.</doc>
            <type name="Gradient" c:type="GimpGradient*"/>
          </instance-parameter>
          <parameter name="start_segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="1280">Index of the first segment to operate on.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="end_segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="1281">Index of the last segment to operate on. If negative, the range will extend to the end segment.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="delta" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="1282">The delta to move the segment range.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="control_compress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="1283">Whether or not to compress the neighboring segments.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="segment_range_redistribute_handles"
              c:identifier="gimp_gradient_segment_range_redistribute_handles"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradient_pdb.c"
             line="1144">Uniformly redistribute the segment range's handles

Redistributes the handles of the segment range of the gradient, so
they'll be evenly spaced. A handle is where two segments meet.
Segments will then have the same width.
Returns an error when a segment index is out of range, or gradient
is not editable.</doc>
        <source-position filename="libgimp/gimpgradient_pdb.h" line="111"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradient_pdb.c"
               line="1158">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="gradient" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="1146">The gradient.</doc>
            <type name="Gradient" c:type="GimpGradient*"/>
          </instance-parameter>
          <parameter name="start_segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="1147">Index of the first segment to operate on.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="end_segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="1148">Index of the last segment to operate on. If negative, the range will extend to the end segment.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="segment_range_replicate"
              c:identifier="gimp_gradient_segment_range_replicate"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradient_pdb.c"
             line="963">Replicate the segment range

Replicates a segment range a given number of times. Instead of the
original segment range, several smaller scaled copies of it will
appear in equal widths.
Returns an error when a segment index is out of range, or gradient
is not editable.</doc>
        <source-position filename="libgimp/gimpgradient_pdb.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradient_pdb.c"
               line="978">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="gradient" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="965">The gradient.</doc>
            <type name="Gradient" c:type="GimpGradient*"/>
          </instance-parameter>
          <parameter name="start_segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="966">Index of the first segment to operate on.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="end_segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="967">Index of the last segment to operate on. If negative, the range will extend to the end segment.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="replicate_times" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="968">The number of replicas for each segment.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="segment_range_set_blending_function"
              c:identifier="gimp_gradient_segment_range_set_blending_function"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradient_pdb.c"
             line="826">Sets the blending function of a range of segments

Sets the blending function of a range of segments.
Returns an error when a segment index is out of range, or gradient
is not editable.</doc>
        <source-position filename="libgimp/gimpgradient_pdb.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradient_pdb.c"
               line="839">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="gradient" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="828">The gradient.</doc>
            <type name="Gradient" c:type="GimpGradient*"/>
          </instance-parameter>
          <parameter name="start_segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="829">Index of the first segment to operate on.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="end_segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="830">Index of the last segment to operate on. If negative, the range will extend to the end segment.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="blending_function" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="831">The blending function.</doc>
            <type name="GradientSegmentType" c:type="GimpGradientSegmentType"/>
          </parameter>
        </parameters>
      </method>
      <method name="segment_range_set_coloring_type"
              c:identifier="gimp_gradient_segment_range_set_coloring_type"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradient_pdb.c"
             line="872">Sets the coloring type of a range of segments

Sets the coloring type of a range of segments.
Returns an error when a segment index is out of range, or gradient
is not editable.</doc>
        <source-position filename="libgimp/gimpgradient_pdb.h" line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradient_pdb.c"
               line="885">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="gradient" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="874">The gradient.</doc>
            <type name="Gradient" c:type="GimpGradient*"/>
          </instance-parameter>
          <parameter name="start_segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="875">Index of the first segment to operate on.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="end_segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="876">Index of the last segment to operate on. If negative, the range will extend to the end segment.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="coloring_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="877">The coloring type.</doc>
            <type name="GradientSegmentColor"
                  c:type="GimpGradientSegmentColor"/>
          </parameter>
        </parameters>
      </method>
      <method name="segment_range_split_midpoint"
              c:identifier="gimp_gradient_segment_range_split_midpoint"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradient_pdb.c"
             line="1011">Splits each segment in the segment range at midpoint

Splits each segment in the segment range at its midpoint.
Returns an error when a segment index is out of range, or gradient
is not editable.</doc>
        <source-position filename="libgimp/gimpgradient_pdb.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradient_pdb.c"
               line="1023">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="gradient" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="1013">The gradient.</doc>
            <type name="Gradient" c:type="GimpGradient*"/>
          </instance-parameter>
          <parameter name="start_segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="1014">Index of the first segment to operate on.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="end_segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="1015">Index of the last segment to operate on. If negative, the range will extend to the end segment.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="segment_range_split_uniform"
              c:identifier="gimp_gradient_segment_range_split_uniform"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradient_pdb.c"
             line="1054">Splits each segment in the segment range uniformly

Splits each segment in the segment range uniformly into to the
number of parts given.
Returns an error when a segment index is out of range, or gradient
is not editable.</doc>
        <source-position filename="libgimp/gimpgradient_pdb.h" line="104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradient_pdb.c"
               line="1068">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="gradient" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="1056">The gradient.</doc>
            <type name="Gradient" c:type="GimpGradient*"/>
          </instance-parameter>
          <parameter name="start_segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="1057">Index of the first segment to operate on.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="end_segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="1058">Index of the last segment to operate on. If negative, the range will extend to the end segment.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="split_parts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="1059">The number of uniform divisions to split each segment to.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="segment_set_left_color"
              c:identifier="gimp_gradient_segment_set_left_color"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradient_pdb.c"
             line="308">Sets the left endpoint color of a segment

Sets the color of the left endpoint the indexed segment of the
gradient. The alpha channel of the [class@Gegl.Color] is taken into
account.
Returns an error when gradient is not editable or index is out of
range.</doc>
        <source-position filename="libgimp/gimpgradient_pdb.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradient_pdb.c"
               line="322">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="gradient" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="310">The gradient.</doc>
            <type name="Gradient" c:type="GimpGradient*"/>
          </instance-parameter>
          <parameter name="segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="311">The index of a segment within the gradient.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="312">The color to set.</doc>
            <type name="Gegl.Color" c:type="GeglColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="segment_set_left_pos"
              c:identifier="gimp_gradient_segment_set_left_pos"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradient_pdb.c"
             line="485">Sets the left endpoint position of the segment

Sets the position of the left endpoint of the segment of the
gradient. The final position will be the given fraction from the
midpoint to the left to the midpoint of the current segment.
Returns the final position. Returns an error when gradient is not
editable or segment index is out of range.</doc>
        <source-position filename="libgimp/gimpgradient_pdb.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradient_pdb.c"
               line="500">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="gradient" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="487">The gradient.</doc>
            <type name="Gradient" c:type="GimpGradient*"/>
          </instance-parameter>
          <parameter name="segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="488">The index of a segment within the gradient.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="pos" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="489">The position to set the guidepoint to.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="final_pos"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="490">The return position.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="segment_set_middle_pos"
              c:identifier="gimp_gradient_segment_set_middle_pos"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradient_pdb.c"
             line="583">Sets the midpoint position of the segment

Sets the midpoint position of the segment of the gradient. The final
position will be the given fraction between the two endpoints of the
segment.
Returns the final position. Returns an error when gradient is not
editable or segment index is out of range.</doc>
        <source-position filename="libgimp/gimpgradient_pdb.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradient_pdb.c"
               line="598">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="gradient" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="585">The gradient.</doc>
            <type name="Gradient" c:type="GimpGradient*"/>
          </instance-parameter>
          <parameter name="segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="586">The index of a segment within the gradient.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="pos" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="587">The position to set the guidepoint to.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="final_pos"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="588">The return position.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="segment_set_right_color"
              c:identifier="gimp_gradient_segment_set_right_color"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradient_pdb.c"
             line="394">Sets the right endpoint color of the segment

Sets the right endpoint color of the segment of the gradient. The
alpha channel of the [class@Gegl.Color] is taken into account.
Returns an error when gradient is not editable or segment index is
out of range.</doc>
        <source-position filename="libgimp/gimpgradient_pdb.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradient_pdb.c"
               line="407">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="gradient" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="396">The gradient.</doc>
            <type name="Gradient" c:type="GimpGradient*"/>
          </instance-parameter>
          <parameter name="segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="397">The index of a segment within the gradient.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="398">The color to set.</doc>
            <type name="Gegl.Color" c:type="GeglColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="segment_set_right_pos"
              c:identifier="gimp_gradient_segment_set_right_pos"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradient_pdb.c"
             line="682">Sets the right endpoint position of the segment

Sets the right endpoint position of the segment of the gradient. The
final position will be the given fraction from the midpoint of the
current segment to the midpoint of the segment to the right.
Returns the final position. Returns an error when gradient is not
editable or segment index is out of range.</doc>
        <source-position filename="libgimp/gimpgradient_pdb.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradient_pdb.c"
               line="697">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="gradient" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="684">The gradient.</doc>
            <type name="Gradient" c:type="GimpGradient*"/>
          </instance-parameter>
          <parameter name="segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="685">The index of a segment within the gradient.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="pos" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="686">The position to set the right endpoint to.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="final_pos"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgradient_pdb.c"
                 line="687">The return position.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <enumeration name="GradientBlendColorSpace"
                 version="2.10"
                 glib:type-name="GimpGradientBlendColorSpace"
                 glib:get-type="gimp_gradient_blend_color_space_get_type"
                 c:type="GimpGradientBlendColorSpace">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="405">Color space for blending gradients.</doc>
      <member name="rgb_perceptual"
              value="0"
              c:identifier="GIMP_GRADIENT_BLEND_RGB_PERCEPTUAL"
              glib:nick="rgb-perceptual"
              glib:name="GIMP_GRADIENT_BLEND_RGB_PERCEPTUAL">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="407">Perceptual RGB</doc>
      </member>
      <member name="rgb_linear"
              value="1"
              c:identifier="GIMP_GRADIENT_BLEND_RGB_LINEAR"
              glib:nick="rgb-linear"
              glib:name="GIMP_GRADIENT_BLEND_RGB_LINEAR">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="408">Linear RGB</doc>
      </member>
      <member name="cie_lab"
              value="2"
              c:identifier="GIMP_GRADIENT_BLEND_CIE_LAB"
              glib:nick="cie-lab"
              glib:name="GIMP_GRADIENT_BLEND_CIE_LAB">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="409">CIE Lab</doc>
      </member>
    </enumeration>
    <record name="GradientClass"
            c:type="GimpGradientClass"
            glib:is-gtype-struct-for="Gradient">
      <source-position filename="libgimp/gimpgradient.h" line="38"/>
      <field name="parent_class">
        <type name="ResourceClass" c:type="GimpResourceClass"/>
      </field>
    </record>
    <enumeration name="GradientSegmentColor"
                 glib:type-name="GimpGradientSegmentColor"
                 glib:get-type="gimp_gradient_segment_color_get_type"
                 c:type="GimpGradientSegmentColor">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="427">Coloring types for gradient segments.</doc>
      <member name="rgb"
              value="0"
              c:identifier="GIMP_GRADIENT_SEGMENT_RGB"
              glib:nick="rgb"
              glib:name="GIMP_GRADIENT_SEGMENT_RGB">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="429">RGB</doc>
      </member>
      <member name="hsv_ccw"
              value="1"
              c:identifier="GIMP_GRADIENT_SEGMENT_HSV_CCW"
              glib:nick="hsv-ccw"
              glib:name="GIMP_GRADIENT_SEGMENT_HSV_CCW">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="430">HSV (counter-clockwise hue)</doc>
      </member>
      <member name="hsv_cw"
              value="2"
              c:identifier="GIMP_GRADIENT_SEGMENT_HSV_CW"
              glib:nick="hsv-cw"
              glib:name="GIMP_GRADIENT_SEGMENT_HSV_CW">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="431">HSV (clockwise hue)</doc>
      </member>
    </enumeration>
    <enumeration name="GradientSegmentType"
                 glib:type-name="GimpGradientSegmentType"
                 glib:get-type="gimp_gradient_segment_type_get_type"
                 c:type="GimpGradientSegmentType">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="447">Transition functions for gradient segments.</doc>
      <member name="linear"
              value="0"
              c:identifier="GIMP_GRADIENT_SEGMENT_LINEAR"
              glib:nick="linear"
              glib:name="GIMP_GRADIENT_SEGMENT_LINEAR">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="449">Linear</doc>
      </member>
      <member name="curved"
              value="1"
              c:identifier="GIMP_GRADIENT_SEGMENT_CURVED"
              glib:nick="curved"
              glib:name="GIMP_GRADIENT_SEGMENT_CURVED">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="450">Curved</doc>
      </member>
      <member name="sine"
              value="2"
              c:identifier="GIMP_GRADIENT_SEGMENT_SINE"
              glib:nick="sine"
              glib:name="GIMP_GRADIENT_SEGMENT_SINE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="451">Sinusoidal</doc>
      </member>
      <member name="sphere_increasing"
              value="3"
              c:identifier="GIMP_GRADIENT_SEGMENT_SPHERE_INCREASING"
              glib:nick="sphere-increasing"
              glib:name="GIMP_GRADIENT_SEGMENT_SPHERE_INCREASING">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="452">Spherical (increasing)</doc>
      </member>
      <member name="sphere_decreasing"
              value="4"
              c:identifier="GIMP_GRADIENT_SEGMENT_SPHERE_DECREASING"
              glib:nick="sphere-decreasing"
              glib:name="GIMP_GRADIENT_SEGMENT_SPHERE_DECREASING">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="453">Spherical (decreasing)</doc>
      </member>
      <member name="step"
              value="5"
              c:identifier="GIMP_GRADIENT_SEGMENT_STEP"
              glib:nick="step"
              glib:name="GIMP_GRADIENT_SEGMENT_STEP">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="454">Step</doc>
      </member>
    </enumeration>
    <enumeration name="GradientType"
                 glib:type-name="GimpGradientType"
                 glib:get-type="gimp_gradient_type_get_type"
                 c:type="GimpGradientType">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="473">Gradient shapes.</doc>
      <member name="linear"
              value="0"
              c:identifier="GIMP_GRADIENT_LINEAR"
              glib:nick="linear"
              glib:name="GIMP_GRADIENT_LINEAR">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="475">Linear</doc>
      </member>
      <member name="bilinear"
              value="1"
              c:identifier="GIMP_GRADIENT_BILINEAR"
              glib:nick="bilinear"
              glib:name="GIMP_GRADIENT_BILINEAR">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="476">Bi-linear</doc>
      </member>
      <member name="radial"
              value="2"
              c:identifier="GIMP_GRADIENT_RADIAL"
              glib:nick="radial"
              glib:name="GIMP_GRADIENT_RADIAL">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="477">Radial</doc>
      </member>
      <member name="square"
              value="3"
              c:identifier="GIMP_GRADIENT_SQUARE"
              glib:nick="square"
              glib:name="GIMP_GRADIENT_SQUARE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="478">Square</doc>
      </member>
      <member name="conical_symmetric"
              value="4"
              c:identifier="GIMP_GRADIENT_CONICAL_SYMMETRIC"
              glib:nick="conical-symmetric"
              glib:name="GIMP_GRADIENT_CONICAL_SYMMETRIC">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="479">Conical (symmetric)</doc>
      </member>
      <member name="conical_asymmetric"
              value="5"
              c:identifier="GIMP_GRADIENT_CONICAL_ASYMMETRIC"
              glib:nick="conical-asymmetric"
              glib:name="GIMP_GRADIENT_CONICAL_ASYMMETRIC">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="480">Conical (asymmetric)</doc>
      </member>
      <member name="shapeburst_angular"
              value="6"
              c:identifier="GIMP_GRADIENT_SHAPEBURST_ANGULAR"
              glib:nick="shapeburst-angular"
              glib:name="GIMP_GRADIENT_SHAPEBURST_ANGULAR">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="481">Shaped (angular)</doc>
      </member>
      <member name="shapeburst_spherical"
              value="7"
              c:identifier="GIMP_GRADIENT_SHAPEBURST_SPHERICAL"
              glib:nick="shapeburst-spherical"
              glib:name="GIMP_GRADIENT_SHAPEBURST_SPHERICAL">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="482">Shaped (spherical)</doc>
      </member>
      <member name="shapeburst_dimpled"
              value="8"
              c:identifier="GIMP_GRADIENT_SHAPEBURST_DIMPLED"
              glib:nick="shapeburst-dimpled"
              glib:name="GIMP_GRADIENT_SHAPEBURST_DIMPLED">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="483">Shaped (dimpled)</doc>
      </member>
      <member name="spiral_clockwise"
              value="9"
              c:identifier="GIMP_GRADIENT_SPIRAL_CLOCKWISE"
              glib:nick="spiral-clockwise"
              glib:name="GIMP_GRADIENT_SPIRAL_CLOCKWISE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="484">Spiral (clockwise)</doc>
      </member>
      <member name="spiral_anticlockwise"
              value="10"
              c:identifier="GIMP_GRADIENT_SPIRAL_ANTICLOCKWISE"
              glib:nick="spiral-anticlockwise"
              glib:name="GIMP_GRADIENT_SPIRAL_ANTICLOCKWISE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="485">Spiral (counter-clockwise)</doc>
      </member>
    </enumeration>
    <enumeration name="GridStyle"
                 glib:type-name="GimpGridStyle"
                 glib:get-type="gimp_grid_style_get_type"
                 c:type="GimpGridStyle">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="509">Rendering types for the display grid.</doc>
      <member name="dots"
              value="0"
              c:identifier="GIMP_GRID_DOTS"
              glib:nick="dots"
              glib:name="GIMP_GRID_DOTS">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="511">Intersections (dots)</doc>
      </member>
      <member name="intersections"
              value="1"
              c:identifier="GIMP_GRID_INTERSECTIONS"
              glib:nick="intersections"
              glib:name="GIMP_GRID_INTERSECTIONS">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="512">Intersections (crosshairs)</doc>
      </member>
      <member name="on_off_dash"
              value="2"
              c:identifier="GIMP_GRID_ON_OFF_DASH"
              glib:nick="on-off-dash"
              glib:name="GIMP_GRID_ON_OFF_DASH">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="513">Dashed</doc>
      </member>
      <member name="double_dash"
              value="3"
              c:identifier="GIMP_GRID_DOUBLE_DASH"
              glib:nick="double-dash"
              glib:name="GIMP_GRID_DOUBLE_DASH">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="514">Double dashed</doc>
      </member>
      <member name="solid"
              value="4"
              c:identifier="GIMP_GRID_SOLID"
              glib:nick="solid"
              glib:name="GIMP_GRID_SOLID">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="515">Solid</doc>
      </member>
    </enumeration>
    <class name="GroupLayer"
           c:symbol-prefix="group_layer"
           c:type="GimpGroupLayer"
           parent="Layer"
           glib:type-name="GimpGroupLayer"
           glib:get-type="gimp_group_layer_get_type"
           glib:type-struct="GroupLayerClass">
      <doc xml:space="preserve"
           filename="libgimp/gimpgrouplayer_pdb.c"
           line="30">Operations on a group layer.</doc>
      <source-position filename="libgimp/gimpgrouplayer.h" line="38"/>
      <constructor name="new"
                   c:identifier="gimp_group_layer_new"
                   version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpgrouplayer.c"
             line="77">Create a new group layer.

This procedure creates a new group layer with a given @name. If @name is
%NULL, GIMP will choose a name using its default layer name algorithm.

The new group layer still needs to be added to the image, as this is
not automatic. Add the new layer with the [method@Image.insert_layer]
method.

Other attributes such as layer mask modes, and offsets should be set
with explicit procedure calls.</doc>
        <source-position filename="libgimp/gimpgrouplayer.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgrouplayer.c"
               line="94">The newly created group layer.
         The object belongs to libgimp and you should not free it.</doc>
          <type name="GroupLayer" c:type="GimpGroupLayer*"/>
        </return-value>
        <parameters>
          <parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgrouplayer.c"
                 line="79">The image to which to add the layer.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgrouplayer.c"
                 line="80">The group layer name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_by_id"
                c:identifier="gimp_group_layer_get_by_id"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpgrouplayer.c"
             line="51">Returns a #GimpGroupLayer representing @layer_id. This function calls
gimp_item_get_by_id() and returns the item if it is a group layer or
%NULL otherwise.</doc>
        <source-position filename="libgimp/gimpgrouplayer.h" line="41"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgimp/gimpgrouplayer.c"
               line="59">a #GimpGroupLayer for @layer_id or
         %NULL if @layer_id does not represent a valid group layer.
         The object belongs to libgimp and you must not modify or
         unref it.</doc>
          <type name="GroupLayer" c:type="GimpGroupLayer*"/>
        </return-value>
        <parameters>
          <parameter name="layer_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgrouplayer.c"
                 line="53">The layer id.</doc>
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </function>
      <method name="merge"
              c:identifier="gimp_group_layer_merge"
              version="2.10.14">
        <doc xml:space="preserve"
             filename="libgimp/gimpgrouplayer_pdb.c"
             line="81">Merge the passed group layer's layers into one normal layer.

This procedure combines the layers of the passed group layer into a
single normal layer, replacing the group.
The group layer is expected to be attached to an image.</doc>
        <source-position filename="libgimp/gimpgrouplayer_pdb.h" line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgrouplayer_pdb.c"
               line="91">The resulting layer.</doc>
          <type name="Layer" c:type="GimpLayer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="group_layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpgrouplayer_pdb.c"
                 line="83">The group layer to merge.</doc>
            <type name="GroupLayer" c:type="GimpGroupLayer*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <record name="GroupLayerClass"
            c:type="GimpGroupLayerClass"
            glib:is-gtype-struct-for="GroupLayer">
      <source-position filename="libgimp/gimpgrouplayer.h" line="38"/>
      <field name="parent_class">
        <type name="LayerClass" c:type="GimpLayerClass"/>
      </field>
    </record>
    <record name="HSL"
            c:type="GimpHSL"
            glib:type-name="GimpHSL"
            glib:get-type="gimp_hsl_get_type"
            c:symbol-prefix="hsl">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimpcolortypes.h"
           line="60">Used to keep HSL and HSLA colors. All components are in a range of
[0.0..1.0].</doc>
      <source-position filename="libgimpcolor/gimpcolortypes.h" line="73"/>
      <field name="h" writable="1">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolortypes.h"
             line="62">the hue component</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="s" writable="1">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolortypes.h"
             line="63">the saturation component</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="l" writable="1">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolortypes.h"
             line="64">the lightness component</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="a" writable="1">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolortypes.h"
             line="65">the alpha component</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <method name="set" c:identifier="gimp_hsl_set" version="2.8">
        <source-position filename="libgimpcolor/gimphsl.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hsl" transfer-ownership="none">
            <type name="HSL" c:type="GimpHSL*"/>
          </instance-parameter>
          <parameter name="h" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="s" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="l" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_alpha"
              c:identifier="gimp_hsl_set_alpha"
              version="2.10">
        <source-position filename="libgimpcolor/gimphsl.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hsl" transfer-ownership="none">
            <type name="HSL" c:type="GimpHSL*"/>
          </instance-parameter>
          <parameter name="a" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_rgb" c:identifier="gimp_hsl_to_rgb">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolorspace.c"
             line="138">Convert a HSL color value to an RGB color value.</doc>
        <source-position filename="libgimpcolor/gimpcolorspace.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hsl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorspace.c"
                 line="140">A color value in the HSL colorspace</doc>
            <type name="HSL" c:type="const GimpHSL*"/>
          </instance-parameter>
          <parameter name="rgb"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorspace.c"
                 line="141">The value converted to a value
      in the RGB colorspace</doc>
            <type name="RGB" c:type="GimpRGB*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="HistogramChannel"
                 glib:type-name="GimpHistogramChannel"
                 glib:get-type="gimp_histogram_channel_get_type"
                 c:type="GimpHistogramChannel">
      <doc xml:space="preserve"
           filename="libgimp/gimpenums.h"
           line="71">Extracted from app/core/core-enums.h</doc>
      <member name="value"
              value="0"
              c:identifier="GIMP_HISTOGRAM_VALUE"
              glib:nick="value"
              glib:name="GIMP_HISTOGRAM_VALUE">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="73">GIMP_HISTOGRAM_VALUE</doc>
      </member>
      <member name="red"
              value="1"
              c:identifier="GIMP_HISTOGRAM_RED"
              glib:nick="red"
              glib:name="GIMP_HISTOGRAM_RED">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="74">GIMP_HISTOGRAM_RED</doc>
      </member>
      <member name="green"
              value="2"
              c:identifier="GIMP_HISTOGRAM_GREEN"
              glib:nick="green"
              glib:name="GIMP_HISTOGRAM_GREEN">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="75">GIMP_HISTOGRAM_GREEN</doc>
      </member>
      <member name="blue"
              value="3"
              c:identifier="GIMP_HISTOGRAM_BLUE"
              glib:nick="blue"
              glib:name="GIMP_HISTOGRAM_BLUE">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="76">GIMP_HISTOGRAM_BLUE</doc>
      </member>
      <member name="alpha"
              value="4"
              c:identifier="GIMP_HISTOGRAM_ALPHA"
              glib:nick="alpha"
              glib:name="GIMP_HISTOGRAM_ALPHA">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="77">GIMP_HISTOGRAM_ALPHA</doc>
      </member>
      <member name="luminance"
              value="5"
              c:identifier="GIMP_HISTOGRAM_LUMINANCE"
              glib:nick="luminance"
              glib:name="GIMP_HISTOGRAM_LUMINANCE">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="78">GIMP_HISTOGRAM_LUMINANCE</doc>
      </member>
    </enumeration>
    <enumeration name="HueRange"
                 glib:type-name="GimpHueRange"
                 glib:get-type="gimp_hue_range_get_type"
                 c:type="GimpHueRange">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="533">Hue ranges.</doc>
      <member name="all"
              value="0"
              c:identifier="GIMP_HUE_RANGE_ALL"
              glib:nick="all"
              glib:name="GIMP_HUE_RANGE_ALL">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="535">All hues</doc>
      </member>
      <member name="red"
              value="1"
              c:identifier="GIMP_HUE_RANGE_RED"
              glib:nick="red"
              glib:name="GIMP_HUE_RANGE_RED">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="536">Red hues</doc>
      </member>
      <member name="yellow"
              value="2"
              c:identifier="GIMP_HUE_RANGE_YELLOW"
              glib:nick="yellow"
              glib:name="GIMP_HUE_RANGE_YELLOW">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="537">Yellow hues</doc>
      </member>
      <member name="green"
              value="3"
              c:identifier="GIMP_HUE_RANGE_GREEN"
              glib:nick="green"
              glib:name="GIMP_HUE_RANGE_GREEN">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="538">Green hues</doc>
      </member>
      <member name="cyan"
              value="4"
              c:identifier="GIMP_HUE_RANGE_CYAN"
              glib:nick="cyan"
              glib:name="GIMP_HUE_RANGE_CYAN">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="539">Cyan hues</doc>
      </member>
      <member name="blue"
              value="5"
              c:identifier="GIMP_HUE_RANGE_BLUE"
              glib:nick="blue"
              glib:name="GIMP_HUE_RANGE_BLUE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="540">Blue hues</doc>
      </member>
      <member name="magenta"
              value="6"
              c:identifier="GIMP_HUE_RANGE_MAGENTA"
              glib:nick="magenta"
              glib:name="GIMP_HUE_RANGE_MAGENTA">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="541">Magenta hues</doc>
      </member>
    </enumeration>
    <function-macro name="IS_PARAM_SPEC_ARRAY"
                    c:identifier="GIMP_IS_PARAM_SPEC_ARRAY"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="216"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_BRUSH"
                    c:identifier="GIMP_IS_PARAM_SPEC_BRUSH"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="377"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_CHANNEL"
                    c:identifier="GIMP_IS_PARAM_SPEC_CHANNEL"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="208"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_CHOICE"
                    c:identifier="GIMP_IS_PARAM_SPEC_CHOICE"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="94"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_COLOR"
                    c:identifier="GIMP_IS_PARAM_SPEC_COLOR"
                    introspectable="0">
      <source-position filename="libgimpcolor/gimpcolor.h" line="78"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_CONFIG_PATH"
                    c:identifier="GIMP_IS_PARAM_SPEC_CONFIG_PATH"
                    introspectable="0">
      <source-position filename="libgimpconfig/gimpconfig-path.h" line="68"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_DISPLAY"
                    c:identifier="GIMP_IS_PARAM_SPEC_DISPLAY"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="316"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_DRAWABLE"
                    c:identifier="GIMP_IS_PARAM_SPEC_DRAWABLE"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="100"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_EXPORT_OPTIONS"
                    c:identifier="GIMP_IS_PARAM_SPEC_EXPORT_OPTIONS"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="452"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_FLOAT_ARRAY"
                    c:identifier="GIMP_IS_PARAM_SPEC_FLOAT_ARRAY"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="294"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_FONT"
                    c:identifier="GIMP_IS_PARAM_SPEC_FONT"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="493"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_GRADIENT"
                    c:identifier="GIMP_IS_PARAM_SPEC_GRADIENT"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="435"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_GROUP_LAYER"
                    c:identifier="GIMP_IS_PARAM_SPEC_GROUP_LAYER"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="181"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_IMAGE"
                    c:identifier="GIMP_IS_PARAM_SPEC_IMAGE"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="42"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_INT32_ARRAY"
                    c:identifier="GIMP_IS_PARAM_SPEC_INT32_ARRAY"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="249"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_ITEM"
                    c:identifier="GIMP_IS_PARAM_SPEC_ITEM"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="71"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_LAYER"
                    c:identifier="GIMP_IS_PARAM_SPEC_LAYER"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="127"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_LAYER_MASK"
                    c:identifier="GIMP_IS_PARAM_SPEC_LAYER_MASK"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="235"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_MATRIX2"
                    c:identifier="GIMP_IS_PARAM_SPEC_MATRIX2"
                    introspectable="0">
      <source-position filename="libgimpmath/gimpmatrix.h" line="45"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_MATRIX3"
                    c:identifier="GIMP_IS_PARAM_SPEC_MATRIX3"
                    introspectable="0">
      <source-position filename="libgimpmath/gimpmatrix.h" line="81"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_MEMSIZE"
                    c:identifier="GIMP_IS_PARAM_SPEC_MEMSIZE"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpmemsize.h" line="50"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_OBJECT"
                    c:identifier="GIMP_IS_PARAM_SPEC_OBJECT"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="123"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_OBJECT_ARRAY"
                    c:identifier="GIMP_IS_PARAM_SPEC_OBJECT_ARRAY"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="411"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_OBJECT_CLASS"
                    c:identifier="GIMP_IS_PARAM_SPEC_OBJECT_CLASS"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="124"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_PALETTE"
                    c:identifier="GIMP_IS_PARAM_SPEC_PALETTE"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="464"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_PARASITE"
                    c:identifier="GIMP_IS_PARAM_SPEC_PARASITE"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpparasite.h" line="49"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_PATH"
                    c:identifier="GIMP_IS_PARAM_SPEC_PATH"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="289"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_PATTERN"
                    c:identifier="GIMP_IS_PARAM_SPEC_PATTERN"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="406"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_RESOURCE"
                    c:identifier="GIMP_IS_PARAM_SPEC_RESOURCE"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="344"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_SELECTION"
                    c:identifier="GIMP_IS_PARAM_SPEC_SELECTION"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="262"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_TEXT_LAYER"
                    c:identifier="GIMP_IS_PARAM_SPEC_TEXT_LAYER"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="154"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_UNIT"
                    c:identifier="GIMP_IS_PARAM_SPEC_UNIT"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpunit.h" line="91"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_VALUE_ARRAY"
                    c:identifier="GIMP_IS_PARAM_SPEC_VALUE_ARRAY"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpvaluearray.h" line="84"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <enumeration name="IconType"
                 glib:type-name="GimpIconType"
                 glib:get-type="gimp_icon_type_get_type"
                 c:type="GimpIconType">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="561">Icon types for plug-ins to register.</doc>
      <member name="icon_name"
              value="0"
              c:identifier="GIMP_ICON_TYPE_ICON_NAME"
              glib:nick="icon-name"
              glib:name="GIMP_ICON_TYPE_ICON_NAME">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="563">Icon name</doc>
      </member>
      <member name="pixbuf"
              value="1"
              c:identifier="GIMP_ICON_TYPE_PIXBUF"
              glib:nick="pixbuf"
              glib:name="GIMP_ICON_TYPE_PIXBUF">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="564">Inline pixbuf</doc>
      </member>
      <member name="image_file"
              value="2"
              c:identifier="GIMP_ICON_TYPE_IMAGE_FILE"
              glib:nick="image-file"
              glib:name="GIMP_ICON_TYPE_IMAGE_FILE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="565">Image file</doc>
      </member>
    </enumeration>
    <class name="Image"
           c:symbol-prefix="image"
           c:type="GimpImage"
           parent="GObject.Object"
           glib:type-name="GimpImage"
           glib:get-type="gimp_image_get_type"
           glib:type-struct="ImageClass">
      <doc xml:space="preserve"
           filename="libgimp/gimpimage_pdb.c"
           line="30">Operations on complete images: creation, resizing/rescaling, and
operations involving multiple layers.</doc>
      <source-position filename="libgimp/gimpimage.h" line="35"/>
      <constructor name="new" c:identifier="gimp_image_new">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="117">Creates a new image with the specified width, height, and type.

Creates a new image, undisplayed, with the specified extents and
type. A layer should be created and added before this image is
displayed, or subsequent calls to gimp_display_new() with this image
as an argument will fail. Layers can be created using the
gimp_layer_new() commands. They can be added to an image using the
gimp_image_insert_layer() command.

If your image's type if INDEXED, a colormap must also be added with
gimp_image_set_colormap(). An indexed image without a colormap will
output unexpected colors.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="136">The newly created image.</doc>
          <type name="Image" c:type="GimpImage*"/>
        </return-value>
        <parameters>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="119">The width of the image.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="120">The height of the image.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="121">The type of image.</doc>
            <type name="ImageBaseType" c:type="GimpImageBaseType"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_precision"
                   c:identifier="gimp_image_new_with_precision"
                   version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="166">Creates a new image with the specified width, height, type and
precision.

Creates a new image, undisplayed with the specified extents, type
and precision. Indexed images can only be created at
GIMP_PRECISION_U8_NON_LINEAR precision. See gimp_image_new() for
further details.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="181">The newly created image.</doc>
          <type name="Image" c:type="GimpImage*"/>
        </return-value>
        <parameters>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="168">The width of the image.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="169">The height of the image.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="170">The type of image.</doc>
            <type name="ImageBaseType" c:type="GimpImageBaseType"/>
          </parameter>
          <parameter name="precision" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="171">The precision.</doc>
            <type name="Precision" c:type="GimpPrecision"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="convert_set_dither_matrix"
                c:identifier="gimp_image_convert_set_dither_matrix"
                version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpimageconvert_pdb.c"
             line="172">Set dither matrix for conversion to indexed

This procedure sets the dither matrix used when converting images to
INDEXED mode with positional dithering.</doc>
        <source-position filename="libgimp/gimpimageconvert_pdb.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageconvert_pdb.c"
               line="183">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageconvert_pdb.c"
                 line="174">Width of the matrix (0 to reset to default matrix).</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageconvert_pdb.c"
                 line="175">Height of the matrix (0 to reset to default matrix).</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageconvert_pdb.c"
                 line="176">The matrix -- all values must be &gt;= 1.</doc>
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_by_id"
                c:identifier="gimp_image_get_by_id"
                version="3.0">
        <source-position filename="libgimp/gimpimage.h" line="39"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage.c"
               line="147">a #GimpImage for @image_id or
         %NULL if @image_id does not represent a valid image.
         The object belongs to libgimp and you must not modify
         or unref it.</doc>
          <type name="Image" c:type="GimpImage*"/>
        </return-value>
        <parameters>
          <parameter name="image_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="145">The image id.</doc>
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </function>
      <function name="id_is_valid"
                c:identifier="gimp_image_id_is_valid"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="40">Returns TRUE if the image ID is valid.

This procedure checks if the given image ID is valid and refers to
an existing image.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="49">Whether the image ID is valid.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="image_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="42">The image ID to check.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="metadata_load_thumbnail"
                c:identifier="gimp_image_metadata_load_thumbnail"
                version="2.10"
                throws="1">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagemetadata.c"
             line="277">Retrieves a thumbnail from metadata if present.</doc>
        <source-position filename="libgimp/gimpimagemetadata.h" line="59"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagemetadata.c"
               line="284">a #GimpImage of the @file thumbnail.</doc>
          <type name="Image" c:type="GimpImage*"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagemetadata.c"
                 line="279">A #GFile image</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </function>
      <method name="add_hguide" c:identifier="gimp_image_add_hguide">
        <doc xml:space="preserve"
             filename="libgimp/gimpimageguides_pdb.c"
             line="39">Add a horizontal guide to an image.

This procedure adds a horizontal guide to an image. It takes the
input image and the y-position of the new guide as parameters. It
returns the guide ID of the new guide.</doc>
        <source-position filename="libgimp/gimpimageguides_pdb.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageguides_pdb.c"
               line="50">The new guide.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageguides_pdb.c"
                 line="41">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="yposition" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageguides_pdb.c"
                 line="42">The guide's y-offset from top of image.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_sample_point"
              c:identifier="gimp_image_add_sample_point"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagesamplepoints_pdb.c"
             line="39">Add a sample point to an image.

This procedure adds a sample point to an image. It takes the input
image and the position of the new sample points as parameters. It
returns the sample point ID of the new sample point.</doc>
        <source-position filename="libgimp/gimpimagesamplepoints_pdb.h"
                         line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagesamplepoints_pdb.c"
               line="51">The new sample point.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagesamplepoints_pdb.c"
                 line="41">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="position_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagesamplepoints_pdb.c"
                 line="42">The sample point's x-offset from left of image.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="position_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagesamplepoints_pdb.c"
                 line="43">The sample point's y-offset from top of image.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_vguide" c:identifier="gimp_image_add_vguide">
        <doc xml:space="preserve"
             filename="libgimp/gimpimageguides_pdb.c"
             line="78">Add a vertical guide to an image.

This procedure adds a vertical guide to an image. It takes the input
image and the x-position of the new guide as parameters. It returns
the guide ID of the new guide.</doc>
        <source-position filename="libgimp/gimpimageguides_pdb.h" line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageguides_pdb.c"
               line="89">The new guide.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageguides_pdb.c"
                 line="80">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="xposition" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageguides_pdb.c"
                 line="81">The guide's x-offset from left of image.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="attach_parasite"
              c:identifier="gimp_image_attach_parasite"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="3480">Add a parasite to an image.

This procedure attaches a parasite to an image. It has no return
values.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="209"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="3490">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3482">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="parasite" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3483">The parasite to attach to an image.</doc>
            <type name="Parasite" c:type="const GimpParasite*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clean_all" c:identifier="gimp_image_clean_all">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="2101">Set the image dirty count to 0.

This procedure sets the specified image's dirty count to 0, allowing
operations to occur without having a 'dirtied' image. This is
especially useful for creating and loading images which should not
initially be considered dirty, even though layers must be created,
filled, and installed in the image. Note that save plug-ins must NOT
call this function themselves after saving the image.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="141"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="2114">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2103">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="convert_color_profile"
              c:identifier="gimp_image_convert_color_profile"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagecolorprofile.c"
             line="211">Convert the image's layers to a color profile

This procedure converts from the image's color profile (or the
default RGB profile if none is set) to the given color profile. Only
RGB color profiles are accepted.</doc>
        <source-position filename="libgimp/gimpimagecolorprofile.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagecolorprofile.c"
               line="224">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagecolorprofile.c"
                 line="213">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagecolorprofile.c"
                 line="214">The color profile to convert to.</doc>
            <type name="ColorProfile" c:type="GimpColorProfile*"/>
          </parameter>
          <parameter name="intent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagecolorprofile.c"
                 line="215">Rendering intent.</doc>
            <type name="ColorRenderingIntent"
                  c:type="GimpColorRenderingIntent"/>
          </parameter>
          <parameter name="bpc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagecolorprofile.c"
                 line="216">Black point compensation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="convert_color_profile_from_file"
              c:identifier="gimp_image_convert_color_profile_from_file"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagecolorprofile_pdb.c"
             line="517">Convert the image's layers to a color profile

This procedure converts from the image's color profile (or the
default RGB or grayscale profile if none is set) to an ICC profile
specified by 'file'. Only RGB and grayscale color profiles are
accepted, according to the image's type.</doc>
        <source-position filename="libgimp/gimpimagecolorprofile_pdb.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagecolorprofile_pdb.c"
               line="531">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagecolorprofile_pdb.c"
                 line="519">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagecolorprofile_pdb.c"
                 line="520">The file containing the new color profile.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="intent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagecolorprofile_pdb.c"
                 line="521">Rendering intent.</doc>
            <type name="ColorRenderingIntent"
                  c:type="GimpColorRenderingIntent"/>
          </parameter>
          <parameter name="bpc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagecolorprofile_pdb.c"
                 line="522">Black point compensation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="convert_grayscale"
              c:identifier="gimp_image_convert_grayscale">
        <doc xml:space="preserve"
             filename="libgimp/gimpimageconvert_pdb.c"
             line="75">Convert specified image to grayscale

This procedure converts the specified image to grayscale. This
process requires an image in RGB or Indexed color mode.</doc>
        <source-position filename="libgimp/gimpimageconvert_pdb.h" line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageconvert_pdb.c"
               line="84">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageconvert_pdb.c"
                 line="77">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="convert_indexed" c:identifier="gimp_image_convert_indexed">
        <doc xml:space="preserve"
             filename="libgimp/gimpimageconvert_pdb.c"
             line="109">Convert specified image to and Indexed image

This procedure converts the specified image to 'indexed' color. This
process requires an image in RGB or Grayscale mode. The
'palette_type' specifies what kind of palette to use, A type of '0'
means to use an optimal palette of 'num_cols' generated from the
colors in the image. A type of '1' means to re-use the previous
palette (not currently implemented). A type of '2' means to use the
so-called WWW-optimized palette. Type '3' means to use only black
and white colors. A type of '4' means to use a palette from the gimp
palettes directories. The 'dither type' specifies what kind of
dithering to use. '0' means no dithering, '1' means standard
Floyd-Steinberg error diffusion, '2' means Floyd-Steinberg error
diffusion with reduced bleeding, '3' means dithering based on pixel
location ('Fixed' dithering).</doc>
        <source-position filename="libgimp/gimpimageconvert_pdb.h" line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageconvert_pdb.c"
               line="135">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageconvert_pdb.c"
                 line="111">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="dither_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageconvert_pdb.c"
                 line="112">The dither type to use.</doc>
            <type name="ConvertDitherType" c:type="GimpConvertDitherType"/>
          </parameter>
          <parameter name="palette_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageconvert_pdb.c"
                 line="113">The type of palette to use.</doc>
            <type name="ConvertPaletteType" c:type="GimpConvertPaletteType"/>
          </parameter>
          <parameter name="num_cols" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageconvert_pdb.c"
                 line="114">The number of colors to quantize to, ignored unless (palette_type == GIMP_CONVERT_PALETTE_GENERATE).</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="alpha_dither" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageconvert_pdb.c"
                 line="115">Dither transparency to fake partial opacity.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="remove_unused" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageconvert_pdb.c"
                 line="116">Remove unused or duplicate color entries from final palette, ignored if (palette_type == GIMP_CONVERT_PALETTE_GENERATE).</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="palette" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageconvert_pdb.c"
                 line="117">The name of the custom palette to use, ignored unless (palette_type == GIMP_CONVERT_PALETTE_CUSTOM).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="convert_precision"
              c:identifier="gimp_image_convert_precision"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpimageconvert_pdb.c"
             line="214">Convert the image to the specified precision

This procedure converts the image to the specified precision. Note
that indexed images cannot be converted and are always in
GIMP_PRECISION_U8.</doc>
        <source-position filename="libgimp/gimpimageconvert_pdb.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageconvert_pdb.c"
               line="225">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageconvert_pdb.c"
                 line="216">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="precision" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageconvert_pdb.c"
                 line="217">The new precision.</doc>
            <type name="Precision" c:type="GimpPrecision"/>
          </parameter>
        </parameters>
      </method>
      <method name="convert_rgb" c:identifier="gimp_image_convert_rgb">
        <doc xml:space="preserve"
             filename="libgimp/gimpimageconvert_pdb.c"
             line="39">Convert specified image to RGB color

This procedure converts the specified image to RGB color. This
process requires an image in Grayscale or Indexed color mode. No
image content is lost in this process aside from the colormap for an
indexed image.</doc>
        <source-position filename="libgimp/gimpimageconvert_pdb.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageconvert_pdb.c"
               line="50">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageconvert_pdb.c"
                 line="41">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="crop" c:identifier="gimp_image_crop">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagetransform_pdb.c"
             line="171">Crop the image to the specified extents.

This procedure crops the image so that it's new width and height are
equal to the supplied parameters. Offsets are also provided which
describe the position of the previous image's content. All channels
and layers within the image are cropped to the new image extents;
this includes the image selection mask. If any parameters are out of
range, an error is returned.</doc>
        <source-position filename="libgimp/gimpimagetransform_pdb.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagetransform_pdb.c"
               line="188">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagetransform_pdb.c"
                 line="173">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="new_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagetransform_pdb.c"
                 line="174">New image width: (0 &lt; new_width &lt;= width).</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="new_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagetransform_pdb.c"
                 line="175">New image height: (0 &lt; new_height &lt;= height).</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="offx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagetransform_pdb.c"
                 line="176">X offset: (0 &lt;= offx &lt;= (width - new_width)).</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="offy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagetransform_pdb.c"
                 line="177">Y offset: (0 &lt;= offy &lt;= (height - new_height)).</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete" c:identifier="gimp_image_delete">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="250">Delete the specified image.

If there are no displays associated with this image it will be
deleted. This means that you can not delete an image through the PDB
that was created by the user. If the associated display was however
created through the PDB and you know the display ID, you may delete
the display. Removal of the last associated display will then delete
the image.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="263">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="252">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="delete_guide" c:identifier="gimp_image_delete_guide">
        <doc xml:space="preserve"
             filename="libgimp/gimpimageguides_pdb.c"
             line="117">Deletes a guide from an image.

This procedure takes an image and a guide ID as input and removes
the specified guide from the specified image.</doc>
        <source-position filename="libgimp/gimpimageguides_pdb.h" line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageguides_pdb.c"
               line="127">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageguides_pdb.c"
                 line="119">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="guide" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageguides_pdb.c"
                 line="120">The ID of the guide to be removed.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_sample_point"
              c:identifier="gimp_image_delete_sample_point"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagesamplepoints_pdb.c"
             line="83">Deletes a sample point from an image.

This procedure takes an image and a sample point ID as input and
removes the specified sample point from the specified image.</doc>
        <source-position filename="libgimp/gimpimagesamplepoints_pdb.h"
                         line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagesamplepoints_pdb.c"
               line="93">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagesamplepoints_pdb.c"
                 line="85">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="sample_point" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagesamplepoints_pdb.c"
                 line="86">The ID of the sample point to be removed.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="detach_parasite"
              c:identifier="gimp_image_detach_parasite"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="3519">Removes a parasite from an image.

This procedure detaches a parasite from an image. It has no return
values.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="211"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="3529">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3521">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3522">The name of the parasite to detach from an image.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="duplicate" c:identifier="gimp_image_duplicate">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="215">Duplicate the specified image

This procedure duplicates the specified image, copying all layers,
channels, and image information.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="224">The new, duplicated image.</doc>
          <type name="Image" c:type="GimpImage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="217">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="export_path_to_file"
              c:identifier="gimp_image_export_path_to_file"
              version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="1379">save a path as an SVG file.

This procedure creates an SVG file to save a Path object, that is, a
path. The resulting file can be edited using a vector graphics
application, or later reloaded into GIMP. Pass %NULL as the 'path'
argument to export all paths in the image.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="107"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="1392">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1381">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1382">The SVG file to create.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="path"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1383">The path object to export, or %NULL for all in the image.</doc>
            <type name="Path" c:type="GimpPath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="export_path_to_string"
              c:identifier="gimp_image_export_path_to_string"
              version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="1423">Save a path as an SVG string.

This procedure works like [method@Gimp.Image.export_path_to_file]
but creates a string rather than a file. The string is
NULL-terminated and holds a complete XML document. Pass %NULL as the
'path' argument to export all paths in the image.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="110"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="1435">
         A string whose contents are a complete SVG document.
         The returned value must be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1425">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="path"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1426">The path object to export, or %NULL for all in the image.</doc>
            <type name="Path" c:type="GimpPath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_next_guide" c:identifier="gimp_image_find_next_guide">
        <doc xml:space="preserve"
             filename="libgimp/gimpimageguides_pdb.c"
             line="154">Find next guide on an image.

This procedure takes an image and a guide ID as input and finds the
guide ID of the successor of the given guide ID in the image's guide
list. If the supplied guide ID is 0, the procedure will return the
first Guide. The procedure will return 0 if given the final guide ID
as an argument or the image has no guides.</doc>
        <source-position filename="libgimp/gimpimageguides_pdb.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageguides_pdb.c"
               line="167">The next guide's ID.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageguides_pdb.c"
                 line="156">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="guide" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageguides_pdb.c"
                 line="157">The ID of the current guide (0 if first invocation).</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_next_sample_point"
              c:identifier="gimp_image_find_next_sample_point"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagesamplepoints_pdb.c"
             line="122">Find next sample point on an image.

This procedure takes an image and a sample point ID as input and
finds the sample point ID of the successor of the given sample point
ID in the image's sample point list. If the supplied sample point ID
is 0, the procedure will return the first sample point. The
procedure will return 0 if given the final sample point ID as an
argument or the image has no sample points.</doc>
        <source-position filename="libgimp/gimpimagesamplepoints_pdb.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagesamplepoints_pdb.c"
               line="136">The next sample point's ID.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagesamplepoints_pdb.c"
                 line="124">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="sample_point" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagesamplepoints_pdb.c"
                 line="125">The ID of the current sample point (0 if first invocation).</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="flatten" c:identifier="gimp_image_flatten">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="1790">Flatten all visible layers into a single layer. Discard all
invisible layers.

This procedure combines the visible layers in a manner analogous to
merging with the CLIP_TO_IMAGE merge type. Non-visible layers are
discarded, and the resulting image is stripped of its alpha channel.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="128"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="1801">The resulting layer.</doc>
          <type name="Layer" c:type="GimpLayer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1792">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="flip" c:identifier="gimp_image_flip">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagetransform_pdb.c"
             line="221">Flips the image horizontally or vertically.

This procedure flips (mirrors) the image.</doc>
        <source-position filename="libgimp/gimpimagetransform_pdb.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagetransform_pdb.c"
               line="230">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagetransform_pdb.c"
                 line="223">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="flip_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagetransform_pdb.c"
                 line="224">Type of flip.</doc>
            <type name="OrientationType" c:type="GimpOrientationType"/>
          </parameter>
        </parameters>
      </method>
      <method name="floating_sel_attached_to"
              c:identifier="gimp_image_floating_sel_attached_to">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="679">Return the drawable the floating selection is attached to.

This procedure returns the drawable the image's floating selection
is attached to, if it exists. If it doesn't exist, -1 is returned as
the drawable ID.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="689">
         The drawable the floating selection is attached to.</doc>
          <type name="Drawable" c:type="GimpDrawable*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="681">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="freeze_channels"
              c:identifier="gimp_image_freeze_channels"
              version="2.10.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="1092">Freeze the image's channel list.

This procedure freezes the channel list of the image, suppressing
any updates to the Channels dialog in response to changes to the
image's channels. This can significantly improve performance while
applying changes affecting the channel list.

Each call to gimp_image_freeze_channels() should be matched by a
corresponding call to gimp_image_thaw_channels(), undoing its
effects.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="1107">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1094">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="freeze_layers"
              c:identifier="gimp_image_freeze_layers"
              version="2.10.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="928">Freeze the image's layer list.

This procedure freezes the layer list of the image, suppressing any
updates to the Layers dialog in response to changes to the image's
layers. This can significantly improve performance while applying
changes affecting the layer list.

Each call to gimp_image_freeze_layers() should be matched by a
corresponding call to gimp_image_thaw_layers(), undoing its effects.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="942">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="930">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="freeze_paths"
              c:identifier="gimp_image_freeze_paths"
              version="2.10.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="1467">Freeze the image's path list.

This procedure freezes the path list of the image, suppressing any
updates to the Paths dialog in response to changes to the image's
path. This can significantly improve performance while applying
changes affecting the path list.

Each call to gimp_image_freeze_paths() should be matched by a
corresponding call to gimp_image_thaw_paths (), undoing its effects.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="112"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="1481">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1469">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_base_type" c:identifier="gimp_image_get_base_type">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="288">Get the base type of the image.

This procedure returns the image's base type. Layers in the image
must be of this subtype, but can have an optional alpha channel.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="297">The image's base type.</doc>
          <type name="ImageBaseType" c:type="GimpImageBaseType"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="290">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_channel_by_name"
              c:identifier="gimp_image_get_channel_by_name"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="3400">Find a channel with a given name in an image.

This procedure returns the channel with the given name in the
specified image.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="205"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="3410">The channel with the specified name.</doc>
          <type name="Channel" c:type="GimpChannel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3402">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3403">The name of the channel to find.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_channel_by_tattoo"
              c:identifier="gimp_image_get_channel_by_tattoo">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="3282">Find a channel with a given tattoo in an image.

This procedure returns the channel with the given tattoo in the
specified image.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="199"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="3292">The channel with the specified tattoo.</doc>
          <type name="Channel" c:type="GimpChannel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3284">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="tattoo" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3285">The tattoo of the channel to find.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_channels" c:identifier="gimp_image_get_channels">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="515">Returns the list of channels contained in the specified image.

This procedure returns the list of channels contained in the
specified image. This does not include the selection mask, or layer
masks. The order is from topmost to bottommost. Note that
\"channels\" are custom channels and do not include the image's
color components.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="53"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="528">
         The list of channels contained in the image.
         The returned value must be freed with g_free().</doc>
          <array length="0" zero-terminated="0" c:type="GimpChannel**">
            <type name="Channel"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="517">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="num_channels"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="518">The number of channels contained in the image.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_color_profile"
              c:identifier="gimp_image_get_color_profile"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagecolorprofile.c"
             line="26">Returns the image's color profile

This procedure returns the image's color profile, or NULL if the
image has no color profile assigned.</doc>
        <source-position filename="libgimp/gimpimagecolorprofile.h" line="33"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagecolorprofile.c"
               line="35">The image's color profile. The returned
         value must be freed with g_object_unref().</doc>
          <type name="ColorProfile" c:type="GimpColorProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagecolorprofile.c"
                 line="28">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_colormap" c:identifier="gimp_image_get_colormap">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage.c"
             line="564">Returns the image's colormap

This procedure returns an actual pointer to the image's colormap, as
well as the number of colors contained in the colormap. If the image
is not of base type INDEXED, this pointer will be NULL.</doc>
        <source-position filename="libgimp/gimpimage.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage.c"
               line="576">The image's colormap.</doc>
          <array length="0" zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="566">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="colormap_len"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="567">The size (in bytes) of the returned colormap</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="num_colors"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="568">Returns the number of colors in the colormap array.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_component_active"
              c:identifier="gimp_image_get_component_active">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="2595">Returns if the specified image's image component is active.

This procedure returns if the specified image's image component
(i.e. Red, Green, Blue intensity channels in an RGB image) is active
or inactive -- whether or not it can be modified. If the specified
component is not valid for the image type, an error is returned.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="168"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="2607">Component is active.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2597">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="component" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2598">The image component.</doc>
            <type name="ChannelType" c:type="GimpChannelType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_component_visible"
              c:identifier="gimp_image_get_component_visible">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="2677">Returns if the specified image's image component is visible.

This procedure returns if the specified image's image component
(i.e. Red, Green, Blue intensity channels in an RGB image) is
visible or invisible -- whether or not it can be seen. If the
specified component is not valid for the image type, an error is
returned.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="173"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="2690">Component is visible.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2679">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="component" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2680">The image component.</doc>
            <type name="ChannelType" c:type="GimpChannelType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_default_new_layer_mode"
              c:identifier="gimp_image_get_default_new_layer_mode"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="359">Get the default mode for newly created layers of this image.

Returns the default mode for newly created layers of this image.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="367">The layer mode.</doc>
          <type name="LayerMode" c:type="GimpLayerMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="361">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_effective_color_profile"
              c:identifier="gimp_image_get_effective_color_profile"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagecolorprofile.c"
             line="171">Returns the color profile that is used for the image.

This procedure returns the color profile that is actually used for
this image, which is the profile returned by
gimp_image_get_color_profile() if the image has a profile assigned,
or the default RGB profile from preferences if no profile is
assigned to the image. If there is no default RGB profile configured
in preferences either, a generated default RGB profile is returned.</doc>
        <source-position filename="libgimp/gimpimagecolorprofile.h" line="41"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagecolorprofile.c"
               line="184">The color profile. The returned value must
         be freed with g_object_unref().</doc>
          <type name="ColorProfile" c:type="GimpColorProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagecolorprofile.c"
                 line="173">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_exported_file"
              c:identifier="gimp_image_get_exported_file"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="2917">Returns the exported file for the specified image.

This procedure returns the file associated with the specified image
if the image was exported a non-native GIMP format. If the image was
not exported, this procedure returns %NULL.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="183"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="2927">The exported file.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2919">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_file" c:identifier="gimp_image_get_file" version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="2760">Returns the file for the specified image.

This procedure returns the file associated with the specified image.
The image has a file only if it was loaded or imported from a file
or has since been saved or exported. Otherwise, this function
returns %NULL. See also gimp-image-get-imported-file to get the
current file if it was imported from a non-GIMP file format and not
yet saved, or gimp-image-get-exported-file if the image has been
exported to a non-GIMP file format.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="178"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="2774">The file.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2762">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_floating_sel"
              c:identifier="gimp_image_get_floating_sel">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="644">Return the floating selection of the image.

This procedure returns the image's floating selection, if it exists.
If it doesn't exist, -1 is returned as the layer ID.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="653">The image's floating selection.</doc>
          <type name="Layer" c:type="GimpLayer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="646">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_guide_orientation"
              c:identifier="gimp_image_get_guide_orientation">
        <doc xml:space="preserve"
             filename="libgimp/gimpimageguides_pdb.c"
             line="195">Get orientation of a guide on an image.

This procedure takes an image and a guide ID as input and returns
the orientations of the guide.</doc>
        <source-position filename="libgimp/gimpimageguides_pdb.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageguides_pdb.c"
               line="205">The guide's orientation.</doc>
          <type name="OrientationType" c:type="GimpOrientationType"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageguides_pdb.c"
                 line="197">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="guide" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageguides_pdb.c"
                 line="198">The guide.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_guide_position"
              c:identifier="gimp_image_get_guide_position">
        <doc xml:space="preserve"
             filename="libgimp/gimpimageguides_pdb.c"
             line="233">Get position of a guide on an image.

This procedure takes an image and a guide ID as input and returns
the position of the guide relative to the top or left of the image.</doc>
        <source-position filename="libgimp/gimpimageguides_pdb.h" line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageguides_pdb.c"
               line="243">The guide's position relative to top or left of image.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageguides_pdb.c"
                 line="235">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="guide" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageguides_pdb.c"
                 line="236">The guide.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_height" c:identifier="gimp_image_get_height">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="430">Return the height of the image

This procedure returns the image's height. This value is independent
of any of the layers in this image. This is the \"canvas\" height.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="439">The image's height.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="432">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="gimp_image_get_id"
              glib:get-property="id"
              version="3.0">
        <source-position filename="libgimp/gimpimage.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage.c"
               line="133">the image ID.</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="131">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_imported_file"
              c:identifier="gimp_image_get_imported_file"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="2878">Returns the imported file for the specified image.

This procedure returns the file associated with the specified image
if the image was imported from a non-native Gimp format. If the
image was not imported, or has since been saved in the native Gimp
format, this procedure returns %NULL.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="182"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="2889">The imported file.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2880">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_item_position"
              c:identifier="gimp_image_get_item_position"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="1547">Returns the position of the item in its level of its item tree.

This procedure determines the position of the specified item in its
level in its item tree in the image. If the item doesn't exist in
the image, or the item is not part of an item tree, an error is
returned.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="1559">The position of the item in its level in the item tree.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1549">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1550">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_layer_by_name"
              c:identifier="gimp_image_get_layer_by_name"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="3360">Find a layer with a given name in an image.

This procedure returns the layer with the given name in the
specified image.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="203"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="3370">The layer with the specified name.</doc>
          <type name="Layer" c:type="GimpLayer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3362">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3363">The name of the layer to find.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_layer_by_tattoo"
              c:identifier="gimp_image_get_layer_by_tattoo">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="3244">Find a layer with a given tattoo in an image.

This procedure returns the layer with the given tattoo in the
specified image.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="197"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="3254">The layer with the specified tattoo.</doc>
          <type name="Layer" c:type="GimpLayer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3246">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="tattoo" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3247">The tattoo of the layer to find.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_layers" c:identifier="gimp_image_get_layers">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="465">Returns the list of root layers contained in the specified image.

This procedure returns the list of root layers contained in the
specified image. The order of layers is from topmost to bottommost.
Note that this is not the full list of layers, but only the root
layers, i.e. layers with no parents themselves. If you need all
layers, it is up to you to verify that any of these layers is a
group layer with gimp_item_is_group() and to obtain its children
with gimp_item_get_children() (possibly recursively checking if
these have children too).</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="51"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="481">
         The list of layers contained in the image.
         The returned value must be freed with g_free().</doc>
          <array length="0" zero-terminated="0" c:type="GimpLayer**">
            <type name="Layer"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="467">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="num_layers"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="468">The number of root layers contained in the image.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_metadata"
              c:identifier="gimp_image_get_metadata"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage.c"
             line="704">Returns the image's metadata.

Returns exif/iptc/xmp metadata from the image.</doc>
        <source-position filename="libgimp/gimpimage.h" line="77"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage.c"
               line="712">The exif/ptc/xmp metadata,
         or %NULL if there is none.</doc>
          <type name="Metadata" c:type="GimpMetadata*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="706">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="gimp_image_get_name">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="2955">Returns the specified image's name.

This procedure returns the image's name. If the image has a filename
or an URI, then the returned name contains the filename's or URI's
base name (the last component of the path). Otherwise it is the
translated string \"Untitled\". The returned name is formatted like
the image name in the image window title, it may contain '[]',
'(imported)' etc. and should only be used to label user interface
elements. Never use it to construct filenames.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="184"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="2969">The name.
         The returned value must be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2957">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_palette"
              c:identifier="gimp_image_get_palette"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="1993">Returns the image's colormap

This procedure returns the image's colormap as a GimpPalette. If the
image is not in Indexed color mode, %NULL is returned.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="137"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="2002">The image's colormap.</doc>
          <type name="Palette" c:type="GimpPalette*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1995">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parasite"
              c:identifier="gimp_image_get_parasite"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="3558">Look up a parasite in an image

Finds and returns the parasite that was previously attached to an
image.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="213"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="3568">The found parasite.</doc>
          <type name="Parasite" c:type="GimpParasite*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3560">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3561">The name of the parasite to find.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_parasite_list"
              c:identifier="gimp_image_get_parasite_list"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="3598">List all parasites.

Returns a list of the names of all currently attached parasites.
These names can later be used to get the actual #GimpParasite with
gimp_image_get_parasite() when needed.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="215"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="3608">
         The names of currently attached parasites.
         The returned value must be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3600">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path_by_name"
              c:identifier="gimp_image_get_path_by_name"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="3440">Find a path with a given name in an image.

This procedure returns the path with the given name in the specified
image.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="207"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="3450">The path with the specified name.</doc>
          <type name="Path" c:type="GimpPath*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3442">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3443">The name of the path to find.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_path_by_tattoo"
              c:identifier="gimp_image_get_path_by_tattoo"
              version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="3320">Find a path with a given tattoo in an image.

This procedure returns the path with the given tattoo in the
specified image.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="201"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="3330">The path with the specified tattoo.</doc>
          <type name="Path" c:type="GimpPath*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3322">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="tattoo" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3323">The tattoo of the path to find.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_paths"
              c:identifier="gimp_image_get_paths"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="562">Returns the list of paths contained in the specified image.

This procedure returns the list of paths contained in the specified
image.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="55"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="572">
         The list of paths contained in the image.
         The returned value must be freed with g_free().</doc>
          <array length="0" zero-terminated="0" c:type="GimpPath**">
            <type name="Path"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="564">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="num_paths"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="565">The number of paths contained in the image.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_precision"
              c:identifier="gimp_image_get_precision"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="323">Get the precision of the image.

This procedure returns the image's precision.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="331">The image's precision.</doc>
          <type name="Precision" c:type="GimpPrecision"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="325">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_resolution" c:identifier="gimp_image_get_resolution">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="2996">Returns the specified image's resolution.

This procedure returns the specified image's resolution in dots per
inch. This value is independent of any of the layers in this image.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="185"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="3007">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2998">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="xresolution"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2999">The resolution in the x-axis, in dots per inch.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="yresolution"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3000">The resolution in the y-axis, in dots per inch.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sample_point_position"
              c:identifier="gimp_image_get_sample_point_position"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagesamplepoints_pdb.c"
             line="166">Get position of a sample point on an image.

This procedure takes an image and a sample point ID as input and
returns the position of the sample point relative to the top and
left of the image.</doc>
        <source-position filename="libgimp/gimpimagesamplepoints_pdb.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagesamplepoints_pdb.c"
               line="178">The sample point's x-offset relative to left of image.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagesamplepoints_pdb.c"
                 line="168">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="sample_point" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagesamplepoints_pdb.c"
                 line="169">The guide.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="position_y"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagesamplepoints_pdb.c"
                 line="170">The sample point's y-offset relative to top of image.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_selected_channels"
              c:identifier="gimp_image_get_selected_channels"
              version="3.0.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="2330">Returns the specified image's selected channels.

This procedure returns the list of selected channels in the
specified image.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="155"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="2340">
         The list of selected channels in the image.
         The returned value must be freed with g_free().</doc>
          <array length="0" zero-terminated="0" c:type="GimpChannel**">
            <type name="Channel"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2332">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="num_channels"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2333">The number of selected channels in the image.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_selected_drawables"
              c:identifier="gimp_image_get_selected_drawables"
              version="3.0.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="2509">Get the image's selected drawables

This procedure returns the list of selected drawable in the
specified image. This can be either layers, channels, or a layer
mask.
The active drawables are the active image channels. If there are
none, these are the active image layers. If the active image layer
has a layer mask and the layer mask is in edit mode, then the layer
mask is the active drawable.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="165"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="2524">
         The list of selected drawables in the image.
         The returned value must be freed with g_free().</doc>
          <array length="0" zero-terminated="0" c:type="GimpItem**">
            <type name="Item"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2511">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="num_drawables"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2512">The number of selected drawables in the image.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_selected_layers"
              c:identifier="gimp_image_get_selected_layers"
              version="3.0.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="2239">Returns the specified image's selected layers.

This procedure returns the list of selected layers in the specified
image.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="150"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="2249">
         The list of selected layers in the image.
         The returned value must be freed with g_free().</doc>
          <array length="0" zero-terminated="0" c:type="GimpLayer**">
            <type name="Layer"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2241">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="num_layers"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2242">The number of selected layers in the image.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_selected_paths"
              c:identifier="gimp_image_get_selected_paths"
              version="3.0.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="2421">Returns the specified image's selected paths.

This procedure returns the list of selected paths in the specified
image.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="160"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="2431">
         The list of selected paths in the image.
         The returned value must be freed with g_free().</doc>
          <array length="0" zero-terminated="0" c:type="GimpPath**">
            <type name="Path"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2423">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="num_paths"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2424">The number of selected paths in the image.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_selection" c:identifier="gimp_image_get_selection">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="2560">Returns the specified image's selection.

This will always return a valid ID for a selection -- which is
represented as a channel internally.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="167"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="2569">The selection channel.</doc>
          <type name="Selection" c:type="GimpSelection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2562">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_simulation_bpc"
              c:identifier="gimp_image_get_simulation_bpc"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagecolorprofile_pdb.c"
             line="392">Returns whether the image has Black Point Compensation enabled for
its simulation

This procedure returns whether the image has Black Point
Compensation enabled for its simulation</doc>
        <source-position filename="libgimp/gimpimagecolorprofile_pdb.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagecolorprofile_pdb.c"
               line="402">The Black Point Compensation status.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagecolorprofile_pdb.c"
                 line="394">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_simulation_intent"
              c:identifier="gimp_image_get_simulation_intent"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagecolorprofile_pdb.c"
             line="318">Returns the image's simulation rendering intent

This procedure returns the image's simulation rendering intent.</doc>
        <source-position filename="libgimp/gimpimagecolorprofile_pdb.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagecolorprofile_pdb.c"
               line="326">The image's simulation rendering intent.</doc>
          <type name="ColorRenderingIntent" c:type="GimpColorRenderingIntent"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagecolorprofile_pdb.c"
                 line="320">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_simulation_profile"
              c:identifier="gimp_image_get_simulation_profile"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagecolorprofile.c"
             line="99">Returns the image's simulation color profile

This procedure returns the image's simulation color profile, or NULL if
the image has no simulation color profile assigned.</doc>
        <source-position filename="libgimp/gimpimagecolorprofile.h" line="37"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagecolorprofile.c"
               line="108">The image's simulation color profile. The
         returned value must be freed with g_object_unref().</doc>
          <type name="ColorProfile" c:type="GimpColorProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagecolorprofile.c"
                 line="101">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tattoo_state"
              c:identifier="gimp_image_get_tattoo_state">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="3161">Returns the tattoo state associated with the image.

This procedure returns the tattoo state of the image. Use only by
save/load plug-ins that wish to preserve an images tattoo state.
Using this function at other times will produce unexpected results.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="194"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="3171">The tattoo state.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3163">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_thumbnail"
              c:identifier="gimp_image_get_thumbnail"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage.c"
             line="663">Retrieves a thumbnail pixbuf for @image.
The thumbnail will be not larger than the requested size.</doc>
        <source-position filename="libgimp/gimpimage.h" line="72"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage.c"
               line="673">a new #GdkPixbuf</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="665">the #GimpImage</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="666">the requested thumbnail width  (&lt;= 1024 pixels)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="667">the requested thumbnail height (&lt;= 1024 pixels)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="668">how to handle an alpha channel</doc>
            <type name="PixbufTransparency" c:type="GimpPixbufTransparency"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_thumbnail_data"
              c:identifier="gimp_image_get_thumbnail_data">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage.c"
             line="628">Get a thumbnail of an image.

This function gets data from which a thumbnail of an image preview
can be created. Maximum x or y dimension is 1024 pixels. The pixels
are returned in RGB[A] or GRAY[A] format. The bpp return value
gives the number of bytes per pixel in the image.</doc>
        <source-position filename="libgimp/gimpimage.h" line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage.c"
               line="642">the thumbnail data.</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="630">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="width"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="631">The requested thumbnail width.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="height"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="632">The requested thumbnail height.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="bpp"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="633">The previews bpp.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_unit" c:identifier="gimp_image_get_unit">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="3084">Returns the specified image's unit.

This procedure returns the specified image's unit. This value is
independent of any of the layers in this image. See the
gimp_unit_*() procedure definitions for the valid range of unit IDs
and a description of the unit system.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="191"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="3095">The unit.</doc>
          <type name="Unit" c:type="GimpUnit*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3086">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_width" c:identifier="gimp_image_get_width">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="395">Return the width of the image

This procedure returns the image's width. This value is independent
of any of the layers in this image. This is the \"canvas\" width.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="404">The image's width.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="397">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_xcf_file"
              c:identifier="gimp_image_get_xcf_file"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="2841">Returns the XCF file for the specified image.

This procedure returns the XCF file associated with the image. If
there is no such file, this procedure returns %NULL.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="181"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="2850">The imported XCF file.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2843">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="grid_get_background_color"
              c:identifier="gimp_image_grid_get_background_color"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagegrid_pdb.c"
             line="295">Sets the background color of an image's grid.

This procedure gets the background color of an image's grid.</doc>
        <source-position filename="libgimp/gimpimagegrid_pdb.h" line="50"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagegrid_pdb.c"
               line="303">The image's grid background color.</doc>
          <type name="Gegl.Color" c:type="GeglColor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagegrid_pdb.c"
                 line="297">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="grid_get_foreground_color"
              c:identifier="gimp_image_grid_get_foreground_color"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagegrid_pdb.c"
             line="221">Sets the foreground color of an image's grid.

This procedure gets the foreground color of an image's grid.</doc>
        <source-position filename="libgimp/gimpimagegrid_pdb.h" line="47"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagegrid_pdb.c"
               line="229">The image's grid foreground color.</doc>
          <type name="Gegl.Color" c:type="GeglColor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagegrid_pdb.c"
                 line="223">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="grid_get_offset"
              c:identifier="gimp_image_grid_get_offset"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagegrid_pdb.c"
             line="130">Gets the offset of an image's grid.

This procedure retrieves the horizontal and vertical offset of an
image's grid. It takes the image as parameter.</doc>
        <source-position filename="libgimp/gimpimagegrid_pdb.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagegrid_pdb.c"
               line="141">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagegrid_pdb.c"
                 line="132">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="xoffset"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagegrid_pdb.c"
                 line="133">The image's grid horizontal offset.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="yoffset"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagegrid_pdb.c"
                 line="134">The image's grid vertical offset.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="grid_get_spacing"
              c:identifier="gimp_image_grid_get_spacing"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagegrid_pdb.c"
             line="39">Gets the spacing of an image's grid.

This procedure retrieves the horizontal and vertical spacing of an
image's grid. It takes the image as parameter.</doc>
        <source-position filename="libgimp/gimpimagegrid_pdb.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagegrid_pdb.c"
               line="50">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagegrid_pdb.c"
                 line="41">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="xspacing"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagegrid_pdb.c"
                 line="42">The image's grid horizontal spacing.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="yspacing"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagegrid_pdb.c"
                 line="43">The image's grid vertical spacing.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="grid_get_style"
              c:identifier="gimp_image_grid_get_style"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagegrid_pdb.c"
             line="369">Gets the style of an image's grid.

This procedure retrieves the style of an image's grid.</doc>
        <source-position filename="libgimp/gimpimagegrid_pdb.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagegrid_pdb.c"
               line="377">The image's grid style.</doc>
          <type name="GridStyle" c:type="GimpGridStyle"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagegrid_pdb.c"
                 line="371">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="grid_set_background_color"
              c:identifier="gimp_image_grid_set_background_color"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagegrid_pdb.c"
             line="331">Gets the background color of an image's grid.

This procedure sets the background color of an image's grid.</doc>
        <source-position filename="libgimp/gimpimagegrid_pdb.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagegrid_pdb.c"
               line="340">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagegrid_pdb.c"
                 line="333">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="bgcolor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagegrid_pdb.c"
                 line="334">The new background color.</doc>
            <type name="Gegl.Color" c:type="GeglColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="grid_set_foreground_color"
              c:identifier="gimp_image_grid_set_foreground_color"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagegrid_pdb.c"
             line="257">Gets the foreground color of an image's grid.

This procedure sets the foreground color of an image's grid.</doc>
        <source-position filename="libgimp/gimpimagegrid_pdb.h" line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagegrid_pdb.c"
               line="266">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagegrid_pdb.c"
                 line="259">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="fgcolor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagegrid_pdb.c"
                 line="260">The new foreground color.</doc>
            <type name="Gegl.Color" c:type="GeglColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="grid_set_offset"
              c:identifier="gimp_image_grid_set_offset"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagegrid_pdb.c"
             line="179">Sets the offset of an image's grid.

This procedure sets the horizontal and vertical offset of an image's
grid.</doc>
        <source-position filename="libgimp/gimpimagegrid_pdb.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagegrid_pdb.c"
               line="190">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagegrid_pdb.c"
                 line="181">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="xoffset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagegrid_pdb.c"
                 line="182">The image's grid horizontal offset.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="yoffset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagegrid_pdb.c"
                 line="183">The image's grid vertical offset.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="grid_set_spacing"
              c:identifier="gimp_image_grid_set_spacing"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagegrid_pdb.c"
             line="88">Sets the spacing of an image's grid.

This procedure sets the horizontal and vertical spacing of an
image's grid.</doc>
        <source-position filename="libgimp/gimpimagegrid_pdb.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagegrid_pdb.c"
               line="99">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagegrid_pdb.c"
                 line="90">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="xspacing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagegrid_pdb.c"
                 line="91">The image's grid horizontal spacing.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="yspacing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagegrid_pdb.c"
                 line="92">The image's grid vertical spacing.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="grid_set_style"
              c:identifier="gimp_image_grid_set_style"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagegrid_pdb.c"
             line="405">Sets the style unit of an image's grid.

This procedure sets the style of an image's grid. It takes the image
and the new style as parameters.</doc>
        <source-position filename="libgimp/gimpimagegrid_pdb.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagegrid_pdb.c"
               line="415">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagegrid_pdb.c"
                 line="407">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="style" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagegrid_pdb.c"
                 line="408">The image's grid style.</doc>
            <type name="GridStyle" c:type="GimpGridStyle"/>
          </parameter>
        </parameters>
      </method>
      <method name="import_paths_from_file"
              c:identifier="gimp_image_import_paths_from_file"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="1259">Import paths from an SVG file.

This procedure imports paths from an SVG file. SVG elements other
than paths and basic shapes are ignored.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="1273">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1261">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1262">The SVG file to import.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="merge" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1263">Merge paths into a single path object.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="scale" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1264">Scale the SVG to image dimensions.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="num_paths"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1265">The number of newly created path.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="path"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1266">The list of newly created path.</doc>
            <array length="3" zero-terminated="0" c:type="GimpPath***">
              <type name="Path"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="import_paths_from_string"
              c:identifier="gimp_image_import_paths_from_string"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="1317">Import paths from an SVG string.

This procedure works like [method@Gimp.Image.import_paths_from_file]
but takes a string rather than reading the SVG from a file. This
allows you to write scripts that generate SVG and feed it to GIMP.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="1333">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1319">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1320">A string that must be a complete and valid SVG document.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1321">Number of bytes in string or -1 if the string is NULL terminated.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="merge" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1322">Merge paths into a single path object.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="scale" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1323">Scale the SVG to image dimensions.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="num_paths"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1324">The number of newly created path.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="path"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1325">The list of newly created path.</doc>
            <array length="4" zero-terminated="0" c:type="GimpPath***">
              <type name="Path"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="insert_channel" c:identifier="gimp_image_insert_channel">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="1008">Add the specified channel to the image.

This procedure adds the specified channel to the image at the given
position. Since channel groups are not currently supported, the
parent argument must always be 0. The position argument specifies
the location of the channel inside the stack, starting from the top
(0) and increasing. If the position is specified as -1, then the
channel is inserted above the active channel.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="1024">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1010">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1011">The channel.</doc>
            <type name="Channel" c:type="GimpChannel*"/>
          </parameter>
          <parameter name="parent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1012">The parent channel.</doc>
            <type name="Channel" c:type="GimpChannel*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1013">The channel position.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_layer" c:identifier="gimp_image_insert_layer">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="836">Add the specified layer to the image.

This procedure adds the specified layer to the image at the given
position. If the specified parent is a valid layer group (See
gimp_item_is_group() and gimp_layer_group_new()) then the layer is
added inside the group. If the parent is 0, the layer is added
inside the main stack, outside of any group. The position argument
specifies the location of the layer inside the stack (or the group,
if a valid parent was supplied), starting from the top (0) and
increasing. If the position is specified as -1 and the parent is
specified as 0, then the layer is inserted above the active layer,
or inside the group if the active layer is a layer group. The layer
type must be compatible with the image base type.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="857">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="838">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="839">The layer.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </parameter>
          <parameter name="parent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="840">The parent layer.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="841">The layer position.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_path" c:identifier="gimp_image_insert_path">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="1173">Add the specified path to the image.

This procedure adds the specified path to the image at the given
position. Since path groups are not currently supported, the parent
argument must always be 0. The position argument specifies the
location of the path inside the stack, starting from the top (0) and
increasing. If the position is specified as -1, then the path is
inserted above the active path.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="1189">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1175">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1176">The path.</doc>
            <type name="Path" c:type="GimpPath*"/>
          </parameter>
          <parameter name="parent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1177">The parent path.</doc>
            <type name="Path" c:type="GimpPath*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1178">The path position.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_dirty" c:identifier="gimp_image_is_dirty">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="2139">Checks if the image has unsaved changes.

This procedure checks the specified image's dirty count to see if it
needs to be saved. Note that saving the image does not automatically
set the dirty count to 0, you need to call gimp_image_clean_all()
after calling a save procedure to make the image clean.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="142"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="2150">TRUE if the image has unsaved changes.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2141">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_valid" c:identifier="gimp_image_is_valid" version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage.c"
             line="167">Returns TRUE if the image is valid.

This procedure checks if the given image is valid and refers to
an existing image.</doc>
        <source-position filename="libgimp/gimpimage.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage.c"
               line="176">Whether the image is valid.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="169">The image to check.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_channels"
              c:identifier="gimp_image_list_channels"
              version="3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage.c"
             line="455">Returns the list of channels contained in the specified image.

This procedure returns the list of channels contained in the
specified image. This does not include the selection mask, or layer
masks. The order is from topmost to bottommost. Note that
"channels" are custom channels and do not include the image's
color components.</doc>
        <source-position filename="libgimp/gimpimage.h" line="46"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage.c"
               line="467">
         The list of channels contained in the image.
         The returned list must be freed with g_list_free(). Channel
         elements belong to libgimp and must not be freed.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Channel"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="457">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_layers"
              c:identifier="gimp_image_list_layers"
              version="3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage.c"
             line="218">Returns the list of layers contained in the specified image.

This procedure returns the list of layers contained in the specified
image. The order of layers is from topmost to bottommost.</doc>
        <source-position filename="libgimp/gimpimage.h" line="45"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage.c"
               line="227">
         The list of layers contained in the image.
         The returned list must be freed with g_list_free(). Layer
         elements belong to libgimp and must not be freed.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Layer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="220">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_paths"
              c:identifier="gimp_image_list_paths"
              version="3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage.c"
             line="492">Returns the list of paths contained in the specified image.

This procedure returns the list of paths contained in the
specified image.</doc>
        <source-position filename="libgimp/gimpimage.h" line="47"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage.c"
               line="501">
         The list of paths contained in the image.
         The returned value must be freed with g_list_free(). Path
         elements belong to libgimp and must not be freed.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Path"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="494">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_selected_channels"
              c:identifier="gimp_image_list_selected_channels"
              version="3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage.c"
             line="321">Returns the list of channels selected in the specified image.

This procedure returns the list of channels selected in the specified
image.</doc>
        <source-position filename="libgimp/gimpimage.h" line="52"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage.c"
               line="330">
         The list of selected channels in the image.
         The returned list must be freed with g_list_free(). Layer
         elements belong to libgimp and must not be freed.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Channel"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="323">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_selected_drawables"
              c:identifier="gimp_image_list_selected_drawables"
              version="3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage.c"
             line="526">Returns the list of drawables selected in the specified image.

This procedure returns the list of drawables selected in the specified
image.
These can be either a list of layers or a list of channels (a list mixing
layers and channels is not possible), or it can be a layer mask (a list
containing only a layer mask as single item), if a layer mask is in edit
mode.</doc>
        <source-position filename="libgimp/gimpimage.h" line="59"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage.c"
               line="539">
         The list of selected drawables in the image.
         The returned list must be freed with g_list_free(). Layer
         elements belong to libgimp and must not be freed.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Item"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="528">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_selected_layers"
              c:identifier="gimp_image_list_selected_layers"
              version="3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage.c"
             line="252">Returns the list of layers selected in the specified image.

This procedure returns the list of layers selected in the specified
image.</doc>
        <source-position filename="libgimp/gimpimage.h" line="49"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage.c"
               line="261">
         The list of selected layers in the image.
         The returned list must be freed with g_list_free(). Layer
         elements belong to libgimp and must not be freed.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Layer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="254">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_selected_paths"
              c:identifier="gimp_image_list_selected_paths"
              version="3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage.c"
             line="389">Returns the list of paths selected in the specified image.

This procedure returns the list of paths selected in the specified
image.</doc>
        <source-position filename="libgimp/gimpimage.h" line="55"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage.c"
               line="398">
         The list of selected paths in the image.
         The returned list must be freed with g_list_free().
         Path elements belong to libgimp and must not be freed.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Path"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="391">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="lower_item"
              c:identifier="gimp_image_lower_item"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="1628">Lower the specified item in its level in its item tree

This procedure lowers the specified item one step in the item tree.
The procedure call will fail if there is no item below it.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="118"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="1638">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1630">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1631">The item to lower.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lower_item_to_bottom"
              c:identifier="gimp_image_lower_item_to_bottom"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="1706">Lower the specified item to the bottom of its level in its item tree

This procedure lowers the specified item to bottom of its level in
the item tree. It will not move the layer if there is no layer below
it.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="122"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="1717">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1708">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1709">The item to lower to bottom.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="merge_down" c:identifier="gimp_image_merge_down">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="1869">Merge the layer passed and the first visible layer below.

This procedure combines the passed layer and the first visible layer
below it using the specified merge type. A merge type of
EXPAND_AS_NECESSARY expands the final layer to encompass the areas
of the visible layers. A merge type of CLIP_TO_IMAGE clips the final
layer to the extents of the image. A merge type of
CLIP_TO_BOTTOM_LAYER clips the final layer to the size of the
bottommost layer.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="131"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="1885">The resulting layer.</doc>
          <type name="Layer" c:type="GimpLayer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1871">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="merge_layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1872">The layer to merge down from.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </parameter>
          <parameter name="merge_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1873">The type of merge.</doc>
            <type name="MergeType" c:type="GimpMergeType"/>
          </parameter>
        </parameters>
      </method>
      <method name="merge_visible_layers"
              c:identifier="gimp_image_merge_visible_layers">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="1827">Merge the visible image layers into one.

This procedure combines the visible layers into a single layer using
the specified merge type. A merge type of EXPAND_AS_NECESSARY
expands the final layer to encompass the areas of the visible
layers. A merge type of CLIP_TO_IMAGE clips the final layer to the
extents of the image. A merge type of CLIP_TO_BOTTOM_LAYER clips the
final layer to the size of the bottommost layer.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="129"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="1841">The resulting layer.</doc>
          <type name="Layer" c:type="GimpLayer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1829">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="merge_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1830">The type of merge.</doc>
            <type name="MergeType" c:type="GimpMergeType"/>
          </parameter>
        </parameters>
      </method>
      <method name="metadata_load_finish"
              c:identifier="gimp_image_metadata_load_finish"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagemetadata.c"
             line="104">Applies the @metadata previously loaded with
gimp_image_metadata_load_prepare() to the image, taking into account
the passed @flags.</doc>
        <source-position filename="libgimp/gimpimagemetadata.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagemetadata.c"
                 line="106">The image</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="mime_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagemetadata.c"
                 line="107">The loaded file's mime-type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="metadata" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagemetadata.c"
                 line="108">The metadata to set on the image</doc>
            <type name="Metadata" c:type="GimpMetadata*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagemetadata.c"
                 line="109">Flags to specify what of the metadata to apply to the image</doc>
            <type name="MetadataLoadFlags" c:type="GimpMetadataLoadFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="metadata_load_prepare"
              c:identifier="gimp_image_metadata_load_prepare"
              version="2.10"
              throws="1">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagemetadata.c"
             line="41">Loads and returns metadata from @file to be passed into
gimp_image_metadata_load_finish().</doc>
        <source-position filename="libgimp/gimpimagemetadata.h" line="34"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagemetadata.c"
               line="51">The file's metadata.</doc>
          <type name="Metadata" c:type="GimpMetadata*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagemetadata.c"
                 line="43">The image</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="mime_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagemetadata.c"
                 line="44">The loaded file's mime-type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagemetadata.c"
                 line="45">The file to load the metadata from</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="metadata_save_filter"
              c:identifier="gimp_image_metadata_save_filter"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagemetadata-save.c"
             line="637">Filters the @metadata retrieved from the image with
gimp_image_metadata_save_prepare(),
taking into account the passed @flags.

Note that the @image passed to this function might be different
from the image passed to gimp_image_metadata_save_prepare(), due
to whatever file export conversion happened in the meantime

This is an alternative to gimp_image_metadata_save_finish when you
want to save metadata yourself and you need only filtering processing.</doc>
        <source-position filename="libgimp/gimpimagemetadata.h" line="46"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagemetadata-save.c"
               line="657">Filtered metadata or NULL in case of failure.

Use g_object_unref() when returned metadata are no longer needed</doc>
          <type name="Metadata" c:type="GimpMetadata*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagemetadata-save.c"
                 line="639">The actually saved image</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="mime_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagemetadata-save.c"
                 line="640">The saved file's mime-type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="metadata" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagemetadata-save.c"
                 line="641">The metadata to export</doc>
            <type name="Metadata" c:type="GimpMetadata*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagemetadata-save.c"
                 line="642">Flags to specify what of the metadata to save</doc>
            <type name="MetadataSaveFlags" c:type="GimpMetadataSaveFlags"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagemetadata-save.c"
                 line="643">The file @image was saved to or NULL if file was not saved yet</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="metadata_save_finish"
              c:identifier="gimp_image_metadata_save_finish"
              version="2.10"
              throws="1">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagemetadata-save.c"
             line="1011">Saves the @metadata retrieved from the image with
gimp_image_metadata_save_prepare() to @file, taking into account
the passed @flags.

Note that the @image passed to this function might be different
from the image passed to gimp_image_metadata_save_prepare(), due
to whatever file export conversion happened in the meantime</doc>
        <source-position filename="libgimp/gimpimagemetadata.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagemetadata-save.c"
               line="1028">Whether the save was successful.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagemetadata-save.c"
                 line="1013">The actually saved image</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="mime_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagemetadata-save.c"
                 line="1014">The saved file's mime-type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="metadata" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagemetadata-save.c"
                 line="1015">The metadata to write to @file</doc>
            <type name="Metadata" c:type="GimpMetadata*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagemetadata-save.c"
                 line="1016">Flags to specify what of the metadata to save</doc>
            <type name="MetadataSaveFlags" c:type="GimpMetadataSaveFlags"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagemetadata-save.c"
                 line="1017">The file @image was saved to</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="metadata_save_prepare"
              c:identifier="gimp_image_metadata_save_prepare"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagemetadata-save.c"
             line="56">Gets the image metadata for saving it using
gimp_image_metadata_save_finish().

The @suggested_flags are determined from what kind of metadata
(Exif, XMP, ...) is actually present in the image and the preferences
for metadata exporting.
The calling application may still update @available_flags, for
instance to follow the settings from a previous export in the same
session, or a previous export of the same image. But it should not
override the preferences without a good reason since it is a data
leak.

The suggested value for %GIMP_METADATA_SAVE_THUMBNAIL is determined by
whether there was a thumbnail in the previously imported image.</doc>
        <source-position filename="libgimp/gimpimagemetadata.h" line="43"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagemetadata-save.c"
               line="78">The image's metadata, prepared for saving.</doc>
          <type name="Metadata" c:type="GimpMetadata*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagemetadata-save.c"
                 line="58">The original image</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="mime_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagemetadata-save.c"
                 line="59">The saved file's mime-type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="suggested_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagemetadata-save.c"
                 line="60">Suggested default values for the @flags passed to
                  gimp_image_metadata_save_finish()</doc>
            <type name="MetadataSaveFlags" c:type="GimpMetadataSaveFlags*"/>
          </parameter>
        </parameters>
      </method>
      <method name="pick_color" c:identifier="gimp_image_pick_color">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="716">Determine the color at the given coordinates

This tool determines the color at the specified coordinates. The
returned color is an RGB triplet even for grayscale and indexed
drawables. If the coordinates lie outside of the extents of the
specified drawables, then an error is returned. All drawables must
belong to the image and be of the same type.
If only one drawable is given and it has an alpha channel, the
algorithm examines the alpha value of the drawable at the
coordinates. If the alpha value is completely transparent (0), then
an error is returned. With several drawables specified, the
composite image with only these drawables is used.
If the sample_merged parameter is TRUE, the data of the composite
image will be used instead of that for the specified drawables. This
is equivalent to sampling for colors after merging all visible
layers. In the case of a merged sampling, the supplied drawables are
ignored.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="746">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="718">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="num_drawables" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="719">The number of drawables.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="drawables" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="720">The drawables to pick from.</doc>
            <array length="0" zero-terminated="0" c:type="const GimpItem**">
              <type name="Item"/>
            </array>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="721">x coordinate of upper-left corner of rectangle.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="722">y coordinate of upper-left corner of rectangle.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="sample_merged" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="723">Use the composite image, not the drawables.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="sample_average" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="724">Average the color of all the pixels in a specified radius.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="average_radius" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="725">The radius of pixels to average.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="color"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="726">The return color.</doc>
            <type name="Gegl.Color" c:type="GeglColor**"/>
          </parameter>
        </parameters>
      </method>
      <method name="pick_correlate_layer"
              c:identifier="gimp_image_pick_correlate_layer">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="792">Find the layer visible at the specified coordinates.

This procedure finds the layer which is visible at the specified
coordinates. Layers which do not qualify are those whose extents do
not pass within the specified coordinates, or which are transparent
at the specified coordinates. This procedure will return -1 if no
layer is found.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="806">The layer found at the specified coordinates.</doc>
          <type name="Layer" c:type="GimpLayer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="794">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="795">The x coordinate for the pick.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="796">The y coordinate for the pick.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="policy_color_profile"
              c:identifier="gimp_image_policy_color_profile"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="3688">Execute the color profile conversion policy.

Process the image according to the color profile policy as set in
Preferences.
If GIMP is running as a GUI and interactive is TRUE, a dialog may be
presented to the user depending on the policy. Otherwise, if the
policy does not mandate the conversion to perform, the conversion to
the preferred RGB or grayscale profile will happen, defaulting to
built-in profiles if no preferred profiles were set in
`Preferences`.
This function should be used only if you want to follow user
settings. If you intend to convert to a specific profile, call
preferably gimp_image_convert_color_profile(). And if you wish to
leave whatever profile an image has, do not call any of these
functions.
Finally it is unnecessary to call this function in a format load
procedure because this is called automatically by the core code when
loading any image. You should only call this function explicitly
when loading an image through a PDB call.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="218"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="3713">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3690">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="interactive" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3691">Querying the user through a dialog is a possibility.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="policy_rotate"
              c:identifier="gimp_image_policy_rotate"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="3638">Execute the \"Orientation\" metadata policy.

Process the image according to the rotation policy as set in
Preferences. If GIMP is running as a GUI and interactive is TRUE, a
dialog may be presented to the user depending on the set policy.
Otherwise, if the policy does not mandate the action to perform, the
image will be rotated following the Orientation metadata.
If you wish absolutely to rotate a loaded image following the
Orientation metadata, do not use this function and process the
metadata yourself. Indeed even with `interactive` to FALSE, user
settings may leave the image unrotated.
Finally it is unnecessary to call this function in a format load
procedure because this is called automatically by the core code when
loading any image. You should only call this function explicitly
when loading an image through a PDB call.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="216"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="3659">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3640">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="interactive" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3641">Querying the user through a dialog is a possibility.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="raise_item"
              c:identifier="gimp_image_raise_item"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="1589">Raise the specified item in its level in its item tree

This procedure raises the specified item one step in the item tree.
The procedure call will fail if there is no item above it.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="116"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="1599">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1591">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1592">The item to raise.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="raise_item_to_top"
              c:identifier="gimp_image_raise_item_to_top"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="1667">Raise the specified item to the top of its level in its item tree

This procedure raises the specified item to top of its level in the
item tree. It will not move the item if there is no item above it.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="120"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="1677">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1669">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1670">The item to raise to top.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_channel" c:identifier="gimp_image_remove_channel">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="1055">Remove the specified channel from the image.

This procedure removes the specified channel from the image. If the
channel doesn't exist, an error is returned.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="1065">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1057">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1058">The channel.</doc>
            <type name="Channel" c:type="GimpChannel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_layer" c:identifier="gimp_image_remove_layer">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="888">Remove the specified layer from the image.

This procedure removes the specified layer from the image. If the
layer doesn't exist, an error is returned. If there are no layers
left in the image, this call will fail. If this layer is the last
layer remaining, the image will become empty and have no active
layer.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="901">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="890">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="891">The layer.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_path"
              c:identifier="gimp_image_remove_path"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="1220">Remove the specified path from the image.

This procedure removes the specified path from the image. If the
path doesn't exist, an error is returned.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="1230">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1222">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1223">The path object.</doc>
            <type name="Path" c:type="GimpPath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reorder_item"
              c:identifier="gimp_image_reorder_item"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="1746">Reorder the specified item within its item tree

This procedure reorders the specified item within its item tree.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="124"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="1757">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1748">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1749">The item to reorder.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </parameter>
          <parameter name="parent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1750">The new parent item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1751">The new position of the item.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="resize" c:identifier="gimp_image_resize">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagetransform_pdb.c"
             line="39">Resize the image to the specified extents.

This procedure resizes the image so that it's new width and height
are equal to the supplied parameters. Offsets are also provided
which describe the position of the previous image's content. All
channels within the image are resized according to the specified
parameters; this includes the image selection mask. All layers
within the image are repositioned according to the specified
offsets.</doc>
        <source-position filename="libgimp/gimpimagetransform_pdb.h"
                         line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagetransform_pdb.c"
               line="57">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagetransform_pdb.c"
                 line="41">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="new_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagetransform_pdb.c"
                 line="42">New image width.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="new_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagetransform_pdb.c"
                 line="43">New image height.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="offx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagetransform_pdb.c"
                 line="44">x offset between upper left corner of old and new images: (new - old).</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="offy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagetransform_pdb.c"
                 line="45">y offset between upper left corner of old and new images: (new - old).</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="resize_to_layers"
              c:identifier="gimp_image_resize_to_layers"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagetransform_pdb.c"
             line="90">Resize the image to fit all layers.

This procedure resizes the image to the bounding box of all layers
of the image. All channels within the image are resized to the new
size; this includes the image selection mask. All layers within the
image are repositioned to the new image area.</doc>
        <source-position filename="libgimp/gimpimagetransform_pdb.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagetransform_pdb.c"
               line="101">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagetransform_pdb.c"
                 line="92">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="rotate" c:identifier="gimp_image_rotate">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagetransform_pdb.c"
             line="257">Rotates the image by the specified degrees.

This procedure rotates the image.</doc>
        <source-position filename="libgimp/gimpimagetransform_pdb.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagetransform_pdb.c"
               line="266">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagetransform_pdb.c"
                 line="259">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="rotate_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagetransform_pdb.c"
                 line="260">Angle of rotation.</doc>
            <type name="RotationType" c:type="GimpRotationType"/>
          </parameter>
        </parameters>
      </method>
      <method name="scale" c:identifier="gimp_image_scale">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagetransform_pdb.c"
             line="128">Scale the image using the default interpolation method.

This procedure scales the image so that its new width and height are
equal to the supplied parameters. All layers and channels within the
image are scaled according to the specified parameters; this
includes the image selection mask. The interpolation method used can
be set with gimp_context_set_interpolation().</doc>
        <source-position filename="libgimp/gimpimagetransform_pdb.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagetransform_pdb.c"
               line="142">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagetransform_pdb.c"
                 line="130">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="new_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagetransform_pdb.c"
                 line="131">New image width.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="new_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagetransform_pdb.c"
                 line="132">New image height.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_color"
              c:identifier="gimp_image_select_color"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpimageselect_pdb.c"
             line="39">Create a selection by selecting all pixels (in the specified
drawable) with the same (or similar) color to that specified.

This tool creates a selection over the specified image. A by-color
selection is determined by the supplied color under the constraints
of the current context settings. Essentially, all pixels (in the
drawable) that have color sufficiently close to the specified color
(as determined by the threshold and criterion context values) are
included in the selection. To select transparent regions, the color
specified must also have minimum alpha.

This procedure is affected by the following context setters:
gimp_context_set_antialias(), gimp_context_set_feather(),
gimp_context_set_feather_radius(), gimp_context_set_sample_merged(),
gimp_context_set_sample_criterion(),
gimp_context_set_sample_threshold(),
gimp_context_set_sample_transparent().

In the case of a merged sampling, the supplied drawable is ignored.</doc>
        <source-position filename="libgimp/gimpimageselect_pdb.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageselect_pdb.c"
               line="66">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="41">The affected image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="operation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="42">The selection operation.</doc>
            <type name="ChannelOps" c:type="GimpChannelOps"/>
          </parameter>
          <parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="43">The affected drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </parameter>
          <parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="44">The color to select.</doc>
            <type name="Gegl.Color" c:type="GeglColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_contiguous_color"
              c:identifier="gimp_image_select_contiguous_color"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpimageselect_pdb.c"
             line="99">Create a selection by selecting all pixels around specified
coordinates with the same (or similar) color to that at the
coordinates.

This tool creates a contiguous selection over the specified image. A
contiguous color selection is determined by a seed fill under the
constraints of the current context settings. Essentially, the color
at the specified coordinates (in the drawable) is measured and the
selection expands outwards from that point to any adjacent pixels
which are not significantly different (as determined by the
threshold and criterion context settings). This process continues
until no more expansion is possible. If antialiasing is turned on,
the final selection mask will contain intermediate values based on
close misses to the threshold bar at pixels along the seed fill
boundary.

This procedure is affected by the following context setters:
gimp_context_set_antialias(), gimp_context_set_feather(),
gimp_context_set_feather_radius(), gimp_context_set_sample_merged(),
gimp_context_set_sample_criterion(),
gimp_context_set_sample_threshold(),
gimp_context_set_sample_transparent(),
gimp_context_set_diagonal_neighbors().

In the case of a merged sampling, the supplied drawable is ignored.
If the sample is merged, the specified coordinates are relative to
the image origin; otherwise, they are relative to the drawable's
origin.</doc>
        <source-position filename="libgimp/gimpimageselect_pdb.h" line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageselect_pdb.c"
               line="136">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="101">The affected image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="operation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="102">The selection operation.</doc>
            <type name="ChannelOps" c:type="GimpChannelOps"/>
          </parameter>
          <parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="103">The affected drawable.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="104">x coordinate of initial seed fill point: (image coordinates).</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="105">y coordinate of initial seed fill point: (image coordinates).</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_ellipse"
              c:identifier="gimp_image_select_ellipse"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpimageselect_pdb.c"
             line="290">Create an elliptical selection over the specified image.

This tool creates an elliptical selection over the specified image.
The elliptical region can be either added to, subtracted from, or
replace the contents of the previous selection mask.

This procedure is affected by the following context setters:
gimp_context_set_antialias(), gimp_context_set_feather(),
gimp_context_set_feather_radius().</doc>
        <source-position filename="libgimp/gimpimageselect_pdb.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageselect_pdb.c"
               line="309">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="292">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="operation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="293">The selection operation.</doc>
            <type name="ChannelOps" c:type="GimpChannelOps"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="294">x coordinate of upper-left corner of ellipse bounding box.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="295">y coordinate of upper-left corner of ellipse bounding box.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="296">The width of the ellipse.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="297">The height of the ellipse.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_item"
              c:identifier="gimp_image_select_item"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpimageselect_pdb.c"
             line="402">Transforms the specified item into a selection

This procedure renders the item's outline into the current selection
of the image the item belongs to. What exactly the item's outline is
depends on the item type: for layers, it's the layer's alpha
channel, for vectors the vector's shape.

This procedure is affected by the following context setters:
gimp_context_set_antialias(), gimp_context_set_feather(),
gimp_context_set_feather_radius().</doc>
        <source-position filename="libgimp/gimpimageselect_pdb.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageselect_pdb.c"
               line="419">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="404">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="operation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="405">The desired operation with current selection.</doc>
            <type name="ChannelOps" c:type="GimpChannelOps"/>
          </parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="406">The item to render to the selection.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_polygon"
              c:identifier="gimp_image_select_polygon"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpimageselect_pdb.c"
             line="346">Create a polygonal selection over the specified image.

This tool creates a polygonal selection over the specified image.
The polygonal region can be either added to, subtracted from, or
replace the contents of the previous selection mask. The polygon is
specified through an array of floating point numbers and its length.
The length of array must be 2n, where n is the number of points.
Each point is defined by 2 floating point values which correspond to
the x and y coordinates. If the final point does not connect to the
starting point, a connecting segment is automatically added.

This procedure is affected by the following context setters:
gimp_context_set_antialias(), gimp_context_set_feather(),
gimp_context_set_feather_radius().</doc>
        <source-position filename="libgimp/gimpimageselect_pdb.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageselect_pdb.c"
               line="368">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="348">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="operation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="349">The selection operation.</doc>
            <type name="ChannelOps" c:type="GimpChannelOps"/>
          </parameter>
          <parameter name="num_segs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="350">Number of points (count 1 coordinate as two points).</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="segs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="351">Array of points: { p1.x, p1.y, p2.x, p2.y, ..., pn.x, pn.y}.</doc>
            <array length="1" zero-terminated="0" c:type="const gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="select_rectangle"
              c:identifier="gimp_image_select_rectangle"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpimageselect_pdb.c"
             line="171">Create a rectangular selection over the specified image;

This tool creates a rectangular selection over the specified image.
The rectangular region can be either added to, subtracted from, or
replace the contents of the previous selection mask.

This procedure is affected by the following context setters:
gimp_context_set_feather(), gimp_context_set_feather_radius().</doc>
        <source-position filename="libgimp/gimpimageselect_pdb.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageselect_pdb.c"
               line="189">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="173">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="operation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="174">The selection operation.</doc>
            <type name="ChannelOps" c:type="GimpChannelOps"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="175">x coordinate of upper-left corner of rectangle.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="176">y coordinate of upper-left corner of rectangle.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="177">The width of the rectangle.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="178">The height of the rectangle.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_round_rectangle"
              c:identifier="gimp_image_select_round_rectangle"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpimageselect_pdb.c"
             line="226">Create a rectangular selection with round corners over the specified
image;

This tool creates a rectangular selection with round corners over
the specified image. The rectangular region can be either added to,
subtracted from, or replace the contents of the previous selection
mask.

This procedure is affected by the following context setters:
gimp_context_set_antialias(), gimp_context_set_feather(),
gimp_context_set_feather_radius().</doc>
        <source-position filename="libgimp/gimpimageselect_pdb.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageselect_pdb.c"
               line="249">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="228">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="operation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="229">The selection operation.</doc>
            <type name="ChannelOps" c:type="GimpChannelOps"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="230">x coordinate of upper-left corner of rectangle.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="231">y coordinate of upper-left corner of rectangle.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="232">The width of the rectangle.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="233">The height of the rectangle.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="corner_radius_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="234">The corner radius in X direction.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="corner_radius_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageselect_pdb.c"
                 line="235">The corner radius in Y direction.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_color_profile"
              c:identifier="gimp_image_set_color_profile"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagecolorprofile.c"
             line="61">Sets the image's color profile

This procedure sets the image's color profile.</doc>
        <source-position filename="libgimp/gimpimagecolorprofile.h" line="34"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagecolorprofile.c"
               line="70">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagecolorprofile.c"
                 line="63">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="profile"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagecolorprofile.c"
                 line="64">A #GimpColorProfile, or %NULL.</doc>
            <type name="ColorProfile" c:type="GimpColorProfile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_color_profile_from_file"
              c:identifier="gimp_image_set_color_profile_from_file"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagecolorprofile_pdb.c"
             line="158">Sets the image's color profile from an ICC file

This procedure sets the image's color profile from a file containing
an ICC profile, or unsets it if NULL is passed as 'file'. This
procedure does no color conversion. However, it will change the
pixel format of all layers to contain the babl space matching the
profile. You must call this procedure before adding layers to the
image.</doc>
        <source-position filename="libgimp/gimpimagecolorprofile_pdb.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagecolorprofile_pdb.c"
               line="172">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagecolorprofile_pdb.c"
                 line="160">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagecolorprofile_pdb.c"
                 line="161">The file containing the new color profile.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_colormap" c:identifier="gimp_image_set_colormap">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage.c"
             line="598">Sets the entries in the image's colormap.

This procedure sets the entries in the specified image's colormap.
The number of colors is specified by the "num_colors" parameter
and corresponds to the number of INT8 triples that must be contained
in the "cmap" array.</doc>
        <source-position filename="libgimp/gimpimage.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage.c"
               line="611">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="600">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="colormap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="601">The new colormap values.</doc>
            <array zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="num_colors" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="602">Number of colors in the colormap array.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_component_active"
              c:identifier="gimp_image_set_component_active">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="2635">Sets if the specified image's image component is active.

This procedure sets if the specified image's image component (i.e.
Red, Green, Blue intensity channels in an RGB image) is active or
inactive -- whether or not it can be modified. If the specified
component is not valid for the image type, an error is returned.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="170"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="2648">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2637">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="component" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2638">The image component.</doc>
            <type name="ChannelType" c:type="GimpChannelType"/>
          </parameter>
          <parameter name="active" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2639">Component is active.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_component_visible"
              c:identifier="gimp_image_set_component_visible">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="2718">Sets if the specified image's image component is visible.

This procedure sets if the specified image's image component (i.e.
Red, Green, Blue intensity channels in an RGB image) is visible or
invisible -- whether or not it can be seen. If the specified
component is not valid for the image type, an error is returned.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="175"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="2731">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2720">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="component" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2721">The image component.</doc>
            <type name="ChannelType" c:type="GimpChannelType"/>
          </parameter>
          <parameter name="visible" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2722">Component is visible.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_file" c:identifier="gimp_image_set_file">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="2802">Sets the specified XCF image's file.

This procedure sets the specified image's file.
This is to set the XCF file associated with your image. In
particular, do not use this function to set the imported file in
file import plug-ins. This is done by the core process.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="179"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="2814">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2804">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2805">The new image file.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_metadata"
              c:identifier="gimp_image_set_metadata"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage.c"
             line="733">Set the image's metadata.

Sets exif/iptc/xmp metadata on the image, or deletes it if
@metadata is %NULL.</doc>
        <source-position filename="libgimp/gimpimage.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage.c"
               line="743">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="735">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="metadata" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="736">The exif/ptc/xmp metadata.</doc>
            <type name="Metadata" c:type="GimpMetadata*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_resolution" c:identifier="gimp_image_set_resolution">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="3043">Sets the specified image's resolution.

This procedure sets the specified image's resolution in dots per
inch. This value is independent of any of the layers in this image.
No scaling or resizing is performed.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="188"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="3055">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3045">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="xresolution" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3046">The new image resolution in the x-axis, in dots per inch.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="yresolution" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3047">The new image resolution in the y-axis, in dots per inch.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_selected_channels"
              c:identifier="gimp_image_set_selected_channels"
              version="3.0.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="2376">Sets the specified image's selected channels.

The channels are set as the selected channels in the image. Any
previous selected layers or channels are unselected. An exception is
a previously existing floating selection, in which case this
procedure will return an execution error.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="157"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="2389">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2378">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="num_channels" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2379">The number of channels to select.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="channels" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2380">The list of channels to select.</doc>
            <array length="0" zero-terminated="0" c:type="const GimpChannel**">
              <type name="Channel"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_selected_layers"
              c:identifier="gimp_image_set_selected_layers"
              version="3.0.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="2285">Sets the specified image's selected layers.

The layers are set as the selected layers in the image. Any previous
selected layers or channels are unselected. An exception is a
previously existing floating selection, in which case this procedure
will return an execution error.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="152"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="2298">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2287">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="num_layers" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2288">The number of layers to select.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="layers" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2289">The list of layers to select.</doc>
            <array length="0" zero-terminated="0" c:type="const GimpLayer**">
              <type name="Layer"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_selected_paths"
              c:identifier="gimp_image_set_selected_paths"
              version="3.0.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="2467">Sets the specified image's selected paths.

The paths are set as the selected paths in the image.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="162"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="2477">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2469">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="num_paths" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2470">The number of paths to select.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="paths" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="2471">The list of paths to select.</doc>
            <array length="0" zero-terminated="0" c:type="const GimpPath**">
              <type name="Path"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_simulation_bpc"
              c:identifier="gimp_image_set_simulation_bpc"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagecolorprofile_pdb.c"
             line="430">Sets whether the image has Black Point Compensation enabled for its
simulation

This procedure whether the image has Black Point Compensation
enabled for its simulation</doc>
        <source-position filename="libgimp/gimpimagecolorprofile_pdb.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagecolorprofile_pdb.c"
               line="441">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagecolorprofile_pdb.c"
                 line="432">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="bpc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagecolorprofile_pdb.c"
                 line="433">The Black Point Compensation status.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_simulation_intent"
              c:identifier="gimp_image_set_simulation_intent"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagecolorprofile_pdb.c"
             line="354">Sets the image's simulation rendering intent

This procedure sets the image's simulation rendering intent.</doc>
        <source-position filename="libgimp/gimpimagecolorprofile_pdb.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagecolorprofile_pdb.c"
               line="363">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagecolorprofile_pdb.c"
                 line="356">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="intent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagecolorprofile_pdb.c"
                 line="357">A GimpColorRenderingIntent.</doc>
            <type name="ColorRenderingIntent"
                  c:type="GimpColorRenderingIntent"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_simulation_profile"
              c:identifier="gimp_image_set_simulation_profile"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagecolorprofile.c"
             line="134">Sets the image's simulation color profile

This procedure sets the image's simulation color profile.</doc>
        <source-position filename="libgimp/gimpimagecolorprofile.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagecolorprofile.c"
               line="143">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagecolorprofile.c"
                 line="136">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagecolorprofile.c"
                 line="137">A #GimpColorProfile, or %NULL.</doc>
            <type name="ColorProfile" c:type="GimpColorProfile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_simulation_profile_from_file"
              c:identifier="gimp_image_set_simulation_profile_from_file"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpimagecolorprofile_pdb.c"
             line="278">Sets the image's simulation color profile from an ICC file

This procedure sets the image's simulation color profile from a file
containing an ICC profile, or unsets it if NULL is passed as 'file'.
This procedure does no color conversion.</doc>
        <source-position filename="libgimp/gimpimagecolorprofile_pdb.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimagecolorprofile_pdb.c"
               line="289">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagecolorprofile_pdb.c"
                 line="280">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimagecolorprofile_pdb.c"
                 line="281">The file containing the new simulation color profile.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tattoo_state"
              c:identifier="gimp_image_set_tattoo_state">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="3197">Set the tattoo state associated with the image.

This procedure sets the tattoo state of the image. Use only by
save/load plug-ins that wish to preserve an images tattoo state.
Using this function at other times will produce unexpected results.
A full check of uniqueness of states in layers, channels and paths
will be performed by this procedure and a execution failure will be
returned if this fails. A failure will also be returned if the new
tattoo state value is less than the maximum tattoo value from all of
the tattoos from the paths, layers and channels. After the image
data has been loaded and all the tattoos have been set then this is
the last procedure that should be called. If effectively does a
status check on the tattoo values that have been set to make sure
that all is OK.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="195"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="3217">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3199">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="tattoo_state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3200">The new image tattoo state.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_unit" c:identifier="gimp_image_set_unit">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="3121">Sets the specified image's unit.

This procedure sets the specified image's unit. No scaling or
resizing is performed. This value is independent of any of the
layers in this image. See the gimp_unit_*() procedure definitions
for the valid range of unit IDs and a description of the unit
system.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="192"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="3134">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3123">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="3124">The new image unit.</doc>
            <type name="Unit" c:type="GimpUnit*"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_selected_channels"
              c:identifier="gimp_image_take_selected_channels"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage.c"
             line="355">The channels are set as the selected channels in the image. Any previous
selected layers or channels are unselected. An exception is a previously
existing floating selection, in which case this procedure will return an
execution error.</doc>
        <source-position filename="libgimp/gimpimage.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage.c"
               line="365">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="357">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="channels" transfer-ownership="container">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="358">The list of channels to select.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="Channel"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="take_selected_layers"
              c:identifier="gimp_image_take_selected_layers"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage.c"
             line="286">The layers are set as the selected layers in the image. Any previous
selected layers or channels are unselected. An exception is a previously
existing floating selection, in which case this procedure will return an
execution error.</doc>
        <source-position filename="libgimp/gimpimage.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage.c"
               line="296">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="288">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="layers" transfer-ownership="container">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="289">The list of layers to select.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="Layer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="take_selected_paths"
              c:identifier="gimp_image_take_selected_paths"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage.c"
             line="423">The paths are set as the selected paths in the image. Any previous
selected paths are unselected.</doc>
        <source-position filename="libgimp/gimpimage.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage.c"
               line="431">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="425">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
          <parameter name="paths" transfer-ownership="container">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage.c"
                 line="426">The list of paths to select.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="Path"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="thaw_channels"
              c:identifier="gimp_image_thaw_channels"
              version="2.10.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="1134">Thaw the image's channel list.

This procedure thaws the channel list of the image, re-enabling
updates to the Channels dialog.

This procedure should match a corresponding call to
gimp_image_freeze_channels().</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="1146">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1136">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="thaw_layers"
              c:identifier="gimp_image_thaw_layers"
              version="2.10.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="969">Thaw the image's layer list.

This procedure thaws the layer list of the image, re-enabling
updates to the Layers dialog.

This procedure should match a corresponding call to
gimp_image_freeze_layers().</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="981">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="971">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="thaw_paths"
              c:identifier="gimp_image_thaw_paths"
              version="2.10.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="1508">Thaw the image's path list.

This procedure thaws the path list of the image, re-enabling updates
to the Paths dialog.

This procedure should match a corresponding call to
gimp_image_freeze_paths().</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="113"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="1520">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="1510">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="undo_disable" c:identifier="gimp_image_undo_disable">
        <doc xml:space="preserve"
             filename="libgimp/gimpimageundo_pdb.c"
             line="146">Disable the image's undo stack.

This procedure disables the image's undo stack, allowing subsequent
operations to ignore their undo steps. This is generally called in
conjunction with gimp_image_undo_enable() to temporarily disable an
image undo stack. This is advantageous because saving undo steps can
be time and memory intensive.</doc>
        <source-position filename="libgimp/gimpimageundo_pdb.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageundo_pdb.c"
               line="158">TRUE if the image undo has been disabled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageundo_pdb.c"
                 line="148">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="undo_enable" c:identifier="gimp_image_undo_enable">
        <doc xml:space="preserve"
             filename="libgimp/gimpimageundo_pdb.c"
             line="184">Enable the image's undo stack.

This procedure enables the image's undo stack, allowing subsequent
operations to store their undo steps. This is generally called in
conjunction with gimp_image_undo_disable() to temporarily disable an
image undo stack.</doc>
        <source-position filename="libgimp/gimpimageundo_pdb.h" line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageundo_pdb.c"
               line="195">TRUE if the image undo has been enabled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageundo_pdb.c"
                 line="186">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="undo_freeze" c:identifier="gimp_image_undo_freeze">
        <doc xml:space="preserve"
             filename="libgimp/gimpimageundo_pdb.c"
             line="221">Freeze the image's undo stack.

This procedure freezes the image's undo stack, allowing subsequent
operations to ignore their undo steps. This is generally called in
conjunction with gimp_image_undo_thaw() to temporarily disable an
image undo stack. This is advantageous because saving undo steps can
be time and memory intensive. gimp_image_undo_freeze() /
gimp_image_undo_thaw() and gimp_image_undo_disable() /
gimp_image_undo_enable() differ in that the former does not free up
all undo steps when undo is thawed, so is more suited to interactive
in-situ previews. It is important in this case that the image is
back to the same state it was frozen in before thawing, else 'undo'
behavior is undefined.</doc>
        <source-position filename="libgimp/gimpimageundo_pdb.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageundo_pdb.c"
               line="239">TRUE if the image undo has been frozen.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageundo_pdb.c"
                 line="223">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="undo_group_end" c:identifier="gimp_image_undo_group_end">
        <doc xml:space="preserve"
             filename="libgimp/gimpimageundo_pdb.c"
             line="75">Finish a group undo.

This function must be called once for each
gimp_image_undo_group_start() call that is made.</doc>
        <source-position filename="libgimp/gimpimageundo_pdb.h" line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageundo_pdb.c"
               line="84">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageundo_pdb.c"
                 line="77">The ID of the image in which to close an undo group.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="undo_group_start"
              c:identifier="gimp_image_undo_group_start">
        <doc xml:space="preserve"
             filename="libgimp/gimpimageundo_pdb.c"
             line="39">Starts a group undo.

This function is used to start a group undo--necessary for logically
combining two or more undo operations into a single operation. This
call must be used in conjunction with a gimp_image_undo_group_end()
call.</doc>
        <source-position filename="libgimp/gimpimageundo_pdb.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageundo_pdb.c"
               line="50">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageundo_pdb.c"
                 line="41">The ID of the image in which to open an undo group.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="undo_is_enabled" c:identifier="gimp_image_undo_is_enabled">
        <doc xml:space="preserve"
             filename="libgimp/gimpimageundo_pdb.c"
             line="109">Check if the image's undo stack is enabled.

This procedure checks if the image's undo stack is currently enabled
or disabled. This is useful when several plug-ins or scripts call
each other and want to check if their caller has already used
gimp_image_undo_disable() or gimp_image_undo_freeze().</doc>
        <source-position filename="libgimp/gimpimageundo_pdb.h" line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageundo_pdb.c"
               line="120">TRUE if undo is enabled for this image.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageundo_pdb.c"
                 line="111">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="undo_thaw" c:identifier="gimp_image_undo_thaw">
        <doc xml:space="preserve"
             filename="libgimp/gimpimageundo_pdb.c"
             line="265">Thaw the image's undo stack.

This procedure thaws the image's undo stack, allowing subsequent
operations to store their undo steps. This is generally called in
conjunction with gimp_image_undo_freeze() to temporarily freeze an
image undo stack. gimp_image_undo_thaw() does NOT free the undo
stack as gimp_image_undo_enable() does, so is suited for situations
where one wishes to leave the undo stack in the same state in which
one found it despite non-destructively playing with the image in the
meantime. An example would be in-situ plug-in previews. Balancing
freezes and thaws and ensuring image consistency is the
responsibility of the caller.</doc>
        <source-position filename="libgimp/gimpimageundo_pdb.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageundo_pdb.c"
               line="282">TRUE if the image undo has been thawed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageundo_pdb.c"
                 line="267">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unset_active_channel"
              c:identifier="gimp_image_unset_active_channel">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="608">Unsets the active channel in the specified image.

If an active channel exists, it is unset. There then exists no
active channel, and if desired, one can be set through a call to
'Set Active Channel'. No error is returned in the case of no
existing active channel.</doc>
        <source-position filename="libgimp/gimpimage_pdb.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="619">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimage_pdb.c"
                 line="610">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_id"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
    </class>
    <enumeration name="ImageBaseType"
                 glib:type-name="GimpImageBaseType"
                 glib:get-type="gimp_image_base_type_get_type"
                 c:type="GimpImageBaseType">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="581">Image color models.</doc>
      <member name="rgb"
              value="0"
              c:identifier="GIMP_RGB"
              glib:nick="rgb"
              glib:name="GIMP_RGB">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="583">RGB color</doc>
      </member>
      <member name="gray"
              value="1"
              c:identifier="GIMP_GRAY"
              glib:nick="gray"
              glib:name="GIMP_GRAY">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="584">Grayscale</doc>
      </member>
      <member name="indexed"
              value="2"
              c:identifier="GIMP_INDEXED"
              glib:nick="indexed"
              glib:name="GIMP_INDEXED">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="585">Indexed color</doc>
      </member>
    </enumeration>
    <record name="ImageClass"
            c:type="GimpImageClass"
            glib:is-gtype-struct-for="Image">
      <source-position filename="libgimp/gimpimage.h" line="35"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="ImageProcedure"
           c:symbol-prefix="image_procedure"
           c:type="GimpImageProcedure"
           parent="Procedure"
           glib:type-name="GimpImageProcedure"
           glib:get-type="gimp_image_procedure_get_type"
           glib:type-struct="ImageProcedureClass">
      <doc xml:space="preserve"
           filename="libgimp/gimpimageprocedure.c"
           line="32">A [class@Procedure] subclass that makes it easier to write standard plug-in
procedures that operate on drawables.

It automatically adds the standard

( [enum@RunMode], [class@Image], [class@Drawable] )

arguments of an image procedure. It is possible to add additional
arguments.

When invoked via [method@Procedure.run], it unpacks these standard
arguments and calls @run_func which is a [callback@RunImageFunc]. The
"args" [struct@ValueArray] of [callback@RunImageFunc] only contains
additionally added arguments.</doc>
      <source-position filename="libgimp/gimpimageprocedure.h" line="59"/>
      <constructor name="new"
                   c:identifier="gimp_image_procedure_new"
                   version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpimageprocedure.c"
             line="248">Creates a new image procedure named @name which will call @run_func
when invoked.

See [ctor@Procedure.new] for information about @proc_type.</doc>
        <source-position filename="libgimp/gimpimageprocedure.h" line="62"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageprocedure.c"
               line="262">a new #GimpProcedure.</doc>
          <type name="Procedure" c:type="GimpProcedure*"/>
        </return-value>
        <parameters>
          <parameter name="plug_in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageprocedure.c"
                 line="250">a #GimpPlugIn.</doc>
            <type name="PlugIn" c:type="GimpPlugIn*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageprocedure.c"
                 line="251">the new procedure's name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="proc_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageprocedure.c"
                 line="252">the new procedure's #GimpPDBProcType.</doc>
            <type name="PDBProcType" c:type="GimpPDBProcType"/>
          </parameter>
          <parameter name="run_func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4"
                     destroy="5">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageprocedure.c"
                 line="253">the run function for the new procedure.</doc>
            <type name="RunImageFunc" c:type="GimpRunImageFunc"/>
          </parameter>
          <parameter name="run_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageprocedure.c"
                 line="254">user data passed to @run_func.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="run_data_destroy"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     destroy="4">
            <doc xml:space="preserve"
                 filename="libgimp/gimpimageprocedure.c"
                 line="255">free function for @run_data, or %NULL.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
    </class>
    <record name="ImageProcedureClass"
            c:type="GimpImageProcedureClass"
            glib:is-gtype-struct-for="ImageProcedure">
      <source-position filename="libgimp/gimpimageprocedure.h" line="59"/>
      <field name="parent_class">
        <type name="ProcedureClass" c:type="GimpProcedureClass"/>
      </field>
    </record>
    <enumeration name="ImageType"
                 glib:type-name="GimpImageType"
                 glib:get-type="gimp_image_type_get_type"
                 c:type="GimpImageType">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="601">Possible drawable types.</doc>
      <member name="rgb_image"
              value="0"
              c:identifier="GIMP_RGB_IMAGE"
              glib:nick="rgb-image"
              glib:name="GIMP_RGB_IMAGE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="603">RGB</doc>
      </member>
      <member name="rgba_image"
              value="1"
              c:identifier="GIMP_RGBA_IMAGE"
              glib:nick="rgba-image"
              glib:name="GIMP_RGBA_IMAGE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="604">RGB-alpha</doc>
      </member>
      <member name="gray_image"
              value="2"
              c:identifier="GIMP_GRAY_IMAGE"
              glib:nick="gray-image"
              glib:name="GIMP_GRAY_IMAGE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="605">Grayscale</doc>
      </member>
      <member name="graya_image"
              value="3"
              c:identifier="GIMP_GRAYA_IMAGE"
              glib:nick="graya-image"
              glib:name="GIMP_GRAYA_IMAGE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="606">Grayscale-alpha</doc>
      </member>
      <member name="indexed_image"
              value="4"
              c:identifier="GIMP_INDEXED_IMAGE"
              glib:nick="indexed-image"
              glib:name="GIMP_INDEXED_IMAGE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="607">Indexed</doc>
      </member>
      <member name="indexeda_image"
              value="5"
              c:identifier="GIMP_INDEXEDA_IMAGE"
              glib:nick="indexeda-image"
              glib:name="GIMP_INDEXEDA_IMAGE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="608">Indexed-alpha</doc>
      </member>
    </enumeration>
    <enumeration name="InkBlobType"
                 glib:type-name="GimpInkBlobType"
                 glib:get-type="gimp_ink_blob_type_get_type"
                 c:type="GimpInkBlobType">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="627">Ink tool tips.</doc>
      <member name="circle"
              value="0"
              c:identifier="GIMP_INK_BLOB_TYPE_CIRCLE"
              glib:nick="circle"
              glib:name="GIMP_INK_BLOB_TYPE_CIRCLE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="629">Circle</doc>
      </member>
      <member name="square"
              value="1"
              c:identifier="GIMP_INK_BLOB_TYPE_SQUARE"
              glib:nick="square"
              glib:name="GIMP_INK_BLOB_TYPE_SQUARE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="630">Square</doc>
      </member>
      <member name="diamond"
              value="2"
              c:identifier="GIMP_INK_BLOB_TYPE_DIAMOND"
              glib:nick="diamond"
              glib:name="GIMP_INK_BLOB_TYPE_DIAMOND">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="631">Diamond</doc>
      </member>
    </enumeration>
    <glib:boxed glib:name="Int32Array"
                c:symbol-prefix="int32_array"
                glib:type-name="GimpInt32Array"
                glib:get-type="gimp_int32_array_get_type">
    </glib:boxed>
    <enumeration name="InterpolationType"
                 glib:type-name="GimpInterpolationType"
                 glib:get-type="gimp_interpolation_type_get_type"
                 c:type="GimpInterpolationType">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="647">Interpolation types.</doc>
      <member name="none"
              value="0"
              c:identifier="GIMP_INTERPOLATION_NONE"
              glib:nick="none"
              glib:name="GIMP_INTERPOLATION_NONE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="649">None</doc>
      </member>
      <member name="linear"
              value="1"
              c:identifier="GIMP_INTERPOLATION_LINEAR"
              glib:nick="linear"
              glib:name="GIMP_INTERPOLATION_LINEAR">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="650">Linear</doc>
      </member>
      <member name="cubic"
              value="2"
              c:identifier="GIMP_INTERPOLATION_CUBIC"
              glib:nick="cubic"
              glib:name="GIMP_INTERPOLATION_CUBIC">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="651">Cubic</doc>
      </member>
      <member name="nohalo"
              value="3"
              c:identifier="GIMP_INTERPOLATION_NOHALO"
              glib:nick="nohalo"
              glib:name="GIMP_INTERPOLATION_NOHALO">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="652">NoHalo</doc>
      </member>
      <member name="lohalo"
              value="4"
              c:identifier="GIMP_INTERPOLATION_LOHALO"
              glib:nick="lohalo"
              glib:name="GIMP_INTERPOLATION_LOHALO">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="653">LoHalo</doc>
      </member>
    </enumeration>
    <class name="Item"
           c:symbol-prefix="item"
           c:type="GimpItem"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="GimpItem"
           glib:get-type="gimp_item_get_type"
           glib:type-struct="ItemClass">
      <doc xml:space="preserve"
           filename="libgimp/gimpitem_pdb.c"
           line="30">Functions to manipulate items.</doc>
      <source-position filename="libgimp/gimpitem.h" line="51"/>
      <function name="get_by_id"
                c:identifier="gimp_item_get_by_id"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem.c"
             line="158">Returns a #GimpItem representing @item_id. Since #GimpItem is an
abstract class, the real object type will actually be the proper
subclass.

Note: in most use cases, you should not need to retrieve a #GimpItem
by its ID, which is mostly internal data and not reusable across
sessions. Use the appropriate functions for your use case instead.</doc>
        <source-position filename="libgimp/gimpitem.h" line="55"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem.c"
               line="170">a #GimpItem for @item_id or
         %NULL if @item_id does not represent a valid item.
         The object belongs to libgimp and you must not modify
         or unref it.</doc>
          <type name="Item" c:type="GimpItem*"/>
        </return-value>
        <parameters>
          <parameter name="item_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem.c"
                 line="160">The item id.</doc>
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </function>
      <function name="id_is_channel"
                c:identifier="gimp_item_id_is_channel"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="254">Returns whether the item ID is a channel.

This procedure returns %TRUE if the specified item ID is a channel.

*Note*: in most use cases, you should not use this function. See
[func@Gimp.Item.id_is_layer] for a discussion on alternatives.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="265">TRUE if the item ID is a channel, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="item_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="256">The item ID.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="id_is_drawable"
                c:identifier="gimp_item_id_is_drawable"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="80">Returns whether the item ID is a drawable.

This procedure returns %TRUE if the specified item ID is a drawable.

*Note*: in most use cases, you should not use this function. See
[func@Gimp.Item.id_is_layer] for a discussion on alternatives.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="91">TRUE if the item ID is a drawable, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="item_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="82">The item ID.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="id_is_group_layer"
                c:identifier="gimp_item_id_is_group_layer"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="214">Returns whether the item ID is a group layer.

This procedure returns %TRUE if the specified item ID is a group
layer.

*Note*: in most use cases, you should not use this function. See
[func@Gimp.Item.id_is_layer] for a discussion on alternatives.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="226">TRUE if the item is a group layer, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="item_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="216">The item ID.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="id_is_layer"
                c:identifier="gimp_item_id_is_layer"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="119">Returns whether the item ID is a layer.

This procedure returns %TRUE if the specified item ID is a layer.

*Note*: in most use cases, you should not use this function. If the
goal is to verify the accurate type for a [class@Gimp.Item], you
should either use [method@Gimp.Item.is_layer] or the specific
type-checking methods for the used language.

For instance, in C:

```C
if (GIMP_IS_LAYER (item))
  do_something ();
```

Or in the Python binding, you could run:

```py3
if isinstance(item, Gimp.Layer):
  do_something()
```</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="146">TRUE if the item is a layer, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="item_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="121">The item ID.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="id_is_layer_mask"
                c:identifier="gimp_item_id_is_layer_mask"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="293">Returns whether the item ID is a layer mask.

This procedure returns %TRUE if the specified item ID is a layer
mask.

*Note*: in most use cases, you should not use this function. See
[func@Gimp.Item.id_is_layer] for a discussion on alternatives.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="305">TRUE if the item ID is a layer mask, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="item_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="295">The item.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="id_is_path"
                c:identifier="gimp_item_id_is_path"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="333">Returns whether the item ID is a path.

This procedure returns %TRUE if the specified item ID is a path.

*Note*: in most use cases, you should not use this function. See
[func@Gimp.Item.id_is_layer] for a discussion on alternatives.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="344">TRUE if the item ID is a path, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="item_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="335">The item ID.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="id_is_selection"
                c:identifier="gimp_item_id_is_selection"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="372">Returns whether the item ID is a selection.

This procedure returns %TRUE if the specified item ID is a
selection.

*Note*: in most use cases, you should not use this function. See
[func@Gimp.Item.id_is_layer] for a discussion on alternatives.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="384">TRUE if the item ID is a selection, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="item_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="374">The item ID.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="id_is_text_layer"
                c:identifier="gimp_item_id_is_text_layer"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="174">Returns whether the item ID is a text layer.

This procedure returns %TRUE if the specified item ID is a text
layer.

*Note*: in most use cases, you should not use this function. See
[func@Gimp.Item.id_is_layer] for a discussion on alternatives.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="186">TRUE if the item is a text layer, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="item_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="176">The item ID.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="id_is_valid"
                c:identifier="gimp_item_id_is_valid"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="39">Returns %TRUE if the item ID is valid.

This procedure checks if the given item ID is valid and refers to an
existing item.

*Note*: in most use cases, you should not use this function. If you
got a [class@Gimp.Item] from the API, you should trust it is valid.
This function is mostly for internal usage.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="52">Whether the item ID is valid.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="item_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="41">The item ID to check.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <method name="attach_parasite"
              c:identifier="gimp_item_attach_parasite"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="1203">Add a parasite to an item.

This procedure attaches a parasite to an item. It has no return
values.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="1213">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="1205">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
          <parameter name="parasite" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="1206">The parasite to attach to the item.</doc>
            <type name="Parasite" c:type="const GimpParasite*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete" c:identifier="gimp_item_delete" version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="448">Delete a item.

This procedure deletes the specified item. This must not be done if
the image containing this item was already deleted or if the item
was already removed from the image. The only case in which this
procedure is useful is if you want to get rid of a item which has
not yet been added to an image.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="460">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="450">The item to delete.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="detach_parasite"
              c:identifier="gimp_item_detach_parasite"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="1242">Removes a parasite from an item.

This procedure detaches a parasite from an item. It has no return
values.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="1252">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="1244">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="1245">The name of the parasite to detach from the item.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_children"
              c:identifier="gimp_item_get_children"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="560">Returns the item's list of children.

This procedure returns the list of items which are children of the
specified item. The order is topmost to bottommost.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="48"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="570">
         The item's list of children.
         The returned value must be freed with g_free().</doc>
          <array length="0" zero-terminated="0" c:type="GimpItem**">
            <type name="Item"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="562">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
          <parameter name="num_children"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="563">The item's number of children.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_color_tag"
              c:identifier="gimp_item_get_color_tag"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="1051">Get the color tag of the specified item.

This procedure returns the specified item's color tag.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="1059">The item's color tag.</doc>
          <type name="ColorTag" c:type="GimpColorTag"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="1053">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_expanded"
              c:identifier="gimp_item_get_expanded"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="606">Returns whether the item is expanded.

This procedure returns %TRUE if the specified item is expanded.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="614">TRUE if the item is expanded, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="608">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="gimp_item_get_id"
              glib:get-property="id"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem.c"
             line="132">Note: in most use cases, you should not need an item's ID which is
mostly internal data and not reusable across sessions.</doc>
        <source-position filename="libgimp/gimpitem.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem.c"
               line="139">the item ID.</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem.c"
                 line="134">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_image"
              c:identifier="gimp_item_get_image"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="412">Returns the item's image.

This procedure returns the item's image.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="420">The item's image.</doc>
          <type name="Image" c:type="GimpImage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="414">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lock_content"
              c:identifier="gimp_item_get_lock_content"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="829">Get the 'lock content' state of the specified item.

This procedure returns the specified item's lock content state.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="837">Whether the item's contents are locked.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="831">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lock_position"
              c:identifier="gimp_item_get_lock_position"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="903">Get the 'lock position' state of the specified item.

This procedure returns the specified item's lock position state.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="911">Whether the item's position is locked.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="905">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lock_visibility"
              c:identifier="gimp_item_get_lock_visibility"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="977">Get the 'lock visibility' state of the specified item.

This procedure returns the specified item's lock visibility state.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="985">Whether the item's visibility is locked.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="979">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="gimp_item_get_name" version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="680">Get the name of the specified item.

This procedure returns the specified item's name.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="53"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="688">The item name.
         The returned value must be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="682">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parasite"
              c:identifier="gimp_item_get_parasite"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="1281">Look up a parasite in an item

Finds and returns the parasite that is attached to an item.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="78"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="1290">The found parasite.</doc>
          <type name="Parasite" c:type="GimpParasite*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="1283">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="1284">The name of the parasite to find.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_parasite_list"
              c:identifier="gimp_item_get_parasite_list"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="1320">List all parasites.

Returns a list of all parasites currently attached the an item.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="80"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="1328">
         The names of currently attached parasites.
         The returned value must be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="1322">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent"
              c:identifier="gimp_item_get_parent"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="524">Returns the item's parent item.

This procedure returns the item's parent item, if any.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="532">The item's parent item.</doc>
          <type name="Item" c:type="GimpItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="526">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tattoo"
              c:identifier="gimp_item_get_tattoo"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="1125">Get the tattoo of the specified item.

This procedure returns the specified item's tattoo. A tattoo is a
unique and permanent identifier attached to a item that can be used
to uniquely identify a item within an image even between sessions.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="1135">The item tattoo.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="1127">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_visible"
              c:identifier="gimp_item_get_visible"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="755">Get the visibility of the specified item.

This procedure returns the specified item's visibility.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="763">The item visibility.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="757">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_channel"
              c:identifier="gimp_item_is_channel"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem.c"
             line="283">Returns whether the item is a channel.

This procedure returns TRUE if the specified item is a channel.</doc>
        <source-position filename="libgimp/gimpitem.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem.c"
               line="291">TRUE if the item is a channel, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem.c"
                 line="285">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_drawable"
              c:identifier="gimp_item_is_drawable"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem.c"
             line="209">Returns whether the item is a drawable.

This procedure returns TRUE if the specified item is a drawable.</doc>
        <source-position filename="libgimp/gimpitem.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem.c"
               line="217">TRUE if the item is a drawable, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem.c"
                 line="211">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_group" c:identifier="gimp_item_is_group" version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="487">Returns whether the item is a group item.

This procedure returns %TRUE if the specified item is a group item
which can have children.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="496">TRUE if the item is a group, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="489">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_group_layer"
              c:identifier="gimp_item_is_group_layer"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem.c"
             line="264">Returns whether the item is a group layer.

This procedure returns TRUE if the specified item is a group
layer.</doc>
        <source-position filename="libgimp/gimpitem.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem.c"
               line="273">TRUE if the item is a group layer, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem.c"
                 line="266">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_layer" c:identifier="gimp_item_is_layer" version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem.c"
             line="227">Returns whether the item is a layer.

This procedure returns TRUE if the specified item is a layer.</doc>
        <source-position filename="libgimp/gimpitem.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem.c"
               line="235">TRUE if the item is a layer, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem.c"
                 line="229">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_layer_mask"
              c:identifier="gimp_item_is_layer_mask"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem.c"
             line="301">Returns whether the item is a layer mask.

This procedure returns TRUE if the specified item is a layer
mask.</doc>
        <source-position filename="libgimp/gimpitem.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem.c"
               line="310">TRUE if the item is a layer mask, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem.c"
                 line="303">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_path" c:identifier="gimp_item_is_path" version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem.c"
             line="338">Returns whether the item is a path.

This procedure returns TRUE if the specified item is a path.</doc>
        <source-position filename="libgimp/gimpitem.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem.c"
               line="346">TRUE if the item is a path, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem.c"
                 line="340">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_selection"
              c:identifier="gimp_item_is_selection"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem.c"
             line="320">Returns whether the item is a selection.

This procedure returns TRUE if the specified item is a selection.</doc>
        <source-position filename="libgimp/gimpitem.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem.c"
               line="328">TRUE if the item is a selection, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem.c"
                 line="322">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_text_layer"
              c:identifier="gimp_item_is_text_layer"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem.c"
             line="245">Returns whether the item is a text layer.

This procedure returns TRUE if the specified item is a text
layer.</doc>
        <source-position filename="libgimp/gimpitem.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem.c"
               line="254">TRUE if the item is a text layer, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem.c"
                 line="247">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_valid" c:identifier="gimp_item_is_valid" version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem.c"
             line="190">Returns TRUE if the item is valid.

This procedure checks if the given item is valid and refers to an
existing item.</doc>
        <source-position filename="libgimp/gimpitem.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem.c"
               line="199">Whether the item is valid.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem.c"
                 line="192">The item to check.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_children"
              c:identifier="gimp_item_list_children"
              version="3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem.c"
             line="356">Returns the item's list of children.

This procedure returns the list of items which are children of the
specified item. The order is topmost to bottommost.</doc>
        <source-position filename="libgimp/gimpitem.h" line="67"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem.c"
               line="365">
         The item's list of children.
         The returned list must be freed with g_list_free(). Item
         elements belong to libgimp and must not be unrefed.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Item"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem.c"
                 line="358">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_color_tag"
              c:identifier="gimp_item_set_color_tag"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="1087">Set the color tag of the specified item.

This procedure sets the specified item's color tag.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="1096">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="1089">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
          <parameter name="color_tag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="1090">The new item color tag.</doc>
            <type name="ColorTag" c:type="GimpColorTag"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_expanded"
              c:identifier="gimp_item_set_expanded"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="642">Sets the expanded state of the item.

This procedure expands or collapses the item.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="651">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="644">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
          <parameter name="expanded" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="645">TRUE to expand the item, FALSE to collapse the item.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_lock_content"
              c:identifier="gimp_item_set_lock_content"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="865">Set the 'lock content' state of the specified item.

This procedure sets the specified item's lock content state.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="874">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="867">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
          <parameter name="lock_content" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="868">The new item 'lock content' state.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_lock_position"
              c:identifier="gimp_item_set_lock_position"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="939">Set the 'lock position' state of the specified item.

This procedure sets the specified item's lock position state.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="948">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="941">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
          <parameter name="lock_position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="942">The new item 'lock position' state.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_lock_visibility"
              c:identifier="gimp_item_set_lock_visibility"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="1013">Set the 'lock visibility' state of the specified item.

This procedure sets the specified item's lock visibility state.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="1022">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="1015">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
          <parameter name="lock_visibility" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="1016">The new item 'lock visibility' state.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name" c:identifier="gimp_item_set_name" version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="717">Set the name of the specified item.

This procedure sets the specified item's name.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="726">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="719">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="720">The new item name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tattoo"
              c:identifier="gimp_item_set_tattoo"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="1163">Set the tattoo of the specified item.

This procedure sets the specified item's tattoo. A tattoo is a
unique and permanent identifier attached to a item that can be used
to uniquely identify a item within an image even between sessions.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="1174">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="1165">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
          <parameter name="tattoo" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="1166">The new item tattoo.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible"
              c:identifier="gimp_item_set_visible"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitem_pdb.c"
             line="791">Set the visibility of the specified item.

This procedure sets the specified item's visibility.</doc>
        <source-position filename="libgimp/gimpitem_pdb.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitem_pdb.c"
               line="800">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="793">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
          <parameter name="visible" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitem_pdb.c"
                 line="794">The new item visibility.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="transform_2d"
              c:identifier="gimp_item_transform_2d"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitemtransform_pdb.c"
             line="551">Transform the specified item in 2d.

This procedure transforms the specified item.

The transformation is done by scaling by the x and y scale factors
about the point (source_x, source_y), then rotating around the same
point, then translating that point to the new position (dest_x,
dest_y).

If a selection exists and the item is a drawable, the portion of the
drawable which lies under the selection is cut from the drawable and
made into a floating selection which is then transformed as
specified. The return value is the ID of the transformed floating
selection.

If there is no selection or the item is not a drawable, the entire
item will be transformed according to the specified parameters.
The return value will be equal to the item ID supplied as input.

This procedure is affected by the following context setters:
gimp_context_set_interpolation(),
gimp_context_set_transform_direction(),
gimp_context_set_transform_resize().</doc>
        <source-position filename="libgimp/gimpitemtransform_pdb.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitemtransform_pdb.c"
               line="586">The transformed item.</doc>
          <type name="Item" c:type="GimpItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="553">The affected item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
          <parameter name="source_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="554">X coordinate of the transformation center.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="source_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="555">Y coordinate of the transformation center.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="scale_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="556">Amount to scale in x direction.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="scale_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="557">Amount to scale in y direction.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="angle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="558">The angle of rotation (radians).</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="dest_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="559">X coordinate of where the center goes.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="dest_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="560">Y coordinate of where the center goes.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="transform_flip"
              c:identifier="gimp_item_transform_flip"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitemtransform_pdb.c"
             line="144">Flip the specified item around a given line.

This procedure flips the specified item.

If a selection exists and the item is a drawable, the portion of the
drawable which lies under the selection is cut from the drawable and
made into a floating selection which is then flipped. The axis to
flip around is specified by specifying two points from that line.
The return value is the ID of the flipped floating selection.

If there is no selection or the item is not a drawable, the entire
item will be flipped around the specified axis. The return value
will be equal to the item ID supplied as input.

This procedure is affected by the following context setters:
gimp_context_set_interpolation(),
gimp_context_set_transform_direction(),
gimp_context_set_transform_resize().</doc>
        <source-position filename="libgimp/gimpitemtransform_pdb.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitemtransform_pdb.c"
               line="171">The flipped item.</doc>
          <type name="Item" c:type="GimpItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="146">The affected item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
          <parameter name="x0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="147">horz. coord. of one end of axis.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="148">vert. coord. of one end of axis.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="x1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="149">horz. coord. of other end of axis.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="150">vert. coord. of other end of axis.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="transform_flip_simple"
              c:identifier="gimp_item_transform_flip_simple"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimpitemtransform_pdb.c"
             line="84">Flip the specified item either vertically or horizontally.

This procedure flips the specified item.

If a selection exists and the item is a drawable, the portion of the
drawable which lies under the selection is cut from the drawable and
made into a floating selection which is then flipped. If auto_center
is set to TRUE, the flip is around the selection's center.
Otherwise, the coordinate of the axis needs to be specified. The
return value is the ID of the flipped floating selection.

If there is no selection or the item is not a drawable, the entire
item will be flipped around its center if auto_center is set to
TRUE, otherwise the coordinate of the axis needs to be specified.
The return value will be equal to the item ID supplied as input.

This procedure is affected by the following context setters:
gimp_context_set_transform_resize().</doc>
        <source-position filename="libgimp/gimpitemtransform_pdb.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitemtransform_pdb.c"
               line="110">The flipped item.</doc>
          <type name="Item" c:type="GimpItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="86">The affected item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
          <parameter name="flip_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="87">Type of flip.</doc>
            <type name="OrientationType" c:type="GimpOrientationType"/>
          </parameter>
          <parameter name="auto_center" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="88">Whether to automatically position the axis in the selection center.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="89">coord. of flip axis.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="transform_matrix"
              c:identifier="gimp_item_transform_matrix"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitemtransform_pdb.c"
             line="628">Transform the specified item in 2d.

This procedure transforms the specified item.

The transformation is done by assembling a 3x3 matrix from the
coefficients passed.

If a selection exists and the item is a drawable, the portion of the
drawable which lies under the selection is cut from the drawable and
made into a floating selection which is then transformed as
specified. The return value is the ID of the transformed floating
selection.

If there is no selection or the item is not a drawable, the entire
item will be transformed according to the specified matrix.
The return value will be equal to the item ID supplied as input.

This procedure is affected by the following context setters:
gimp_context_set_interpolation(),
gimp_context_set_transform_direction(),
gimp_context_set_transform_resize().</doc>
        <source-position filename="libgimp/gimpitemtransform_pdb.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitemtransform_pdb.c"
               line="663">The transformed item.</doc>
          <type name="Item" c:type="GimpItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="630">The affected item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
          <parameter name="coeff_0_0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="631">coefficient (0,0) of the transformation matrix.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="coeff_0_1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="632">coefficient (0,1) of the transformation matrix.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="coeff_0_2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="633">coefficient (0,2) of the transformation matrix.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="coeff_1_0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="634">coefficient (1,0) of the transformation matrix.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="coeff_1_1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="635">coefficient (1,1) of the transformation matrix.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="coeff_1_2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="636">coefficient (1,2) of the transformation matrix.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="coeff_2_0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="637">coefficient (2,0) of the transformation matrix.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="coeff_2_1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="638">coefficient (2,1) of the transformation matrix.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="coeff_2_2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="639">coefficient (2,2) of the transformation matrix.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="transform_perspective"
              c:identifier="gimp_item_transform_perspective"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitemtransform_pdb.c"
             line="207">Perform a possibly non-affine transformation on the specified item.

This procedure performs a possibly non-affine transformation on the
specified item by allowing the corners of the original bounding box
to be arbitrarily remapped to any values.

The 4 coordinates specify the new locations of each corner of the
original bounding box. By specifying these values, any affine
transformation (rotation, scaling, translation) can be affected.
Additionally, these values can be specified such that the resulting
transformed item will appear to have been projected via a
perspective transform.

If a selection exists and the item is a drawable, the portion of the
drawable which lies under the selection is cut from the drawable and
made into a floating selection which is then transformed as
specified. The return value is the ID of the transformed floating
selection.

If there is no selection or the item is not a drawable, the entire
item will be transformed according to the specified mapping.
The return value will be equal to the item ID supplied as input.

This procedure is affected by the following context setters:
gimp_context_set_interpolation(),
gimp_context_set_transform_direction(),
gimp_context_set_transform_resize().</doc>
        <source-position filename="libgimp/gimpitemtransform_pdb.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitemtransform_pdb.c"
               line="247">The transformed item.</doc>
          <type name="Item" c:type="GimpItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="209">The affected item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
          <parameter name="x0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="210">The new x coordinate of upper-left corner of original bounding box.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="211">The new y coordinate of upper-left corner of original bounding box.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="x1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="212">The new x coordinate of upper-right corner of original bounding box.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="213">The new y coordinate of upper-right corner of original bounding box.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="x2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="214">The new x coordinate of lower-left corner of original bounding box.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="215">The new y coordinate of lower-left corner of original bounding box.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="x3" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="216">The new x coordinate of lower-right corner of original bounding box.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y3" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="217">The new y coordinate of lower-right corner of original bounding box.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="transform_rotate"
              c:identifier="gimp_item_transform_rotate"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitemtransform_pdb.c"
             line="357">Rotate the specified item about given coordinates through the
specified angle.

This function rotates the specified item.

If a selection exists and the item is a drawable, the portion of the
drawable which lies under the selection is cut from the drawable and
made into a floating selection which is then rotated by the
specified amount. If auto_center is set to TRUE, the rotation is
around the selection's center. Otherwise, the coordinate of the
center point needs to be specified. The return value is the ID of
the rotated floating selection.

If there is no selection or the item is not a drawable, the entire
item will be rotated around its center if auto_center is set to
TRUE, otherwise the coordinate of the center point needs to be
specified.
The return value will be equal to the item ID supplied as input.

This procedure is affected by the following context setters:
gimp_context_set_interpolation(),
gimp_context_set_transform_direction(),
gimp_context_set_transform_resize().</doc>
        <source-position filename="libgimp/gimpitemtransform_pdb.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitemtransform_pdb.c"
               line="389">The rotated item.</doc>
          <type name="Item" c:type="GimpItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="359">The affected item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
          <parameter name="angle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="360">The angle of rotation (radians).</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="auto_center" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="361">Whether to automatically rotate around the selection center.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="center_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="362">The hor. coordinate of the center of rotation.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="center_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="363">The vert. coordinate of the center of rotation.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="transform_rotate_simple"
              c:identifier="gimp_item_transform_rotate_simple"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitemtransform_pdb.c"
             line="291">Rotate the specified item about given coordinates through the
specified angle.

This function rotates the specified item.

If a selection exists and the item is a drawable, the portion of the
drawable which lies under the selection is cut from the drawable and
made into a floating selection which is then rotated by the
specified amount. If auto_center is set to TRUE, the rotation is
around the selection's center. Otherwise, the coordinate of the
center point needs to be specified. The return value is the ID of
the rotated floating selection.

If there is no selection or the item is not a drawable, the entire
item will be rotated around its center if auto_center is set to
TRUE, otherwise the coordinate of the center point needs to be
specified.
The return value will be equal to the item ID supplied as input.

This procedure is affected by the following context setters:
gimp_context_set_transform_resize().</doc>
        <source-position filename="libgimp/gimpitemtransform_pdb.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitemtransform_pdb.c"
               line="321">The rotated item.</doc>
          <type name="Item" c:type="GimpItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="293">The affected item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
          <parameter name="rotate_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="294">Type of rotation.</doc>
            <type name="RotationType" c:type="GimpRotationType"/>
          </parameter>
          <parameter name="auto_center" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="295">Whether to automatically rotate around the selection center.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="center_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="296">The hor. coordinate of the center of rotation.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="center_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="297">The vert. coordinate of the center of rotation.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="transform_scale"
              c:identifier="gimp_item_transform_scale"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitemtransform_pdb.c"
             line="425">Scale the specified item.

This procedure scales the specified item.

The 2 coordinates specify the new locations of the top-left and
bottom-roght corners of the original bounding box.

If a selection exists and the item is a drawable, the portion of the
drawable which lies under the selection is cut from the drawable and
made into a floating selection which is then scaled as specified.
The return value is the ID of the scaled floating selection.

If there is no selection or the item is not a drawable, the entire
item will be scaled according to the specified coordinates.
The return value will be equal to the item ID supplied as input.

This procedure is affected by the following context setters:
gimp_context_set_interpolation(),
gimp_context_set_transform_direction(),
gimp_context_set_transform_resize().</doc>
        <source-position filename="libgimp/gimpitemtransform_pdb.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitemtransform_pdb.c"
               line="454">The scaled item.</doc>
          <type name="Item" c:type="GimpItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="427">The affected item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
          <parameter name="x0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="428">The new x coordinate of the upper-left corner of the scaled region.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="429">The new y coordinate of the upper-left corner of the scaled region.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="x1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="430">The new x coordinate of the lower-right corner of the scaled region.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="431">The new y coordinate of the lower-right corner of the scaled region.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="transform_shear"
              c:identifier="gimp_item_transform_shear"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimpitemtransform_pdb.c"
             line="490">Shear the specified item about its center by the specified
magnitude.

This procedure shears the specified item.

The shear type parameter indicates whether the shear will be applied
horizontally or vertically. The magnitude can be either positive or
negative and indicates the extent (in pixels) to shear by.

If a selection exists and the item is a drawable, the portion of the
drawable which lies under the selection is cut from the drawable and
made into a floating selection which is then sheared as specified.
The return value is the ID of the sheared floating selection.

If there is no selection or the item is not a drawable, the entire
item will be sheared according to the specified parameters.
The return value will be equal to the item ID supplied as input.

This procedure is affected by the following context setters:
gimp_context_set_interpolation(),
gimp_context_set_transform_direction(),
gimp_context_set_transform_resize().</doc>
        <source-position filename="libgimp/gimpitemtransform_pdb.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitemtransform_pdb.c"
               line="519">The sheared item.</doc>
          <type name="Item" c:type="GimpItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="492">The affected item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
          <parameter name="shear_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="493">Type of shear.</doc>
            <type name="OrientationType" c:type="GimpOrientationType"/>
          </parameter>
          <parameter name="magnitude" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="494">The magnitude of the shear.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="transform_translate"
              c:identifier="gimp_item_transform_translate"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpitemtransform_pdb.c"
             line="39">Translate the item by the specified offsets.

This procedure translates the item by the amounts specified in the
off_x and off_y arguments. These can be negative, and are considered
offsets from the current position. The offsets will be rounded to
the nearest pixel unless the item is a path.</doc>
        <source-position filename="libgimp/gimpitemtransform_pdb.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpitemtransform_pdb.c"
               line="52">The translated item.</doc>
          <type name="Item" c:type="GimpItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="41">The item.</doc>
            <type name="Item" c:type="GimpItem*"/>
          </instance-parameter>
          <parameter name="off_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="42">Offset in x direction.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="off_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpitemtransform_pdb.c"
                 line="43">Offset in y direction.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_id"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ItemClass"
            c:type="GimpItemClass"
            glib:is-gtype-struct-for="Item">
      <source-position filename="libgimp/gimpitem.h" line="51"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_gimp_reserved1" introspectable="0">
        <callback name="_gimp_reserved1">
          <source-position filename="libgimp/gimpitem.h" line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved2" introspectable="0">
        <callback name="_gimp_reserved2">
          <source-position filename="libgimp/gimpitem.h" line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved3" introspectable="0">
        <callback name="_gimp_reserved3">
          <source-position filename="libgimp/gimpitem.h" line="45"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved4" introspectable="0">
        <callback name="_gimp_reserved4">
          <source-position filename="libgimp/gimpitem.h" line="46"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved5" introspectable="0">
        <callback name="_gimp_reserved5">
          <source-position filename="libgimp/gimpitem.h" line="47"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved6" introspectable="0">
        <callback name="_gimp_reserved6">
          <source-position filename="libgimp/gimpitem.h" line="48"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved7" introspectable="0">
        <callback name="_gimp_reserved7">
          <source-position filename="libgimp/gimpitem.h" line="49"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved8" introspectable="0">
        <callback name="_gimp_reserved8">
          <source-position filename="libgimp/gimpitem.h" line="50"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="JoinStyle"
                 glib:type-name="GimpJoinStyle"
                 glib:get-type="gimp_join_style_get_type"
                 c:type="GimpJoinStyle">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="671">Line join styles.</doc>
      <member name="miter"
              value="0"
              c:identifier="GIMP_JOIN_MITER"
              glib:nick="miter"
              glib:name="GIMP_JOIN_MITER">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="673">Miter</doc>
      </member>
      <member name="round"
              value="1"
              c:identifier="GIMP_JOIN_ROUND"
              glib:nick="round"
              glib:name="GIMP_JOIN_ROUND">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="674">Round</doc>
      </member>
      <member name="bevel"
              value="2"
              c:identifier="GIMP_JOIN_BEVEL"
              glib:nick="bevel"
              glib:name="GIMP_JOIN_BEVEL">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="675">Bevel</doc>
      </member>
    </enumeration>
    <class name="Layer"
           c:symbol-prefix="layer"
           c:type="GimpLayer"
           parent="Drawable"
           glib:type-name="GimpLayer"
           glib:get-type="gimp_layer_get_type"
           glib:type-struct="LayerClass">
      <doc xml:space="preserve"
           filename="libgimp/gimplayer_pdb.c"
           line="30">Operations on a single layer.</doc>
      <source-position filename="libgimp/gimplayer.h" line="56"/>
      <constructor name="new" c:identifier="gimp_layer_new" version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer.c"
             line="76">Create a new layer.

This procedure creates a new layer with the specified @width, @height, and
@type. If @name is %NULL, a default layer name will be used.
@opacity and @mode are also supplied parameters.

The new layer still needs to be added to the image, as this is not automatic.
Add the new layer with the [method@Image.insert_layer] method.

Other attributes such as layer mask modes, and offsets should be set with
explicit procedure calls.</doc>
        <source-position filename="libgimp/gimplayer.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer.c"
               line="98">The newly created layer.
         The object belongs to libgimp and you should not free it.</doc>
          <type name="Layer" c:type="GimpLayer*"/>
        </return-value>
        <parameters>
          <parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer.c"
                 line="78">The image to which to add the layer.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer.c"
                 line="79">The layer name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer.c"
                 line="80">The layer width.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer.c"
                 line="81">The layer height.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer.c"
                 line="82">The layer type.</doc>
            <type name="ImageType" c:type="GimpImageType"/>
          </parameter>
          <parameter name="opacity" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer.c"
                 line="83">The layer opacity.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer.c"
                 line="84">The layer combination mode.</doc>
            <type name="LayerMode" c:type="GimpLayerMode"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_drawable"
                   c:identifier="gimp_layer_new_from_drawable">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer_pdb.c"
             line="143">Create a new layer by copying an existing drawable.

This procedure creates a new layer as a copy of the specified
drawable. The new layer still needs to be added to the image, as
this is not automatic. Add the new layer with the
gimp_image_insert_layer() command. Other attributes such as layer
mask modes, and offsets should be set with explicit procedure calls.</doc>
        <source-position filename="libgimp/gimplayer_pdb.h" line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer_pdb.c"
               line="156">The newly copied layer.</doc>
          <type name="Layer" c:type="GimpLayer*"/>
        </return-value>
        <parameters>
          <parameter name="drawable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="145">The source drawable from where the new layer is copied.</doc>
            <type name="Drawable" c:type="GimpDrawable*"/>
          </parameter>
          <parameter name="dest_image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="146">The destination image to which to add the layer.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_pixbuf"
                   c:identifier="gimp_layer_new_from_pixbuf"
                   version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer.c"
             line="142">Create a new layer from a %GdkPixbuf.

This procedure creates a new layer from the given %GdkPixbuf.  The
image has to be an RGB image and just like with gimp_layer_new()
you will still need to add the layer to it.

If you pass @progress_end &gt; @progress_start to this function,
gimp_progress_update() will be called for. You have to call
gimp_progress_init() beforehand then.</doc>
        <source-position filename="libgimp/gimplayer.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer.c"
               line="162">The newly created layer.
         The object belongs to libgimp and you should not free it.</doc>
          <type name="Layer" c:type="GimpLayer*"/>
        </return-value>
        <parameters>
          <parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer.c"
                 line="144">The RGB image to which to add the layer.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer.c"
                 line="145">The layer name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer.c"
                 line="146">A GdkPixbuf.</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
          <parameter name="opacity" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer.c"
                 line="147">The layer opacity.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer.c"
                 line="148">The layer combination mode.</doc>
            <type name="LayerMode" c:type="GimpLayerMode"/>
          </parameter>
          <parameter name="progress_start" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer.c"
                 line="149">start of progress</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="progress_end" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer.c"
                 line="150">end of progress</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_surface"
                   c:identifier="gimp_layer_new_from_surface"
                   version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer.c"
             line="223">Create a new layer from a [type@cairo.Surface].

This procedure creates a new layer from the given
[type@cairo.Surface]. The image has to be an RGB image and just like
with gimp_layer_new() you will still need to add the layer to it.

If you pass @progress_end &gt; @progress_start to this function,
gimp_progress_update() will be called for. You have to call
gimp_progress_init() beforehand then.</doc>
        <source-position filename="libgimp/gimplayer.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer.c"
               line="241">The newly created layer.
         The object belongs to libgimp and you should not free it.</doc>
          <type name="Layer" c:type="GimpLayer*"/>
        </return-value>
        <parameters>
          <parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer.c"
                 line="225">The RGB image to which to add the layer.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer.c"
                 line="226">The layer name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="surface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer.c"
                 line="227">A Cairo image surface.</doc>
            <type name="cairo.Surface" c:type="cairo_surface_t*"/>
          </parameter>
          <parameter name="progress_start" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer.c"
                 line="228">start of progress</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="progress_end" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer.c"
                 line="229">end of progress</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_visible"
                   c:identifier="gimp_layer_new_from_visible"
                   version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer_pdb.c"
             line="97">Create a new layer from what is visible in an image.

This procedure creates a new layer from what is visible in the given
image. The new layer still needs to be added to the destination
image, as this is not automatic. Add the new layer with the
gimp_image_insert_layer() command. Other attributes such as layer
mask modes, and offsets should be set with explicit procedure calls.</doc>
        <source-position filename="libgimp/gimplayer_pdb.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer_pdb.c"
               line="111">The newly created layer.</doc>
          <type name="Layer" c:type="GimpLayer*"/>
        </return-value>
        <parameters>
          <parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="99">The source image from where the content is copied.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </parameter>
          <parameter name="dest_image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="100">The destination image to which to add the layer.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="101">The layer name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="from_mask"
                c:identifier="gimp_layer_from_mask"
                version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer_pdb.c"
             line="562">Get the specified mask's layer.

This procedure returns the specified mask's layer , or -1 if none
exists.</doc>
        <source-position filename="libgimp/gimplayer_pdb.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer_pdb.c"
               line="571">The mask's layer.</doc>
          <type name="Layer" c:type="GimpLayer*"/>
        </return-value>
        <parameters>
          <parameter name="mask" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="564">Mask for which to return the layer.</doc>
            <type name="LayerMask" c:type="GimpLayerMask*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_by_id"
                c:identifier="gimp_layer_get_by_id"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer.c"
             line="50">Returns a #GimpLayer representing @layer_id. This function calls
gimp_item_get_by_id() and returns the item if it is layer or %NULL
otherwise.</doc>
        <source-position filename="libgimp/gimplayer.h" line="58"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer.c"
               line="58">a #GimpLayer for @layer_id or
         %NULL if @layer_id does not represent a valid layer. The
         object belongs to libgimp and you must not modify or unref
         it.</doc>
          <type name="Layer" c:type="GimpLayer*"/>
        </return-value>
        <parameters>
          <parameter name="layer_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer.c"
                 line="52">The layer id.</doc>
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="copy" invoker="copy" version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer.c"
             line="121">Copy a layer.

This procedure copies the specified layer and returns the copy. The
newly copied layer is for use within the original layer's image. It
should not be subsequently added to any other image.</doc>
        <source-position filename="libgimp/gimplayer.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer.c"
               line="131">The newly copied layer.
         The object belongs to libgimp and you should not free it.</doc>
          <type name="Layer" c:type="GimpLayer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer.c"
                 line="123">The layer to copy.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="add_alpha" c:identifier="gimp_layer_add_alpha">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer_pdb.c"
             line="226">Add an alpha channel to the layer if it doesn't already have one.

This procedure adds an additional component to the specified layer
if it does not already possess an alpha channel. An alpha channel
makes it possible to clear and erase to transparency, instead of the
background color. This transforms layers of type RGB to RGBA, GRAY
to GRAYA, and INDEXED to INDEXEDA.</doc>
        <source-position filename="libgimp/gimplayer_pdb.h" line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer_pdb.c"
               line="238">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="228">The layer.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="add_mask" c:identifier="gimp_layer_add_mask">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer_pdb.c"
             line="599">Add a layer mask to the specified layer.

This procedure adds a layer mask to the specified layer. Layer masks
serve as an additional alpha channel for a layer. This procedure
will fail if a number of prerequisites aren't met. The layer cannot
already have a layer mask. The specified mask must exist and have
the same dimensions as the layer. The layer must have been created
for use with the specified image and the mask must have been created
with the procedure 'gimp-layer-create-mask'.</doc>
        <source-position filename="libgimp/gimplayer_pdb.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer_pdb.c"
               line="614">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="601">The layer to receive the mask.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </instance-parameter>
          <parameter name="mask" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="602">The mask to add to the layer.</doc>
            <type name="LayerMask" c:type="GimpLayerMask*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="gimp_layer_copy" version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer.c"
             line="121">Copy a layer.

This procedure copies the specified layer and returns the copy. The
newly copied layer is for use within the original layer's image. It
should not be subsequently added to any other image.</doc>
        <source-position filename="libgimp/gimplayer.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer.c"
               line="131">The newly copied layer.
         The object belongs to libgimp and you should not free it.</doc>
          <type name="Layer" c:type="GimpLayer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer.c"
                 line="123">The layer to copy.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="create_mask" c:identifier="gimp_layer_create_mask">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer_pdb.c"
             line="471">Create a layer mask for the specified layer.

This procedure creates a layer mask for the specified layer.
Layer masks serve as an additional alpha channel for a layer.
Different types of masks are allowed for initialisation:
- white mask (leaves the layer fully visible);
- black mask (gives the layer complete transparency);
- the layer's alpha channel (either a copy, or a transfer, which
leaves the layer fully visible, but which may be more useful than a
white mask);
- the current selection;
- a grayscale copy of the layer;
- or a copy of the active channel.

The layer mask still needs to be added to the layer. This can be
done with a call to gimp_layer_add_mask().

gimp_layer_create_mask() will fail if there are no active channels
on the image, when called with 'ADD-CHANNEL-MASK'. It will return a
black mask when called with 'ADD-ALPHA-MASK' or
'ADD-ALPHA-TRANSFER-MASK' on a layer with no alpha channels, or with
'ADD-SELECTION-MASK' when there is no selection on the image.</doc>
        <source-position filename="libgimp/gimplayer_pdb.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer_pdb.c"
               line="499">The newly created mask.</doc>
          <type name="LayerMask" c:type="GimpLayerMask*"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="473">The layer to which to add the mask.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </instance-parameter>
          <parameter name="mask_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="474">The type of mask.</doc>
            <type name="AddMaskType" c:type="GimpAddMaskType"/>
          </parameter>
        </parameters>
      </method>
      <method name="flatten" c:identifier="gimp_layer_flatten" version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer_pdb.c"
             line="263">Remove the alpha channel from the layer if it has one.

This procedure removes the alpha channel from a layer, blending all
(partially) transparent pixels in the layer against the background
color. This transforms layers of type RGBA to RGB, GRAYA to GRAY,
and INDEXEDA to INDEXED.</doc>
        <source-position filename="libgimp/gimplayer_pdb.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer_pdb.c"
               line="274">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="265">The layer.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_apply_mask" c:identifier="gimp_layer_get_apply_mask">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer_pdb.c"
             line="786">Get the apply mask setting of the specified layer.

This procedure returns the specified layer's apply mask setting. If
the value is TRUE, then the layer mask for this layer is currently
being composited with the layer's alpha channel.</doc>
        <source-position filename="libgimp/gimplayer_pdb.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer_pdb.c"
               line="796">The layer's apply mask setting.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="788">The layer.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_blend_space"
              c:identifier="gimp_layer_get_blend_space"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer_pdb.c"
             line="1152">Get the blend space of the specified layer.

This procedure returns the specified layer's blend space.</doc>
        <source-position filename="libgimp/gimplayer_pdb.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer_pdb.c"
               line="1160">The layer blend space.</doc>
          <type name="LayerColorSpace" c:type="GimpLayerColorSpace"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="1154">The layer.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_composite_mode"
              c:identifier="gimp_layer_get_composite_mode"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer_pdb.c"
             line="1300">Get the composite mode of the specified layer.

This procedure returns the specified layer's composite mode.</doc>
        <source-position filename="libgimp/gimplayer_pdb.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer_pdb.c"
               line="1308">The layer composite mode.</doc>
          <type name="LayerCompositeMode" c:type="GimpLayerCompositeMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="1302">The layer.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_composite_space"
              c:identifier="gimp_layer_get_composite_space"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer_pdb.c"
             line="1226">Get the composite space of the specified layer.

This procedure returns the specified layer's composite space.</doc>
        <source-position filename="libgimp/gimplayer_pdb.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer_pdb.c"
               line="1234">The layer composite space.</doc>
          <type name="LayerColorSpace" c:type="GimpLayerColorSpace"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="1228">The layer.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_edit_mask" c:identifier="gimp_layer_get_edit_mask">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer_pdb.c"
             line="937">Get the edit mask setting of the specified layer.

This procedure returns the specified layer's edit mask setting. If
the value is TRUE, then the layer mask for this layer is currently
active, and not the layer.</doc>
        <source-position filename="libgimp/gimplayer_pdb.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer_pdb.c"
               line="947">The layer's edit mask setting.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="939">The layer.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lock_alpha" c:identifier="gimp_layer_get_lock_alpha">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer_pdb.c"
             line="714">Get the lock alpha channel setting of the specified layer.

This procedure returns the specified layer's lock alpha channel
setting.</doc>
        <source-position filename="libgimp/gimplayer_pdb.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer_pdb.c"
               line="723">The layer's lock alpha channel setting.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="716">The layer.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mask" c:identifier="gimp_layer_get_mask">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer_pdb.c"
             line="527">Get the specified layer's mask if it exists.

This procedure returns the specified layer's mask, or -1 if none
exists.</doc>
        <source-position filename="libgimp/gimplayer_pdb.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer_pdb.c"
               line="536">The layer mask.</doc>
          <type name="LayerMask" c:type="GimpLayerMask*"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="529">The layer.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mode" c:identifier="gimp_layer_get_mode">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer_pdb.c"
             line="1082">Get the combination mode of the specified layer.

This procedure returns the specified layer's combination mode.</doc>
        <source-position filename="libgimp/gimplayer_pdb.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer_pdb.c"
               line="1090">The layer combination mode.</doc>
          <type name="LayerMode" c:type="GimpLayerMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="1084">The layer.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_opacity" c:identifier="gimp_layer_get_opacity">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer_pdb.c"
             line="1012">Get the opacity of the specified layer.

This procedure returns the specified layer's opacity.</doc>
        <source-position filename="libgimp/gimplayer_pdb.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer_pdb.c"
               line="1020">The layer opacity.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="1014">The layer.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_mask" c:identifier="gimp_layer_get_show_mask">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer_pdb.c"
             line="861">Get the show mask setting of the specified layer.

This procedure returns the specified layer's show mask setting. This
controls whether the layer or its mask is visible. TRUE indicates
that the mask should be visible. If the layer has no mask, then this
function returns an error.</doc>
        <source-position filename="libgimp/gimplayer_pdb.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer_pdb.c"
               line="872">The layer's show mask setting.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="863">The layer.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_floating_sel" c:identifier="gimp_layer_is_floating_sel">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer_pdb.c"
             line="678">Is the specified layer a floating selection?

This procedure returns whether the layer is a floating selection.
Floating selections are special cases of layers which are attached
to a specific drawable.</doc>
        <source-position filename="libgimp/gimplayer_pdb.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer_pdb.c"
               line="688">TRUE if the layer is a floating selection.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="680">The layer.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_mask" c:identifier="gimp_layer_remove_mask">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer_pdb.c"
             line="641">Remove the specified layer mask from the layer.

This procedure removes the specified layer mask from the layer. If
the mask doesn't exist, an error is returned.</doc>
        <source-position filename="libgimp/gimplayer_pdb.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer_pdb.c"
               line="651">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="643">The layer from which to remove mask.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="644">Removal mode.</doc>
            <type name="MaskApplyMode" c:type="GimpMaskApplyMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="resize" c:identifier="gimp_layer_resize">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer_pdb.c"
             line="348">Resize the layer to the specified extents.

This procedure resizes the layer so that its new width and height
are equal to the supplied parameters. Offsets are also provided
which describe the position of the previous layer's content. This
operation only works if the layer has been added to an image.</doc>
        <source-position filename="libgimp/gimplayer_pdb.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer_pdb.c"
               line="363">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="350">The layer.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </instance-parameter>
          <parameter name="new_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="351">New layer width.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="new_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="352">New layer height.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="offx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="353">x offset between upper left corner of old and new layers: (old - new).</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="offy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="354">y offset between upper left corner of old and new layers: (old - new).</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="resize_to_image_size"
              c:identifier="gimp_layer_resize_to_image_size">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer_pdb.c"
             line="396">Resize a layer to the image size.

This procedure resizes the layer so that it's new width and height
are equal to the width and height of its image container.</doc>
        <source-position filename="libgimp/gimplayer_pdb.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer_pdb.c"
               line="405">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="398">The layer to resize.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="scale" c:identifier="gimp_layer_scale">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer_pdb.c"
             line="301">Scale the layer using the default interpolation method.

This procedure scales the layer so that its new width and height are
equal to the supplied parameters. The 'local-origin' parameter
specifies whether to scale from the center of the layer, or from the
image origin. This operation only works if the layer has been added
to an image. The interpolation method used can be set with
gimp_context_set_interpolation().</doc>
        <source-position filename="libgimp/gimplayer_pdb.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer_pdb.c"
               line="317">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="303">The layer.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </instance-parameter>
          <parameter name="new_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="304">New layer width.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="new_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="305">New layer height.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="local_origin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="306">Use a local origin (as opposed to the image origin).</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_apply_mask" c:identifier="gimp_layer_set_apply_mask">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer_pdb.c"
             line="822">Set the apply mask setting of the specified layer.

This procedure sets the specified layer's apply mask setting. This
controls whether the layer's mask is currently affecting the alpha
channel. If there is no layer mask, this function will return an
error.</doc>
        <source-position filename="libgimp/gimplayer_pdb.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer_pdb.c"
               line="834">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="824">The layer.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </instance-parameter>
          <parameter name="apply_mask" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="825">The new layer's apply mask setting.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_blend_space"
              c:identifier="gimp_layer_set_blend_space"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer_pdb.c"
             line="1188">Set the blend space of the specified layer.

This procedure sets the specified layer's blend space.</doc>
        <source-position filename="libgimp/gimplayer_pdb.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer_pdb.c"
               line="1197">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="1190">The layer.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </instance-parameter>
          <parameter name="blend_space" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="1191">The new layer blend space.</doc>
            <type name="LayerColorSpace" c:type="GimpLayerColorSpace"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_composite_mode"
              c:identifier="gimp_layer_set_composite_mode"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer_pdb.c"
             line="1336">Set the composite mode of the specified layer.

This procedure sets the specified layer's composite mode.</doc>
        <source-position filename="libgimp/gimplayer_pdb.h" line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer_pdb.c"
               line="1345">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="1338">The layer.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </instance-parameter>
          <parameter name="composite_mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="1339">The new layer composite mode.</doc>
            <type name="LayerCompositeMode" c:type="GimpLayerCompositeMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_composite_space"
              c:identifier="gimp_layer_set_composite_space"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer_pdb.c"
             line="1262">Set the composite space of the specified layer.

This procedure sets the specified layer's composite space.</doc>
        <source-position filename="libgimp/gimplayer_pdb.h" line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer_pdb.c"
               line="1271">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="1264">The layer.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </instance-parameter>
          <parameter name="composite_space" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="1265">The new layer composite space.</doc>
            <type name="LayerColorSpace" c:type="GimpLayerColorSpace"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_edit_mask" c:identifier="gimp_layer_set_edit_mask">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer_pdb.c"
             line="973">Set the edit mask setting of the specified layer.

This procedure sets the specified layer's edit mask setting. This
controls whether the layer or it's mask is currently active for
editing. If the specified layer has no layer mask, then this
procedure will return an error.</doc>
        <source-position filename="libgimp/gimplayer_pdb.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer_pdb.c"
               line="985">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="975">The layer.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </instance-parameter>
          <parameter name="edit_mask" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="976">The new layer's edit mask setting.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_lock_alpha" c:identifier="gimp_layer_set_lock_alpha">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer_pdb.c"
             line="749">Set the lock alpha channel setting of the specified layer.

This procedure sets the specified layer's lock alpha channel
setting.</doc>
        <source-position filename="libgimp/gimplayer_pdb.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer_pdb.c"
               line="759">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="751">The layer.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </instance-parameter>
          <parameter name="lock_alpha" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="752">The new layer's lock alpha channel setting.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mode" c:identifier="gimp_layer_set_mode">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer_pdb.c"
             line="1116">Set the combination mode of the specified layer.

This procedure sets the specified layer's combination mode.</doc>
        <source-position filename="libgimp/gimplayer_pdb.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer_pdb.c"
               line="1125">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="1118">The layer.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="1119">The new layer combination mode.</doc>
            <type name="LayerMode" c:type="GimpLayerMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_offsets" c:identifier="gimp_layer_set_offsets">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer_pdb.c"
             line="430">Set the layer offsets.

This procedure sets the offsets for the specified layer. The offsets
are relative to the image origin and can be any values. This
operation is valid only on layers which have been added to an image.</doc>
        <source-position filename="libgimp/gimplayer_pdb.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer_pdb.c"
               line="442">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="432">The layer.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </instance-parameter>
          <parameter name="offx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="433">Offset in x direction.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="offy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="434">Offset in y direction.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_opacity" c:identifier="gimp_layer_set_opacity">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer_pdb.c"
             line="1046">Set the opacity of the specified layer.

This procedure sets the specified layer's opacity.</doc>
        <source-position filename="libgimp/gimplayer_pdb.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer_pdb.c"
               line="1055">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="1048">The layer.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </instance-parameter>
          <parameter name="opacity" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="1049">The new layer opacity.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_mask" c:identifier="gimp_layer_set_show_mask">
        <doc xml:space="preserve"
             filename="libgimp/gimplayer_pdb.c"
             line="898">Set the show mask setting of the specified layer.

This procedure sets the specified layer's show mask setting. This
controls whether the layer or its mask is visible. TRUE indicates
that the mask should be visible. If there is no layer mask, this
function will return an error.</doc>
        <source-position filename="libgimp/gimplayer_pdb.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimplayer_pdb.c"
               line="910">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="900">The layer.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </instance-parameter>
          <parameter name="show_mask" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer_pdb.c"
                 line="901">The new layer's show mask setting.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Drawable" c:type="GimpDrawable"/>
      </field>
    </class>
    <record name="LayerClass"
            c:type="GimpLayerClass"
            glib:is-gtype-struct-for="Layer">
      <source-position filename="libgimp/gimplayer.h" line="56"/>
      <field name="parent_class">
        <type name="DrawableClass" c:type="GimpDrawableClass"/>
      </field>
      <field name="copy">
        <callback name="copy">
          <source-position filename="libgimp/gimplayer.h" line="44"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayer.c"
                 line="131">The newly copied layer.
         The object belongs to libgimp and you should not free it.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </return-value>
          <parameters>
            <parameter name="layer" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libgimp/gimplayer.c"
                   line="123">The layer to copy.</doc>
              <type name="Layer" c:type="GimpLayer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gimp_reserved1" introspectable="0">
        <callback name="_gimp_reserved1">
          <source-position filename="libgimp/gimplayer.h" line="47"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved2" introspectable="0">
        <callback name="_gimp_reserved2">
          <source-position filename="libgimp/gimplayer.h" line="48"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved3" introspectable="0">
        <callback name="_gimp_reserved3">
          <source-position filename="libgimp/gimplayer.h" line="49"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved4" introspectable="0">
        <callback name="_gimp_reserved4">
          <source-position filename="libgimp/gimplayer.h" line="50"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved5" introspectable="0">
        <callback name="_gimp_reserved5">
          <source-position filename="libgimp/gimplayer.h" line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved6" introspectable="0">
        <callback name="_gimp_reserved6">
          <source-position filename="libgimp/gimplayer.h" line="52"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved7" introspectable="0">
        <callback name="_gimp_reserved7">
          <source-position filename="libgimp/gimplayer.h" line="53"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved8" introspectable="0">
        <callback name="_gimp_reserved8">
          <source-position filename="libgimp/gimplayer.h" line="54"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved9" introspectable="0">
        <callback name="_gimp_reserved9">
          <source-position filename="libgimp/gimplayer.h" line="55"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="LayerColorSpace"
                 glib:type-name="GimpLayerColorSpace"
                 glib:get-type="gimp_layer_color_space_get_type"
                 c:type="GimpLayerColorSpace">
      <doc xml:space="preserve"
           filename="libgimp/gimpenums.h"
           line="97">Extracted from app/operations/operations-enums.h</doc>
      <member name="auto"
              value="0"
              c:identifier="GIMP_LAYER_COLOR_SPACE_AUTO"
              glib:nick="auto"
              glib:name="GIMP_LAYER_COLOR_SPACE_AUTO">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="99">GIMP_LAYER_COLOR_SPACE_AUTO</doc>
      </member>
      <member name="rgb_linear"
              value="1"
              c:identifier="GIMP_LAYER_COLOR_SPACE_RGB_LINEAR"
              glib:nick="rgb-linear"
              glib:name="GIMP_LAYER_COLOR_SPACE_RGB_LINEAR">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="100">GIMP_LAYER_COLOR_SPACE_RGB_LINEAR</doc>
      </member>
      <member name="rgb_perceptual"
              value="2"
              c:identifier="GIMP_LAYER_COLOR_SPACE_RGB_PERCEPTUAL"
              glib:nick="rgb-perceptual"
              glib:name="GIMP_LAYER_COLOR_SPACE_RGB_PERCEPTUAL">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="101">GIMP_LAYER_COLOR_SPACE_RGB_PERCEPTUAL</doc>
      </member>
    </enumeration>
    <enumeration name="LayerCompositeMode"
                 glib:type-name="GimpLayerCompositeMode"
                 glib:get-type="gimp_layer_composite_mode_get_type"
                 c:type="GimpLayerCompositeMode">
      <doc xml:space="preserve"
           filename="libgimp/gimpenums.h"
           line="117">Extracted from app/operations/operations-enums.h</doc>
      <member name="auto"
              value="0"
              c:identifier="GIMP_LAYER_COMPOSITE_AUTO"
              glib:nick="auto"
              glib:name="GIMP_LAYER_COMPOSITE_AUTO">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="119">GIMP_LAYER_COMPOSITE_AUTO</doc>
      </member>
      <member name="union"
              value="1"
              c:identifier="GIMP_LAYER_COMPOSITE_UNION"
              glib:nick="union"
              glib:name="GIMP_LAYER_COMPOSITE_UNION">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="120">GIMP_LAYER_COMPOSITE_UNION</doc>
      </member>
      <member name="clip_to_backdrop"
              value="2"
              c:identifier="GIMP_LAYER_COMPOSITE_CLIP_TO_BACKDROP"
              glib:nick="clip-to-backdrop"
              glib:name="GIMP_LAYER_COMPOSITE_CLIP_TO_BACKDROP">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="121">GIMP_LAYER_COMPOSITE_CLIP_TO_BACKDROP</doc>
      </member>
      <member name="clip_to_layer"
              value="3"
              c:identifier="GIMP_LAYER_COMPOSITE_CLIP_TO_LAYER"
              glib:nick="clip-to-layer"
              glib:name="GIMP_LAYER_COMPOSITE_CLIP_TO_LAYER">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="122">GIMP_LAYER_COMPOSITE_CLIP_TO_LAYER</doc>
      </member>
      <member name="intersection"
              value="4"
              c:identifier="GIMP_LAYER_COMPOSITE_INTERSECTION"
              glib:nick="intersection"
              glib:name="GIMP_LAYER_COMPOSITE_INTERSECTION">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="123">GIMP_LAYER_COMPOSITE_INTERSECTION</doc>
      </member>
    </enumeration>
    <class name="LayerMask"
           c:symbol-prefix="layer_mask"
           c:type="GimpLayerMask"
           parent="Channel"
           glib:type-name="GimpLayerMask"
           glib:get-type="gimp_layer_mask_get_type"
           glib:type-struct="LayerMaskClass">
      <source-position filename="libgimp/gimplayermask.h" line="38"/>
      <function name="get_by_id"
                c:identifier="gimp_layer_mask_get_by_id"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimplayermask.c"
             line="48">Returns a #GimpLayerMask representing @layer_mask_id. This function
calls gimp_item_get_by_id() and returns the item if it is
layer_mask or %NULL otherwise.</doc>
        <source-position filename="libgimp/gimplayermask.h" line="41"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgimp/gimplayermask.c"
               line="56">a #GimpLayerMask for
         @layer_mask_id or %NULL if @layer_mask_id does not
         represent a valid layer_mask. The object belongs to
         libgimp and you must not modify or unref it.</doc>
          <type name="LayerMask" c:type="GimpLayerMask*"/>
        </return-value>
        <parameters>
          <parameter name="layer_mask_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimplayermask.c"
                 line="50">The layer_mask id.</doc>
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </function>
    </class>
    <record name="LayerMaskClass"
            c:type="GimpLayerMaskClass"
            glib:is-gtype-struct-for="LayerMask">
      <source-position filename="libgimp/gimplayermask.h" line="38"/>
      <field name="parent_class">
        <type name="ChannelClass" c:type="GimpChannelClass"/>
      </field>
    </record>
    <enumeration name="LayerMode"
                 glib:type-name="GimpLayerMode"
                 glib:get-type="gimp_layer_mode_get_type"
                 c:type="GimpLayerMode">
      <doc xml:space="preserve"
           filename="libgimp/gimpenums.h"
           line="141">Extracted from app/operations/operations-enums.h</doc>
      <member name="normal_legacy"
              value="0"
              c:identifier="GIMP_LAYER_MODE_NORMAL_LEGACY"
              glib:nick="normal-legacy"
              glib:name="GIMP_LAYER_MODE_NORMAL_LEGACY">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="143">GIMP_LAYER_MODE_NORMAL_LEGACY</doc>
      </member>
      <member name="dissolve"
              value="1"
              c:identifier="GIMP_LAYER_MODE_DISSOLVE"
              glib:nick="dissolve"
              glib:name="GIMP_LAYER_MODE_DISSOLVE">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="144">GIMP_LAYER_MODE_DISSOLVE</doc>
      </member>
      <member name="behind_legacy"
              value="2"
              c:identifier="GIMP_LAYER_MODE_BEHIND_LEGACY"
              glib:nick="behind-legacy"
              glib:name="GIMP_LAYER_MODE_BEHIND_LEGACY">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="145">GIMP_LAYER_MODE_BEHIND_LEGACY</doc>
      </member>
      <member name="multiply_legacy"
              value="3"
              c:identifier="GIMP_LAYER_MODE_MULTIPLY_LEGACY"
              glib:nick="multiply-legacy"
              glib:name="GIMP_LAYER_MODE_MULTIPLY_LEGACY">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="146">GIMP_LAYER_MODE_MULTIPLY_LEGACY</doc>
      </member>
      <member name="screen_legacy"
              value="4"
              c:identifier="GIMP_LAYER_MODE_SCREEN_LEGACY"
              glib:nick="screen-legacy"
              glib:name="GIMP_LAYER_MODE_SCREEN_LEGACY">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="147">GIMP_LAYER_MODE_SCREEN_LEGACY</doc>
      </member>
      <member name="overlay_legacy"
              value="5"
              c:identifier="GIMP_LAYER_MODE_OVERLAY_LEGACY"
              glib:nick="overlay-legacy"
              glib:name="GIMP_LAYER_MODE_OVERLAY_LEGACY">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="148">GIMP_LAYER_MODE_OVERLAY_LEGACY</doc>
      </member>
      <member name="difference_legacy"
              value="6"
              c:identifier="GIMP_LAYER_MODE_DIFFERENCE_LEGACY"
              glib:nick="difference-legacy"
              glib:name="GIMP_LAYER_MODE_DIFFERENCE_LEGACY">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="149">GIMP_LAYER_MODE_DIFFERENCE_LEGACY</doc>
      </member>
      <member name="addition_legacy"
              value="7"
              c:identifier="GIMP_LAYER_MODE_ADDITION_LEGACY"
              glib:nick="addition-legacy"
              glib:name="GIMP_LAYER_MODE_ADDITION_LEGACY">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="150">GIMP_LAYER_MODE_ADDITION_LEGACY</doc>
      </member>
      <member name="subtract_legacy"
              value="8"
              c:identifier="GIMP_LAYER_MODE_SUBTRACT_LEGACY"
              glib:nick="subtract-legacy"
              glib:name="GIMP_LAYER_MODE_SUBTRACT_LEGACY">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="151">GIMP_LAYER_MODE_SUBTRACT_LEGACY</doc>
      </member>
      <member name="darken_only_legacy"
              value="9"
              c:identifier="GIMP_LAYER_MODE_DARKEN_ONLY_LEGACY"
              glib:nick="darken-only-legacy"
              glib:name="GIMP_LAYER_MODE_DARKEN_ONLY_LEGACY">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="152">GIMP_LAYER_MODE_DARKEN_ONLY_LEGACY</doc>
      </member>
      <member name="lighten_only_legacy"
              value="10"
              c:identifier="GIMP_LAYER_MODE_LIGHTEN_ONLY_LEGACY"
              glib:nick="lighten-only-legacy"
              glib:name="GIMP_LAYER_MODE_LIGHTEN_ONLY_LEGACY">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="153">GIMP_LAYER_MODE_LIGHTEN_ONLY_LEGACY</doc>
      </member>
      <member name="hsv_hue_legacy"
              value="11"
              c:identifier="GIMP_LAYER_MODE_HSV_HUE_LEGACY"
              glib:nick="hsv-hue-legacy"
              glib:name="GIMP_LAYER_MODE_HSV_HUE_LEGACY">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="154">GIMP_LAYER_MODE_HSV_HUE_LEGACY</doc>
      </member>
      <member name="hsv_saturation_legacy"
              value="12"
              c:identifier="GIMP_LAYER_MODE_HSV_SATURATION_LEGACY"
              glib:nick="hsv-saturation-legacy"
              glib:name="GIMP_LAYER_MODE_HSV_SATURATION_LEGACY">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="155">GIMP_LAYER_MODE_HSV_SATURATION_LEGACY</doc>
      </member>
      <member name="hsl_color_legacy"
              value="13"
              c:identifier="GIMP_LAYER_MODE_HSL_COLOR_LEGACY"
              glib:nick="hsl-color-legacy"
              glib:name="GIMP_LAYER_MODE_HSL_COLOR_LEGACY">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="156">GIMP_LAYER_MODE_HSL_COLOR_LEGACY</doc>
      </member>
      <member name="hsv_value_legacy"
              value="14"
              c:identifier="GIMP_LAYER_MODE_HSV_VALUE_LEGACY"
              glib:nick="hsv-value-legacy"
              glib:name="GIMP_LAYER_MODE_HSV_VALUE_LEGACY">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="157">GIMP_LAYER_MODE_HSV_VALUE_LEGACY</doc>
      </member>
      <member name="divide_legacy"
              value="15"
              c:identifier="GIMP_LAYER_MODE_DIVIDE_LEGACY"
              glib:nick="divide-legacy"
              glib:name="GIMP_LAYER_MODE_DIVIDE_LEGACY">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="158">GIMP_LAYER_MODE_DIVIDE_LEGACY</doc>
      </member>
      <member name="dodge_legacy"
              value="16"
              c:identifier="GIMP_LAYER_MODE_DODGE_LEGACY"
              glib:nick="dodge-legacy"
              glib:name="GIMP_LAYER_MODE_DODGE_LEGACY">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="159">GIMP_LAYER_MODE_DODGE_LEGACY</doc>
      </member>
      <member name="burn_legacy"
              value="17"
              c:identifier="GIMP_LAYER_MODE_BURN_LEGACY"
              glib:nick="burn-legacy"
              glib:name="GIMP_LAYER_MODE_BURN_LEGACY">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="160">GIMP_LAYER_MODE_BURN_LEGACY</doc>
      </member>
      <member name="hardlight_legacy"
              value="18"
              c:identifier="GIMP_LAYER_MODE_HARDLIGHT_LEGACY"
              glib:nick="hardlight-legacy"
              glib:name="GIMP_LAYER_MODE_HARDLIGHT_LEGACY">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="161">GIMP_LAYER_MODE_HARDLIGHT_LEGACY</doc>
      </member>
      <member name="softlight_legacy"
              value="19"
              c:identifier="GIMP_LAYER_MODE_SOFTLIGHT_LEGACY"
              glib:nick="softlight-legacy"
              glib:name="GIMP_LAYER_MODE_SOFTLIGHT_LEGACY">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="162">GIMP_LAYER_MODE_SOFTLIGHT_LEGACY</doc>
      </member>
      <member name="grain_extract_legacy"
              value="20"
              c:identifier="GIMP_LAYER_MODE_GRAIN_EXTRACT_LEGACY"
              glib:nick="grain-extract-legacy"
              glib:name="GIMP_LAYER_MODE_GRAIN_EXTRACT_LEGACY">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="163">GIMP_LAYER_MODE_GRAIN_EXTRACT_LEGACY</doc>
      </member>
      <member name="grain_merge_legacy"
              value="21"
              c:identifier="GIMP_LAYER_MODE_GRAIN_MERGE_LEGACY"
              glib:nick="grain-merge-legacy"
              glib:name="GIMP_LAYER_MODE_GRAIN_MERGE_LEGACY">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="164">GIMP_LAYER_MODE_GRAIN_MERGE_LEGACY</doc>
      </member>
      <member name="color_erase_legacy"
              value="22"
              c:identifier="GIMP_LAYER_MODE_COLOR_ERASE_LEGACY"
              glib:nick="color-erase-legacy"
              glib:name="GIMP_LAYER_MODE_COLOR_ERASE_LEGACY">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="165">GIMP_LAYER_MODE_COLOR_ERASE_LEGACY</doc>
      </member>
      <member name="overlay"
              value="23"
              c:identifier="GIMP_LAYER_MODE_OVERLAY"
              glib:nick="overlay"
              glib:name="GIMP_LAYER_MODE_OVERLAY">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="166">GIMP_LAYER_MODE_OVERLAY</doc>
      </member>
      <member name="lch_hue"
              value="24"
              c:identifier="GIMP_LAYER_MODE_LCH_HUE"
              glib:nick="lch-hue"
              glib:name="GIMP_LAYER_MODE_LCH_HUE">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="167">GIMP_LAYER_MODE_LCH_HUE</doc>
      </member>
      <member name="lch_chroma"
              value="25"
              c:identifier="GIMP_LAYER_MODE_LCH_CHROMA"
              glib:nick="lch-chroma"
              glib:name="GIMP_LAYER_MODE_LCH_CHROMA">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="168">GIMP_LAYER_MODE_LCH_CHROMA</doc>
      </member>
      <member name="lch_color"
              value="26"
              c:identifier="GIMP_LAYER_MODE_LCH_COLOR"
              glib:nick="lch-color"
              glib:name="GIMP_LAYER_MODE_LCH_COLOR">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="169">GIMP_LAYER_MODE_LCH_COLOR</doc>
      </member>
      <member name="lch_lightness"
              value="27"
              c:identifier="GIMP_LAYER_MODE_LCH_LIGHTNESS"
              glib:nick="lch-lightness"
              glib:name="GIMP_LAYER_MODE_LCH_LIGHTNESS">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="170">GIMP_LAYER_MODE_LCH_LIGHTNESS</doc>
      </member>
      <member name="normal"
              value="28"
              c:identifier="GIMP_LAYER_MODE_NORMAL"
              glib:nick="normal"
              glib:name="GIMP_LAYER_MODE_NORMAL">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="171">GIMP_LAYER_MODE_NORMAL</doc>
      </member>
      <member name="behind"
              value="29"
              c:identifier="GIMP_LAYER_MODE_BEHIND"
              glib:nick="behind"
              glib:name="GIMP_LAYER_MODE_BEHIND">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="172">GIMP_LAYER_MODE_BEHIND</doc>
      </member>
      <member name="multiply"
              value="30"
              c:identifier="GIMP_LAYER_MODE_MULTIPLY"
              glib:nick="multiply"
              glib:name="GIMP_LAYER_MODE_MULTIPLY">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="173">GIMP_LAYER_MODE_MULTIPLY</doc>
      </member>
      <member name="screen"
              value="31"
              c:identifier="GIMP_LAYER_MODE_SCREEN"
              glib:nick="screen"
              glib:name="GIMP_LAYER_MODE_SCREEN">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="174">GIMP_LAYER_MODE_SCREEN</doc>
      </member>
      <member name="difference"
              value="32"
              c:identifier="GIMP_LAYER_MODE_DIFFERENCE"
              glib:nick="difference"
              glib:name="GIMP_LAYER_MODE_DIFFERENCE">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="175">GIMP_LAYER_MODE_DIFFERENCE</doc>
      </member>
      <member name="addition"
              value="33"
              c:identifier="GIMP_LAYER_MODE_ADDITION"
              glib:nick="addition"
              glib:name="GIMP_LAYER_MODE_ADDITION">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="176">GIMP_LAYER_MODE_ADDITION</doc>
      </member>
      <member name="subtract"
              value="34"
              c:identifier="GIMP_LAYER_MODE_SUBTRACT"
              glib:nick="subtract"
              glib:name="GIMP_LAYER_MODE_SUBTRACT">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="177">GIMP_LAYER_MODE_SUBTRACT</doc>
      </member>
      <member name="darken_only"
              value="35"
              c:identifier="GIMP_LAYER_MODE_DARKEN_ONLY"
              glib:nick="darken-only"
              glib:name="GIMP_LAYER_MODE_DARKEN_ONLY">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="178">GIMP_LAYER_MODE_DARKEN_ONLY</doc>
      </member>
      <member name="lighten_only"
              value="36"
              c:identifier="GIMP_LAYER_MODE_LIGHTEN_ONLY"
              glib:nick="lighten-only"
              glib:name="GIMP_LAYER_MODE_LIGHTEN_ONLY">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="179">GIMP_LAYER_MODE_LIGHTEN_ONLY</doc>
      </member>
      <member name="hsv_hue"
              value="37"
              c:identifier="GIMP_LAYER_MODE_HSV_HUE"
              glib:nick="hsv-hue"
              glib:name="GIMP_LAYER_MODE_HSV_HUE">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="180">GIMP_LAYER_MODE_HSV_HUE</doc>
      </member>
      <member name="hsv_saturation"
              value="38"
              c:identifier="GIMP_LAYER_MODE_HSV_SATURATION"
              glib:nick="hsv-saturation"
              glib:name="GIMP_LAYER_MODE_HSV_SATURATION">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="181">GIMP_LAYER_MODE_HSV_SATURATION</doc>
      </member>
      <member name="hsl_color"
              value="39"
              c:identifier="GIMP_LAYER_MODE_HSL_COLOR"
              glib:nick="hsl-color"
              glib:name="GIMP_LAYER_MODE_HSL_COLOR">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="182">GIMP_LAYER_MODE_HSL_COLOR</doc>
      </member>
      <member name="hsv_value"
              value="40"
              c:identifier="GIMP_LAYER_MODE_HSV_VALUE"
              glib:nick="hsv-value"
              glib:name="GIMP_LAYER_MODE_HSV_VALUE">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="183">GIMP_LAYER_MODE_HSV_VALUE</doc>
      </member>
      <member name="divide"
              value="41"
              c:identifier="GIMP_LAYER_MODE_DIVIDE"
              glib:nick="divide"
              glib:name="GIMP_LAYER_MODE_DIVIDE">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="184">GIMP_LAYER_MODE_DIVIDE</doc>
      </member>
      <member name="dodge"
              value="42"
              c:identifier="GIMP_LAYER_MODE_DODGE"
              glib:nick="dodge"
              glib:name="GIMP_LAYER_MODE_DODGE">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="185">GIMP_LAYER_MODE_DODGE</doc>
      </member>
      <member name="burn"
              value="43"
              c:identifier="GIMP_LAYER_MODE_BURN"
              glib:nick="burn"
              glib:name="GIMP_LAYER_MODE_BURN">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="186">GIMP_LAYER_MODE_BURN</doc>
      </member>
      <member name="hardlight"
              value="44"
              c:identifier="GIMP_LAYER_MODE_HARDLIGHT"
              glib:nick="hardlight"
              glib:name="GIMP_LAYER_MODE_HARDLIGHT">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="187">GIMP_LAYER_MODE_HARDLIGHT</doc>
      </member>
      <member name="softlight"
              value="45"
              c:identifier="GIMP_LAYER_MODE_SOFTLIGHT"
              glib:nick="softlight"
              glib:name="GIMP_LAYER_MODE_SOFTLIGHT">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="188">GIMP_LAYER_MODE_SOFTLIGHT</doc>
      </member>
      <member name="grain_extract"
              value="46"
              c:identifier="GIMP_LAYER_MODE_GRAIN_EXTRACT"
              glib:nick="grain-extract"
              glib:name="GIMP_LAYER_MODE_GRAIN_EXTRACT">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="189">GIMP_LAYER_MODE_GRAIN_EXTRACT</doc>
      </member>
      <member name="grain_merge"
              value="47"
              c:identifier="GIMP_LAYER_MODE_GRAIN_MERGE"
              glib:nick="grain-merge"
              glib:name="GIMP_LAYER_MODE_GRAIN_MERGE">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="190">GIMP_LAYER_MODE_GRAIN_MERGE</doc>
      </member>
      <member name="vivid_light"
              value="48"
              c:identifier="GIMP_LAYER_MODE_VIVID_LIGHT"
              glib:nick="vivid-light"
              glib:name="GIMP_LAYER_MODE_VIVID_LIGHT">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="191">GIMP_LAYER_MODE_VIVID_LIGHT</doc>
      </member>
      <member name="pin_light"
              value="49"
              c:identifier="GIMP_LAYER_MODE_PIN_LIGHT"
              glib:nick="pin-light"
              glib:name="GIMP_LAYER_MODE_PIN_LIGHT">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="192">GIMP_LAYER_MODE_PIN_LIGHT</doc>
      </member>
      <member name="linear_light"
              value="50"
              c:identifier="GIMP_LAYER_MODE_LINEAR_LIGHT"
              glib:nick="linear-light"
              glib:name="GIMP_LAYER_MODE_LINEAR_LIGHT">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="193">GIMP_LAYER_MODE_LINEAR_LIGHT</doc>
      </member>
      <member name="hard_mix"
              value="51"
              c:identifier="GIMP_LAYER_MODE_HARD_MIX"
              glib:nick="hard-mix"
              glib:name="GIMP_LAYER_MODE_HARD_MIX">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="194">GIMP_LAYER_MODE_HARD_MIX</doc>
      </member>
      <member name="exclusion"
              value="52"
              c:identifier="GIMP_LAYER_MODE_EXCLUSION"
              glib:nick="exclusion"
              glib:name="GIMP_LAYER_MODE_EXCLUSION">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="195">GIMP_LAYER_MODE_EXCLUSION</doc>
      </member>
      <member name="linear_burn"
              value="53"
              c:identifier="GIMP_LAYER_MODE_LINEAR_BURN"
              glib:nick="linear-burn"
              glib:name="GIMP_LAYER_MODE_LINEAR_BURN">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="196">GIMP_LAYER_MODE_LINEAR_BURN</doc>
      </member>
      <member name="luma_darken_only"
              value="54"
              c:identifier="GIMP_LAYER_MODE_LUMA_DARKEN_ONLY"
              glib:nick="luma-darken-only"
              glib:name="GIMP_LAYER_MODE_LUMA_DARKEN_ONLY">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="197">GIMP_LAYER_MODE_LUMA_DARKEN_ONLY</doc>
      </member>
      <member name="luma_lighten_only"
              value="55"
              c:identifier="GIMP_LAYER_MODE_LUMA_LIGHTEN_ONLY"
              glib:nick="luma-lighten-only"
              glib:name="GIMP_LAYER_MODE_LUMA_LIGHTEN_ONLY">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="198">GIMP_LAYER_MODE_LUMA_LIGHTEN_ONLY</doc>
      </member>
      <member name="luminance"
              value="56"
              c:identifier="GIMP_LAYER_MODE_LUMINANCE"
              glib:nick="luminance"
              glib:name="GIMP_LAYER_MODE_LUMINANCE">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="199">GIMP_LAYER_MODE_LUMINANCE</doc>
      </member>
      <member name="color_erase"
              value="57"
              c:identifier="GIMP_LAYER_MODE_COLOR_ERASE"
              glib:nick="color-erase"
              glib:name="GIMP_LAYER_MODE_COLOR_ERASE">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="200">GIMP_LAYER_MODE_COLOR_ERASE</doc>
      </member>
      <member name="erase"
              value="58"
              c:identifier="GIMP_LAYER_MODE_ERASE"
              glib:nick="erase"
              glib:name="GIMP_LAYER_MODE_ERASE">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="201">GIMP_LAYER_MODE_ERASE</doc>
      </member>
      <member name="merge"
              value="59"
              c:identifier="GIMP_LAYER_MODE_MERGE"
              glib:nick="merge"
              glib:name="GIMP_LAYER_MODE_MERGE">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="202">GIMP_LAYER_MODE_MERGE</doc>
      </member>
      <member name="split"
              value="60"
              c:identifier="GIMP_LAYER_MODE_SPLIT"
              glib:nick="split"
              glib:name="GIMP_LAYER_MODE_SPLIT">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="203">GIMP_LAYER_MODE_SPLIT</doc>
      </member>
      <member name="pass_through"
              value="61"
              c:identifier="GIMP_LAYER_MODE_PASS_THROUGH"
              glib:nick="pass-through"
              glib:name="GIMP_LAYER_MODE_PASS_THROUGH">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.h"
             line="204">GIMP_LAYER_MODE_PASS_THROUGH</doc>
      </member>
    </enumeration>
    <class name="LoadProcedure"
           c:symbol-prefix="load_procedure"
           c:type="GimpLoadProcedure"
           parent="FileProcedure"
           glib:type-name="GimpLoadProcedure"
           glib:get-type="gimp_load_procedure_get_type"
           glib:type-struct="LoadProcedureClass">
      <doc xml:space="preserve"
           filename="libgimp/gimploadprocedure.c"
           line="35">A [class@Procedure] subclass that makes it easier to write file load
procedures.

It automatically adds the standard

( [enum@RunMode], [iface@Gio.File] )

arguments and the standard

( [class@Image] )

return value of a load procedure. It is possible to add additional
arguments.

When invoked via [method@Procedure.run], it unpacks these standard
arguments and calls @run_func which is a [callback@RunImageFunc]. The
"args" [struct@ValueArray] of [callback@RunImageFunc] only contains
additionally added arguments.</doc>
      <source-position filename="libgimp/gimploadprocedure.h" line="84"/>
      <constructor name="new"
                   c:identifier="gimp_load_procedure_new"
                   version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimploadprocedure.c"
             line="325">Creates a new load procedure named @name which will call @run_func
when invoked.

See gimp_procedure_new() for information about @proc_type.</doc>
        <source-position filename="libgimp/gimploadprocedure.h" line="87"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimploadprocedure.c"
               line="339">a new #GimpProcedure.</doc>
          <type name="Procedure" c:type="GimpProcedure*"/>
        </return-value>
        <parameters>
          <parameter name="plug_in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimploadprocedure.c"
                 line="327">a #GimpPlugIn.</doc>
            <type name="PlugIn" c:type="GimpPlugIn*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimploadprocedure.c"
                 line="328">the new procedure's name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="proc_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimploadprocedure.c"
                 line="329">the new procedure's #GimpPDBProcType.</doc>
            <type name="PDBProcType" c:type="GimpPDBProcType"/>
          </parameter>
          <parameter name="run_func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4"
                     destroy="5">
            <doc xml:space="preserve"
                 filename="libgimp/gimploadprocedure.c"
                 line="330">the run function for the new procedure.</doc>
            <type name="RunLoadFunc" c:type="GimpRunLoadFunc"/>
          </parameter>
          <parameter name="run_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimploadprocedure.c"
                 line="331">user data passed to @run_func.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="run_data_destroy"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="libgimp/gimploadprocedure.c"
                 line="332">free function for @run_data, or %NULL.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_handles_raw"
              c:identifier="gimp_load_procedure_get_handles_raw"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimploadprocedure.c"
             line="400">Returns the procedure's 'handles raw' flag as set with
[method@GimpLoadProcedure.set_handles_raw].</doc>
        <source-position filename="libgimp/gimploadprocedure.h" line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimploadprocedure.c"
               line="407">The procedure's 'handles raw' flag.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimploadprocedure.c"
                 line="402">A load procedure object.</doc>
            <type name="LoadProcedure" c:type="GimpLoadProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_thumbnail_loader"
              c:identifier="gimp_load_procedure_get_thumbnail_loader"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimploadprocedure.c"
             line="452">Returns the procedure's thumbnail loader procedure as set with
[method@GimpLoadProcedure.set_thumbnail_loader].</doc>
        <source-position filename="libgimp/gimploadprocedure.h" line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimploadprocedure.c"
               line="459">The procedure's thumbnail loader procedure</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimploadprocedure.c"
                 line="454">A load procedure object.</doc>
            <type name="LoadProcedure" c:type="GimpLoadProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_handles_raw"
              c:identifier="gimp_load_procedure_set_handles_raw"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimploadprocedure.c"
             line="375">Registers a load procedure as capable of handling raw digital camera loads.

Note that you cannot call this function on [class@VectorLoadProcedure]
subclass objects.</doc>
        <source-position filename="libgimp/gimploadprocedure.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimploadprocedure.c"
                 line="377">A load procedure object.</doc>
            <type name="LoadProcedure" c:type="GimpLoadProcedure*"/>
          </instance-parameter>
          <parameter name="handles_raw" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimploadprocedure.c"
                 line="378">The procedure's handles raw flag.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_thumbnail_loader"
              c:identifier="gimp_load_procedure_set_thumbnail_loader"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimploadprocedure.c"
             line="423">Associates a thumbnail loader with a file load procedure.

Some file formats allow for embedded thumbnails, other file formats
contain a scalable image or provide the image data in different
resolutions. A file plug-in for such a format may register a
special procedure that allows GIMP to load a thumbnail preview of
the image. This procedure is then associated with the standard
load procedure using this function.</doc>
        <source-position filename="libgimp/gimploadprocedure.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimploadprocedure.c"
                 line="425">A load procedure object.</doc>
            <type name="LoadProcedure" c:type="GimpLoadProcedure*"/>
          </instance-parameter>
          <parameter name="thumbnail_proc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimploadprocedure.c"
                 line="426">The name of the thumbnail load procedure.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="FileProcedure" c:type="GimpFileProcedure"/>
      </field>
    </class>
    <record name="LoadProcedureClass"
            c:type="GimpLoadProcedureClass"
            glib:is-gtype-struct-for="LoadProcedure">
      <source-position filename="libgimp/gimploadprocedure.h" line="84"/>
      <field name="parent_class">
        <type name="FileProcedureClass" c:type="GimpFileProcedureClass"/>
      </field>
      <field name="_gimp_reserved1" introspectable="0">
        <callback name="_gimp_reserved1">
          <source-position filename="libgimp/gimploadprocedure.h" line="75"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved2" introspectable="0">
        <callback name="_gimp_reserved2">
          <source-position filename="libgimp/gimploadprocedure.h" line="76"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved3" introspectable="0">
        <callback name="_gimp_reserved3">
          <source-position filename="libgimp/gimploadprocedure.h" line="77"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved4" introspectable="0">
        <callback name="_gimp_reserved4">
          <source-position filename="libgimp/gimploadprocedure.h" line="78"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved5" introspectable="0">
        <callback name="_gimp_reserved5">
          <source-position filename="libgimp/gimploadprocedure.h" line="79"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved6" introspectable="0">
        <callback name="_gimp_reserved6">
          <source-position filename="libgimp/gimploadprocedure.h" line="80"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved7" introspectable="0">
        <callback name="_gimp_reserved7">
          <source-position filename="libgimp/gimploadprocedure.h" line="81"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved8" introspectable="0">
        <callback name="_gimp_reserved8">
          <source-position filename="libgimp/gimploadprocedure.h" line="82"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved9" introspectable="0">
        <callback name="_gimp_reserved9">
          <source-position filename="libgimp/gimploadprocedure.h" line="83"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <function-macro name="MAIN"
                    c:identifier="GIMP_MAIN"
                    version="3.0"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="libgimp/gimp.h"
           line="88">A macro that expands to the appropriate main() function for the
platform being compiled for.

To use this macro, simply place a line that contains just the code

GIMP_MAIN (MY_TYPE_PLUG_IN)

at the toplevel of your file. No semicolon should be used.</doc>
      <source-position filename="libgimp/gimp.h" line="116"/>
      <parameters>
        <parameter name="plug_in_type">
          <doc xml:space="preserve"
               filename="libgimp/gimp.h"
               line="90">The #GType of the plug-in's #GimpPlugIn subclass</doc>
        </parameter>
      </parameters>
    </function-macro>
    <constant name="MAJOR_VERSION" value="2" c:type="GIMP_MAJOR_VERSION">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpversion.h"
           line="24">The major GIMP version number.</doc>
      <source-position filename="libgimpbase/gimpversion.h" line="29"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MAX_IMAGE_SIZE"
              value="524288"
              c:type="GIMP_MAX_IMAGE_SIZE">
      <doc xml:space="preserve"
           filename="libgimpbase/gimplimits.h"
           line="49">The maximum width and height of a GIMP image in pixels. This is a
somewhat arbitrary value that can be used when an upper value for
pixel sizes is needed; for example to give a spin button an upper
limit.</doc>
      <source-position filename="libgimpbase/gimplimits.h" line="57"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MAX_MEMSIZE"
              value="4398046511104"
              c:type="GIMP_MAX_MEMSIZE">
      <doc xml:space="preserve"
           filename="libgimpbase/gimplimits.h"
           line="81">A large but arbitrary value that can be used when an upper limit
for a memory size (in bytes) is needed. It is smaller than
%G_MAXDOUBLE since the #GimpMemsizeEntry doesn't handle larger
values.</doc>
      <source-position filename="libgimpbase/gimplimits.h" line="89"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MAX_RESOLUTION"
              value="1048576.000000"
              c:type="GIMP_MAX_RESOLUTION">
      <doc xml:space="preserve"
           filename="libgimpbase/gimplimits.h"
           line="70">The maximum resolution of a GIMP image in pixels per inch. This is
a somewhat arbitrary value that can be used to when an upper value
for a resolution is needed. GIMP will not accept resolutions larger
than this value.</doc>
      <source-position filename="libgimpbase/gimplimits.h" line="78"/>
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="MICRO_VERSION" value="19" c:type="GIMP_MICRO_VERSION">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpversion.h"
           line="38">The micro GIMP version number.</doc>
      <source-position filename="libgimpbase/gimpversion.h" line="43"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MINOR_VERSION" value="99" c:type="GIMP_MINOR_VERSION">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpversion.h"
           line="31">The minor GIMP version number.</doc>
      <source-position filename="libgimpbase/gimpversion.h" line="36"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MIN_IMAGE_SIZE" value="1" c:type="GIMP_MIN_IMAGE_SIZE">
      <doc xml:space="preserve"
           filename="libgimpbase/gimplimits.h"
           line="42">The minimum width and height of a GIMP image in pixels.</doc>
      <source-position filename="libgimpbase/gimplimits.h" line="47"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MIN_RESOLUTION"
              value="0.005000"
              c:type="GIMP_MIN_RESOLUTION">
      <doc xml:space="preserve"
           filename="libgimpbase/gimplimits.h"
           line="60">The minimum resolution of a GIMP image in pixels per inch. This is
a somewhat arbitrary value that can be used when a lower value for a
resolution is needed. GIMP will not accept resolutions smaller than
this value.</doc>
      <source-position filename="libgimpbase/gimplimits.h" line="68"/>
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="MODULE_ABI_VERSION"
              value="5"
              c:type="GIMP_MODULE_ABI_VERSION">
      <doc xml:space="preserve"
           filename="libgimpmodule/gimpmodule.h"
           line="39">The version of the module system's ABI. Modules put this value into
#GimpModuleInfo's @abi_version field so the code loading the modules
can check if it was compiled against the same module ABI the modules
are compiled against.

 GIMP_MODULE_ABI_VERSION is incremented each time one of the
 following changes:

 - the libgimpmodule implementation (if the change affects modules).

 - one of the classes implemented by modules (currently #GimpColorDisplay,
   #GimpColorSelector and #GimpController).</doc>
      <source-position filename="libgimpmodule/gimpmodule.h" line="55"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <enumeration name="MaskApplyMode"
                 glib:type-name="GimpMaskApplyMode"
                 glib:get-type="gimp_mask_apply_mode_get_type"
                 c:type="GimpMaskApplyMode">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="691">Layer mask apply modes.</doc>
      <member name="apply"
              value="0"
              c:identifier="GIMP_MASK_APPLY"
              glib:nick="apply"
              glib:name="GIMP_MASK_APPLY">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="693">Apply the mask</doc>
      </member>
      <member name="discard"
              value="1"
              c:identifier="GIMP_MASK_DISCARD"
              glib:nick="discard"
              glib:name="GIMP_MASK_DISCARD">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="694">Discard the mask</doc>
      </member>
    </enumeration>
    <record name="Matrix2"
            c:type="GimpMatrix2"
            glib:type-name="GimpMatrix2"
            glib:get-type="gimp_matrix2_get_type"
            c:symbol-prefix="matrix2">
      <doc xml:space="preserve"
           filename="libgimpmath/gimpmathtypes.h"
           line="34">A two by two matrix.</doc>
      <source-position filename="libgimpmath/gimpmathtypes.h" line="43"/>
      <field name="coeff" writable="1">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmathtypes.h"
             line="36">the coefficients</doc>
        <array zero-terminated="0" fixed-size="4">
          <type name="gdouble" c:type="gdouble"/>
        </array>
      </field>
      <method name="determinant"
              c:identifier="gimp_matrix2_determinant"
              version="2.10.16">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmatrix.c"
             line="246">Calculates the determinant of the given matrix.</doc>
        <source-position filename="libgimpmath/gimpmatrix.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpmatrix.c"
               line="252">The determinant.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="248">The input matrix.</doc>
            <type name="Matrix2" c:type="const GimpMatrix2*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="identity" c:identifier="gimp_matrix2_identity">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmatrix.c"
             line="207">Sets the matrix to the identity matrix.</doc>
        <source-position filename="libgimpmath/gimpmatrix.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="209">A matrix.</doc>
            <type name="Matrix2" c:type="GimpMatrix2*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="invert"
              c:identifier="gimp_matrix2_invert"
              version="2.10.16">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmatrix.c"
             line="264">Inverts the given matrix.</doc>
        <source-position filename="libgimpmath/gimpmatrix.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="266">The matrix that is to be inverted.</doc>
            <type name="Matrix2" c:type="GimpMatrix2*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="mult" c:identifier="gimp_matrix2_mult">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmatrix.c"
             line="222">Multiplies two matrices and puts the result into the second one.</doc>
        <source-position filename="libgimpmath/gimpmatrix.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="left" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="224">The first input matrix.</doc>
            <type name="Matrix2" c:type="const GimpMatrix2*"/>
          </instance-parameter>
          <parameter name="right" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="225">The second input matrix which will be overwritten by the result.</doc>
            <type name="Matrix2" c:type="GimpMatrix2*"/>
          </parameter>
        </parameters>
      </method>
      <method name="transform_point"
              c:identifier="gimp_matrix2_transform_point"
              version="2.10.16">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmatrix.c"
             line="289">Transforms a point in 2D as specified by the transformation matrix.</doc>
        <source-position filename="libgimpmath/gimpmatrix.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="291">The transformation matrix.</doc>
            <type name="Matrix2" c:type="const GimpMatrix2*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="292">The source X coordinate.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="293">The source Y coordinate.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="newx"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="294">The transformed X coordinate.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="newy"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="295">The transformed Y coordinate.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="Matrix3"
            c:type="GimpMatrix3"
            glib:type-name="GimpMatrix3"
            glib:get-type="gimp_matrix3_get_type"
            c:symbol-prefix="matrix3">
      <doc xml:space="preserve"
           filename="libgimpmath/gimpmathtypes.h"
           line="45">A three by three matrix.</doc>
      <source-position filename="libgimpmath/gimpmathtypes.h" line="54"/>
      <field name="coeff" writable="1">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmathtypes.h"
             line="47">the coefficients</doc>
        <array zero-terminated="0" fixed-size="9">
          <type name="gdouble" c:type="gdouble"/>
        </array>
      </field>
      <method name="affine" c:identifier="gimp_matrix3_affine">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmatrix.c"
             line="667">Applies the affine transformation given by six values to @matrix.
The six values form define an affine transformation matrix as
illustrated below:

 ( a c e )
 ( b d f )
 ( 0 0 1 )</doc>
        <source-position filename="libgimpmath/gimpmatrix.h" line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="669">The input matrix.</doc>
            <type name="Matrix3" c:type="GimpMatrix3*"/>
          </instance-parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="670">the 'a' coefficient</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="671">the 'b' coefficient</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="c" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="672">the 'c' coefficient</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="d" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="673">the 'd' coefficient</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="e" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="674">the 'e' coefficient</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="675">the 'f' coefficient</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="determinant" c:identifier="gimp_matrix3_determinant">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmatrix.c"
             line="711">Calculates the determinant of the given matrix.</doc>
        <source-position filename="libgimpmath/gimpmatrix.h" line="115"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpmatrix.c"
               line="717">The determinant.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="713">The input matrix.</doc>
            <type name="Matrix3" c:type="const GimpMatrix3*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="gimp_matrix3_equal" version="2.10.16">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmatrix.c"
             line="887">Checks if two matrices are equal.</doc>
        <source-position filename="libgimpmath/gimpmatrix.h" line="123"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpmatrix.c"
               line="894">%TRUE the matrices are equal, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="889">The first matrix</doc>
            <type name="Matrix3" c:type="const GimpMatrix3*"/>
          </instance-parameter>
          <parameter name="matrix2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="890">The second matrix</doc>
            <type name="Matrix3" c:type="const GimpMatrix3*"/>
          </parameter>
        </parameters>
      </method>
      <method name="identity" c:identifier="gimp_matrix3_identity">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmatrix.c"
             line="469">Sets the matrix to the identity matrix.</doc>
        <source-position filename="libgimpmath/gimpmatrix.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="471">A matrix.</doc>
            <type name="Matrix3" c:type="GimpMatrix3*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="invert" c:identifier="gimp_matrix3_invert">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmatrix.c"
             line="733">Inverts the given matrix.</doc>
        <source-position filename="libgimpmath/gimpmatrix.h" line="116"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="735">The matrix that is to be inverted.</doc>
            <type name="Matrix3" c:type="GimpMatrix3*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_affine"
              c:identifier="gimp_matrix3_is_affine"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmatrix.c"
             line="839">Checks if the given matrix defines an affine transformation.</doc>
        <source-position filename="libgimpmath/gimpmatrix.h" line="120"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpmatrix.c"
               line="845">%TRUE if the matrix defines an affine transformation,
         %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="841">The matrix that is to be tested.</doc>
            <type name="Matrix3" c:type="const GimpMatrix3*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_diagonal" c:identifier="gimp_matrix3_is_diagonal">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmatrix.c"
             line="814">Checks if the given matrix is diagonal.</doc>
        <source-position filename="libgimpmath/gimpmatrix.h" line="119"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpmatrix.c"
               line="820">%TRUE if the matrix is diagonal, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="816">The matrix that is to be tested.</doc>
            <type name="Matrix3" c:type="const GimpMatrix3*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_identity" c:identifier="gimp_matrix3_is_identity">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmatrix.c"
             line="781">Checks if the given matrix is the identity matrix.</doc>
        <source-position filename="libgimpmath/gimpmatrix.h" line="118"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpmatrix.c"
               line="787">%TRUE if the matrix is the identity matrix, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="783">The matrix that is to be tested.</doc>
            <type name="Matrix3" c:type="const GimpMatrix3*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_simple" c:identifier="gimp_matrix3_is_simple">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmatrix.c"
             line="858">Checks if we'll need to interpolate when applying this matrix as
a transformation.</doc>
        <source-position filename="libgimpmath/gimpmatrix.h" line="121"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpmatrix.c"
               line="865">%TRUE if all entries of the upper left 2x2 matrix are
         either 0 or 1, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="860">The matrix that is to be tested.</doc>
            <type name="Matrix3" c:type="const GimpMatrix3*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="mult" c:identifier="gimp_matrix3_mult">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmatrix.c"
             line="519">Multiplies two matrices and puts the result into the second one.</doc>
        <source-position filename="libgimpmath/gimpmatrix.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="left" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="521">The first input matrix.</doc>
            <type name="Matrix3" c:type="const GimpMatrix3*"/>
          </instance-parameter>
          <parameter name="right" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="522">The second input matrix which will be overwritten by the result.</doc>
            <type name="Matrix3" c:type="GimpMatrix3*"/>
          </parameter>
        </parameters>
      </method>
      <method name="rotate" c:identifier="gimp_matrix3_rotate">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmatrix.c"
             line="602">Rotates the matrix by theta degrees.</doc>
        <source-position filename="libgimpmath/gimpmatrix.h" line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="604">The matrix that is to be rotated.</doc>
            <type name="Matrix3" c:type="GimpMatrix3*"/>
          </instance-parameter>
          <parameter name="theta" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="605">The angle of rotation (in radians).</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="scale" c:identifier="gimp_matrix3_scale">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmatrix.c"
             line="580">Scales the matrix by x and y</doc>
        <source-position filename="libgimpmath/gimpmatrix.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="582">The matrix that is to be scaled.</doc>
            <type name="Matrix3" c:type="GimpMatrix3*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="583">X scale factor.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="584">Y scale factor.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="transform_point"
              c:identifier="gimp_matrix3_transform_point">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmatrix.c"
             line="485">Transforms a point in 2D as specified by the transformation matrix.</doc>
        <source-position filename="libgimpmath/gimpmatrix.h" line="126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="487">The transformation matrix.</doc>
            <type name="Matrix3" c:type="const GimpMatrix3*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="488">The source X coordinate.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="489">The source Y coordinate.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="newx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="490">The transformed X coordinate.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="newy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="491">The transformed Y coordinate.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="translate" c:identifier="gimp_matrix3_translate">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmatrix.c"
             line="553">Translates the matrix by x and y.</doc>
        <source-position filename="libgimpmath/gimpmatrix.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="555">The matrix that is to be translated.</doc>
            <type name="Matrix3" c:type="GimpMatrix3*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="556">Translation in X direction.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="557">Translation in Y direction.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="xshear" c:identifier="gimp_matrix3_xshear">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmatrix.c"
             line="635">Shears the matrix in the X direction.</doc>
        <source-position filename="libgimpmath/gimpmatrix.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="637">The matrix that is to be sheared.</doc>
            <type name="Matrix3" c:type="GimpMatrix3*"/>
          </instance-parameter>
          <parameter name="amount" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="638">X shear amount.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="yshear" c:identifier="gimp_matrix3_yshear">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmatrix.c"
             line="651">Shears the matrix in the Y direction.</doc>
        <source-position filename="libgimpmath/gimpmatrix.h" line="105"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="653">The matrix that is to be sheared.</doc>
            <type name="Matrix3" c:type="GimpMatrix3*"/>
          </instance-parameter>
          <parameter name="amount" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="654">Y shear amount.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="Matrix4" c:type="GimpMatrix4">
      <doc xml:space="preserve"
           filename="libgimpmath/gimpmathtypes.h"
           line="56">A four by four matrix.</doc>
      <source-position filename="libgimpmath/gimpmathtypes.h" line="65"/>
      <field name="coeff" writable="1">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmathtypes.h"
             line="58">the coefficients</doc>
        <array zero-terminated="0" fixed-size="16">
          <type name="gdouble" c:type="gdouble"/>
        </array>
      </field>
      <method name="identity"
              c:identifier="gimp_matrix4_identity"
              version="2.10.16">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmatrix.c"
             line="916">Sets the matrix to the identity matrix.</doc>
        <source-position filename="libgimpmath/gimpmatrix.h" line="137"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="918">A matrix.</doc>
            <type name="Matrix4" c:type="GimpMatrix4*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="mult" c:identifier="gimp_matrix4_mult" version="2.10.16">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmatrix.c"
             line="936">Multiplies two matrices and puts the result into the second one.</doc>
        <source-position filename="libgimpmath/gimpmatrix.h" line="138"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="left" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="938">The first input matrix.</doc>
            <type name="Matrix4" c:type="const GimpMatrix4*"/>
          </instance-parameter>
          <parameter name="right" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="939">The second input matrix which will be overwritten by the result.</doc>
            <type name="Matrix4" c:type="GimpMatrix4*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_deg" c:identifier="gimp_matrix4_to_deg">
        <source-position filename="libgimpmath/gimpmatrix.h" line="141"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix" transfer-ownership="none">
            <type name="Matrix4" c:type="const GimpMatrix4*"/>
          </instance-parameter>
          <parameter name="a"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="b"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="c"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="transform_point"
              c:identifier="gimp_matrix4_transform_point"
              version="2.10.16">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmatrix.c"
             line="990">Transforms a point in 3D as specified by the transformation matrix.</doc>
        <source-position filename="libgimpmath/gimpmatrix.h" line="146"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpmatrix.c"
               line="1002">The transformed W coordinate.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="992">The transformation matrix.</doc>
            <type name="Matrix4" c:type="const GimpMatrix4*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="993">The source X coordinate.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="994">The source Y coordinate.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="995">The source Z coordinate.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="newx"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="996">The transformed X coordinate.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="newy"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="997">The transformed Y coordinate.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="newz"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpmatrix.c"
                 line="998">The transformed Z coordinate.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <class name="Memsize"
           c:symbol-prefix="memsize"
           glib:type-name="GimpMemsize"
           glib:get-type="gimp_memsize_get_type"
           glib:fundamental="1">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpmemsize.c"
           line="32">Functions to (de)serialize a given memory size.</doc>
      <function name="deserialize"
                c:identifier="gimp_memsize_deserialize"
                version="2.2">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmemsize.c"
             line="94">Parses a string representation of a memory size as returned by
gimp_memsize_serialize().</doc>
        <source-position filename="libgimpbase/gimpmemsize.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpmemsize.c"
               line="102">%TRUE if the @string was successfully parsed and
              @memsize has been set, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmemsize.c"
                 line="96">a string as returned by gimp_memsize_serialize()</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="memsize"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmemsize.c"
                 line="97">return location for memory size in bytes</doc>
            <type name="guint64" c:type="guint64*"/>
          </parameter>
        </parameters>
      </function>
      <function name="serialize"
                c:identifier="gimp_memsize_serialize"
                version="2.2">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmemsize.c"
             line="68">Creates a string representation of a given memory size. This string
can be parsed by gimp_memsize_deserialize() and can thus be used in
config files. It should not be displayed to the user. If you need a
nice human-readable string please use g_format_size().</doc>
        <source-position filename="libgimpbase/gimpmemsize.h" line="40"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpmemsize.c"
               line="77">A newly allocated string representation of @memsize.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="memsize" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmemsize.c"
                 line="70">memory size in bytes</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </function>
    </class>
    <enumeration name="MergeType"
                 glib:type-name="GimpMergeType"
                 glib:get-type="gimp_merge_type_get_type"
                 c:type="GimpMergeType">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="709">Types of merging layers.</doc>
      <member name="expand_as_necessary"
              value="0"
              c:identifier="GIMP_EXPAND_AS_NECESSARY"
              glib:nick="expand-as-necessary"
              glib:name="GIMP_EXPAND_AS_NECESSARY">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="711">Expanded as necessary</doc>
      </member>
      <member name="clip_to_image"
              value="1"
              c:identifier="GIMP_CLIP_TO_IMAGE"
              glib:nick="clip-to-image"
              glib:name="GIMP_CLIP_TO_IMAGE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="712">Clipped to image</doc>
      </member>
      <member name="clip_to_bottom_layer"
              value="2"
              c:identifier="GIMP_CLIP_TO_BOTTOM_LAYER"
              glib:nick="clip-to-bottom-layer"
              glib:name="GIMP_CLIP_TO_BOTTOM_LAYER">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="713">Clipped to bottom layer</doc>
      </member>
      <member name="flatten_image"
              value="3"
              c:identifier="GIMP_FLATTEN_IMAGE"
              glib:nick="flatten-image"
              glib:name="GIMP_FLATTEN_IMAGE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="714">Flatten</doc>
      </member>
    </enumeration>
    <enumeration name="MessageHandlerType"
                 glib:type-name="GimpMessageHandlerType"
                 glib:get-type="gimp_message_handler_type_get_type"
                 c:type="GimpMessageHandlerType">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="731">How to present messages.</doc>
      <member name="message_box"
              value="0"
              c:identifier="GIMP_MESSAGE_BOX"
              glib:nick="message-box"
              glib:name="GIMP_MESSAGE_BOX">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="733">A popup dialog</doc>
      </member>
      <member name="console"
              value="1"
              c:identifier="GIMP_CONSOLE"
              glib:nick="console"
              glib:name="GIMP_CONSOLE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="734">The terminal</doc>
      </member>
      <member name="error_console"
              value="2"
              c:identifier="GIMP_ERROR_CONSOLE"
              glib:nick="error-console"
              glib:name="GIMP_ERROR_CONSOLE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="735">The error console dockable</doc>
      </member>
    </enumeration>
    <class name="Metadata"
           c:symbol-prefix="metadata"
           c:type="GimpMetadata"
           parent="GObject.Object"
           glib:type-name="GimpMetadata"
           glib:get-type="gimp_metadata_get_type"
           glib:type-struct="MetadataClass">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpmetadata.c"
           line="42">Basic functions for handling #GimpMetadata objects.</doc>
      <source-position filename="libgimpbase/gimpmetadata.h" line="31"/>
      <constructor name="new" c:identifier="gimp_metadata_new" version="2.10">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.c"
             line="509">Creates a new #GimpMetadata instance.</doc>
        <source-position filename="libgimpbase/gimpmetadata.h" line="102"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpmetadata.c"
               line="514">The new #GimpMetadata.</doc>
          <type name="Metadata" c:type="GimpMetadata*"/>
        </return-value>
      </constructor>
      <function name="deserialize"
                c:identifier="gimp_metadata_deserialize"
                version="2.10">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.c"
             line="797">Deserializes a string of XML that has been created by
gimp_metadata_serialize().</doc>
        <source-position filename="libgimpbase/gimpmetadata.h" line="105"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpmetadata.c"
               line="804">The new #GimpMetadata.</doc>
          <type name="Metadata" c:type="GimpMetadata*"/>
        </return-value>
        <parameters>
          <parameter name="metadata_xml" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="799">A string of serialized metadata XML.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_guid"
                c:identifier="gimp_metadata_get_guid"
                version="2.10">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.c"
             line="221">Generate Version 4 UUID/GUID.</doc>
        <source-position filename="libgimpbase/gimpmetadata.h" line="107"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpmetadata.c"
               line="226">The new GUID/UUID string.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </function>
      <function name="is_tag_supported"
                c:identifier="gimp_metadata_is_tag_supported"
                version="2.10">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.c"
             line="1870">Returns whether @tag is supported in a file of type @mime_type.</doc>
        <source-position filename="libgimpbase/gimpmetadata.h" line="151"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpmetadata.c"
               line="1877">%TRUE if the @tag supported with @mime_type, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="tag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="1872">A metadata tag name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="mime_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="1873">A mime type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="load_from_file"
                c:identifier="gimp_metadata_load_from_file"
                version="2.10"
                throws="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.c"
             line="1192">Loads #GimpMetadata from @file.</doc>
        <source-position filename="libgimpbase/gimpmetadata.h" line="112"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpmetadata.c"
               line="1199">The loaded #GimpMetadata.</doc>
          <type name="Metadata" c:type="GimpMetadata*"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="1194">The #GFile to load the metadata from</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </function>
      <method name="add_xmp_history"
              c:identifier="gimp_metadata_add_xmp_history">
        <source-position filename="libgimpbase/gimpmetadata.h" line="109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="metadata" transfer-ownership="none">
            <type name="Metadata" c:type="GimpMetadata*"/>
          </instance-parameter>
          <parameter name="state_status" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="duplicate"
              c:identifier="gimp_metadata_duplicate"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.c"
             line="540">Duplicates a #GimpMetadata instance.</doc>
        <source-position filename="libgimpbase/gimpmetadata.h" line="103"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpmetadata.c"
               line="546">
              The new #GimpMetadata, or %NULL if @metadata is %NULL.</doc>
          <type name="Metadata" c:type="GimpMetadata*"/>
        </return-value>
        <parameters>
          <instance-parameter name="metadata" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="542">The object to duplicate, or %NULL.</doc>
            <type name="Metadata" c:type="GimpMetadata*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_colorspace"
              c:identifier="gimp_metadata_get_colorspace"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.c"
             line="1685">Returns values based on Exif.Photo.ColorSpace, Xmp.exif.ColorSpace,
Exif.Iop.InteroperabilityIndex, Exif.Nikon3.ColorSpace,
Exif.Canon.ColorSpace of @metadata.</doc>
        <source-position filename="libgimpbase/gimpmetadata.h" line="147"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpmetadata.c"
               line="1693">The colorspace specified by above tags.</doc>
          <type name="MetadataColorspace" c:type="GimpMetadataColorspace"/>
        </return-value>
        <parameters>
          <instance-parameter name="metadata" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="1687">A #GimpMetadata instance.</doc>
            <type name="Metadata" c:type="GimpMetadata*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_resolution"
              c:identifier="gimp_metadata_get_resolution"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.c"
             line="1547">Returns values based on Exif.Image.XResolution,
Exif.Image.YResolution and Exif.Image.ResolutionUnit of @metadata.</doc>
        <source-position filename="libgimpbase/gimpmetadata.h" line="137"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpmetadata.c"
               line="1557">%TRUE on success, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="metadata" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="1549">A #GimpMetadata instance.</doc>
            <type name="Metadata" c:type="GimpMetadata*"/>
          </instance-parameter>
          <parameter name="xres"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="1550">Return location for the X Resolution, in ppi</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="yres"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="1551">Return location for the Y Resolution, in ppi</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="unit"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="1552">Return location for the unit unit</doc>
            <type name="Unit" c:type="GimpUnit**"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_file"
              c:identifier="gimp_metadata_save_to_file"
              version="2.10"
              throws="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.c"
             line="1245">Saves @metadata to @file.</doc>
        <source-position filename="libgimpbase/gimpmetadata.h" line="114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpmetadata.c"
               line="1253">%TRUE on success, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="metadata" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="1247">A #GimpMetadata instance.</doc>
            <type name="Metadata" c:type="GimpMetadata*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="1248">The file to save the metadata to</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="serialize"
              c:identifier="gimp_metadata_serialize"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.c"
             line="1006">Serializes @metadata into an XML string that can later be deserialized
using gimp_metadata_deserialize().</doc>
        <source-position filename="libgimpbase/gimpmetadata.h" line="106"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpmetadata.c"
               line="1013">The serialized XML string.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="metadata" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="1008">A #GimpMetadata instance.</doc>
            <type name="Metadata" c:type="GimpMetadata*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_bits_per_sample"
              c:identifier="gimp_metadata_set_bits_per_sample"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.c"
             line="1524">Sets Exif.Image.BitsPerSample on @metadata.</doc>
        <source-position filename="libgimpbase/gimpmetadata.h" line="134"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="metadata" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="1526">A #GimpMetadata instance.</doc>
            <type name="Metadata" c:type="GimpMetadata*"/>
          </instance-parameter>
          <parameter name="bits_per_sample" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="1527">Bits per pixel, per component</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_colorspace"
              c:identifier="gimp_metadata_set_colorspace"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.c"
             line="1796">Sets Exif.Photo.ColorSpace, Xmp.exif.ColorSpace,
Exif.Iop.InteroperabilityIndex, Exif.Nikon3.ColorSpace,
Exif.Canon.ColorSpace of @metadata.</doc>
        <source-position filename="libgimpbase/gimpmetadata.h" line="148"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="metadata" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="1798">A #GimpMetadata instance.</doc>
            <type name="Metadata" c:type="GimpMetadata*"/>
          </instance-parameter>
          <parameter name="colorspace" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="1799">The color space.</doc>
            <type name="MetadataColorspace" c:type="GimpMetadataColorspace"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_from_exif"
              c:identifier="gimp_metadata_set_from_exif"
              version="2.10"
              throws="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.c"
             line="1291">Sets the tags from a piece of Exif data on @metadata.</doc>
        <source-position filename="libgimpbase/gimpmetadata.h" line="118"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpmetadata.c"
               line="1300">%TRUE on success, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="metadata" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="1293">A #GimpMetadata instance.</doc>
            <type name="Metadata" c:type="GimpMetadata*"/>
          </instance-parameter>
          <parameter name="exif_data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="1294">The blob of Exif data to set</doc>
            <array length="1" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="exif_data_length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="1295">Length of @exif_data, in bytes</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_from_iptc"
              c:identifier="gimp_metadata_set_from_iptc"
              version="2.10"
              throws="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.c"
             line="1384">Sets the tags from a piece of IPTC data on @metadata.</doc>
        <source-position filename="libgimpbase/gimpmetadata.h" line="122"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpmetadata.c"
               line="1393">%TRUE on success, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="metadata" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="1386">A #GimpMetadata instance.</doc>
            <type name="Metadata" c:type="GimpMetadata*"/>
          </instance-parameter>
          <parameter name="iptc_data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="1387">The blob of Iptc data to set</doc>
            <array length="1" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="iptc_data_length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="1388">Length of @iptc_data, in bytes</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_from_xmp"
              c:identifier="gimp_metadata_set_from_xmp"
              version="2.10"
              throws="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.c"
             line="1432">Sets the tags from a piece of XMP data on @metadata.</doc>
        <source-position filename="libgimpbase/gimpmetadata.h" line="126"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpmetadata.c"
               line="1441">%TRUE on success, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="metadata" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="1434">A #GimpMetadata instance.</doc>
            <type name="Metadata" c:type="GimpMetadata*"/>
          </instance-parameter>
          <parameter name="xmp_data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="1435">The blob of XMP data to set</doc>
            <array length="1" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="xmp_data_length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="1436">Length of @xmp_data, in bytes</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pixel_size"
              c:identifier="gimp_metadata_set_pixel_size"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.c"
             line="1480">Sets Exif.Image.ImageWidth and Exif.Image.ImageLength on @metadata.
If already present, also sets Exif.Photo.PixelXDimension and
Exif.Photo.PixelYDimension.</doc>
        <source-position filename="libgimpbase/gimpmetadata.h" line="131"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="metadata" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="1482">A #GimpMetadata instance.</doc>
            <type name="Metadata" c:type="GimpMetadata*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="1483">Width in pixels</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="1484">Height in pixels</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_resolution"
              c:identifier="gimp_metadata_set_resolution"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.c"
             line="1629">Sets Exif.Image.XResolution, Exif.Image.YResolution and
Exif.Image.ResolutionUnit of @metadata.</doc>
        <source-position filename="libgimpbase/gimpmetadata.h" line="141"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="metadata" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="1631">A #GimpMetadata instance.</doc>
            <type name="Metadata" c:type="GimpMetadata*"/>
          </instance-parameter>
          <parameter name="xres" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="1632">The image's X Resolution, in ppi</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="yres" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="1633">The image's Y Resolution, in ppi</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpmetadata.c"
                 line="1634">The image's unit</doc>
            <type name="Unit" c:type="GimpUnit*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="MetadataClass"
            c:type="GimpMetadataClass"
            glib:is-gtype-struct-for="Metadata">
      <source-position filename="libgimpbase/gimpmetadata.h" line="31"/>
      <field name="parent_class" introspectable="0">
        <type c:type="GExiv2MetadataClass"/>
      </field>
    </record>
    <enumeration name="MetadataColorspace" c:type="GimpMetadataColorspace">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpmetadata.h"
           line="84">Well-defined colorspace information available from metadata</doc>
      <source-position filename="libgimpbase/gimpmetadata.h" line="99"/>
      <member name="unspecified"
              value="0"
              c:identifier="GIMP_METADATA_COLORSPACE_UNSPECIFIED">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.h"
             line="86">Unspecified</doc>
      </member>
      <member name="uncalibrated"
              value="1"
              c:identifier="GIMP_METADATA_COLORSPACE_UNCALIBRATED">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.h"
             line="87">Uncalibrated</doc>
      </member>
      <member name="srgb"
              value="2"
              c:identifier="GIMP_METADATA_COLORSPACE_SRGB">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.h"
             line="88">sRGB</doc>
      </member>
      <member name="adobergb"
              value="3"
              c:identifier="GIMP_METADATA_COLORSPACE_ADOBERGB">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.h"
             line="89">Adobe RGB</doc>
      </member>
    </enumeration>
    <bitfield name="MetadataLoadFlags" c:type="GimpMetadataLoadFlags">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpmetadata.h"
           line="34">What metadata to load when importing images.</doc>
      <source-position filename="libgimpbase/gimpmetadata.h" line="54"/>
      <member name="none" value="0" c:identifier="GIMP_METADATA_LOAD_NONE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.h"
             line="36">Do not load the metadata</doc>
      </member>
      <member name="comment"
              value="1"
              c:identifier="GIMP_METADATA_LOAD_COMMENT">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.h"
             line="37">Load the comment</doc>
      </member>
      <member name="resolution"
              value="2"
              c:identifier="GIMP_METADATA_LOAD_RESOLUTION">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.h"
             line="38">Load the resolution</doc>
      </member>
      <member name="orientation"
              value="4"
              c:identifier="GIMP_METADATA_LOAD_ORIENTATION">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.h"
             line="39">Load the orientation (rotation)</doc>
      </member>
      <member name="colorspace"
              value="8"
              c:identifier="GIMP_METADATA_LOAD_COLORSPACE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.h"
             line="40">Load the colorspace</doc>
      </member>
      <member name="all"
              value="4294967295"
              c:identifier="GIMP_METADATA_LOAD_ALL">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.h"
             line="41">Load all of the above</doc>
      </member>
    </bitfield>
    <bitfield name="MetadataSaveFlags" c:type="GimpMetadataSaveFlags">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpmetadata.h"
           line="57">What kinds of metadata to save when exporting images.</doc>
      <source-position filename="libgimpbase/gimpmetadata.h" line="81"/>
      <member name="exif" value="1" c:identifier="GIMP_METADATA_SAVE_EXIF">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.h"
             line="59">Save EXIF</doc>
      </member>
      <member name="xmp" value="2" c:identifier="GIMP_METADATA_SAVE_XMP">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.h"
             line="60">Save XMP</doc>
      </member>
      <member name="iptc" value="4" c:identifier="GIMP_METADATA_SAVE_IPTC">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.h"
             line="61">Save IPTC</doc>
      </member>
      <member name="thumbnail"
              value="8"
              c:identifier="GIMP_METADATA_SAVE_THUMBNAIL">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.h"
             line="62">Save a thumbnail of the image</doc>
      </member>
      <member name="color_profile"
              value="16"
              c:identifier="GIMP_METADATA_SAVE_COLOR_PROFILE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.h"
             line="63">Save the image's color profile
                                   Since: 2.10.10</doc>
      </member>
      <member name="comment"
              value="32"
              c:identifier="GIMP_METADATA_SAVE_COMMENT">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.h"
             line="65">Save the image's comment
                                   Since: 3.0</doc>
      </member>
      <member name="all"
              value="4294967295"
              c:identifier="GIMP_METADATA_SAVE_ALL">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmetadata.h"
             line="67">Save all of the above</doc>
      </member>
    </bitfield>
    <class name="Module"
           c:symbol-prefix="module"
           c:type="GimpModule"
           parent="GObject.TypeModule"
           glib:type-name="GimpModule"
           glib:get-type="gimp_module_get_type"
           glib:type-struct="ModuleClass">
      <doc xml:space="preserve"
           filename="libgimpmodule/gimpmodule.c"
           line="35">#GimpModule is a generic mechanism to dynamically load modules into
GIMP. It is a #GTypeModule subclass, implementing module loading
using #GModule.  #GimpModule does not know which functionality is
implemented by the modules, it just provides a framework to get
arbitrary #GType implementations loaded from disk.</doc>
      <source-position filename="libgimpmodule/gimpmodule.h" line="172"/>
      <implements name="GObject.TypePlugin"/>
      <constructor name="new" c:identifier="gimp_module_new">
        <doc xml:space="preserve"
             filename="libgimpmodule/gimpmodule.c"
             line="275">Creates a new #GimpModule instance.</doc>
        <source-position filename="libgimpmodule/gimpmodule.h" line="175"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpmodule/gimpmodule.c"
               line="283">The new #GimpModule object.</doc>
          <type name="Module" c:type="GimpModule*"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmodule/gimpmodule.c"
                 line="277">A #GFile pointing to a loadable module.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="auto_load" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmodule/gimpmodule.c"
                 line="278">Pass %TRUE to exclude this module from auto-loading.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="verbose" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmodule/gimpmodule.c"
                 line="279">Pass %TRUE to enable debugging output.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="error_quark"
                c:identifier="gimp_module_error_quark"
                version="2.8">
        <doc xml:space="preserve"
             filename="libgimpmodule/gimpmodule.c"
             line="556">This function is never called directly. Use GIMP_MODULE_ERROR() instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmodule/gimpmodule.c"
               line="561">the #GQuark that defines the GIMP module error domain.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="query" c:identifier="gimp_module_query">
        <source-position filename="libgimpmodule/gimpmodule.h" line="150"/>
        <return-value transfer-ownership="none">
          <type name="ModuleInfo" c:type="const GimpModuleInfo*"/>
        </return-value>
        <parameters>
          <parameter name="module" transfer-ownership="none">
            <type name="GObject.TypeModule" c:type="GTypeModule*"/>
          </parameter>
        </parameters>
      </function>
      <function name="register" c:identifier="gimp_module_register">
        <source-position filename="libgimpmodule/gimpmodule.h" line="151"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="module" transfer-ownership="none">
            <type name="GObject.TypeModule" c:type="GTypeModule*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="modified">
        <source-position filename="libgimpmodule/gimpmodule.h" line="161"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="module" transfer-ownership="none">
            <type name="Module" c:type="GimpModule*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_auto_load"
              c:identifier="gimp_module_get_auto_load"
              glib:get-property="auto-load"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimpmodule/gimpmodule.c"
             line="365">Returns whether this @module in automatically loaded at startup.</doc>
        <source-position filename="libgimpmodule/gimpmodule.h" line="183"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmodule/gimpmodule.c"
               line="371">The @module's 'auto_load' property.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="module" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmodule/gimpmodule.c"
                 line="367">A #GimpModule</doc>
            <type name="Module" c:type="GimpModule*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_file"
              c:identifier="gimp_module_get_file"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimpmodule/gimpmodule.c"
             line="320">Returns #GFile of the @module,</doc>
        <source-position filename="libgimpmodule/gimpmodule.h" line="179"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmodule/gimpmodule.c"
               line="326">The @module's #GFile.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="module" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmodule/gimpmodule.c"
                 line="322">A #GimpModule</doc>
            <type name="Module" c:type="GimpModule*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_info"
              c:identifier="gimp_module_get_info"
              version="3.0">
        <source-position filename="libgimpmodule/gimpmodule.h" line="188"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmodule/gimpmodule.c"
               line="434">The @module's #GimpModuleInfo as provided
         by the actual module, or %NULL.</doc>
          <type name="ModuleInfo" c:type="const GimpModuleInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="module" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmodule/gimpmodule.c"
                 line="432">A #GimpModule</doc>
            <type name="Module" c:type="GimpModule*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_last_error"
              c:identifier="gimp_module_get_last_error"
              version="3.0">
        <source-position filename="libgimpmodule/gimpmodule.h" line="190"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmodule/gimpmodule.c"
               line="467">The @module's last error message.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="module" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmodule/gimpmodule.c"
                 line="465">A #GimpModule</doc>
            <type name="Module" c:type="GimpModule*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state"
              c:identifier="gimp_module_get_state"
              version="3.0">
        <source-position filename="libgimpmodule/gimpmodule.h" line="189"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmodule/gimpmodule.c"
               line="451">The @module's state.</doc>
          <type name="ModuleState" c:type="GimpModuleState"/>
        </return-value>
        <parameters>
          <instance-parameter name="module" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmodule/gimpmodule.c"
                 line="449">A #GimpModule</doc>
            <type name="Module" c:type="GimpModule*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_loaded"
              c:identifier="gimp_module_is_loaded"
              version="3.0">
        <source-position filename="libgimpmodule/gimpmodule.h" line="186"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmodule/gimpmodule.c"
               line="418">Whether the @module is currently loaded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="module" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmodule/gimpmodule.c"
                 line="416">A #GimpModule</doc>
            <type name="Module" c:type="GimpModule*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_on_disk"
              c:identifier="gimp_module_is_on_disk"
              version="3.0">
        <source-position filename="libgimpmodule/gimpmodule.h" line="185"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmodule/gimpmodule.c"
               line="387">Whether the @module is present on diak.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="module" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmodule/gimpmodule.c"
                 line="385">A #GimpModule</doc>
            <type name="Module" c:type="GimpModule*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="query_module" c:identifier="gimp_module_query_module">
        <doc xml:space="preserve"
             filename="libgimpmodule/gimpmodule.c"
             line="479">Queries the module without actually registering any of the types it
may implement. After successful query, gimp_module_get_info() can be
used to get further about the module.</doc>
        <source-position filename="libgimpmodule/gimpmodule.h" line="192"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmodule/gimpmodule.c"
               line="487">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="module" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmodule/gimpmodule.c"
                 line="481">A #GimpModule.</doc>
            <type name="Module" c:type="GimpModule*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_auto_load"
              c:identifier="gimp_module_set_auto_load"
              glib:set-property="auto-load"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimpmodule/gimpmodule.c"
             line="338">Sets the @auto_load property of the module</doc>
        <source-position filename="libgimpmodule/gimpmodule.h" line="181"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="module" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmodule/gimpmodule.c"
                 line="340">A #GimpModule</doc>
            <type name="Module" c:type="GimpModule*"/>
          </instance-parameter>
          <parameter name="auto_load" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmodule/gimpmodule.c"
                 line="341">Pass %FALSE to exclude this module from auto-loading</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="auto-load"
                writable="1"
                transfer-ownership="none"
                setter="set_auto_load"
                getter="get_auto_load"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="on-disk" transfer-ownership="none" default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.TypeModule" c:type="GTypeModule"/>
      </field>
    </class>
    <record name="ModuleClass"
            c:type="GimpModuleClass"
            glib:is-gtype-struct-for="Module">
      <source-position filename="libgimpmodule/gimpmodule.h" line="172"/>
      <field name="parent_class">
        <type name="GObject.TypeModuleClass" c:type="GTypeModuleClass"/>
      </field>
      <field name="modified">
        <callback name="modified">
          <source-position filename="libgimpmodule/gimpmodule.h" line="161"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="module" transfer-ownership="none">
              <type name="Module" c:type="GimpModule*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gimp_reserved1" introspectable="0">
        <callback name="_gimp_reserved1">
          <source-position filename="libgimpmodule/gimpmodule.h" line="164"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved2" introspectable="0">
        <callback name="_gimp_reserved2">
          <source-position filename="libgimpmodule/gimpmodule.h" line="165"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved3" introspectable="0">
        <callback name="_gimp_reserved3">
          <source-position filename="libgimpmodule/gimpmodule.h" line="166"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved4" introspectable="0">
        <callback name="_gimp_reserved4">
          <source-position filename="libgimpmodule/gimpmodule.h" line="167"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved5" introspectable="0">
        <callback name="_gimp_reserved5">
          <source-position filename="libgimpmodule/gimpmodule.h" line="168"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved6" introspectable="0">
        <callback name="_gimp_reserved6">
          <source-position filename="libgimpmodule/gimpmodule.h" line="169"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved7" introspectable="0">
        <callback name="_gimp_reserved7">
          <source-position filename="libgimpmodule/gimpmodule.h" line="170"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved8" introspectable="0">
        <callback name="_gimp_reserved8">
          <source-position filename="libgimpmodule/gimpmodule.h" line="171"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="ModuleDB"
           c:symbol-prefix="module_db"
           c:type="GimpModuleDB"
           parent="GObject.Object"
           glib:type-name="GimpModuleDB"
           glib:get-type="gimp_module_db_get_type"
           glib:type-struct="ModuleDBClass">
      <doc xml:space="preserve"
           filename="libgimpmodule/gimpmoduledb.c"
           line="36">Keeps a list of #GimpModule's found in a given searchpath.</doc>
      <source-position filename="libgimpmodule/gimpmoduledb.h" line="29"/>
      <implements name="Gio.ListModel"/>
      <constructor name="new" c:identifier="gimp_module_db_new">
        <doc xml:space="preserve"
             filename="libgimpmodule/gimpmoduledb.c"
             line="139">Creates a new #GimpModuleDB instance. The @verbose parameter will be
passed to the created #GimpModule instances using gimp_module_new().</doc>
        <source-position filename="libgimpmodule/gimpmoduledb.h" line="32"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpmodule/gimpmoduledb.c"
               line="146">The new #GimpModuleDB instance.</doc>
          <type name="ModuleDB" c:type="GimpModuleDB*"/>
        </return-value>
        <parameters>
          <parameter name="verbose" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmodule/gimpmoduledb.c"
                 line="141">Pass %TRUE to enable debugging output.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_load_inhibit"
              c:identifier="gimp_module_db_get_load_inhibit">
        <doc xml:space="preserve"
             filename="libgimpmodule/gimpmoduledb.c"
             line="273">Return the #G_SEARCHPATH_SEPARATOR delimited list of module filenames
which are excluded from auto-loading.</doc>
        <source-position filename="libgimpmodule/gimpmoduledb.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmodule/gimpmoduledb.c"
               line="280">the @db's @load_inhibit string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="db" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmodule/gimpmoduledb.c"
                 line="275">A #GimpModuleDB.</doc>
            <type name="ModuleDB" c:type="GimpModuleDB*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_verbose"
              c:identifier="gimp_module_db_get_verbose"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimpmodule/gimpmoduledb.c"
             line="178">Returns the 'verbose' setting of @db.</doc>
        <source-position filename="libgimpmodule/gimpmoduledb.h" line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmodule/gimpmoduledb.c"
               line="184">the 'verbose' setting.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="db" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmodule/gimpmoduledb.c"
                 line="180">A #GimpModuleDB.</doc>
            <type name="ModuleDB" c:type="GimpModuleDB*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load" c:identifier="gimp_module_db_load">
        <doc xml:space="preserve"
             filename="libgimpmodule/gimpmoduledb.c"
             line="290">Scans the directories contained in @module_path and creates a
#GimpModule instance for every loadable module contained in the
directories.</doc>
        <source-position filename="libgimpmodule/gimpmoduledb.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="db" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmodule/gimpmoduledb.c"
                 line="292">A #GimpModuleDB.</doc>
            <type name="ModuleDB" c:type="GimpModuleDB*"/>
          </instance-parameter>
          <parameter name="module_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmodule/gimpmoduledb.c"
                 line="293">A #G_SEARCHPATH_SEPARATOR delimited list of directories
              to load modules from.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh" c:identifier="gimp_module_db_refresh">
        <doc xml:space="preserve"
             filename="libgimpmodule/gimpmoduledb.c"
             line="326">Does the same as gimp_module_db_load(), plus removes all #GimpModule
instances whose modules have been deleted from disk.

Note that the #GimpModule's will just be removed from the internal
list and not freed as this is not possible with #GTypeModule
instances which actually implement types.</doc>
        <source-position filename="libgimpmodule/gimpmoduledb.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="db" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmodule/gimpmoduledb.c"
                 line="328">A #GimpModuleDB.</doc>
            <type name="ModuleDB" c:type="GimpModuleDB*"/>
          </instance-parameter>
          <parameter name="module_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmodule/gimpmoduledb.c"
                 line="329">A #G_SEARCHPATH_SEPARATOR delimited list of directories
              to load modules from.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_load_inhibit"
              c:identifier="gimp_module_db_set_load_inhibit">
        <doc xml:space="preserve"
             filename="libgimpmodule/gimpmoduledb.c"
             line="240">Sets the @load_inhibit flag for all #GimpModule's which are kept
by @db (using gimp_module_set_load_inhibit()).</doc>
        <source-position filename="libgimpmodule/gimpmoduledb.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="db" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmodule/gimpmoduledb.c"
                 line="242">A #GimpModuleDB.</doc>
            <type name="ModuleDB" c:type="GimpModuleDB*"/>
          </instance-parameter>
          <parameter name="load_inhibit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmodule/gimpmoduledb.c"
                 line="243">A #G_SEARCHPATH_SEPARATOR delimited list of module
               filenames to exclude from auto-loading.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_verbose"
              c:identifier="gimp_module_db_set_verbose"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimpmodule/gimpmoduledb.c"
             line="160">Sets the 'verbose' setting of @db.</doc>
        <source-position filename="libgimpmodule/gimpmoduledb.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="db" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmodule/gimpmoduledb.c"
                 line="162">A #GimpModuleDB.</doc>
            <type name="ModuleDB" c:type="GimpModuleDB*"/>
          </instance-parameter>
          <parameter name="verbose" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmodule/gimpmoduledb.c"
                 line="163">the new 'verbose' setting</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="ModuleDBClass"
            c:type="GimpModuleDBClass"
            glib:is-gtype-struct-for="ModuleDB">
      <source-position filename="libgimpmodule/gimpmoduledb.h" line="29"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="ModuleError" c:type="GimpModuleError">
      <doc xml:space="preserve"
           filename="libgimpmodule/gimpmodule.h"
           line="83">Types of errors returned by modules</doc>
      <source-position filename="libgimpmodule/gimpmodule.h" line="92"/>
      <member name="module_failed" value="0" c:identifier="GIMP_MODULE_FAILED">
        <doc xml:space="preserve"
             filename="libgimpmodule/gimpmodule.h"
             line="85">Generic error condition</doc>
      </member>
    </enumeration>
    <record name="ModuleInfo" c:type="GimpModuleInfo">
      <doc xml:space="preserve"
           filename="libgimpmodule/gimpmodule.h"
           line="95">This structure contains information about a loadable module.</doc>
      <source-position filename="libgimpmodule/gimpmodule.h" line="114"/>
      <field name="abi_version" writable="1">
        <doc xml:space="preserve"
             filename="libgimpmodule/gimpmodule.h"
             line="97">The #GIMP_MODULE_ABI_VERSION the module was compiled against.</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="purpose" writable="1">
        <doc xml:space="preserve"
             filename="libgimpmodule/gimpmodule.h"
             line="98">The module's general purpose.</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="author" writable="1">
        <doc xml:space="preserve"
             filename="libgimpmodule/gimpmodule.h"
             line="99">The module's author.</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="version" writable="1">
        <doc xml:space="preserve"
             filename="libgimpmodule/gimpmodule.h"
             line="100">The module's version.</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="copyright" writable="1">
        <doc xml:space="preserve"
             filename="libgimpmodule/gimpmodule.h"
             line="101">The module's copyright.</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="date" writable="1">
        <doc xml:space="preserve"
             filename="libgimpmodule/gimpmodule.h"
             line="102">The module's release date.</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
    </record>
    <callback name="ModuleQueryFunc" c:type="GimpModuleQueryFunc">
      <doc xml:space="preserve"
           filename="libgimpmodule/gimpmodule.h"
           line="117">The signature of the query function a loadable GIMP module must
implement. In the module, the function must be called [func@Module.query].

[class@Module] will copy the returned [struct@ModuleInfo], so the
module doesn't need to keep these values around (however in most
cases the module will just return a pointer to a constant
structure).</doc>
      <source-position filename="libgimpmodule/gimpmodule.h" line="131"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpmodule/gimpmodule.h"
             line="129">The info struct describing the module.</doc>
        <type name="ModuleInfo" c:type="const GimpModuleInfo*"/>
      </return-value>
      <parameters>
        <parameter name="module" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmodule/gimpmodule.h"
               line="119">The module responsible for this loadable module.</doc>
          <type name="GObject.TypeModule" c:type="GTypeModule*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ModuleRegisterFunc" c:type="GimpModuleRegisterFunc">
      <doc xml:space="preserve"
           filename="libgimpmodule/gimpmodule.h"
           line="133">The signature of the register function a loadable GIMP module must
implement.  In the module, the function must be called
[func@Module.register].

When this function is called, the module should register all the types
it implements with the passed @module.</doc>
      <source-position filename="libgimpmodule/gimpmodule.h" line="146"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpmodule/gimpmodule.h"
             line="144">Whether the registration was succesfull</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="module" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmodule/gimpmodule.h"
               line="135">The module responsible for this loadable module.</doc>
          <type name="GObject.TypeModule" c:type="GTypeModule*"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="ModuleState" c:type="GimpModuleState">
      <doc xml:space="preserve"
           filename="libgimpmodule/gimpmodule.h"
           line="58">The possible states a #GimpModule can be in.</doc>
      <source-position filename="libgimpmodule/gimpmodule.h" line="76"/>
      <member name="error" value="0" c:identifier="GIMP_MODULE_STATE_ERROR">
        <doc xml:space="preserve"
             filename="libgimpmodule/gimpmodule.h"
             line="60">Missing gimp_module_register() function
                                or other error.</doc>
      </member>
      <member name="loaded" value="1" c:identifier="GIMP_MODULE_STATE_LOADED">
        <doc xml:space="preserve"
             filename="libgimpmodule/gimpmodule.h"
             line="62">An instance of a type implemented by
                                this module is allocated.</doc>
      </member>
      <member name="load_failed"
              value="2"
              c:identifier="GIMP_MODULE_STATE_LOAD_FAILED">
        <doc xml:space="preserve"
             filename="libgimpmodule/gimpmodule.h"
             line="64">gimp_module_register() returned %FALSE.</doc>
      </member>
      <member name="not_loaded"
              value="3"
              c:identifier="GIMP_MODULE_STATE_NOT_LOADED">
        <doc xml:space="preserve"
             filename="libgimpmodule/gimpmodule.h"
             line="65">There are no instances allocated of
                                types implemented by this module.</doc>
      </member>
    </enumeration>
    <record name="ObjectArray"
            c:type="GimpObjectArray"
            glib:type-name="GimpObjectArray"
            glib:get-type="gimp_object_array_get_type"
            c:symbol-prefix="object_array">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="395"/>
      <field name="object_type" writable="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparamspecs.h"
             line="382">#GType of the contained objects.</doc>
        <type name="GType" c:type="GType"/>
      </field>
      <field name="data" writable="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparamspecs.h"
             line="383">pointer to the array's data.</doc>
        <array length="2" zero-terminated="0" c:type="GObject**">
          <type name="GObject.Object" c:type="GObject*"/>
        </array>
      </field>
      <field name="length" writable="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparamspecs.h"
             line="384">length of @data, in number of objects.</doc>
        <type name="gsize" c:type="gsize"/>
      </field>
      <field name="static_data" writable="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparamspecs.h"
             line="385">whether @data points to statically allocated memory.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <constructor name="new" c:identifier="gimp_object_array_new">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparamspecs.c"
             line="1038">Creates a new #GimpObjectArray containing object pointers, of size @length.

If @static_data is %TRUE, @data is used as-is.

If @static_data is %FALSE, the object and array will be re-allocated,
hence you are expected to free your input data after.</doc>
        <source-position filename="libgimpbase/gimpparamspecs.h" line="397"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="1053">a new #GimpObjectArray.</doc>
          <type name="ObjectArray" c:type="GimpObjectArray*"/>
        </return-value>
        <parameters>
          <parameter name="object_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpparamspecs.c"
                 line="1041">the array will hold objects of this type</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpparamspecs.c"
                 line="1040">an array of objects.</doc>
            <array length="2" zero-terminated="0" c:type="GObject**">
              <type name="GObject.Object" c:type="GObject*"/>
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpparamspecs.c"
                 line="1042">the length of @data.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="static_data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpparamspecs.c"
                 line="1043">whether the objects in @data are static objects and don't
              need to be copied.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy" c:identifier="gimp_object_array_copy">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparamspecs.c"
             line="1092">Creates a new #GimpObjectArray containing a deep copy of @array.</doc>
        <source-position filename="libgimpbase/gimpparamspecs.h" line="401"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="1098">a new #GimpObjectArray.</doc>
          <type name="ObjectArray" c:type="GimpObjectArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpparamspecs.c"
                 line="1094">an original #GimpObjectArray of objects.</doc>
            <type name="ObjectArray" c:type="const GimpObjectArray*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="gimp_object_array_free">
        <source-position filename="libgimpbase/gimpparamspecs.h" line="402"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <type name="ObjectArray" c:type="GimpObjectArray*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="OffsetType"
                 glib:type-name="GimpOffsetType"
                 glib:get-type="gimp_offset_type_get_type"
                 c:type="GimpOffsetType">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="751">Background fill types for the offset operation.</doc>
      <member name="background"
              value="0"
              c:identifier="GIMP_OFFSET_BACKGROUND"
              glib:nick="background"
              glib:name="GIMP_OFFSET_BACKGROUND">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="753">Background</doc>
      </member>
      <member name="transparent"
              value="1"
              c:identifier="GIMP_OFFSET_TRANSPARENT"
              glib:nick="transparent"
              glib:name="GIMP_OFFSET_TRANSPARENT">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="754">Transparent</doc>
      </member>
      <member name="wrap_around"
              value="2"
              c:identifier="GIMP_OFFSET_WRAP_AROUND"
              glib:nick="wrap-around"
              glib:name="GIMP_OFFSET_WRAP_AROUND">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="755">Wrap image around</doc>
      </member>
    </enumeration>
    <enumeration name="OrientationType"
                 glib:type-name="GimpOrientationType"
                 glib:get-type="gimp_orientation_type_get_type"
                 c:type="GimpOrientationType">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="771">Orientations for various purposes.</doc>
      <member name="horizontal"
              value="0"
              c:identifier="GIMP_ORIENTATION_HORIZONTAL"
              glib:nick="horizontal"
              glib:name="GIMP_ORIENTATION_HORIZONTAL">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="773">Horizontal</doc>
      </member>
      <member name="vertical"
              value="1"
              c:identifier="GIMP_ORIENTATION_VERTICAL"
              glib:nick="vertical"
              glib:name="GIMP_ORIENTATION_VERTICAL">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="774">Vertical</doc>
      </member>
      <member name="unknown"
              value="2"
              c:identifier="GIMP_ORIENTATION_UNKNOWN"
              glib:nick="unknown"
              glib:name="GIMP_ORIENTATION_UNKNOWN">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="775">Unknown</doc>
      </member>
    </enumeration>
    <constant name="PARAM_DONT_SERIALIZE"
              value="2"
              c:type="GIMP_PARAM_DONT_SERIALIZE">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparamspecs.h"
           line="40">This property will be ignored when serializing and deserializing.
This is useful for GimpProcedure arguments for which you never want
the last run values to be restored.

Since 3.0</doc>
      <source-position filename="libgimpbase/gimpparamspecs.h" line="49"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PARAM_FLAG_SHIFT" value="2" c:type="GIMP_PARAM_FLAG_SHIFT">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparamspecs.h"
           line="51">Minimum shift count to be used for libgimpconfig defined
[flags@GObject.ParamFlags] (see libgimpconfig/gimpconfig-params.h).</doc>
      <source-position filename="libgimpbase/gimpparamspecs.h" line="57"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PARAM_NO_VALIDATE"
              value="1"
              c:type="GIMP_PARAM_NO_VALIDATE">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparamspecs.h"
           line="33">Since 3.0</doc>
      <source-position filename="libgimpbase/gimpparamspecs.h" line="38"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PARAM_READABLE"
              value="1"
              c:type="GIMP_PARAM_READABLE"
              version="2.4">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="71"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PARAM_READWRITE"
              value="3"
              c:type="GIMP_PARAM_READWRITE"
              version="2.4">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="85"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="PARAM_SPEC_ARRAY"
                    c:identifier="GIMP_PARAM_SPEC_ARRAY"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="215"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARAM_SPEC_BRUSH"
                    c:identifier="GIMP_PARAM_SPEC_BRUSH"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="376"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARAM_SPEC_CHANNEL"
                    c:identifier="GIMP_PARAM_SPEC_CHANNEL"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="207"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARAM_SPEC_CHOICE"
                    c:identifier="GIMP_PARAM_SPEC_CHOICE"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="93"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARAM_SPEC_COLOR"
                    c:identifier="GIMP_PARAM_SPEC_COLOR"
                    introspectable="0">
      <source-position filename="libgimpcolor/gimpcolor.h" line="77"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARAM_SPEC_DISPLAY"
                    c:identifier="GIMP_PARAM_SPEC_DISPLAY"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="315"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARAM_SPEC_DRAWABLE"
                    c:identifier="GIMP_PARAM_SPEC_DRAWABLE"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="99"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARAM_SPEC_EXPORT_OPTIONS"
                    c:identifier="GIMP_PARAM_SPEC_EXPORT_OPTIONS"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="451"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARAM_SPEC_FLOAT_ARRAY"
                    c:identifier="GIMP_PARAM_SPEC_FLOAT_ARRAY"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="293"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARAM_SPEC_FONT"
                    c:identifier="GIMP_PARAM_SPEC_FONT"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="492"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARAM_SPEC_GRADIENT"
                    c:identifier="GIMP_PARAM_SPEC_GRADIENT"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="434"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARAM_SPEC_GROUP_LAYER"
                    c:identifier="GIMP_PARAM_SPEC_GROUP_LAYER"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="180"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARAM_SPEC_IMAGE"
                    c:identifier="GIMP_PARAM_SPEC_IMAGE"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="41"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARAM_SPEC_INT32_ARRAY"
                    c:identifier="GIMP_PARAM_SPEC_INT32_ARRAY"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="248"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARAM_SPEC_ITEM"
                    c:identifier="GIMP_PARAM_SPEC_ITEM"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="70"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARAM_SPEC_LAYER"
                    c:identifier="GIMP_PARAM_SPEC_LAYER"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="126"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARAM_SPEC_LAYER_MASK"
                    c:identifier="GIMP_PARAM_SPEC_LAYER_MASK"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="234"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARAM_SPEC_OBJECT"
                    c:identifier="GIMP_PARAM_SPEC_OBJECT"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="121"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARAM_SPEC_OBJECT_ARRAY"
                    c:identifier="GIMP_PARAM_SPEC_OBJECT_ARRAY"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="410"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARAM_SPEC_OBJECT_CLASS"
                    c:identifier="GIMP_PARAM_SPEC_OBJECT_CLASS"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="122"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARAM_SPEC_OBJECT_GET_CLASS"
                    c:identifier="GIMP_PARAM_SPEC_OBJECT_GET_CLASS"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="125"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARAM_SPEC_PALETTE"
                    c:identifier="GIMP_PARAM_SPEC_PALETTE"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="463"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARAM_SPEC_PATH"
                    c:identifier="GIMP_PARAM_SPEC_PATH"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="288"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARAM_SPEC_PATTERN"
                    c:identifier="GIMP_PARAM_SPEC_PATTERN"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="405"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARAM_SPEC_RESOURCE"
                    c:identifier="GIMP_PARAM_SPEC_RESOURCE"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="343"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARAM_SPEC_SELECTION"
                    c:identifier="GIMP_PARAM_SPEC_SELECTION"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="261"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARAM_SPEC_TEXT_LAYER"
                    c:identifier="GIMP_PARAM_SPEC_TEXT_LAYER"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="153"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARAM_SPEC_UNIT"
                    c:identifier="GIMP_PARAM_SPEC_UNIT"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpunit.h" line="90"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARAM_SPEC_VALUE_ARRAY"
                    c:identifier="GIMP_PARAM_SPEC_VALUE_ARRAY"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpvaluearray.h" line="85"/>
      <parameters>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="PARAM_STATIC_STRINGS"
              value="224"
              c:type="GIMP_PARAM_STATIC_STRINGS"
              version="2.4">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="64"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PARAM_WRITABLE"
              value="2"
              c:type="GIMP_PARAM_WRITABLE"
              version="2.4">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="78"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PARASITE_ATTACH_GRANDPARENT"
              value="8388608"
              c:type="GIMP_PARASITE_ATTACH_GRANDPARENT">
      <source-position filename="libgimpbase/gimpparasite.h" line="68"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PARASITE_ATTACH_PARENT"
              value="32768"
              c:type="GIMP_PARASITE_ATTACH_PARENT">
      <source-position filename="libgimpbase/gimpparasite.h" line="64"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PARASITE_GRANDPARENT_PERSISTENT"
              value="0"
              c:type="GIMP_PARASITE_GRANDPARENT_PERSISTENT">
      <source-position filename="libgimpbase/gimpparasite.h" line="69"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PARASITE_GRANDPARENT_UNDOABLE"
              value="0"
              c:type="GIMP_PARASITE_GRANDPARENT_UNDOABLE">
      <source-position filename="libgimpbase/gimpparasite.h" line="70"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PARASITE_PARENT_PERSISTENT"
              value="0"
              c:type="GIMP_PARASITE_PARENT_PERSISTENT">
      <source-position filename="libgimpbase/gimpparasite.h" line="65"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PARASITE_PARENT_UNDOABLE"
              value="0"
              c:type="GIMP_PARASITE_PARENT_UNDOABLE">
      <source-position filename="libgimpbase/gimpparasite.h" line="66"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PARASITE_PERSISTENT"
              value="1"
              c:type="GIMP_PARASITE_PERSISTENT">
      <source-position filename="libgimpbase/gimpparasite.h" line="61"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PARASITE_UNDOABLE"
              value="2"
              c:type="GIMP_PARASITE_UNDOABLE">
      <source-position filename="libgimpbase/gimpparasite.h" line="62"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="PDB"
           c:symbol-prefix="pdb"
           c:type="GimpPDB"
           parent="GObject.Object"
           glib:type-name="GimpPDB"
           glib:get-type="gimp_pdb_get_type"
           glib:type-struct="PDBClass">
      <doc xml:space="preserve"
           filename="libgimp/gimppdb.c"
           line="37">Provides access to the Procedural DataBase (PDB).</doc>
      <source-position filename="libgimp/gimppdb.h" line="35"/>
      <method name="dump_to_file"
              c:identifier="gimp_pdb_dump_to_file"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimppdb.c"
             line="213">Dumps the current contents of the procedural database

This procedure dumps the contents of the procedural database to the
specified @file. The file will contain all of the information
provided for each registered procedure.</doc>
        <source-position filename="libgimp/gimppdb.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppdb.c"
               line="224">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppdb.c"
                 line="215">A #GimpPDB.</doc>
            <type name="PDB" c:type="GimpPDB*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppdb.c"
                 line="216">The dump file.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_last_error"
              c:identifier="gimp_pdb_get_last_error"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimppdb.c"
             line="306">Retrieves the error message from the last procedure call.

If a procedure call fails, then it might pass an error message with
the return values. Plug-ins that are using the libgimp C wrappers
don't access the procedure return values directly. Thus #GimpPDB
stores the error message and makes it available with this
function. The next procedure call unsets the error message again.

The returned string is owned by @pdb and must not be freed or
modified.</doc>
        <source-position filename="libgimp/gimppdb.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppdb.c"
               line="321">the error message</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppdb.c"
                 line="308">a #GimpPDB.</doc>
            <type name="PDB" c:type="GimpPDB*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_last_status"
              c:identifier="gimp_pdb_get_last_status"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimppdb.c"
             line="356">Retrieves the status from the last procedure call.</doc>
        <source-position filename="libgimp/gimppdb.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppdb.c"
               line="362">the #GimpPDBStatusType.</doc>
          <type name="PDBStatusType" c:type="GimpPDBStatusType"/>
        </return-value>
        <parameters>
          <instance-parameter name="pdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppdb.c"
                 line="358">a #GimpPDB.</doc>
            <type name="PDB" c:type="GimpPDB*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="lookup_procedure"
              c:identifier="gimp_pdb_lookup_procedure"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimppdb.c"
             line="152">This function returns the [class@Procedure] which is registered
with @procedure_name if it exists, or returns %NULL otherwise.

The returned [class@Procedure] is owned by @pdb and must not be modified.</doc>
        <source-position filename="libgimp/gimppdb.h" line="41"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgimp/gimppdb.c"
               line="162">A [class@Procedure], or %NULL.</doc>
          <type name="Procedure" c:type="GimpProcedure*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppdb.c"
                 line="154">A #GimpPDB instance.</doc>
            <type name="PDB" c:type="GimpPDB*"/>
          </instance-parameter>
          <parameter name="procedure_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppdb.c"
                 line="155">A procedure name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="procedure_exists"
              c:identifier="gimp_pdb_procedure_exists"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimppdb.c"
             line="130">This function checks if a procedure exists in the procedural
database.</doc>
        <source-position filename="libgimp/gimppdb.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppdb.c"
               line="138">%TRUE if the procedure exists, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppdb.c"
                 line="132">A PDB instance.</doc>
            <type name="PDB" c:type="GimpPDB*"/>
          </instance-parameter>
          <parameter name="procedure_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppdb.c"
                 line="133">A procedure name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="query_procedures"
              c:identifier="gimp_pdb_query_procedures"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimppdb.c"
             line="238">Queries the procedural database for its contents using regular
expression matching.

This function queries the contents of the procedural database. It
is supplied with eight arguments matching procedures on

{ name, blurb, help, help-id, authors, copyright, date, procedure type}.

This is accomplished using regular expression matching. For
instance, to find all procedures with "jpeg" listed in the blurb,
all seven arguments can be supplied as ".*", except for the second,
which can be supplied as ".*jpeg.*". There are two return arguments
for this procedure. The first is the number of procedures matching
the query. The second is a concatenated list of procedure names
corresponding to those matching the query. If no matching entries
are found, then the returned string is NULL and the number of
entries is 0.</doc>
        <source-position filename="libgimp/gimppdb.h" line="48"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimppdb.c"
               line="268">The list
         of procedure names. Free with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="pdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppdb.c"
                 line="240">A #GimpPDB.</doc>
            <type name="PDB" c:type="GimpPDB*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppdb.c"
                 line="241">The regex for procedure name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppdb.c"
                 line="242">The regex for procedure blurb.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="help" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppdb.c"
                 line="243">The regex for procedure help.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="help_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppdb.c"
                 line="244">The regex for procedure help-id.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="authors" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppdb.c"
                 line="245">The regex for procedure authors.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="copyright" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppdb.c"
                 line="246">The regex for procedure copyright.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppdb.c"
                 line="247">The regex for procedure date.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="proc_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppdb.c"
                 line="248">The regex for procedure type: { 'Internal GIMP procedure', 'GIMP Plug-in', 'GIMP Extension', 'Temporary Procedure' }.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="temp_procedure_name"
              c:identifier="gimp_pdb_temp_procedure_name"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimppdb.c"
             line="190">Generates a unique temporary PDB name.

This function generates a temporary PDB entry name that is
guaranteed to be unique.</doc>
        <source-position filename="libgimp/gimppdb.h" line="44"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimppdb.c"
               line="199">A unique temporary name for a temporary
         PDB entry. The returned value must be freed with
         g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppdb.c"
                 line="192">the #GimpPDB object.</doc>
            <type name="PDB" c:type="GimpPDB*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <record name="PDBClass"
            c:type="GimpPDBClass"
            glib:is-gtype-struct-for="PDB">
      <source-position filename="libgimp/gimppdb.h" line="35"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="PDBErrorHandler"
                 glib:type-name="GimpPDBErrorHandler"
                 glib:get-type="gimp_pdb_error_handler_get_type"
                 c:type="GimpPDBErrorHandler">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="809">PDB error handlers.</doc>
      <member name="internal"
              value="0"
              c:identifier="GIMP_PDB_ERROR_HANDLER_INTERNAL"
              glib:nick="internal"
              glib:name="GIMP_PDB_ERROR_HANDLER_INTERNAL">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="811">Internal</doc>
      </member>
      <member name="plugin"
              value="1"
              c:identifier="GIMP_PDB_ERROR_HANDLER_PLUGIN"
              glib:nick="plugin"
              glib:name="GIMP_PDB_ERROR_HANDLER_PLUGIN">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="812">Plug-In</doc>
      </member>
    </enumeration>
    <enumeration name="PDBProcType"
                 glib:type-name="GimpPDBProcType"
                 glib:get-type="gimp_pdb_proc_type_get_type"
                 c:type="GimpPDBProcType">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="827">Types of PDB procedures.</doc>
      <member name="internal"
              value="0"
              c:identifier="GIMP_PDB_PROC_TYPE_INTERNAL"
              glib:nick="internal"
              glib:name="GIMP_PDB_PROC_TYPE_INTERNAL">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="829">Internal GIMP procedure</doc>
      </member>
      <member name="plugin"
              value="1"
              c:identifier="GIMP_PDB_PROC_TYPE_PLUGIN"
              glib:nick="plugin"
              glib:name="GIMP_PDB_PROC_TYPE_PLUGIN">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="830">GIMP Plug-In</doc>
      </member>
      <member name="extension"
              value="2"
              c:identifier="GIMP_PDB_PROC_TYPE_EXTENSION"
              glib:nick="extension"
              glib:name="GIMP_PDB_PROC_TYPE_EXTENSION">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="831">GIMP Extension</doc>
      </member>
      <member name="temporary"
              value="3"
              c:identifier="GIMP_PDB_PROC_TYPE_TEMPORARY"
              glib:nick="temporary"
              glib:name="GIMP_PDB_PROC_TYPE_TEMPORARY">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="832">Temporary Procedure</doc>
      </member>
    </enumeration>
    <enumeration name="PDBStatusType"
                 glib:type-name="GimpPDBStatusType"
                 glib:get-type="gimp_pdb_status_type_get_type"
                 c:type="GimpPDBStatusType">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="849">Return status of PDB calls.</doc>
      <member name="execution_error"
              value="0"
              c:identifier="GIMP_PDB_EXECUTION_ERROR"
              glib:nick="execution-error"
              glib:name="GIMP_PDB_EXECUTION_ERROR">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="851">Execution error</doc>
      </member>
      <member name="calling_error"
              value="1"
              c:identifier="GIMP_PDB_CALLING_ERROR"
              glib:nick="calling-error"
              glib:name="GIMP_PDB_CALLING_ERROR">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="852">Calling error</doc>
      </member>
      <member name="pass_through"
              value="2"
              c:identifier="GIMP_PDB_PASS_THROUGH"
              glib:nick="pass-through"
              glib:name="GIMP_PDB_PASS_THROUGH">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="853">Pass through</doc>
      </member>
      <member name="success"
              value="3"
              c:identifier="GIMP_PDB_SUCCESS"
              glib:nick="success"
              glib:name="GIMP_PDB_SUCCESS">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="854">Success</doc>
      </member>
      <member name="cancel"
              value="4"
              c:identifier="GIMP_PDB_CANCEL"
              glib:nick="cancel"
              glib:name="GIMP_PDB_CANCEL">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="855">User cancel</doc>
      </member>
    </enumeration>
    <constant name="PIXPIPE_MAXDIM" value="4" c:type="GIMP_PIXPIPE_MAXDIM">
      <source-position filename="libgimpbase/gimpparasiteio.h" line="39"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <enumeration name="PaintApplicationMode"
                 glib:type-name="GimpPaintApplicationMode"
                 glib:get-type="gimp_paint_application_mode_get_type"
                 c:type="GimpPaintApplicationMode">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="791">Paint application modes.</doc>
      <member name="constant"
              value="0"
              c:identifier="GIMP_PAINT_CONSTANT"
              glib:nick="constant"
              glib:name="GIMP_PAINT_CONSTANT">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="793">Constant</doc>
      </member>
      <member name="incremental"
              value="1"
              c:identifier="GIMP_PAINT_INCREMENTAL"
              glib:nick="incremental"
              glib:name="GIMP_PAINT_INCREMENTAL">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="794">Incremental</doc>
      </member>
    </enumeration>
    <class name="Palette"
           c:symbol-prefix="palette"
           c:type="GimpPalette"
           parent="Resource"
           glib:type-name="GimpPalette"
           glib:get-type="gimp_palette_get_type"
           glib:type-struct="PaletteClass">
      <doc xml:space="preserve"
           filename="libgimp/gimppalette_pdb.c"
           line="30">Installable object, a small set of colors a user can choose from.</doc>
      <source-position filename="libgimp/gimppalette.h" line="38"/>
      <implements name="ConfigInterface"/>
      <constructor name="new" c:identifier="gimp_palette_new" version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimppalette_pdb.c"
             line="39">Creates a new palette

Creates a new palette. The new palette has no color entries. You
must add color entries for a user to choose. The actual name might
be different than the requested name, when the requested name is
already in use.</doc>
        <source-position filename="libgimp/gimppalette_pdb.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppalette_pdb.c"
               line="50">The palette.</doc>
          <type name="Palette" c:type="GimpPalette*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppalette_pdb.c"
                 line="41">The requested name of the new palette.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_by_name"
                c:identifier="gimp_palette_get_by_name"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimppalette_pdb.c"
             line="78">Returns the palette with the given name.

Returns an existing palette having the given name. Returns %NULL
when no palette exists of that name.</doc>
        <source-position filename="libgimp/gimppalette_pdb.h" line="36"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgimp/gimppalette_pdb.c"
               line="87">The palette.</doc>
          <type name="Palette" c:type="GimpPalette*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppalette_pdb.c"
                 line="80">The name of the palette.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <method name="add_entry"
              c:identifier="gimp_palette_add_entry"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimppalette_pdb.c"
             line="265">Appends an entry to the palette.

Appends an entry to the palette. Neither color nor name must be
unique within the palette. When name is the empty string, this sets
the entry name to \"Untitled\". Returns the index of the entry.
Returns an error when palette is not editable.</doc>
        <source-position filename="libgimp/gimppalette_pdb.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppalette_pdb.c"
               line="279">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="palette" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppalette_pdb.c"
                 line="267">The palette.</doc>
            <type name="Palette" c:type="GimpPalette*"/>
          </instance-parameter>
          <parameter name="entry_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppalette_pdb.c"
                 line="268">A name for the entry.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppalette_pdb.c"
                 line="269">The color for the added entry.</doc>
            <type name="Gegl.Color" c:type="GeglColor*"/>
          </parameter>
          <parameter name="entry_num"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimppalette_pdb.c"
                 line="270">The index of the added entry.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_entry"
              c:identifier="gimp_palette_delete_entry"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimppalette_pdb.c"
             line="316">Deletes an entry from the palette.

This function will fail and return %FALSE if the index is out or
range or if the palette is not editable.
Additionally if the palette belongs to an indexed image, it will
only be possible to delete palette colors not in use in the image.</doc>
        <source-position filename="libgimp/gimppalette_pdb.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppalette_pdb.c"
               line="328">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="palette" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppalette_pdb.c"
                 line="318">The palette.</doc>
            <type name="Palette" c:type="GimpPalette*"/>
          </instance-parameter>
          <parameter name="entry_num" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppalette_pdb.c"
                 line="319">The index of the entry to delete.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="entry_get_color"
              c:identifier="gimp_palette_entry_get_color"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimppalette_pdb.c"
             line="357">Gets the color of an entry in the palette.

Returns the color of the entry at the given zero-based index into
the palette. Returns %NULL when the index is out of range.</doc>
        <source-position filename="libgimp/gimppalette_pdb.h" line="48"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimppalette_pdb.c"
               line="367">The color at the index.</doc>
          <type name="Gegl.Color" c:type="GeglColor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="palette" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppalette_pdb.c"
                 line="359">The palette.</doc>
            <type name="Palette" c:type="GimpPalette*"/>
          </instance-parameter>
          <parameter name="entry_num" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppalette_pdb.c"
                 line="360">The index of the entry to get the color of.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="entry_get_name"
              c:identifier="gimp_palette_entry_get_name"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimppalette_pdb.c"
             line="440">Gets the name of an entry in the palette.

Gets the name of the entry at the zero-based index into the palette.
Returns an error when the index is out of range.</doc>
        <source-position filename="libgimp/gimppalette_pdb.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppalette_pdb.c"
               line="451">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="palette" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppalette_pdb.c"
                 line="442">The palette.</doc>
            <type name="Palette" c:type="GimpPalette*"/>
          </instance-parameter>
          <parameter name="entry_num" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppalette_pdb.c"
                 line="443">The entry to get.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="entry_name"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimppalette_pdb.c"
                 line="444">The name of the entry.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="entry_set_color"
              c:identifier="gimp_palette_entry_set_color"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimppalette_pdb.c"
             line="397">Sets the color of an entry in the palette.

Sets the color of the entry at the zero-based index into the
palette. Returns an error when the index is out of range. Returns an
error when the palette is not editable.</doc>
        <source-position filename="libgimp/gimppalette_pdb.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppalette_pdb.c"
               line="409">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="palette" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppalette_pdb.c"
                 line="399">The palette.</doc>
            <type name="Palette" c:type="GimpPalette*"/>
          </instance-parameter>
          <parameter name="entry_num" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppalette_pdb.c"
                 line="400">The entry to get.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppalette_pdb.c"
                 line="401">The new color.</doc>
            <type name="Gegl.Color" c:type="GeglColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="entry_set_name"
              c:identifier="gimp_palette_entry_set_name"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimppalette_pdb.c"
             line="486">Sets the name of an entry in the palette.

Sets the name of the entry at the zero-based index into the palette.
Returns an error if the index is out or range. Returns an error if
the palette is not editable.</doc>
        <source-position filename="libgimp/gimppalette_pdb.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppalette_pdb.c"
               line="498">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="palette" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppalette_pdb.c"
                 line="488">The palette.</doc>
            <type name="Palette" c:type="GimpPalette*"/>
          </instance-parameter>
          <parameter name="entry_num" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppalette_pdb.c"
                 line="489">The entry to get.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="entry_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppalette_pdb.c"
                 line="490">The new name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_color_count"
              c:identifier="gimp_palette_get_color_count"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimppalette_pdb.c"
             line="115">Get the count of colors in the palette.

Returns the number of colors in the palette.</doc>
        <source-position filename="libgimp/gimppalette_pdb.h" line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppalette_pdb.c"
               line="123">The number of colors in the palette.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="palette" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppalette_pdb.c"
                 line="117">The palette.</doc>
            <type name="Palette" c:type="GimpPalette*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_colors"
              c:identifier="gimp_palette_get_colors"
              version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimppalette_pdb.c"
             line="151">Gets colors in the palette.

Returns an array of colors in the palette. Free the returned array
with gimp_color_array_free().</doc>
        <source-position filename="libgimp/gimppalette_pdb.h" line="38"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimppalette_pdb.c"
               line="160">
         The colors in the palette.</doc>
          <array c:type="GeglColor**">
            <type name="Gegl.Color" c:type="GeglColor*"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="palette" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppalette_pdb.c"
                 line="153">The palette.</doc>
            <type name="Palette" c:type="GimpPalette*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_columns"
              c:identifier="gimp_palette_get_columns"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimppalette_pdb.c"
             line="189">Gets the number of columns used to display the palette

Gets the preferred number of columns to display the palette.</doc>
        <source-position filename="libgimp/gimppalette_pdb.h" line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppalette_pdb.c"
               line="197">The number of columns used to display this palette.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="palette" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppalette_pdb.c"
                 line="191">The palette.</doc>
            <type name="Palette" c:type="GimpPalette*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_columns"
              c:identifier="gimp_palette_set_columns"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimppalette_pdb.c"
             line="225">Sets the number of columns used to display the palette

Set the number of colors shown per row when the palette is
displayed. Returns an error when the palette is not editable. The
maximum allowed value is 64.</doc>
        <source-position filename="libgimp/gimppalette_pdb.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppalette_pdb.c"
               line="236">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="palette" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppalette_pdb.c"
                 line="227">The palette.</doc>
            <type name="Palette" c:type="GimpPalette*"/>
          </instance-parameter>
          <parameter name="columns" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppalette_pdb.c"
                 line="228">The new number of columns.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="PaletteClass"
            c:type="GimpPaletteClass"
            glib:is-gtype-struct-for="Palette">
      <source-position filename="libgimp/gimppalette.h" line="38"/>
      <field name="parent_class">
        <type name="ResourceClass" c:type="GimpResourceClass"/>
      </field>
    </record>
    <class name="ParamArray"
           c:symbol-prefix="param_array"
           parent="GObject.ParamSpecBoxed"
           glib:type-name="GimpParamArray"
           glib:get-type="gimp_param_array_get_type"
           glib:fundamental="1">
    </class>
    <class name="ParamBrush"
           c:symbol-prefix="param_brush"
           parent="ParamResource"
           glib:type-name="GimpParamBrush"
           glib:get-type="gimp_param_brush_get_type"
           glib:fundamental="1">
    </class>
    <class name="ParamChannel"
           c:symbol-prefix="param_channel"
           parent="ParamDrawable"
           glib:type-name="GimpParamChannel"
           glib:get-type="gimp_param_channel_get_type"
           glib:fundamental="1">
    </class>
    <class name="ParamChoice"
           c:symbol-prefix="param_choice"
           parent="GObject.ParamSpecBoxed"
           glib:type-name="GimpParamChoice"
           glib:get-type="gimp_param_choice_get_type"
           glib:fundamental="1">
    </class>
    <class name="ParamColor"
           c:symbol-prefix="param_color"
           parent="ParamObject"
           glib:type-name="GimpParamColor"
           glib:get-type="gimp_param_color_get_type"
           glib:fundamental="1">
    </class>
    <class name="ParamConfigPath"
           c:symbol-prefix="param_config_path"
           parent="GObject.ParamSpecString"
           glib:type-name="GimpParamConfigPath"
           glib:get-type="gimp_param_config_path_get_type"
           glib:fundamental="1">
    </class>
    <class name="ParamDisplay"
           c:symbol-prefix="param_display"
           parent="GObject.ParamSpecObject"
           glib:type-name="GimpParamDisplay"
           glib:get-type="gimp_param_display_get_type"
           glib:fundamental="1">
    </class>
    <class name="ParamDrawable"
           c:symbol-prefix="param_drawable"
           parent="ParamItem"
           glib:type-name="GimpParamDrawable"
           glib:get-type="gimp_param_drawable_get_type"
           glib:fundamental="1">
    </class>
    <class name="ParamExportOptions"
           c:symbol-prefix="param_export_options"
           parent="GObject.ParamSpecBoxed"
           glib:type-name="GimpParamExportOptions"
           glib:get-type="gimp_param_export_options_get_type"
           glib:fundamental="1">
    </class>
    <class name="ParamFloatArray"
           c:symbol-prefix="param_float_array"
           parent="ParamArray"
           glib:type-name="GimpParamFloatArray"
           glib:get-type="gimp_param_float_array_get_type"
           glib:fundamental="1">
    </class>
    <class name="ParamFont"
           c:symbol-prefix="param_font"
           parent="ParamResource"
           glib:type-name="GimpParamFont"
           glib:get-type="gimp_param_font_get_type"
           glib:fundamental="1">
    </class>
    <class name="ParamGradient"
           c:symbol-prefix="param_gradient"
           parent="ParamResource"
           glib:type-name="GimpParamGradient"
           glib:get-type="gimp_param_gradient_get_type"
           glib:fundamental="1">
    </class>
    <class name="ParamGroupLayer"
           c:symbol-prefix="param_group_layer"
           parent="ParamLayer"
           glib:type-name="GimpParamGroupLayer"
           glib:get-type="gimp_param_group_layer_get_type"
           glib:fundamental="1">
    </class>
    <class name="ParamImage"
           c:symbol-prefix="param_image"
           parent="GObject.ParamSpecObject"
           glib:type-name="GimpParamImage"
           glib:get-type="gimp_param_image_get_type"
           glib:fundamental="1">
    </class>
    <class name="ParamInt32Array"
           c:symbol-prefix="param_int32_array"
           parent="ParamArray"
           glib:type-name="GimpParamInt32Array"
           glib:get-type="gimp_param_int32_array_get_type"
           glib:fundamental="1">
    </class>
    <class name="ParamItem"
           c:symbol-prefix="param_item"
           parent="GObject.ParamSpecObject"
           glib:type-name="GimpParamItem"
           glib:get-type="gimp_param_item_get_type"
           glib:fundamental="1">
    </class>
    <class name="ParamLayer"
           c:symbol-prefix="param_layer"
           parent="ParamDrawable"
           glib:type-name="GimpParamLayer"
           glib:get-type="gimp_param_layer_get_type"
           glib:fundamental="1">
    </class>
    <class name="ParamLayerMask"
           c:symbol-prefix="param_layer_mask"
           parent="ParamChannel"
           glib:type-name="GimpParamLayerMask"
           glib:get-type="gimp_param_layer_mask_get_type"
           glib:fundamental="1">
    </class>
    <class name="ParamMatrix2"
           c:symbol-prefix="param_matrix2"
           parent="GObject.ParamSpecBoxed"
           glib:type-name="GimpParamMatrix2"
           glib:get-type="gimp_param_matrix2_get_type"
           glib:fundamental="1">
    </class>
    <class name="ParamMatrix3"
           c:symbol-prefix="param_matrix3"
           parent="GObject.ParamSpecBoxed"
           glib:type-name="GimpParamMatrix3"
           glib:get-type="gimp_param_matrix3_get_type"
           glib:fundamental="1">
    </class>
    <class name="ParamMemsize"
           c:symbol-prefix="param_memsize"
           parent="GObject.ParamSpecUInt64"
           glib:type-name="GimpParamMemsize"
           glib:get-type="gimp_param_memsize_get_type"
           glib:fundamental="1">
    </class>
    <class name="ParamObject"
           c:symbol-prefix="param_object"
           parent="GObject.ParamSpecObject"
           abstract="1"
           glib:type-name="GimpParamObject"
           glib:get-type="gimp_param_object_get_type"
           glib:fundamental="1">
    </class>
    <class name="ParamObjectArray"
           c:symbol-prefix="param_object_array"
           parent="GObject.ParamSpecBoxed"
           glib:type-name="GimpParamObjectArray"
           glib:get-type="gimp_param_object_array_get_type"
           glib:fundamental="1">
    </class>
    <class name="ParamPalette"
           c:symbol-prefix="param_palette"
           parent="ParamResource"
           glib:type-name="GimpParamPalette"
           glib:get-type="gimp_param_palette_get_type"
           glib:fundamental="1">
    </class>
    <class name="ParamParasite"
           c:symbol-prefix="param_parasite"
           parent="GObject.ParamSpecBoxed"
           glib:type-name="GimpParamParasite"
           glib:get-type="gimp_param_parasite_get_type"
           glib:fundamental="1">
    </class>
    <class name="ParamPath"
           c:symbol-prefix="param_path"
           parent="ParamItem"
           glib:type-name="GimpParamPath"
           glib:get-type="gimp_param_path_get_type"
           glib:fundamental="1">
    </class>
    <class name="ParamPattern"
           c:symbol-prefix="param_pattern"
           parent="ParamResource"
           glib:type-name="GimpParamPattern"
           glib:get-type="gimp_param_pattern_get_type"
           glib:fundamental="1">
    </class>
    <class name="ParamResource"
           c:symbol-prefix="param_resource"
           parent="ParamObject"
           glib:type-name="GimpParamResource"
           glib:get-type="gimp_param_resource_get_type"
           glib:fundamental="1">
    </class>
    <class name="ParamSelection"
           c:symbol-prefix="param_selection"
           parent="ParamChannel"
           glib:type-name="GimpParamSelection"
           glib:get-type="gimp_param_selection_get_type"
           glib:fundamental="1">
    </class>
    <record name="ParamSpecArray" c:type="GimpParamSpecArray">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="228"/>
      <field name="parent_instance" writable="1">
        <type name="GObject.ParamSpecBoxed" c:type="GParamSpecBoxed"/>
      </field>
    </record>
    <record name="ParamSpecBrush" c:type="GimpParamSpecBrush">
      <source-position filename="libgimp/gimpparamspecs.h" line="384"/>
      <field name="parent_instance" writable="1">
        <type name="ParamSpecResource" c:type="GimpParamSpecResource"/>
      </field>
    </record>
    <record name="ParamSpecChannel" c:type="GimpParamSpecChannel">
      <source-position filename="libgimp/gimpparamspecs.h" line="215"/>
      <field name="parent_instance" writable="1">
        <type name="ParamSpecDrawable" c:type="GimpParamSpecDrawable"/>
      </field>
    </record>
    <record name="ParamSpecChoice" c:type="GimpParamSpecChoice">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="109"/>
      <field name="parent_instance" writable="1">
        <type name="GObject.ParamSpecBoxed" c:type="GParamSpecBoxed"/>
      </field>
      <field name="default_value" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="choice" writable="1">
        <type name="Choice" c:type="GimpChoice*"/>
      </field>
    </record>
    <record name="ParamSpecColor"
            c:type="GimpParamSpecColor"
            disguised="1"
            opaque="1">
      <source-position filename="libgimpcolor/gimpcolortypes.h" line="36"/>
      <function name="from_string"
                c:identifier="gimp_param_spec_color_from_string">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolor.c"
             line="539">Creates a new #GParamSpec instance specifying a #GeglColor property.</doc>
        <source-position filename="libgimpcolor/gimpcolor.h" line="89"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolor.c"
               line="550">a newly created parameter specification</doc>
          <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolor.c"
                 line="541">canonical name of the property specified</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolor.c"
                 line="542">nick name for the property specified</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolor.c"
                 line="543">description of the property specified</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="has_alpha" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolor.c"
                 line="544">%TRUE if the alpha channel has relevance.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="default_color_string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolor.c"
                 line="545">the default value for the property specified</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolor.c"
                 line="546">flags for the property specified</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </function>
      <function name="has_alpha"
                c:identifier="gimp_param_spec_color_has_alpha"
                version="2.4">
        <source-position filename="libgimpcolor/gimpcolor.h" line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolor.c"
               line="581">%TRUE if the alpha channel is relevant.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolor.c"
                 line="579">a #GParamSpec to hold an #GeglColor value.</doc>
            <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="ParamSpecDisplay" c:type="GimpParamSpecDisplay">
      <source-position filename="libgimp/gimpparamspecs.h" line="325"/>
      <field name="parent_instance" writable="1">
        <type name="GObject.ParamSpecObject" c:type="GParamSpecObject"/>
      </field>
      <field name="none_ok" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </record>
    <record name="ParamSpecDrawable" c:type="GimpParamSpecDrawable">
      <source-position filename="libgimp/gimpparamspecs.h" line="107"/>
      <field name="parent_instance" writable="1">
        <type name="ParamSpecItem" c:type="GimpParamSpecItem"/>
      </field>
    </record>
    <record name="ParamSpecExportOptions" c:type="GimpParamSpecExportOptions">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="466"/>
      <field name="parent_instance" writable="1">
        <type name="GObject.ParamSpecBoxed" c:type="GParamSpecBoxed"/>
      </field>
      <field name="capabilities" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
    </record>
    <record name="ParamSpecFloatArray" c:type="GimpParamSpecFloatArray">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="306"/>
      <field name="parent_instance" writable="1">
        <type name="ParamSpecArray" c:type="GimpParamSpecArray"/>
      </field>
    </record>
    <record name="ParamSpecFont" c:type="GimpParamSpecFont">
      <source-position filename="libgimp/gimpparamspecs.h" line="500"/>
      <field name="parent_instance" writable="1">
        <type name="ParamSpecResource" c:type="GimpParamSpecResource"/>
      </field>
    </record>
    <record name="ParamSpecGradient" c:type="GimpParamSpecGradient">
      <source-position filename="libgimp/gimpparamspecs.h" line="442"/>
      <field name="parent_instance" writable="1">
        <type name="ParamSpecResource" c:type="GimpParamSpecResource"/>
      </field>
    </record>
    <record name="ParamSpecGroupLayer" c:type="GimpParamSpecGroupLayer">
      <source-position filename="libgimp/gimpparamspecs.h" line="188"/>
      <field name="parent_instance" writable="1">
        <type name="ParamSpecLayer" c:type="GimpParamSpecLayer"/>
      </field>
    </record>
    <record name="ParamSpecImage" c:type="GimpParamSpecImage">
      <source-position filename="libgimp/gimpparamspecs.h" line="51"/>
      <field name="parent_instance" writable="1">
        <type name="GObject.ParamSpecObject" c:type="GParamSpecObject"/>
      </field>
      <field name="none_ok" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </record>
    <record name="ParamSpecInt32Array" c:type="GimpParamSpecInt32Array">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="261"/>
      <field name="parent_instance" writable="1">
        <type name="ParamSpecArray" c:type="GimpParamSpecArray"/>
      </field>
    </record>
    <record name="ParamSpecItem" c:type="GimpParamSpecItem">
      <source-position filename="libgimp/gimpparamspecs.h" line="80"/>
      <field name="parent_instance" writable="1">
        <type name="GObject.ParamSpecObject" c:type="GParamSpecObject"/>
      </field>
      <field name="none_ok" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </record>
    <record name="ParamSpecLayer" c:type="GimpParamSpecLayer">
      <source-position filename="libgimp/gimpparamspecs.h" line="134"/>
      <field name="parent_instance" writable="1">
        <type name="ParamSpecDrawable" c:type="GimpParamSpecDrawable"/>
      </field>
    </record>
    <record name="ParamSpecLayerMask" c:type="GimpParamSpecLayerMask">
      <source-position filename="libgimp/gimpparamspecs.h" line="242"/>
      <field name="parent_instance" writable="1">
        <type name="ParamSpecChannel" c:type="GimpParamSpecChannel"/>
      </field>
    </record>
    <record name="ParamSpecObject" c:type="GimpParamSpecObject">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="143"/>
      <field name="parent_instance" writable="1">
        <type name="GObject.ParamSpecObject" c:type="GParamSpecObject"/>
      </field>
      <field name="_default_value" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject*"/>
      </field>
      <field name="_has_default" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <function name="duplicate"
                c:identifier="gimp_param_spec_object_duplicate">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparamspecs.c"
             line="367">This function duplicates @pspec appropriately, depending on the
accurate spec type.</doc>
        <source-position filename="libgimpbase/gimpparamspecs.h" line="180"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="374">a newly created param spec.</doc>
          <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
        </return-value>
        <parameters>
          <parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpparamspecs.c"
                 line="369">a [struct@Gimp.ParamSpecObject].</doc>
            <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_default"
                c:identifier="gimp_param_spec_object_get_default">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparamspecs.c"
             line="305">Get the default object value of the param spec.

If the @pspec has been registered with a specific default (which can
be verified with [func@Gimp.ParamSpecObject.has_default]), it will be
returned, though some specific subtypes may support returning dynamic
default (e.g. based on context).</doc>
        <source-position filename="libgimpbase/gimpparamspecs.h" line="175"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="316">the default value.</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpparamspecs.c"
                 line="307">a #GObject #GParamSpec</doc>
            <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </function>
      <function name="has_default"
                c:identifier="gimp_param_spec_object_has_default">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparamspecs.c"
             line="348">This function tells whether a default was set, typically with
[func@Gimp.ParamSpecObject.set_default] or any other way. It
does not guarantee that the default is an actual object (it may be
%NULL if valid as a default).</doc>
        <source-position filename="libgimpbase/gimpparamspecs.h" line="178"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="357">whether a default value was set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpparamspecs.c"
                 line="350">a #GObject #GParamSpec</doc>
            <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_default"
                c:identifier="gimp_param_spec_object_set_default">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparamspecs.c"
             line="326">Set the default object value of the param spec. This will switch the
`has_default` flag so that [func@Gimp.ParamSpecObject.has_default]
will now return %TRUE.

A %NULL @default_value still counts as a default (unless the specific
@pspec does not allow %NULL as a default).</doc>
        <source-position filename="libgimpbase/gimpparamspecs.h" line="176"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpparamspecs.c"
                 line="328">a #GObject #GParamSpec</doc>
            <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
          </parameter>
          <parameter name="default_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpparamspecs.c"
                 line="329">a default value.</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="ParamSpecObjectArray" c:type="GimpParamSpecObjectArray">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="425"/>
      <field name="parent_instance" writable="1">
        <type name="GObject.ParamSpecBoxed" c:type="GParamSpecBoxed"/>
      </field>
      <field name="object_type" writable="1">
        <type name="GType" c:type="GType"/>
      </field>
    </record>
    <record name="ParamSpecObjectClass" c:type="GimpParamSpecObjectClass">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="171"/>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ParamSpecClass" c:type="GParamSpecClass"/>
      </field>
      <field name="duplicate" introspectable="0">
        <callback name="duplicate" introspectable="0">
          <source-position filename="libgimpbase/gimpparamspecs.h" line="157"/>
          <return-value>
            <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
          </return-value>
          <parameters>
            <parameter name="pspec" transfer-ownership="none">
              <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_default" introspectable="0">
        <callback name="get_default" introspectable="0">
          <source-position filename="libgimpbase/gimpparamspecs.h" line="158"/>
          <return-value>
            <type name="GObject.Object" c:type="GObject*"/>
          </return-value>
          <parameters>
            <parameter name="pspec" transfer-ownership="none">
              <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gimp_reserved0" introspectable="0">
        <callback name="_gimp_reserved0">
          <source-position filename="libgimpbase/gimpparamspecs.h" line="161"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved1" introspectable="0">
        <callback name="_gimp_reserved1">
          <source-position filename="libgimpbase/gimpparamspecs.h" line="162"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved2" introspectable="0">
        <callback name="_gimp_reserved2">
          <source-position filename="libgimpbase/gimpparamspecs.h" line="163"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved3" introspectable="0">
        <callback name="_gimp_reserved3">
          <source-position filename="libgimpbase/gimpparamspecs.h" line="164"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved4" introspectable="0">
        <callback name="_gimp_reserved4">
          <source-position filename="libgimpbase/gimpparamspecs.h" line="165"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved5" introspectable="0">
        <callback name="_gimp_reserved5">
          <source-position filename="libgimpbase/gimpparamspecs.h" line="166"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved6" introspectable="0">
        <callback name="_gimp_reserved6">
          <source-position filename="libgimpbase/gimpparamspecs.h" line="167"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved7" introspectable="0">
        <callback name="_gimp_reserved7">
          <source-position filename="libgimpbase/gimpparamspecs.h" line="168"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved8" introspectable="0">
        <callback name="_gimp_reserved8">
          <source-position filename="libgimpbase/gimpparamspecs.h" line="169"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved9" introspectable="0">
        <callback name="_gimp_reserved9">
          <source-position filename="libgimpbase/gimpparamspecs.h" line="170"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ParamSpecPalette" c:type="GimpParamSpecPalette">
      <source-position filename="libgimp/gimpparamspecs.h" line="471"/>
      <field name="parent_instance" writable="1">
        <type name="ParamSpecResource" c:type="GimpParamSpecResource"/>
      </field>
    </record>
    <record name="ParamSpecParasite"
            c:type="GimpParamSpecParasite"
            disguised="1"
            opaque="1">
      <source-position filename="libgimpbase/gimpparasite.h" line="51"/>
    </record>
    <record name="ParamSpecPath" c:type="GimpParamSpecPath">
      <source-position filename="libgimp/gimpparamspecs.h" line="296"/>
      <field name="parent_instance" writable="1">
        <type name="ParamSpecItem" c:type="GimpParamSpecItem"/>
      </field>
    </record>
    <record name="ParamSpecPattern" c:type="GimpParamSpecPattern">
      <source-position filename="libgimp/gimpparamspecs.h" line="413"/>
      <field name="parent_instance" writable="1">
        <type name="ParamSpecResource" c:type="GimpParamSpecResource"/>
      </field>
    </record>
    <record name="ParamSpecResource" c:type="GimpParamSpecResource">
      <source-position filename="libgimp/gimpparamspecs.h" line="354"/>
      <field name="parent_instance" writable="1">
        <type name="ParamSpecObject" c:type="GimpParamSpecObject"/>
      </field>
      <field name="none_ok" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="default_to_context" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </record>
    <record name="ParamSpecSelection" c:type="GimpParamSpecSelection">
      <source-position filename="libgimp/gimpparamspecs.h" line="269"/>
      <field name="parent_instance" writable="1">
        <type name="ParamSpecChannel" c:type="GimpParamSpecChannel"/>
      </field>
    </record>
    <record name="ParamSpecTextLayer" c:type="GimpParamSpecTextLayer">
      <source-position filename="libgimp/gimpparamspecs.h" line="161"/>
      <field name="parent_instance" writable="1">
        <type name="ParamSpecLayer" c:type="GimpParamSpecLayer"/>
      </field>
    </record>
    <record name="ParamSpecUnit" c:type="GimpParamSpecUnit">
      <source-position filename="libgimpbase/gimpunit.h" line="102"/>
      <field name="parent_instance" writable="1">
        <type name="ParamSpecObject" c:type="GimpParamSpecObject"/>
      </field>
      <field name="allow_pixel" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="allow_percent" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="default_value" writable="1">
        <type name="Unit" c:type="GimpUnit*"/>
      </field>
    </record>
    <record name="ParamSpecValueArray" c:type="GimpParamSpecValueArray">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpvaluearray.h"
           line="89">A #GParamSpec derived structure that contains the meta data for
value array properties.</doc>
      <source-position filename="libgimpbase/gimpvaluearray.h" line="103"/>
      <field name="parent_instance" writable="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpvaluearray.h"
             line="91">private #GParamSpec portion</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec"/>
      </field>
      <field name="element_spec" writable="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpvaluearray.h"
             line="92">the #GParamSpec of the array elements</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </field>
      <field name="fixed_n_elements" writable="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpvaluearray.h"
             line="93">default length of the array</doc>
        <type name="gint" c:type="gint"/>
      </field>
    </record>
    <class name="ParamTextLayer"
           c:symbol-prefix="param_text_layer"
           parent="ParamLayer"
           glib:type-name="GimpParamTextLayer"
           glib:get-type="gimp_param_text_layer_get_type"
           glib:fundamental="1">
    </class>
    <class name="ParamUnit"
           c:symbol-prefix="param_unit"
           parent="ParamObject"
           glib:type-name="GimpParamUnit"
           glib:get-type="gimp_param_unit_get_type"
           glib:fundamental="1">
    </class>
    <class name="ParamValueArray"
           c:symbol-prefix="param_value_array"
           parent="GObject.ParamSpecBoxed"
           glib:type-name="GimpParamValueArray"
           glib:get-type="gimp_param_value_array_get_type"
           glib:fundamental="1">
    </class>
    <record name="Parasite"
            c:type="GimpParasite"
            glib:type-name="GimpParasite"
            glib:get-type="gimp_parasite_get_type"
            c:symbol-prefix="parasite">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparasite.c"
           line="41">Arbitrary pieces of data which can be attached to various GIMP objects.</doc>
      <source-position filename="libgimpbase/gimpparasite.h" line="87"/>
      <field name="name" writable="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparasite.h"
             line="75">the parasite name, USE A UNIQUE PREFIX</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="flags" writable="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparasite.h"
             line="76">the parasite flags, like save in XCF etc.</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="size" writable="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparasite.h"
             line="77">the parasite size in bytes</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="data" writable="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparasite.h"
             line="78">the parasite data, the owner os the parasite is responsible
  for tracking byte order and internal structure</doc>
        <array length="2" zero-terminated="0" c:type="gpointer">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <constructor name="new" c:identifier="gimp_parasite_new">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparasite.c"
             line="213">Creates a new parasite and save @data which may be a proper text (in
which case you may want to set @size as strlen(@data) + 1) or not.</doc>
        <source-position filename="libgimpbase/gimpparasite.h" line="90"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparasite.c"
               line="223">a new #GimpParasite.</doc>
          <type name="Parasite" c:type="GimpParasite*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpparasite.c"
                 line="215">the new #GimpParasite name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpparasite.c"
                 line="216">see libgimpbase/gimpparasite.h macros.</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpparasite.c"
                 line="217">the size of @data, including a terminal %NULL byte if needed.</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpparasite.c"
                 line="218">the data to save in a parasite.</doc>
            <array length="2" zero-terminated="0" c:type="gconstpointer">
              <type name="gchar"/>
            </array>
          </parameter>
        </parameters>
      </constructor>
      <method name="compare" c:identifier="gimp_parasite_compare">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparasite.c"
             line="307">Compare parasite's contents.</doc>
        <source-position filename="libgimpbase/gimpparasite.h" line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparasite.c"
               line="314">%TRUE if @a and @b have same contents, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpparasite.c"
                 line="309">a #GimpParasite</doc>
            <type name="Parasite" c:type="const GimpParasite*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpparasite.c"
                 line="310">a #GimpParasite</doc>
            <type name="Parasite" c:type="const GimpParasite*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="gimp_parasite_copy">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparasite.c"
             line="289">Create a new parasite with all the same values.</doc>
        <source-position filename="libgimpbase/gimpparasite.h" line="96"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparasite.c"
               line="295">a newly allocated #GimpParasite with same contents.</doc>
          <type name="Parasite" c:type="GimpParasite*"/>
        </return-value>
        <parameters>
          <instance-parameter name="parasite" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpparasite.c"
                 line="291">a #GimpParasite</doc>
            <type name="Parasite" c:type="const GimpParasite*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="gimp_parasite_free">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparasite.c"
             line="249">Free @parasite's dynamically allocated memory.</doc>
        <source-position filename="libgimpbase/gimpparasite.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="parasite" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpparasite.c"
                 line="251">a #GimpParasite</doc>
            <type name="Parasite" c:type="GimpParasite*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_data" c:identifier="gimp_parasite_get_data">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparasite.c"
             line="412">Gets the parasite's data. It may not necessarily be text, nor is it
guaranteed to be %NULL-terminated. It is your responsibility to know
how to deal with this data.
Even when you expect a nul-terminated string, it is advised not to
assume the returned data to be, as parasites can be edited by third
party scripts. You may end up reading out-of-bounds data. So you
should only ignore @num_bytes when you all you care about is checking
if the parasite has contents.</doc>
        <source-position filename="libgimpbase/gimpparasite.h" line="110"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparasite.c"
               line="426">parasite's data.</doc>
          <array length="0" zero-terminated="0" c:type="gconstpointer">
            <type name="gchar"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="parasite" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpparasite.c"
                 line="414">a #GimpParasite</doc>
            <type name="Parasite" c:type="const GimpParasite*"/>
          </instance-parameter>
          <parameter name="num_bytes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpparasite.c"
                 line="415">size of the returned data.</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_flags" c:identifier="gimp_parasite_get_flags">
        <source-position filename="libgimpbase/gimpparasite.h" line="107"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparasite.c"
               line="339">@parasite flags.</doc>
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="parasite" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpparasite.c"
                 line="337">a #GimpParasite</doc>
            <type name="Parasite" c:type="const GimpParasite*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="gimp_parasite_get_name">
        <source-position filename="libgimpbase/gimpparasite.h" line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparasite.c"
               line="401">@parasite's name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="parasite" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpparasite.c"
                 line="399">a #GimpParasite</doc>
            <type name="Parasite" c:type="const GimpParasite*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_flag" c:identifier="gimp_parasite_has_flag">
        <source-position filename="libgimpbase/gimpparasite.h" line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparasite.c"
               line="385">%TRUE if @parasite has @flag set, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="parasite" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpparasite.c"
                 line="382">a #GimpParasite</doc>
            <type name="Parasite" c:type="const GimpParasite*"/>
          </instance-parameter>
          <parameter name="flag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpparasite.c"
                 line="383">a parasite flag</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_persistent" c:identifier="gimp_parasite_is_persistent">
        <source-position filename="libgimpbase/gimpparasite.h" line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparasite.c"
               line="354">%TRUE if @parasite is persistent, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="parasite" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpparasite.c"
                 line="352">a #GimpParasite</doc>
            <type name="Parasite" c:type="const GimpParasite*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_type" c:identifier="gimp_parasite_is_type">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparasite.c"
             line="270">Compare parasite's names.</doc>
        <source-position filename="libgimpbase/gimpparasite.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparasite.c"
               line="277">%TRUE if @parasite is named @name, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="parasite" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpparasite.c"
                 line="272">a #GimpParasite</doc>
            <type name="Parasite" c:type="const GimpParasite*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpparasite.c"
                 line="273">a parasite name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_undoable" c:identifier="gimp_parasite_is_undoable">
        <source-position filename="libgimpbase/gimpparasite.h" line="104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparasite.c"
               line="369">%TRUE if @parasite is undoable, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="parasite" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpparasite.c"
                 line="367">a #GimpParasite</doc>
            <type name="Parasite" c:type="const GimpParasite*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <class name="Path"
           c:symbol-prefix="path"
           c:type="GimpPath"
           parent="Item"
           glib:type-name="GimpPath"
           glib:get-type="gimp_path_get_type"
           glib:type-struct="PathClass">
      <doc xml:space="preserve"
           filename="libgimp/gimppath_pdb.c"
           line="30">Functions for querying and manipulating path.</doc>
      <source-position filename="libgimp/gimppath.h" line="35"/>
      <constructor name="new" c:identifier="gimp_path_new" version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimppath_pdb.c"
             line="39">Creates a new empty path object.

Creates a new empty path object. The path object needs to be added
to the image using gimp_image_insert_path().</doc>
        <source-position filename="libgimp/gimppath_pdb.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppath_pdb.c"
               line="49">
         the current path object, 0 if no path exists in the image.</doc>
          <type name="Path" c:type="GimpPath*"/>
        </return-value>
        <parameters>
          <parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="41">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="42">the name of the new path object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_text_layer"
                   c:identifier="gimp_path_new_from_text_layer"
                   version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimppath_pdb.c"
             line="80">Creates a new path object from a text layer.

Creates a new path object from a text layer. The path object needs
to be added to the image using gimp_image_insert_path().</doc>
        <source-position filename="libgimp/gimppath_pdb.h" line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppath_pdb.c"
               line="90">The path of the text layer.</doc>
          <type name="Path" c:type="GimpPath*"/>
        </return-value>
        <parameters>
          <parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="82">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </parameter>
          <parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="83">The text layer.</doc>
            <type name="Layer" c:type="GimpLayer*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="free" c:identifier="gimp_path_free">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpenv.c"
             line="1111">This function frees the memory allocated for the list and the strings
it contains.</doc>
        <source-position filename="libgimpbase/gimpenv.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpenv.c"
                 line="1113">
       A list of directories as returned by gimp_path_parse().</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="filename"/>
            </type>
          </parameter>
        </parameters>
      </function>
      <function name="get_by_id"
                c:identifier="gimp_path_get_by_id"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimppath.c"
             line="47">Returns a #GimpPath representing @path_id. This function
calls gimp_item_get_by_id() and returns the item if it is a path
or %NULL otherwise.</doc>
        <source-position filename="libgimp/gimppath.h" line="38"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgimp/gimppath.c"
               line="55">a #GimpPath for @path_id
         or %NULL if @path_id does not represent a valid
         path. The object belongs to libgimp and you must not
         modify or unref it.</doc>
          <type name="Path" c:type="GimpPath*"/>
        </return-value>
        <parameters>
          <parameter name="path_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath.c"
                 line="49">The path id.</doc>
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_user_writable_dir"
                c:identifier="gimp_path_get_user_writable_dir">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpenv.c"
             line="1125">Note that you have to g_free() the returned string.</doc>
        <source-position filename="libgimpbase/gimpenv.h" line="78"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpenv.c"
               line="1132">The first directory in @path where the user has write permission.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpenv.c"
                 line="1127">
       A list of directories as returned by gimp_path_parse().</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="filename"/>
            </type>
          </parameter>
        </parameters>
      </function>
      <function name="parse" c:identifier="gimp_path_parse">
        <source-position filename="libgimpbase/gimpenv.h" line="71"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpenv.c"
               line="996">
            A #GList of all directories in @path.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="filename"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpenv.c"
                 line="990">A list of directories separated by #G_SEARCHPATH_SEPARATOR.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="max_paths" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpenv.c"
                 line="991">The maximum number of directories to return.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="check" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpenv.c"
                 line="992">%TRUE if you want the directories to be checked.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="check_failed"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpenv.c"
                 line="993">
                  Returns a #GList of path elements for which the check failed.</doc>
            <type name="GLib.List" c:type="GList**">
              <type name="filename"/>
            </type>
          </parameter>
        </parameters>
      </function>
      <function name="to_str" c:identifier="gimp_path_to_str">
        <source-position filename="libgimpbase/gimpenv.h" line="75"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpenv.c"
               line="1080">
         A searchpath string separated by #G_SEARCHPATH_SEPARATOR.</doc>
          <type name="filename" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpenv.c"
                 line="1077">
       A list of directories as returned by gimp_path_parse().</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="filename"/>
            </type>
          </parameter>
        </parameters>
      </function>
      <method name="bezier_stroke_conicto"
              c:identifier="gimp_path_bezier_stroke_conicto"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimppath_pdb.c"
             line="910">Extends a bezier stroke with a conic bezier spline.

Extends a bezier stroke with a conic bezier spline. Actually a cubic
bezier spline gets added that realizes the shape of a conic bezier
spline.</doc>
        <source-position filename="libgimp/gimppath_pdb.h" line="104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppath_pdb.c"
               line="925">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="912">The path object.</doc>
            <type name="Path" c:type="GimpPath*"/>
          </instance-parameter>
          <parameter name="stroke_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="913">The stroke ID.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="x0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="914">The x-coordinate of the control point.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="915">The y-coordinate of the control point.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="x1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="916">The x-coordinate of the end point.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="917">The y-coordinate of the end point.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="bezier_stroke_cubicto"
              c:identifier="gimp_path_bezier_stroke_cubicto"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimppath_pdb.c"
             line="962">Extends a bezier stroke with a cubic bezier spline.

Extends a bezier stroke with a cubic bezier spline.</doc>
        <source-position filename="libgimp/gimppath_pdb.h" line="110"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppath_pdb.c"
               line="977">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="964">The path object.</doc>
            <type name="Path" c:type="GimpPath*"/>
          </instance-parameter>
          <parameter name="stroke_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="965">The stroke ID.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="x0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="966">The x-coordinate of the first control point.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="967">The y-coordinate of the first control point.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="x1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="968">The x-coordinate of the second control point.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="969">The y-coordinate of the second control point.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="x2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="970">The x-coordinate of the end point.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="971">The y-coordinate of the end point.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="bezier_stroke_lineto"
              c:identifier="gimp_path_bezier_stroke_lineto"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimppath_pdb.c"
             line="866">Extends a bezier stroke with a lineto.

Extends a bezier stroke with a lineto.</doc>
        <source-position filename="libgimp/gimppath_pdb.h" line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppath_pdb.c"
               line="877">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="868">The path object.</doc>
            <type name="Path" c:type="GimpPath*"/>
          </instance-parameter>
          <parameter name="stroke_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="869">The stroke ID.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="x0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="870">The x-coordinate of the lineto.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="871">The y-coordinate of the lineto.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="bezier_stroke_new_ellipse"
              c:identifier="gimp_path_bezier_stroke_new_ellipse"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimppath_pdb.c"
             line="1018">Adds a bezier stroke describing an ellipse the path object.

Adds a bezier stroke describing an ellipse on the path object.</doc>
        <source-position filename="libgimp/gimppath_pdb.h" line="118"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppath_pdb.c"
               line="1031">The resulting stroke.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="1020">The path object.</doc>
            <type name="Path" c:type="GimpPath*"/>
          </instance-parameter>
          <parameter name="x0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="1021">The x-coordinate of the center.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="1022">The y-coordinate of the center.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="radius_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="1023">The radius in x direction.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="radius_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="1024">The radius in y direction.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="angle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="1025">The angle the x-axis of the ellipse (radians, counterclockwise).</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="bezier_stroke_new_moveto"
              c:identifier="gimp_path_bezier_stroke_new_moveto"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimppath_pdb.c"
             line="824">Adds a bezier stroke with a single moveto to the path object.

Adds a bezier stroke with a single moveto to the path object.</doc>
        <source-position filename="libgimp/gimppath_pdb.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppath_pdb.c"
               line="834">The resulting stroke.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="826">The path object.</doc>
            <type name="Path" c:type="GimpPath*"/>
          </instance-parameter>
          <parameter name="x0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="827">The x-coordinate of the moveto.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="828">The y-coordinate of the moveto.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="gimp_path_copy" version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimppath_pdb.c"
             line="120">Copy a path object.

This procedure copies the specified path object and returns the
copy.</doc>
        <source-position filename="libgimp/gimppath_pdb.h" line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppath_pdb.c"
               line="129">The newly copied path object.</doc>
          <type name="Path" c:type="GimpPath*"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="122">The path object to copy.</doc>
            <type name="Path" c:type="GimpPath*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_strokes"
              c:identifier="gimp_path_get_strokes"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimppath_pdb.c"
             line="157">List the strokes associated with the passed path.

Returns an Array with the stroke-IDs associated with the passed
path.</doc>
        <source-position filename="libgimp/gimppath_pdb.h" line="40"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimppath_pdb.c"
               line="167">
         List of the strokes belonging to the path.
         The returned value must be freed with g_free().</doc>
          <array length="0" zero-terminated="0" c:type="gint*">
            <type name="gint32"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="159">The path object.</doc>
            <type name="Path" c:type="GimpPath*"/>
          </instance-parameter>
          <parameter name="num_strokes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="160">The number of strokes returned.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_stroke"
              c:identifier="gimp_path_remove_stroke"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimppath_pdb.c"
             line="315">remove the stroke from a path object.

Remove the stroke from a path object.</doc>
        <source-position filename="libgimp/gimppath_pdb.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppath_pdb.c"
               line="324">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="317">The path object.</doc>
            <type name="Path" c:type="GimpPath*"/>
          </instance-parameter>
          <parameter name="stroke_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="318">The stroke ID.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="stroke_close"
              c:identifier="gimp_path_stroke_close"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimppath_pdb.c"
             line="353">closes the specified stroke.

Closes the specified stroke.</doc>
        <source-position filename="libgimp/gimppath_pdb.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppath_pdb.c"
               line="362">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="355">The path object.</doc>
            <type name="Path" c:type="GimpPath*"/>
          </instance-parameter>
          <parameter name="stroke_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="356">The stroke ID.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="stroke_flip"
              c:identifier="gimp_path_stroke_flip"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimppath_pdb.c"
             line="564">flips the given stroke.

Rotates the given stroke around given center by angle (in degrees).</doc>
        <source-position filename="libgimp/gimppath_pdb.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppath_pdb.c"
               line="575">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="566">The path object.</doc>
            <type name="Path" c:type="GimpPath*"/>
          </instance-parameter>
          <parameter name="stroke_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="567">The stroke ID.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="flip_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="568">Flip orientation, either vertical or horizontal.</doc>
            <type name="OrientationType" c:type="GimpOrientationType"/>
          </parameter>
          <parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="569">axis coordinate about which to flip, in pixels.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="stroke_flip_free"
              c:identifier="gimp_path_stroke_flip_free"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimppath_pdb.c"
             line="608">flips the given stroke about an arbitrary axis.

Flips the given stroke about an arbitrary axis. Axis is defined by
two coordinates in the image (in pixels), through which the flipping
axis passes.</doc>
        <source-position filename="libgimp/gimppath_pdb.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppath_pdb.c"
               line="623">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="610">The path object.</doc>
            <type name="Path" c:type="GimpPath*"/>
          </instance-parameter>
          <parameter name="stroke_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="611">The stroke ID.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="x1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="612">X coordinate of the first point of the flipping axis.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="613">Y coordinate of the first point of the flipping axis.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="x2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="614">X coordinate of the second point of the flipping axis.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="615">Y coordinate of the second point of the flipping axis.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="stroke_get_length"
              c:identifier="gimp_path_stroke_get_length"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimppath_pdb.c"
             line="203">Measure the length of the given stroke.

Measure the length of the given stroke.</doc>
        <source-position filename="libgimp/gimppath_pdb.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppath_pdb.c"
               line="213">The length (in pixels) of the given stroke.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="205">The path object.</doc>
            <type name="Path" c:type="GimpPath*"/>
          </instance-parameter>
          <parameter name="stroke_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="206">The stroke ID.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="precision" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="207">The precision used for approximating straight portions of the stroke.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="stroke_get_point_at_dist"
              c:identifier="gimp_path_stroke_get_point_at_dist"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimppath_pdb.c"
             line="245">Get point at a specified distance along the stroke.

This will return the x,y position of a point at a given distance
along the stroke. The distance will be obtained by first digitizing
the curve internally and then walking along the curve. For a closed
stroke the start of the path is the first point on the path that was
created. This might not be obvious. If the stroke is not long
enough, a \"valid\" flag will be FALSE.</doc>
        <source-position filename="libgimp/gimppath_pdb.h" line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppath_pdb.c"
               line="265">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="247">The path object.</doc>
            <type name="Path" c:type="GimpPath*"/>
          </instance-parameter>
          <parameter name="stroke_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="248">The stroke ID.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="249">The given distance.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="precision" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="250">The precision used for the approximation.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="x_point"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="251">The x position of the point.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="y_point"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="252">The y position of the point.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="slope"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="253">The slope (dy / dx) at the specified point.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="valid"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="254">Indicator for the validity of the returned data.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="stroke_get_points"
              c:identifier="gimp_path_stroke_get_points"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimppath_pdb.c"
             line="660">returns the control points of a stroke.

returns the control points of a stroke. The interpretation of the
coordinates returned depends on the type of the stroke. For Gimp 2.4
this is always a bezier stroke, where the coordinates are the
control points.</doc>
        <source-position filename="libgimp/gimppath_pdb.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppath_pdb.c"
               line="675">type of the stroke (always GIMP_PATH_STROKE_TYPE_BEZIER for now).</doc>
          <type name="PathStrokeType" c:type="GimpPathStrokeType"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="662">The path object.</doc>
            <type name="Path" c:type="GimpPath*"/>
          </instance-parameter>
          <parameter name="stroke_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="663">The stroke ID.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="num_points"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="664">The number of floats returned.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="controlpoints"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="665">List of the control points for the stroke (x0, y0, x1, y1, ...).</doc>
            <array length="1" zero-terminated="0" c:type="gdouble**">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="closed"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="666">Whether the stroke is closed or not.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="stroke_interpolate"
              c:identifier="gimp_path_stroke_interpolate"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimppath_pdb.c"
             line="770">returns polygonal approximation of the stroke.

returns polygonal approximation of the stroke.</doc>
        <source-position filename="libgimp/gimppath_pdb.h" line="92"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimppath_pdb.c"
               line="782">
         List of the coords along the path (x0, y0, x1, y1, ...).
         The returned value must be freed with g_free().</doc>
          <array length="2" zero-terminated="0" c:type="gdouble*">
            <type name="gdouble"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="772">The path object.</doc>
            <type name="Path" c:type="GimpPath*"/>
          </instance-parameter>
          <parameter name="stroke_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="773">The stroke ID.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="precision" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="774">The precision used for the approximation.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="num_coords"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="775">The number of floats returned.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="closed"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="776">Whether the stroke is closed or not.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="stroke_new_from_points"
              c:identifier="gimp_path_stroke_new_from_points"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimppath_pdb.c"
             line="715">Adds a stroke of a given type to the path object.

Adds a stroke of a given type to the path object. The coordinates of
the control points can be specified. For now only strokes of the
type GIMP_PATH_STROKE_TYPE_BEZIER are supported. The control points
are specified as a pair of float values for the x- and y-coordinate.
The Bezier stroke type needs a multiple of three control points.
Each Bezier segment endpoint (anchor, A) has two additional control
points (C) associated. They are specified in the order CACCACCAC...</doc>
        <source-position filename="libgimp/gimppath_pdb.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppath_pdb.c"
               line="733">The stroke ID of the newly created stroke.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="717">The path object.</doc>
            <type name="Path" c:type="GimpPath*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="718">type of the stroke (always GIMP_PATH_STROKE_TYPE_BEZIER for now).</doc>
            <type name="PathStrokeType" c:type="GimpPathStrokeType"/>
          </parameter>
          <parameter name="num_points" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="719">The number of elements in the array, i.e. the number of controlpoints in the stroke * 2 (x- and y-coordinate).</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="controlpoints" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="720">List of the x- and y-coordinates of the control points.</doc>
            <array length="1" zero-terminated="0" c:type="const gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="closed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="721">Whether the stroke is to be closed or not.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="stroke_reverse"
              c:identifier="gimp_path_stroke_reverse"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimppath_pdb.c"
             line="391">reverses the specified stroke.

Reverses the specified stroke.</doc>
        <source-position filename="libgimp/gimppath_pdb.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppath_pdb.c"
               line="400">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="393">The path object.</doc>
            <type name="Path" c:type="GimpPath*"/>
          </instance-parameter>
          <parameter name="stroke_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="394">The stroke ID.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="stroke_rotate"
              c:identifier="gimp_path_stroke_rotate"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimppath_pdb.c"
             line="517">rotates the given stroke.

Rotates the given stroke around given center by angle (in degrees).</doc>
        <source-position filename="libgimp/gimppath_pdb.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppath_pdb.c"
               line="529">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="519">The path object.</doc>
            <type name="Path" c:type="GimpPath*"/>
          </instance-parameter>
          <parameter name="stroke_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="520">The stroke ID.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="center_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="521">X coordinate of the rotation center.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="center_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="522">Y coordinate of the rotation center.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="angle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="523">angle to rotate about.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="stroke_scale"
              c:identifier="gimp_path_stroke_scale"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimppath_pdb.c"
             line="473">scales the given stroke.

Scale the given stroke.</doc>
        <source-position filename="libgimp/gimppath_pdb.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppath_pdb.c"
               line="484">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="475">The path object.</doc>
            <type name="Path" c:type="GimpPath*"/>
          </instance-parameter>
          <parameter name="stroke_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="476">The stroke ID.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="scale_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="477">Scale factor in x direction.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="scale_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="478">Scale factor in y direction.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="stroke_translate"
              c:identifier="gimp_path_stroke_translate"
              version="2.4">
        <doc xml:space="preserve"
             filename="libgimp/gimppath_pdb.c"
             line="429">translate the given stroke.

Translate the given stroke.</doc>
        <source-position filename="libgimp/gimppath_pdb.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppath_pdb.c"
               line="440">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="431">The path object.</doc>
            <type name="Path" c:type="GimpPath*"/>
          </instance-parameter>
          <parameter name="stroke_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="432">The stroke ID.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="off_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="433">Offset in x direction.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="off_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppath_pdb.c"
                 line="434">Offset in y direction.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="PathClass"
            c:type="GimpPathClass"
            glib:is-gtype-struct-for="Path">
      <source-position filename="libgimp/gimppath.h" line="35"/>
      <field name="parent_class">
        <type name="ItemClass" c:type="GimpItemClass"/>
      </field>
    </record>
    <enumeration name="PathStrokeType"
                 glib:type-name="GimpPathStrokeType"
                 glib:get-type="gimp_path_stroke_type_get_type"
                 c:type="GimpPathStrokeType">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="1310">Possible type of strokes in path objects.</doc>
      <member name="bezier"
              value="0"
              c:identifier="GIMP_PATH_STROKE_TYPE_BEZIER"
              glib:nick="bezier"
              glib:name="GIMP_PATH_STROKE_TYPE_BEZIER">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1312">A bezier stroke</doc>
      </member>
    </enumeration>
    <class name="Pattern"
           c:symbol-prefix="pattern"
           c:type="GimpPattern"
           parent="Resource"
           glib:type-name="GimpPattern"
           glib:get-type="gimp_pattern_get_type"
           glib:type-struct="PatternClass">
      <doc xml:space="preserve"
           filename="libgimp/gimppattern_pdb.c"
           line="30">Installable object used by fill and clone tools.</doc>
      <source-position filename="libgimp/gimppattern.h" line="38"/>
      <implements name="ConfigInterface"/>
      <function name="get_by_name"
                c:identifier="gimp_pattern_get_by_name"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimppattern_pdb.c"
             line="39">Returns the pattern with the given name.

Returns an existing pattern having the given name. Returns %NULL
when no pattern exists of that name.</doc>
        <source-position filename="libgimp/gimppattern_pdb.h" line="35"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgimp/gimppattern_pdb.c"
               line="48">The pattern.</doc>
          <type name="Pattern" c:type="GimpPattern*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppattern_pdb.c"
                 line="41">The name of the pattern.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_buffer" c:identifier="gimp_pattern_get_buffer">
        <doc xml:space="preserve"
             filename="libgimp/gimppattern.c"
             line="69">Gets pixel data of the pattern within the bounding box specified by @max_width
and @max_height. The data will be scaled down so that it fits within this
size without changing its ratio. If the pattern is smaller than this size to
begin with, it will not be scaled up.

If @max_width or @max_height are %NULL, the buffer is returned in the pattern's
native size.

Make sure you called [func@Gegl.init] before calling any function using
`GEGL`.</doc>
        <source-position filename="libgimp/gimppattern.h" line="42"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimppattern.c"
               line="87">a [class@Gegl.Buffer].</doc>
          <type name="Gegl.Buffer" c:type="GeglBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pattern" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppattern.c"
                 line="71">a [class@Pattern].</doc>
            <type name="Pattern" c:type="GimpPattern*"/>
          </instance-parameter>
          <parameter name="max_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppattern.c"
                 line="72">a maximum width for the returned buffer.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="max_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppattern.c"
                 line="73">a maximum height for the returned buffer.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppattern.c"
                 line="74">an optional Babl format.</doc>
            <type name="Babl.Object" c:type="const Babl*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_info"
              c:identifier="gimp_pattern_get_info"
              version="2.2">
        <doc xml:space="preserve"
             filename="libgimp/gimppattern_pdb.c"
             line="76">Gets information about the pattern.

Gets information about the pattern: the pattern extents (width and
height) and bytes per pixel.</doc>
        <source-position filename="libgimp/gimppattern_pdb.h" line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppattern_pdb.c"
               line="88">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pattern" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimppattern_pdb.c"
                 line="78">The pattern.</doc>
            <type name="Pattern" c:type="GimpPattern*"/>
          </instance-parameter>
          <parameter name="width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimppattern_pdb.c"
                 line="79">The pattern width.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimppattern_pdb.c"
                 line="80">The pattern height.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="bpp"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimppattern_pdb.c"
                 line="81">The pattern bpp.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="PatternClass"
            c:type="GimpPatternClass"
            glib:is-gtype-struct-for="Pattern">
      <source-position filename="libgimp/gimppattern.h" line="38"/>
      <field name="parent_class">
        <type name="ResourceClass" c:type="GimpResourceClass"/>
      </field>
    </record>
    <record name="PixPipeParams" c:type="GimpPixPipeParams">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparasiteio.h"
           line="43">PLease somebody help documenting this.</doc>
      <source-position filename="libgimpbase/gimpparasiteio.h" line="70"/>
      <field name="step" writable="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparasiteio.h"
             line="45">Step</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="ncells" writable="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparasiteio.h"
             line="46">Number of cells</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="dim" writable="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparasiteio.h"
             line="47">Dimension</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="cols" writable="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparasiteio.h"
             line="48">Columns</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="rows" writable="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparasiteio.h"
             line="49">Rows</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="cellwidth" writable="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparasiteio.h"
             line="50">Cell width</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="cellheight" writable="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparasiteio.h"
             line="51">Cell height</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="placement" writable="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparasiteio.h"
             line="52">Placement</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="rank" writable="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparasiteio.h"
             line="53">Rank</doc>
        <array zero-terminated="0" fixed-size="4">
          <type name="gint" c:type="gint"/>
        </array>
      </field>
      <field name="selection" writable="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparasiteio.h"
             line="54">Selection</doc>
        <array zero-terminated="0" fixed-size="4">
          <type name="utf8" c:type="gchar*"/>
        </array>
      </field>
    </record>
    <enumeration name="PixbufTransparency" c:type="GimpPixbufTransparency">
      <doc xml:space="preserve"
           filename="libgimp/gimptypes.h"
           line="66">How to deal with transparency when creating thubnail pixbufs from
images and drawables.</doc>
      <source-position filename="libgimp/gimptypes.h" line="80"/>
      <member name="keep_alpha"
              value="0"
              c:identifier="GIMP_PIXBUF_KEEP_ALPHA">
        <doc xml:space="preserve"
             filename="libgimp/gimptypes.h"
             line="68">Create a pixbuf with alpha</doc>
      </member>
      <member name="small_checks"
              value="1"
              c:identifier="GIMP_PIXBUF_SMALL_CHECKS">
        <doc xml:space="preserve"
             filename="libgimp/gimptypes.h"
             line="69">Show transparency as small checks</doc>
      </member>
      <member name="large_checks"
              value="2"
              c:identifier="GIMP_PIXBUF_LARGE_CHECKS">
        <doc xml:space="preserve"
             filename="libgimp/gimptypes.h"
             line="70">Show transparency as large checks</doc>
      </member>
    </enumeration>
    <class name="PlugIn"
           c:symbol-prefix="plug_in"
           c:type="GimpPlugIn"
           version="3.0"
           parent="GObject.Object"
           glib:type-name="GimpPlugIn"
           glib:get-type="gimp_plug_in_get_type"
           glib:type-struct="PlugInClass">
      <doc xml:space="preserve"
           filename="libgimp/gimpplugin.c"
           line="40">The base class for plug-ins to derive from.

GimpPlugIn manages the plug-in's [class@Procedure] objects. The procedures a
plug-in implements are registered with GIMP by returning a list of their
names from either [vfunc@GimpPlugIn.query_procedures] or
[vfunc@GimpPlugIn.init_procedures].

Every GIMP plug-in has to be implemented as a subclass and make it known to
the libgimp infrastructure and the main GIMP application by passing its
`GType` to [func@MAIN].

[func@MAIN] passes the 'argc' and 'argv' of the platform's main() function,
along with the `GType`, to [func@main], which creates an instance of the
plug-in's `GimpPlugIn` subclass and calls its virtual functions, depending
on how the plug-in was called by GIMP.

There are 3 different ways GIMP calls a plug-in: "query", "init" and "run".

The plug-in is called in "query" mode once after it was installed, or when
the cached plug-in information in the config file "pluginrc" needs to be
recreated. In "query" mode, [vfunc@GimpPlugIn.query_procedures] is called
and returns a list of procedure names the plug-in implements. This is the
"normal" place to register procedures, because the existence of most
procedures doesn't depend on things that change between GIMP sessions.

The plug-in is called in "init" mode at each GIMP startup, and
[vfunc@PlugIn.init_procedures] is called and returns a list of procedure
names this plug-in implements. This only happens if the plug-in actually
implements [vfunc@GimpPlugIn.init_procedures]. A plug-in only needs to
implement init_procedures if the existence of its procedures can change
between GIMP sessions, for example if they depend on the presence of
external tools, or hardware like scanners, or online services, or whatever
variable circumstances.

In order to register the plug-in's procedures with the main GIMP application
in the plug-in's "query" and "init" modes, [class@PlugIn] calls
[vfunc@PlugIn.create_procedure] on all procedure names in the exact order of
the list returned by [vfunc@PlugIn.query_procedures] or
[vfunc@PlugIn.init_procedures] and then registers the returned
[class@Procedure].

The plug-in is called in "run" mode whenever one of the procedures it
implements is called by either the main GIMP application or any other
plug-in. In "run" mode, one of the procedure names returned by
[vfunc@PlugIn.query_procedures] or [vfunc@PlugIn.init_procedures] is passed
to [vfunc@PlugIn.create_procedure] which must return a [class@Procedure] for
the passed name. The procedure is then executed by calling
[method@Procedure.run].

In any of the three modes, [vfunc@PlugIn.quit] is called before the plug-in
process exits, so the plug-in can perform whatever cleanup necessary.</doc>
      <source-position filename="libgimp/gimpplugin.h" line="184"/>
      <function name="directory" c:identifier="gimp_plug_in_directory">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpenv.c"
             line="583">Returns the default top directory for GIMP plug-ins and modules. If
the environment variable GIMP3_PLUGINDIR exists, that is used.  It
should be an absolute pathname. Otherwise, on Unix the compile-time
defined directory is used. On Windows, the installation directory
as deduced from the executable's full filename is used.

Note that the actual directories used for GIMP plug-ins and modules
can be overridden by the user in the preferences dialog.

In config files such as gimprc, the string ${gimp_plug_in_dir}
expands to this directory.

The returned string is owned by GIMP and must not be modified or
freed. The returned string is in the encoding used for filenames by
GLib, which isn't necessarily UTF-8. (On Windows it always is
UTF-8.)</doc>
        <source-position filename="libgimpbase/gimpenv.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpenv.c"
               line="603">The top directory for GIMP plug_ins and modules.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
      </function>
      <function name="directory_file"
                c:identifier="gimp_plug_in_directory_file"
                version="2.10"
                introspectable="0">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpenv.c"
             line="883">Returns a #GFile in the plug-in directory, or the plug-in directory
itself if @first_element is %NULL.

See also: gimp_plug_in_directory().</doc>
        <source-position filename="libgimpbase/gimpenv.h" line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpenv.c"
               line="897">
         a new @GFile for the path, Free with g_object_unref().</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <parameter name="first_element" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpenv.c"
                 line="885">the first element of a path to a file in the
                plug-in directory, or %NULL.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpenv.c"
                 line="887">a %NULL terminated list of the remaining elements of the path
      to the file.</doc>
            <varargs/>
          </parameter>
        </parameters>
      </function>
      <function name="error_quark" c:identifier="gimp_plug_in_error_quark">
        <doc xml:space="preserve"
             filename="libgimp/gimpplugin.c"
             line="101">Generic #GQuark error domain for plug-ins. Plug-ins are welcome to
create their own domain when they want to handle advanced error
handling. Often, you just want to pass an error message to the core.
This domain can be used for such simple usage.

See #GError for information on error domains.</doc>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <virtual-method name="create_procedure">
        <doc xml:space="preserve"
             filename="libgimp/gimpplugin.h"
             line="87">This method must be overridden by all plug-ins and return a newly
allocated #GimpProcedure named @name.

This method will be called for every @name as returned by
[vfunc@PlugIn.query_procedures] and [vfunc@PlugIn.init_procedures] so care
must be taken to handle them all.  Upon procedure registration,
[vfunc@PlugIn.create_procedure] will be called in the order of the lists
returned by [vfunc@PlugIn.query_procedures] and
[vfunc@PlugIn.init_procedures]</doc>
        <source-position filename="libgimp/gimpplugin.h" line="104"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpplugin.h"
               line="102">the procedure to be registered or executed by @plug_in.</doc>
          <type name="Procedure" c:type="GimpProcedure*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plug_in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpplugin.h"
                 line="89">a #GimpPlugIn.</doc>
            <type name="PlugIn" c:type="GimpPlugIn*"/>
          </instance-parameter>
          <parameter name="procedure_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpplugin.h"
                 line="90">procedure name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="init_procedures">
        <doc xml:space="preserve"
             filename="libgimp/gimpplugin.h"
             line="66">This method can be overridden by all plug-ins to return a newly allocated
list of allocated strings naming procedures registered by this plug-in.
It is different from [vfunc@PlugIn.query_procedures] in that init happens
at every startup, whereas query happens only once in the life of a plug-in
(right after installation or update). Hence [vfunc@PlugIn.init_procedures]
typically returns procedures dependent to runtime conditions (such as the
presence of a third-party tool), whereas [vfunc@PlugIn.query_procedures]
would usually return procedures that are always available unconditionally.

Most of the time, you only want to override
[vfunc@PlugIn.query_procedures] and leave [vfunc@PlugIn.init_procedures]
untouched.</doc>
        <source-position filename="libgimp/gimpplugin.h" line="85"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpplugin.h"
               line="83">the names of the procedures registered by @plug_in.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="plug_in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpplugin.h"
                 line="68">a #GimpPlugIn.</doc>
            <type name="PlugIn" c:type="GimpPlugIn*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="query_procedures">
        <doc xml:space="preserve"
             filename="libgimp/gimpplugin.h"
             line="53">This method can be overridden by all plug-ins to return a newly allocated
list of allocated strings naming the procedures registered by this
plug-in. See documentation of [vfunc@PlugIn.init_procedures] for
differences.</doc>
        <source-position filename="libgimp/gimpplugin.h" line="64"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpplugin.h"
               line="62">the names of the procedures registered by @plug_in.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="plug_in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpplugin.h"
                 line="55">a #GimpPlugIn.</doc>
            <type name="PlugIn" c:type="GimpPlugIn*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="quit">
        <doc xml:space="preserve"
             filename="libgimp/gimpplugin.h"
             line="107">This method can be overridden by a plug-in which needs to perform some
actions upon quitting.</doc>
        <source-position filename="libgimp/gimpplugin.h" line="114"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plug_in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpplugin.h"
                 line="109">a #GimpPlugIn.</doc>
            <type name="PlugIn" c:type="GimpPlugIn*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_i18n" version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpplugin.h"
             line="116">This method can be overridden by all plug-ins to customize
internationalization of the plug-in.

This method will be called before initializing, querying or running
@procedure_name (respectively with [vfunc@PlugIn.init_procedures],
[vfunc@PlugIn.query_procedures] or with the `run()` function set in
`gimp_image_procedure_new()`).

By default, GIMP plug-ins look up gettext compiled message catalogs
in the subdirectory `locale/` under the plug-in folder (same folder
as `gimp_get_progname()`) with a text domain equal to the plug-in
name (regardless @procedure_name). It is unneeded to override this
method if you follow this localization scheme.

If you wish to disable localization or localize with another system,
simply set the method to %NULL, or possibly implement this method
to do something useful for your usage while returning %FALSE.

If you wish to tweak the @gettext_domain or the @catalog_dir, return
%TRUE and allocate appropriate @gettext_domain and/or @catalog_dir
(these use the default if set %NULL).

Note that @catalog_dir must be a relative path, encoded as UTF-8,
subdirectory of the directory of `gimp_get_progname()`.
The domain names "gimp30-std-plug-ins", "gimp30-script-fu" and
"gimp30-python" are reserved and can only be used with a %NULL
@catalog_dir. These will use the translation catalogs installed for
core plug-ins, so you are not expected to use these for your
plug-ins, except if you are making a core plug-in. More domain
names may become reserved so we discourage using a gettext domain
starting with "gimp30-".

When localizing your plug-in this way, GIMP also binds
@gettext_domain to the UTF-8 encoding.</doc>
        <source-position filename="libgimp/gimpplugin.h" line="169"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpplugin.h"
               line="163">%TRUE if this plug-in will use Gettext localization. You
         may return %FALSE if you wish to disable localization or
         set it up differently.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="plug_in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpplugin.h"
                 line="118">a #GimpPlugIn.</doc>
            <type name="PlugIn" c:type="GimpPlugIn*"/>
          </instance-parameter>
          <parameter name="procedure_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpplugin.h"
                 line="119">procedure name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="gettext_domain"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpplugin.h"
                 line="120">Gettext domain. If %NULL, it
                 defaults to the plug-in name as determined by the
                 directory the binary is called from.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="catalog_dir"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpplugin.h"
                 line="123">relative path to a
                 subdirectory of the plug-in folder containing the compiled
                 Gettext message catalogs. If %NULL, it defaults to
                 "locale/".</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_menu_branch"
              c:identifier="gimp_plug_in_add_menu_branch"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpplugin.c"
             line="497">Add a new sub-menu to the GIMP menus.

This function installs a sub-menu which does not belong to any
procedure at the location @menu_path.

For translations of @menu_label to work properly, @menu_label
should only be marked for translation but passed to this function
untranslated, for example using N_("Submenu"). GIMP will look up
the translation in the textdomain registered for the plug-in.

See also: gimp_procedure_add_menu_path().</doc>
        <source-position filename="libgimp/gimpplugin.h" line="193"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plug_in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpplugin.c"
                 line="499">A #GimpPlugIn</doc>
            <type name="PlugIn" c:type="GimpPlugIn*"/>
          </instance-parameter>
          <parameter name="menu_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpplugin.c"
                 line="500">The sub-menu's menu path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="menu_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpplugin.c"
                 line="501">The menu label of the sub-menu.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_temp_procedure"
              c:identifier="gimp_plug_in_add_temp_procedure"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpplugin.c"
             line="539">This function adds a temporary procedure to @plug_in. It is usually
called from a %GIMP_PDB_PROC_TYPE_EXTENSION procedure's
[vfunc@Procedure.run].

A temporary procedure is a procedure which is only available while
one of your plug-in's "real" procedures is running.

The procedure's type _must_ be
%GIMP_PDB_PROC_TYPE_TEMPORARY or the function will fail.

NOTE: Normally, plug-in communication is triggered by the plug-in
and the GIMP core only responds to the plug-in's requests. You must
explicitly enable receiving of temporary procedure run requests
using either [method@PlugIn.extension_enable] or
[method@PlugIn.extension_process]. See their respective documentation
for details.</doc>
        <source-position filename="libgimp/gimpplugin.h" line="197"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plug_in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpplugin.c"
                 line="541">A #GimpPlugIn</doc>
            <type name="PlugIn" c:type="GimpPlugIn*"/>
          </instance-parameter>
          <parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpplugin.c"
                 line="542">A #GimpProcedure of type %GIMP_PDB_PROC_TYPE_TEMPORARY.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </parameter>
        </parameters>
      </method>
      <method name="extension_enable"
              c:identifier="gimp_plug_in_extension_enable"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpplugin.c"
             line="677">Enables asynchronous processing of messages from the main GIMP
application.

Normally, a plug-in is not called by GIMP except for the call to
the procedure it implements. All subsequent communication is
triggered by the plug-in and all messages sent from GIMP to the
plug-in are just answers to requests the plug-in made.

If the plug-in however registered temporary procedures using
[method@PlugIn.add_temp_procedure], it needs to be able to receive
requests to execute them. Usually this will be done by running
[method@PlugIn.extension_process] in an endless loop.

If the plug-in cannot use [method@PlugIn.extension_process], i.e. if
it has a GUI and is hanging around in a [struct@GLib.MainLoop], it
must call [method@PlugIn.extension_enable].

Note that the plug-in does not need to be a
[enum@Gimp.PDBProcType.EXTENSION] to register temporary procedures.

See also: [method@PlugIn.add_temp_procedure].</doc>
        <source-position filename="libgimp/gimpplugin.h" line="206"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plug_in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpplugin.c"
                 line="679">A plug-in</doc>
            <type name="PlugIn" c:type="GimpPlugIn*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="extension_process"
              c:identifier="gimp_plug_in_extension_process"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpplugin.c"
             line="723">Processes one message sent by GIMP and returns.

Call this function in an endless loop after calling
gimp_procedure_extension_ready() to process requests for running
temporary procedures.

See [method@PlugIn.extension_enable] for an asynchronous way of
doing the same if running an endless loop is not an option.

See also: [method@PlugIn.add_temp_procedure].</doc>
        <source-position filename="libgimp/gimpplugin.h" line="207"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plug_in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpplugin.c"
                 line="725">A plug-in.</doc>
            <type name="PlugIn" c:type="GimpPlugIn*"/>
          </instance-parameter>
          <parameter name="timeout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpplugin.c"
                 line="726">The timeout (in ms) to use for the select() call.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pdb_error_handler"
              c:identifier="gimp_plug_in_get_pdb_error_handler"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpplugin.c"
             line="834">Retrieves the active error handler for procedure calls.

This procedure retrieves the currently active error handler for
procedure calls made by the calling plug-in. See
gimp_plugin_set_pdb_error_handler() for details.</doc>
        <source-position filename="libgimp/gimpplugin.h" line="213"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpplugin.c"
               line="844">Who is responsible for handling procedure call errors.</doc>
          <type name="PDBErrorHandler" c:type="GimpPDBErrorHandler"/>
        </return-value>
        <parameters>
          <instance-parameter name="plug_in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpplugin.c"
                 line="836">A plug-in</doc>
            <type name="PlugIn" c:type="GimpPlugIn*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_temp_procedure"
              c:identifier="gimp_plug_in_get_temp_procedure"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpplugin.c"
             line="642">This function retrieves a temporary procedure from @plug_in by the
procedure's @procedure_name.</doc>
        <source-position filename="libgimp/gimpplugin.h" line="203"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgimp/gimpplugin.c"
               line="650">The procedure if registered, or %NULL.</doc>
          <type name="Procedure" c:type="GimpProcedure*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plug_in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpplugin.c"
                 line="644">A #GimpPlugIn</doc>
            <type name="PlugIn" c:type="GimpPlugIn*"/>
          </instance-parameter>
          <parameter name="procedure_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpplugin.c"
                 line="645">The name of a [class@Procedure] added to @plug_in.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_temp_procedures"
              c:identifier="gimp_plug_in_get_temp_procedures"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpplugin.c"
             line="618">This function retrieves the list of temporary procedure of @plug_in as
added with [method@PlugIn.add_temp_procedure].</doc>
        <source-position filename="libgimp/gimpplugin.h" line="202"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpplugin.c"
               line="625">The list of
         procedures.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Procedure"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="plug_in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpplugin.c"
                 line="620">A plug-in</doc>
            <type name="PlugIn" c:type="GimpPlugIn*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_temp_procedure"
              c:identifier="gimp_plug_in_remove_temp_procedure"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpplugin.c"
             line="583">This function removes a temporary procedure from @plug_in by the
procedure's @procedure_name.</doc>
        <source-position filename="libgimp/gimpplugin.h" line="199"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plug_in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpplugin.c"
                 line="585">A #GimpPlugIn</doc>
            <type name="PlugIn" c:type="GimpPlugIn*"/>
          </instance-parameter>
          <parameter name="procedure_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpplugin.c"
                 line="586">The name of a [class@Procedure] added to @plug_in.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_help_domain"
              c:identifier="gimp_plug_in_set_help_domain"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpplugin.c"
             line="459">Set a help domain and path for the @plug_in.

This function registers user documentation for the calling plug-in
with the GIMP help system. The @domain_uri parameter points to the
root directory where the plug-in help is installed. For each
supported language there should be a file called 'gimp-help.xml'
that maps the help IDs to the actual help files.

This function can only be called in the
[vfunc@PlugIn.query_procedures] function of a plug-in.</doc>
        <source-position filename="libgimp/gimpplugin.h" line="189"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plug_in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpplugin.c"
                 line="461">A #GimpPlugIn.</doc>
            <type name="PlugIn" c:type="GimpPlugIn*"/>
          </instance-parameter>
          <parameter name="domain_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpplugin.c"
                 line="462">The XML namespace of the plug-in's help pages.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="domain_uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpplugin.c"
                 line="463">The root URI of the plug-in's help pages.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pdb_error_handler"
              c:identifier="gimp_plug_in_set_pdb_error_handler"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpplugin.c"
             line="807">Sets an error handler for procedure calls.

This procedure changes the way that errors in procedure calls are
handled. By default GIMP will raise an error dialog if a procedure
call made by a plug-in fails. Using this procedure the plug-in can
change this behavior. If the error handler is set to
%GIMP_PDB_ERROR_HANDLER_PLUGIN, then the plug-in is responsible for
calling gimp_pdb_get_last_error() and handling the error whenever
one if its procedure calls fails. It can do this by displaying the
error message or by forwarding it in its own return values.</doc>
        <source-position filename="libgimp/gimpplugin.h" line="210"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plug_in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpplugin.c"
                 line="809">A plug-in</doc>
            <type name="PlugIn" c:type="GimpPlugIn*"/>
          </instance-parameter>
          <parameter name="handler" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpplugin.c"
                 line="810">Who is responsible for handling procedure call errors.</doc>
            <type name="PDBErrorHandler" c:type="GimpPDBErrorHandler"/>
          </parameter>
        </parameters>
      </method>
      <property name="program-name"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="libgimp/gimpplugin.c"
             line="251">The program name as usually found on argv[0]</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="read-channel"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpplugin.c"
             line="264">The [struct@GLib.IOChannel] to read from GIMP</doc>
        <type name="GLib.IOChannel"/>
      </property>
      <property name="write-channel"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpplugin.c"
             line="277">The [struct@GLib.IOChannel] to write to GIMP</doc>
        <type name="GLib.IOChannel"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="PlugInClass"
            c:type="GimpPlugInClass"
            glib:is-gtype-struct-for="PlugIn"
            version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimpplugin.h"
           line="40">A class which every plug-in should subclass, while overriding
[vfunc@PlugIn.query_procedures] and/or [vfunc@PlugIn.init_procedures], as
well as [vfunc@PlugIn.create_procedure].</doc>
      <source-position filename="libgimp/gimpplugin.h" line="184"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="query_procedures">
        <callback name="query_procedures">
          <source-position filename="libgimp/gimpplugin.h" line="64"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpplugin.h"
                 line="62">the names of the procedures registered by @plug_in.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="utf8"/>
            </type>
          </return-value>
          <parameters>
            <parameter name="plug_in" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libgimp/gimpplugin.h"
                   line="55">a #GimpPlugIn.</doc>
              <type name="PlugIn" c:type="GimpPlugIn*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="init_procedures">
        <callback name="init_procedures">
          <source-position filename="libgimp/gimpplugin.h" line="85"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpplugin.h"
                 line="83">the names of the procedures registered by @plug_in.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="utf8"/>
            </type>
          </return-value>
          <parameters>
            <parameter name="plug_in" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libgimp/gimpplugin.h"
                   line="68">a #GimpPlugIn.</doc>
              <type name="PlugIn" c:type="GimpPlugIn*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create_procedure">
        <callback name="create_procedure">
          <source-position filename="libgimp/gimpplugin.h" line="104"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpplugin.h"
                 line="102">the procedure to be registered or executed by @plug_in.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </return-value>
          <parameters>
            <parameter name="plug_in" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libgimp/gimpplugin.h"
                   line="89">a #GimpPlugIn.</doc>
              <type name="PlugIn" c:type="GimpPlugIn*"/>
            </parameter>
            <parameter name="procedure_name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libgimp/gimpplugin.h"
                   line="90">procedure name.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="quit">
        <callback name="quit">
          <source-position filename="libgimp/gimpplugin.h" line="114"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="plug_in" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libgimp/gimpplugin.h"
                   line="109">a #GimpPlugIn.</doc>
              <type name="PlugIn" c:type="GimpPlugIn*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_i18n">
        <callback name="set_i18n">
          <source-position filename="libgimp/gimpplugin.h" line="169"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpplugin.h"
                 line="163">%TRUE if this plug-in will use Gettext localization. You
         may return %FALSE if you wish to disable localization or
         set it up differently.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="plug_in" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libgimp/gimpplugin.h"
                   line="118">a #GimpPlugIn.</doc>
              <type name="PlugIn" c:type="GimpPlugIn*"/>
            </parameter>
            <parameter name="procedure_name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libgimp/gimpplugin.h"
                   line="119">procedure name.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="gettext_domain"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       nullable="1">
              <doc xml:space="preserve"
                   filename="libgimp/gimpplugin.h"
                   line="120">Gettext domain. If %NULL, it
                 defaults to the plug-in name as determined by the
                 directory the binary is called from.</doc>
              <type name="utf8" c:type="gchar**"/>
            </parameter>
            <parameter name="catalog_dir"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       nullable="1">
              <doc xml:space="preserve"
                   filename="libgimp/gimpplugin.h"
                   line="123">relative path to a
                 subdirectory of the plug-in folder containing the compiled
                 Gettext message catalogs. If %NULL, it defaults to
                 "locale/".</doc>
              <type name="utf8" c:type="gchar**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gimp_reserved1" introspectable="0">
        <callback name="_gimp_reserved1">
          <source-position filename="libgimp/gimpplugin.h" line="176"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved2" introspectable="0">
        <callback name="_gimp_reserved2">
          <source-position filename="libgimp/gimpplugin.h" line="177"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved3" introspectable="0">
        <callback name="_gimp_reserved3">
          <source-position filename="libgimp/gimpplugin.h" line="178"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved4" introspectable="0">
        <callback name="_gimp_reserved4">
          <source-position filename="libgimp/gimpplugin.h" line="179"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved5" introspectable="0">
        <callback name="_gimp_reserved5">
          <source-position filename="libgimp/gimpplugin.h" line="180"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved6" introspectable="0">
        <callback name="_gimp_reserved6">
          <source-position filename="libgimp/gimpplugin.h" line="181"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved7" introspectable="0">
        <callback name="_gimp_reserved7">
          <source-position filename="libgimp/gimpplugin.h" line="182"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved8" introspectable="0">
        <callback name="_gimp_reserved8">
          <source-position filename="libgimp/gimpplugin.h" line="183"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="Precision"
                 version="2.10"
                 glib:type-name="GimpPrecision"
                 glib:get-type="gimp_precision_get_type"
                 c:type="GimpPrecision">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="873">Precisions for pixel encoding.</doc>
      <member name="u8_linear"
              value="100"
              c:identifier="GIMP_PRECISION_U8_LINEAR"
              glib:nick="u8-linear"
              glib:name="GIMP_PRECISION_U8_LINEAR">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="875">8-bit linear integer</doc>
      </member>
      <member name="u8_non_linear"
              value="150"
              c:identifier="GIMP_PRECISION_U8_NON_LINEAR"
              glib:nick="u8-non-linear"
              glib:name="GIMP_PRECISION_U8_NON_LINEAR">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="876">8-bit non-linear integer</doc>
      </member>
      <member name="u8_perceptual"
              value="175"
              c:identifier="GIMP_PRECISION_U8_PERCEPTUAL"
              glib:nick="u8-perceptual"
              glib:name="GIMP_PRECISION_U8_PERCEPTUAL">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="877">8-bit perceptual integer</doc>
      </member>
      <member name="u16_linear"
              value="200"
              c:identifier="GIMP_PRECISION_U16_LINEAR"
              glib:nick="u16-linear"
              glib:name="GIMP_PRECISION_U16_LINEAR">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="878">16-bit linear integer</doc>
      </member>
      <member name="u16_non_linear"
              value="250"
              c:identifier="GIMP_PRECISION_U16_NON_LINEAR"
              glib:nick="u16-non-linear"
              glib:name="GIMP_PRECISION_U16_NON_LINEAR">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="879">16-bit non-linear integer</doc>
      </member>
      <member name="u16_perceptual"
              value="275"
              c:identifier="GIMP_PRECISION_U16_PERCEPTUAL"
              glib:nick="u16-perceptual"
              glib:name="GIMP_PRECISION_U16_PERCEPTUAL">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="880">16-bit perceptual integer</doc>
      </member>
      <member name="u32_linear"
              value="300"
              c:identifier="GIMP_PRECISION_U32_LINEAR"
              glib:nick="u32-linear"
              glib:name="GIMP_PRECISION_U32_LINEAR">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="881">32-bit linear integer</doc>
      </member>
      <member name="u32_non_linear"
              value="350"
              c:identifier="GIMP_PRECISION_U32_NON_LINEAR"
              glib:nick="u32-non-linear"
              glib:name="GIMP_PRECISION_U32_NON_LINEAR">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="882">32-bit non-linear integer</doc>
      </member>
      <member name="u32_perceptual"
              value="375"
              c:identifier="GIMP_PRECISION_U32_PERCEPTUAL"
              glib:nick="u32-perceptual"
              glib:name="GIMP_PRECISION_U32_PERCEPTUAL">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="883">32-bit perceptual integer</doc>
      </member>
      <member name="half_linear"
              value="500"
              c:identifier="GIMP_PRECISION_HALF_LINEAR"
              glib:nick="half-linear"
              glib:name="GIMP_PRECISION_HALF_LINEAR">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="884">16-bit linear floating point</doc>
      </member>
      <member name="half_non_linear"
              value="550"
              c:identifier="GIMP_PRECISION_HALF_NON_LINEAR"
              glib:nick="half-non-linear"
              glib:name="GIMP_PRECISION_HALF_NON_LINEAR">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="885">16-bit non-linear floating point</doc>
      </member>
      <member name="half_perceptual"
              value="575"
              c:identifier="GIMP_PRECISION_HALF_PERCEPTUAL"
              glib:nick="half-perceptual"
              glib:name="GIMP_PRECISION_HALF_PERCEPTUAL">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="886">16-bit perceptual floating point</doc>
      </member>
      <member name="float_linear"
              value="600"
              c:identifier="GIMP_PRECISION_FLOAT_LINEAR"
              glib:nick="float-linear"
              glib:name="GIMP_PRECISION_FLOAT_LINEAR">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="887">32-bit linear floating point</doc>
      </member>
      <member name="float_non_linear"
              value="650"
              c:identifier="GIMP_PRECISION_FLOAT_NON_LINEAR"
              glib:nick="float-non-linear"
              glib:name="GIMP_PRECISION_FLOAT_NON_LINEAR">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="888">32-bit non-linear floating point</doc>
      </member>
      <member name="float_perceptual"
              value="675"
              c:identifier="GIMP_PRECISION_FLOAT_PERCEPTUAL"
              glib:nick="float-perceptual"
              glib:name="GIMP_PRECISION_FLOAT_PERCEPTUAL">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="889">32-bit perceptual floating point</doc>
      </member>
      <member name="double_linear"
              value="700"
              c:identifier="GIMP_PRECISION_DOUBLE_LINEAR"
              glib:nick="double-linear"
              glib:name="GIMP_PRECISION_DOUBLE_LINEAR">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="890">64-bit linear floating point</doc>
      </member>
      <member name="double_non_linear"
              value="750"
              c:identifier="GIMP_PRECISION_DOUBLE_NON_LINEAR"
              glib:nick="double-non-linear"
              glib:name="GIMP_PRECISION_DOUBLE_NON_LINEAR">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="891">64-bit non-linear floating point</doc>
      </member>
      <member name="double_perceptual"
              value="775"
              c:identifier="GIMP_PRECISION_DOUBLE_PERCEPTUAL"
              glib:nick="double-perceptual"
              glib:name="GIMP_PRECISION_DOUBLE_PERCEPTUAL">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="892">64-bit perceptual floating point</doc>
      </member>
      <member name="u8_gamma"
              value="150"
              c:identifier="GIMP_PRECISION_U8_GAMMA"
              glib:nick="u8-gamma"
              glib:name="GIMP_PRECISION_U8_GAMMA">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="893">deprecated alias for
                               @GIMP_PRECISION_U8_NON_LINEAR</doc>
      </member>
      <member name="u16_gamma"
              value="250"
              c:identifier="GIMP_PRECISION_U16_GAMMA"
              glib:nick="u16-gamma"
              glib:name="GIMP_PRECISION_U16_GAMMA">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="895">deprecated alias for
                               @GIMP_PRECISION_U16_NON_LINEAR</doc>
      </member>
      <member name="u32_gamma"
              value="350"
              c:identifier="GIMP_PRECISION_U32_GAMMA"
              glib:nick="u32-gamma"
              glib:name="GIMP_PRECISION_U32_GAMMA">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="897">deprecated alias for
                               @GIMP_PRECISION_U32_NON_LINEAR</doc>
      </member>
      <member name="half_gamma"
              value="550"
              c:identifier="GIMP_PRECISION_HALF_GAMMA"
              glib:nick="half-gamma"
              glib:name="GIMP_PRECISION_HALF_GAMMA">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="899">deprecated alias for
                               @GIMP_PRECISION_HALF_NON_LINEAR</doc>
      </member>
      <member name="float_gamma"
              value="650"
              c:identifier="GIMP_PRECISION_FLOAT_GAMMA"
              glib:nick="float-gamma"
              glib:name="GIMP_PRECISION_FLOAT_GAMMA">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="901">deprecated alias for
                               @GIMP_PRECISION_FLOAT_NON_LINEAR</doc>
      </member>
      <member name="double_gamma"
              value="750"
              c:identifier="GIMP_PRECISION_DOUBLE_GAMMA"
              glib:nick="double-gamma"
              glib:name="GIMP_PRECISION_DOUBLE_GAMMA">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="903">deprecated alias for
                               @GIMP_PRECISION_DOUBLE_NON_LINEAR</doc>
      </member>
    </enumeration>
    <class name="Procedure"
           c:symbol-prefix="procedure"
           c:type="GimpProcedure"
           parent="GObject.Object"
           glib:type-name="GimpProcedure"
           glib:get-type="gimp_procedure_get_type"
           glib:type-struct="ProcedureClass">
      <doc xml:space="preserve"
           filename="libgimp/gimpprocedure.c"
           line="44">Procedures are registered functions which can be run across GIMP ecosystem.
They can be created by plug-ins and can then run by the core application
when called from menus (or through other interaction depending on specific
procedure subclasses).

A plug-in can also run procedures created by the core, but also the ones
created by other plug-ins (see [class@PDB]).</doc>
      <source-position filename="libgimp/gimpprocedure.h" line="116"/>
      <constructor name="new" c:identifier="gimp_procedure_new" version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.c"
             line="603">Creates a new procedure named @name which will call @run_func when
invoked.

The @name parameter is mandatory and should be unique, or it will
overwrite an already existing procedure (overwrite procedures only
if you know what you're doing).

@proc_type should be %GIMP_PDB_PROC_TYPE_PLUGIN for "normal" plug-ins.

Using %GIMP_PDB_PROC_TYPE_EXTENSION means that the plug-in will add
temporary procedures. Therefore, the GIMP core will wait until the
%GIMP_PDB_PROC_TYPE_EXTENSION procedure has called
[method@Procedure.extension_ready], which means that the procedure
has done its initialization, installed its temporary procedures and
is ready to run.

*Not calling [method@Procedure.extension_ready] from a
%GIMP_PDB_PROC_TYPE_EXTENSION procedure will cause the GIMP core to
lock up.*

Additionally, a %GIMP_PDB_PROC_TYPE_EXTENSION procedure with no
arguments added is an "automatic" extension that will be
automatically started on each GIMP startup.

%GIMP_PDB_PROC_TYPE_TEMPORARY must be used for temporary procedures
that are created during a plug-ins lifetime. They must be added to
the #GimpPlugIn using [method@PlugIn.add_temp_procedure].

@run_func is called via [method@Procedure.run].

For %GIMP_PDB_PROC_TYPE_PLUGIN and %GIMP_PDB_PROC_TYPE_EXTENSION
procedures the call of @run_func is basically the lifetime of the
plug-in.</doc>
        <source-position filename="libgimp/gimpprocedure.h" line="119"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.c"
               line="646">a new #GimpProcedure.</doc>
          <type name="Procedure" c:type="GimpProcedure*"/>
        </return-value>
        <parameters>
          <parameter name="plug_in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="605">a #GimpPlugIn.</doc>
            <type name="PlugIn" c:type="GimpPlugIn*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="606">the new procedure's name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="proc_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="607">the new procedure's #GimpPDBProcType.</doc>
            <type name="PDBProcType" c:type="GimpPDBProcType"/>
          </parameter>
          <parameter name="run_func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4"
                     destroy="5">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="608">the run function for the new procedure.</doc>
            <type name="RunFunc" c:type="GimpRunFunc"/>
          </parameter>
          <parameter name="run_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="609">user data passed to @run_func.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="run_data_destroy"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="610">free function for @run_data, or %NULL.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="create_config" introspectable="0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.h"
             line="84">called when a #GimpConfig object is created using
  gimp_procedure_create_config().</doc>
        <source-position filename="libgimp/gimpprocedure.h" line="99"/>
        <return-value>
          <type name="ProcedureConfig" c:type="GimpProcedureConfig*"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="args" transfer-ownership="none">
            <type name="GObject.ParamSpec" c:type="GParamSpec**"/>
          </parameter>
          <parameter name="n_args" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="install">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.h"
             line="74">called to install the procedure with the main GIMP
  application. This is an implementation detail and must never
  be called by any plug-in code.</doc>
        <source-position filename="libgimp/gimpprocedure.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="run">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.h"
             line="80">called when the procedure is executed via gimp_procedure_run().
  the default implementation simply calls the procedure's #GimpRunFunc,
  #GimpProcedure subclasses are free to modify the passed @args and
  call their own, subclass-specific run functions.</doc>
        <source-position filename="libgimp/gimpprocedure.h" line="96"/>
        <return-value transfer-ownership="full">
          <type name="ValueArray" c:type="GimpValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="args" transfer-ownership="none">
            <type name="ValueArray" c:type="const GimpValueArray*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_sensitivity">
        <source-position filename="libgimp/gimpprocedure.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="sensitivity_mask" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="uninstall">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.h"
             line="77">called to uninstall the procedure from the main GIMP
  application. This is an implementation detail and must never
  be called by any plug-in code.</doc>
        <source-position filename="libgimp/gimpprocedure.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="add_boolean_argument"
              c:identifier="gimp_procedure_add_boolean_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="33">Add a new boolean argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="434"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="35">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="36">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="37">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="38">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="39">the default value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="40">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_boolean_aux_argument"
              c:identifier="gimp_procedure_add_boolean_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="59">Add a new boolean auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="440"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="61">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="62">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="63">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="64">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="65">the default value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="66">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_boolean_return_value"
              c:identifier="gimp_procedure_add_boolean_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="85">Add a new boolean return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="446"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="87">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="88">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="89">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="90">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="91">the default value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="92">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_brush_argument"
              c:identifier="gimp_procedure_add_brush_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="2436">Add a new #GimpBrush argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h"
                         line="1022"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2438">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2439">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2440">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2441">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2442">whether %NULL is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="default_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2443">default value</doc>
            <type name="Brush" c:type="GimpBrush*"/>
          </parameter>
          <parameter name="default_to_context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2444">Use the context's brush as default value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2445">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_brush_aux_argument"
              c:identifier="gimp_procedure_add_brush_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="2469">Add a new #GimpBrush auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h"
                         line="1030"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2471">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2472">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2473">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2474">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="default_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2475">default value</doc>
            <type name="Brush" c:type="GimpBrush*"/>
          </parameter>
          <parameter name="default_to_context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2476">Use the context's brush as default value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2477">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_brush_return_value"
              c:identifier="gimp_procedure_add_brush_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="2500">Add a new #GimpBrush return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h"
                         line="1037"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2502">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2503">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2504">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2505">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2506">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_bytes_argument"
              c:identifier="gimp_procedure_add_bytes_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1053">Add a new #GBytes argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="695"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1055">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1056">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1057">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1058">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1059">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_bytes_aux_argument"
              c:identifier="gimp_procedure_add_bytes_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1077">Add a new #GBytes auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="700"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1079">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1080">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1081">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1082">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1083">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_bytes_return_value"
              c:identifier="gimp_procedure_add_bytes_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1101">Add a new #GBytes return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="705"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1103">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1104">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1105">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1106">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1107">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_channel_argument"
              c:identifier="gimp_procedure_add_channel_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1965">Add a new #GimpChannel argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="911"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1967">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1968">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1969">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1970">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1971">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1972">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_channel_aux_argument"
              c:identifier="gimp_procedure_add_channel_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1991">Add a new #GimpChannel auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="917"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1993">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1994">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1995">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1996">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1997">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1998">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_channel_return_value"
              c:identifier="gimp_procedure_add_channel_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="2017">Add a new #GimpChannel return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="923"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2019">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2020">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2021">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2022">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2023">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2024">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_choice_argument"
              c:identifier="gimp_procedure_add_choice_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="570">Add a new #GimpChoice argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="575"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="572">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="573">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="574">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="575">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="choice" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="576">the #GimpChoice</doc>
            <type name="Choice" c:type="GimpChoice*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="577">the default value for #GimpChoice.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="578">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_choice_aux_argument"
              c:identifier="gimp_procedure_add_choice_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="598">Add a new #GimpChoice auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="582"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="600">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="601">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="602">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="603">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="choice" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="604">the #GimpChoice</doc>
            <type name="Choice" c:type="GimpChoice*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="605">the default value for #GimpChoice.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="606">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_choice_return_value"
              c:identifier="gimp_procedure_add_choice_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="626">Add a new #GimpChoice return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="589"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="628">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="629">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="630">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="631">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="choice" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="632">the #GimpChoice</doc>
            <type name="Choice" c:type="GimpChoice*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="633">the default value for #GimpChoice.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="634">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_color_argument"
              c:identifier="gimp_procedure_add_color_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="732">Add a new #GeglColor argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="616"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="734">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="735">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="736">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="737">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="has_alpha" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="738">whether the argument has transparency.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="739">the default #GeglColor value.</doc>
            <type name="Gegl.Color" c:type="GeglColor*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="740">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_color_aux_argument"
              c:identifier="gimp_procedure_add_color_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="760">Add a new #GeglColor auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="623"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="762">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="763">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="764">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="765">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="has_alpha" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="766">whether the argument has transparency.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="767">the default #GeglColor value.</doc>
            <type name="Gegl.Color" c:type="GeglColor*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="768">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_color_from_string_argument"
              c:identifier="gimp_procedure_add_color_from_string_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="816">Add a new #GeglColor argument to @procedure from a string representation.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="638"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="818">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="819">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="820">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="821">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="has_alpha" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="822">whether the argument has transparency.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="823">the default #GeglColor value.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="824">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_color_from_string_aux_argument"
              c:identifier="gimp_procedure_add_color_from_string_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="845">Add a new #GeglColor auxiliary argument to @procedure from a string representation.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="645"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="847">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="848">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="849">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="850">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="has_alpha" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="851">whether the argument has transparency.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="852">the default #GeglColor value.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="853">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_color_from_string_return_value"
              c:identifier="gimp_procedure_add_color_from_string_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="874">Add a new #GeglColor return value to @procedure from a string representation.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="652"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="876">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="877">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="878">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="879">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="has_alpha" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="880">whether the argument has transparency.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="881">the default #GeglColor value.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="882">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_color_return_value"
              c:identifier="gimp_procedure_add_color_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="788">Add a new #GeglColor return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="630"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="790">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="791">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="792">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="793">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="has_alpha" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="794">whether the argument has transparency.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="795">the default #GeglColor value.</doc>
            <type name="Gegl.Color" c:type="GeglColor*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="796">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_display_argument"
              c:identifier="gimp_procedure_add_display_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1419">Add a new #GimpDisplay argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="778"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1421">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1422">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1423">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1424">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1425">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1426">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_display_aux_argument"
              c:identifier="gimp_procedure_add_display_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1445">Add a new #GimpDisplay auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="784"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1447">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1448">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1449">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1450">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1451">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1452">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_display_return_value"
              c:identifier="gimp_procedure_add_display_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1471">Add a new #GimpDisplay return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="790"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1473">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1474">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1475">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1476">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1477">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1478">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_double_argument"
              c:identifier="gimp_procedure_add_double_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="390">Add a new double argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="528"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="392">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="393">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="394">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="395">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="min" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="396">the minimum value for this argument</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="max" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="397">the maximum value for this argument</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="398">the default value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="399">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_double_aux_argument"
              c:identifier="gimp_procedure_add_double_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="421">Add a new double auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="536"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="423">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="424">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="425">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="426">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="min" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="427">the minimum value for this argument</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="max" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="428">the maximum value for this argument</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="429">the default value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="430">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_double_return_value"
              c:identifier="gimp_procedure_add_double_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="452">Add a new double return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="544"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="454">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="455">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="456">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="457">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="min" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="458">the minimum value for this argument</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="max" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="459">the maximum value for this argument</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="460">the default value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="461">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_drawable_argument"
              c:identifier="gimp_procedure_add_drawable_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1653">Add a new #GimpDrawable argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="835"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1655">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1656">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1657">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1658">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1659">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1660">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_drawable_aux_argument"
              c:identifier="gimp_procedure_add_drawable_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1679">Add a new #GimpDrawable auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="841"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1681">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1682">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1683">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1684">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1685">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1686">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_drawable_return_value"
              c:identifier="gimp_procedure_add_drawable_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1705">Add a new #GimpDrawable return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="847"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1707">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1708">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1709">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1710">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1711">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1712">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_enum_argument"
              c:identifier="gimp_procedure_add_enum_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="483">Add a new enum argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="553"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="485">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="486">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="487">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="488">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="enum_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="489">the #GType for this argument</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="490">the default value.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="491">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_enum_aux_argument"
              c:identifier="gimp_procedure_add_enum_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="512">Add a new enum auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="560"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="514">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="515">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="516">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="517">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="enum_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="518">the #GType for this argument</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="519">the default value.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="520">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_enum_return_value"
              c:identifier="gimp_procedure_add_enum_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="541">Add a new enum return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="567"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="543">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="544">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="545">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="546">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="enum_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="547">the #GType for this argument</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="548">the default value.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="549">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_file_argument"
              c:identifier="gimp_procedure_add_file_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="2277">Add a new #GFile argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="987"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2279">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2280">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2281">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2282">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2283">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_file_aux_argument"
              c:identifier="gimp_procedure_add_file_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="2301">Add a new #GFile auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="992"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2303">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2304">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2305">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2306">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2307">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_file_return_value"
              c:identifier="gimp_procedure_add_file_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="2325">Add a new #GFile return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="997"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2327">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2328">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2329">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2330">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2331">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_float_array_argument"
              c:identifier="gimp_procedure_add_float_array_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1197">Add a new float array argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="727"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1199">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1200">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1201">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1202">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1203">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_float_array_aux_argument"
              c:identifier="gimp_procedure_add_float_array_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1221">Add a new float array auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="732"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1223">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1224">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1225">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1226">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1227">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_float_array_return_value"
              c:identifier="gimp_procedure_add_float_array_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1245">Add a new float array return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="737"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1247">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1248">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1249">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1250">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1251">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_font_argument"
              c:identifier="gimp_procedure_add_font_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="2524">Add a new #GimpFont argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h"
                         line="1043"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2526">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2527">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2528">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2529">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2530">whether %NULL is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="default_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2531">default value</doc>
            <type name="Font" c:type="GimpFont*"/>
          </parameter>
          <parameter name="default_to_context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2532">Use the context's font as default value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2533">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_font_aux_argument"
              c:identifier="gimp_procedure_add_font_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="2557">Add a new #GimpFont auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h"
                         line="1051"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2559">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2560">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2561">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2562">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="default_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2563">default value</doc>
            <type name="Font" c:type="GimpFont*"/>
          </parameter>
          <parameter name="default_to_context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2564">Use the context's font as default value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2565">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_font_return_value"
              c:identifier="gimp_procedure_add_font_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="2588">Add a new #GimpFont return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h"
                         line="1058"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2590">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2591">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2592">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2593">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2594">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_gradient_argument"
              c:identifier="gimp_procedure_add_gradient_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="2612">Add a new #GimpGradient argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h"
                         line="1064"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2614">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2615">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2616">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2617">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2618">whether %NULL is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="default_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2619">default value</doc>
            <type name="Gradient" c:type="GimpGradient*"/>
          </parameter>
          <parameter name="default_to_context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2620">Use the context's gradient as default value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2621">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_gradient_aux_argument"
              c:identifier="gimp_procedure_add_gradient_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="2645">Add a new #GimpGradient auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h"
                         line="1072"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2647">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2648">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2649">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2650">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="default_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2651">default value</doc>
            <type name="Gradient" c:type="GimpGradient*"/>
          </parameter>
          <parameter name="default_to_context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2652">Use the context's gradient as default value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2653">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_gradient_return_value"
              c:identifier="gimp_procedure_add_gradient_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="2676">Add a new #GimpGradient return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h"
                         line="1079"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2678">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2679">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2680">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2681">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2682">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_group_layer_argument"
              c:identifier="gimp_procedure_add_group_layer_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1887">Add a new [class@GroupLayer] argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="892"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1889">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1890">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1891">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1892">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1893">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1894">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_group_layer_aux_argument"
              c:identifier="gimp_procedure_add_group_layer_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1913">Add a new [class@GroupLayer] auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="898"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1915">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1916">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1917">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1918">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1919">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1920">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_group_layer_return_value"
              c:identifier="gimp_procedure_add_group_layer_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1939">Add a new [class@GroupLayer] return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="904"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1941">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1942">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1943">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1944">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1945">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1946">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_image_argument"
              c:identifier="gimp_procedure_add_image_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1497">Add a new #GimpImage argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="797"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1499">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1500">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1501">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1502">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1503">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1504">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_image_aux_argument"
              c:identifier="gimp_procedure_add_image_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1523">Add a new #GimpImage auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="803"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1525">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1526">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1527">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1528">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1529">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1530">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_image_return_value"
              c:identifier="gimp_procedure_add_image_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1549">Add a new #GimpImage return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="809"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1551">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1552">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1553">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1554">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1555">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1556">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_int32_array_argument"
              c:identifier="gimp_procedure_add_int32_array_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1125">Add a new integer array argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="711"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1127">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1128">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1129">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1130">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1131">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_int32_array_aux_argument"
              c:identifier="gimp_procedure_add_int32_array_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1149">Add a new integer array auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="716"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1151">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1152">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1153">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1154">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1155">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_int32_array_return_value"
              c:identifier="gimp_procedure_add_int32_array_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1173">Add a new integer array return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="721"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1175">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1176">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1177">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1178">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1179">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_int_argument"
              c:identifier="gimp_procedure_add_int_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="111">Add a new integer argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="453"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="113">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="114">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="115">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="116">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="min" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="117">the minimum value for this argument</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="max" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="118">the maximum value for this argument</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="119">the default value.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="120">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_int_aux_argument"
              c:identifier="gimp_procedure_add_int_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="142">Add a new integer auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="461"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="144">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="145">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="146">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="147">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="min" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="148">the minimum value for this argument</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="max" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="149">the maximum value for this argument</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="150">the default value.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="151">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_int_return_value"
              c:identifier="gimp_procedure_add_int_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="173">Add a new integer return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="469"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="175">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="176">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="177">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="178">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="min" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="179">the minimum value for this argument</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="max" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="180">the maximum value for this argument</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="181">the default value.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="182">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_item_argument"
              c:identifier="gimp_procedure_add_item_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1575">Add a new #GimpItem argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="816"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1577">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1578">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1579">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1580">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1581">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1582">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_item_aux_argument"
              c:identifier="gimp_procedure_add_item_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1601">Add a new #GimpItem auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="822"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1603">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1604">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1605">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1606">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1607">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1608">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_item_return_value"
              c:identifier="gimp_procedure_add_item_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1627">Add a new #GimpItem return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="828"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1629">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1630">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1631">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1632">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1633">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1634">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_layer_argument"
              c:identifier="gimp_procedure_add_layer_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1731">Add a new #GimpLayer argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="854"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1733">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1734">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1735">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1736">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1737">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1738">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_layer_aux_argument"
              c:identifier="gimp_procedure_add_layer_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1757">Add a new #GimpLayer auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="860"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1759">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1760">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1761">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1762">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1763">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1764">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_layer_mask_argument"
              c:identifier="gimp_procedure_add_layer_mask_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="2043">Add a new #GimpLayerMask argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="930"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2045">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2046">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2047">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2048">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2049">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2050">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_layer_mask_aux_argument"
              c:identifier="gimp_procedure_add_layer_mask_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="2069">Add a new #GimpLayerMask auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="936"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2071">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2072">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2073">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2074">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2075">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2076">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_layer_mask_return_value"
              c:identifier="gimp_procedure_add_layer_mask_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="2095">Add a new #GimpLayerMask return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="942"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2097">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2098">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2099">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2100">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2101">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2102">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_layer_return_value"
              c:identifier="gimp_procedure_add_layer_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1783">Add a new #GimpLayer return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="866"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1785">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1786">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1787">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1788">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1789">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1790">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_menu_path"
              c:identifier="gimp_procedure_add_menu_path"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.c"
             line="921">Adds a menu path to the procedure. Only procedures which have a menu
label can add a menu path.

Menu paths are untranslated paths to known menus and submenus with the
syntax `&lt;Prefix&gt;/Path/To/Submenu`, for example `&lt;Image&gt;/Layer/Transform`.
GIMP will localize these.
Nevertheless you should localize unknown parts of the path. For instance, say
you want to create procedure to create customized layers and add a `Create`
submenu which you want to localize from your plug-in with gettext. You could
call:

```C
path = g_build_path ("/", "&lt;Image&gt;/Layer", _("Create"), NULL);
gimp_procedure_add_menu_path (procedure, path);
g_free (path);
```

See also: gimp_plug_in_add_menu_branch().

GIMP menus also have a concept of named section. For instance, say you are
creating a plug-in which you want to show next to the "Export", "Export As"
plug-ins in the File menu. You would add it to the menu path "File/[Export]".
If you actually wanted to create a submenu called "[Export]" (with square
brackets), double the brackets: "File/[[Export]]"

See also: https://gitlab.gnome.org/GNOME/gimp/-/blob/master/menus/image-menu.ui.in.in

This function will place your procedure to the bottom of the selected path or
section. Order is not assured relatively to other plug-ins.</doc>
        <source-position filename="libgimp/gimpprocedure.h" line="143"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="923">A #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="menu_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="924">The @procedure's additional menu path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_object_array_argument"
              c:identifier="gimp_procedure_add_object_array_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1341">Add a new object array argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="759"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1343">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1344">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1345">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1346">a more detailed help description.
@object_type  the type of object stored in the array</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_type" transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1348">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_object_array_aux_argument"
              c:identifier="gimp_procedure_add_object_array_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1367">Add a new object array auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="765"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1369">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1370">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1371">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1372">a more detailed help description.
@object_type  the type of object stored in the array</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_type" transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1374">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_object_array_return_value"
              c:identifier="gimp_procedure_add_object_array_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1393">Add a new object array return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="771"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1395">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1396">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1397">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1398">a more detailed help description.
@object_type  the type of object stored in the array</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_type" transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1400">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_palette_argument"
              c:identifier="gimp_procedure_add_palette_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="2700">Add a new #GimpPalette argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h"
                         line="1085"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2702">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2703">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2704">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2705">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2706">whether %NULL is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="default_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2707">default value</doc>
            <type name="Palette" c:type="GimpPalette*"/>
          </parameter>
          <parameter name="default_to_context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2708">Use the context's palette as default value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2709">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_palette_aux_argument"
              c:identifier="gimp_procedure_add_palette_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="2733">Add a new #GimpPalette auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h"
                         line="1093"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2735">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2736">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2737">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2738">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="default_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2739">default value</doc>
            <type name="Palette" c:type="GimpPalette*"/>
          </parameter>
          <parameter name="default_to_context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2740">Use the context's palette as default value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2741">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_palette_return_value"
              c:identifier="gimp_procedure_add_palette_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="2764">Add a new #GimpPalette return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h"
                         line="1100"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2766">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2767">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2768">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2769">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2770">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_param_argument"
              c:identifier="gimp_procedure_add_param_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="975">Add a new param argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="676"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="977">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="978">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="979">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="980">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="param_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="981">the #GPParamType for this argument</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="982">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_param_aux_argument"
              c:identifier="gimp_procedure_add_param_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1001">Add a new param auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="682"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1003">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1004">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1005">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1006">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="param_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1007">the #GPParamType for this argument</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1008">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_param_return_value"
              c:identifier="gimp_procedure_add_param_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1027">Add a new param return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="688"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1029">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1030">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1031">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1032">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="param_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1033">the #GPParamType for this argument</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1034">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_parasite_argument"
              c:identifier="gimp_procedure_add_parasite_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="903">Add a new #GimpParasite argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="660"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="905">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="906">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="907">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="908">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="909">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_parasite_aux_argument"
              c:identifier="gimp_procedure_add_parasite_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="927">Add a new #GimpParasite auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="665"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="929">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="930">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="931">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="932">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="933">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_parasite_return_value"
              c:identifier="gimp_procedure_add_parasite_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="951">Add a new #GimpParasite return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="670"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="953">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="954">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="955">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="956">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="957">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_path_argument"
              c:identifier="gimp_procedure_add_path_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="2199">Add a new #GimpPath argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="968"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2201">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2202">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2203">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2204">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2205">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2206">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_path_aux_argument"
              c:identifier="gimp_procedure_add_path_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="2225">Add a new #GimpPath auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="974"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2227">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2228">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2229">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2230">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2231">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2232">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_path_return_value"
              c:identifier="gimp_procedure_add_path_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="2251">Add a new #GimpPath return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="980"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2253">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2254">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2255">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2256">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2257">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2258">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_pattern_argument"
              c:identifier="gimp_procedure_add_pattern_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="2788">Add a new #GimpPattern argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h"
                         line="1106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2790">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2791">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2792">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2793">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2794">whether %NULL is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="default_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2795">default value</doc>
            <type name="Pattern" c:type="GimpPattern*"/>
          </parameter>
          <parameter name="default_to_context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2796">Use the context's pattern as default value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2797">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_pattern_aux_argument"
              c:identifier="gimp_procedure_add_pattern_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="2821">Add a new #GimpPattern auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h"
                         line="1114"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2823">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2824">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2825">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2826">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="default_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2827">default value</doc>
            <type name="Pattern" c:type="GimpPattern*"/>
          </parameter>
          <parameter name="default_to_context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2828">Use the context's pattern as default value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2829">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_pattern_return_value"
              c:identifier="gimp_procedure_add_pattern_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="2852">Add a new #GimpPattern return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h"
                         line="1121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2854">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2855">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2856">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2857">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2858">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_resource_argument"
              c:identifier="gimp_procedure_add_resource_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="2349">Add a new #GimpResource argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h"
                         line="1003"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2351">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2352">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2353">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2354">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2355">whether %NULL is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="default_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2356">default value.</doc>
            <type name="Resource" c:type="GimpResource*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2357">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_resource_aux_argument"
              c:identifier="gimp_procedure_add_resource_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="2381">Add a new #GimpResource auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h"
                         line="1010"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2383">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2384">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2385">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2386">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="default_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2387">default value.</doc>
            <type name="Resource" c:type="GimpResource*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2388">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_resource_return_value"
              c:identifier="gimp_procedure_add_resource_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="2411">Add a new #GimpResource return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h"
                         line="1016"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2413">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2414">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2415">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2416">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2417">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_selection_argument"
              c:identifier="gimp_procedure_add_selection_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="2121">Add a new #GimpSelection argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="949"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2123">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2124">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2125">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2126">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2127">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2128">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_selection_aux_argument"
              c:identifier="gimp_procedure_add_selection_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="2147">Add a new #GimpSelection auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="955"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2149">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2150">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2151">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2152">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2153">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2154">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_selection_return_value"
              c:identifier="gimp_procedure_add_selection_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="2173">Add a new #GimpSelection return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="961"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2175">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2176">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2177">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2178">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2179">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="2180">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_string_argument"
              c:identifier="gimp_procedure_add_string_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="654">Add a new string argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="597"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="656">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="657">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="658">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="659">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="660">the default value.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="661">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_string_array_argument"
              c:identifier="gimp_procedure_add_string_array_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1269">Add a new string array argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="743"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1271">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1272">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1273">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1274">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1275">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_string_array_aux_argument"
              c:identifier="gimp_procedure_add_string_array_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1293">Add a new string array auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="748"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1295">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1296">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1297">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1298">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1299">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_string_array_return_value"
              c:identifier="gimp_procedure_add_string_array_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1317">Add a new string array return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="753"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1319">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1320">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1321">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1322">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1323">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_string_aux_argument"
              c:identifier="gimp_procedure_add_string_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="680">Add a new string auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="603"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="682">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="683">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="684">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="685">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="686">the default value.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="687">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_string_return_value"
              c:identifier="gimp_procedure_add_string_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="706">Add a new string return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="609"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="708">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="709">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="710">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="711">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="712">the default value.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="713">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_text_layer_argument"
              c:identifier="gimp_procedure_add_text_layer_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1809">Add a new #GimpTextLayer argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="873"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1811">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1812">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1813">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1814">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1815">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1816">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_text_layer_aux_argument"
              c:identifier="gimp_procedure_add_text_layer_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1835">Add a new #GimpTextLayer auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="879"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1837">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1838">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1839">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1840">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1841">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1842">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_text_layer_return_value"
              c:identifier="gimp_procedure_add_text_layer_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="1861">Add a new #GimpTextLayer return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="885"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1863">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1864">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1865">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1866">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="none_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1867">Whether no is a valid value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="1868">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_uint_argument"
              c:identifier="gimp_procedure_add_uint_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="204">Add a new unsigned integer argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="478"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="206">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="207">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="208">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="209">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="min" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="210">the minimum value for this argument</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="max" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="211">the maximum value for this argument</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="212">the default value.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="213">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_uint_aux_argument"
              c:identifier="gimp_procedure_add_uint_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="235">Add a new unsigned integer auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="486"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="237">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="238">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="239">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="240">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="min" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="241">the minimum value for this argument</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="max" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="242">the maximum value for this argument</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="243">the default value.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="244">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_uint_return_value"
              c:identifier="gimp_procedure_add_uint_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="266">Add a new unsigned integer return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="494"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="268">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="269">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="270">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="271">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="min" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="272">the minimum value for this argument</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="max" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="273">the maximum value for this argument</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="274">the default value.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="275">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_unit_argument"
              c:identifier="gimp_procedure_add_unit_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="297">Add a new #GimpUnit argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="503"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="299">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="300">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="301">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="302">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="show_pixels" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="303">whether to allow pixels as a valid option</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="show_percent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="304">whether to allow percent as a valid option</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="305">the default value.</doc>
            <type name="Unit" c:type="GimpUnit*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="306">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_unit_aux_argument"
              c:identifier="gimp_procedure_add_unit_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="328">Add a new #GimpUnit auxiliary argument to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="511"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="330">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="331">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="332">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="333">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="show_pixels" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="334">whether to allow pixels as a valid option</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="show_percent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="335">whether to allow percent as a valid option</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="336">the default value.</doc>
            <type name="Unit" c:type="GimpUnit*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="337">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_unit_return_value"
              c:identifier="gimp_procedure_add_unit_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure-params.c"
             line="359">Add a new #GimpUnit return value to @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure-params.h" line="519"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="361">the #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="362">the name of the argument to be created.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="363">the label used in #GimpProcedureDialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="364">a more detailed help description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="show_pixels" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="365">whether to allow pixels as a valid option</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="show_percent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="366">whether to allow percent as a valid option</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="367">the default value.</doc>
            <type name="Unit" c:type="GimpUnit*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure-params.c"
                 line="368">argument flags.</doc>
            <type name="GObject.ParamFlags" c:type="GParamFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_config"
              c:identifier="gimp_procedure_create_config"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.c"
             line="2206">Create a #GimpConfig with properties that match @procedure's arguments, to be
used in [method@Procedure.run_config] method.</doc>
        <source-position filename="libgimp/gimpprocedure.h" line="211"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.c"
               line="2213">The new #GimpConfig.</doc>
          <type name="ProcedureConfig" c:type="GimpProcedureConfig*"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="2208">A #GimpProcedure</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="extension_ready"
              c:identifier="gimp_procedure_extension_ready"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.c"
             line="2169">Notify the main GIMP application that the extension has been
properly initialized and is ready to run.

This function _must_ be called from every procedure's [callback@RunFunc]
that was created as #GIMP_PDB_PROC_TYPE_EXTENSION.

Subsequently, extensions can process temporary procedure run
requests using either [method@PlugIn.extension_enable] or
[method@PlugIn.extension_process].

See also: [ctor@Procedure.new].</doc>
        <source-position filename="libgimp/gimpprocedure.h" line="208"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="2171">A #GimpProcedure</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="find_argument"
              c:identifier="gimp_procedure_find_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.c"
             line="1547">Searches the @procedure's arguments for a #GParamSpec called @name.</doc>
        <source-position filename="libgimp/gimpprocedure.h" line="175"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.c"
               line="1554">The @procedure's argument with @name if it
         exists, or %NULL otherwise.</doc>
          <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1549">A #GimpProcedure</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1550">An argument name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_aux_argument"
              c:identifier="gimp_procedure_find_aux_argument"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.c"
             line="1578">Searches the @procedure's auxiliary arguments for a #GParamSpec
called @name.</doc>
        <source-position filename="libgimp/gimpprocedure.h" line="177"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.c"
               line="1586">The @procedure's auxiliary argument with
         @name if it exists, or %NULL otherwise.</doc>
          <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1580">A #GimpProcedure</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1581">An auxiliary argument name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_return_value"
              c:identifier="gimp_procedure_find_return_value"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.c"
             line="1610">Searches the @procedure's return values for a #GParamSpec called
@name.</doc>
        <source-position filename="libgimp/gimpprocedure.h" line="179"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.c"
               line="1618">The @procedure's return values with @name
         if it exists, or %NULL otherwise.</doc>
          <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1612">A #GimpProcedure</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1613">A return value name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_argument_sync"
              c:identifier="gimp_procedure_get_argument_sync"
              version="3.0">
        <source-position filename="libgimp/gimpprocedure.h" line="192"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.c"
               line="1772">The #GimpArgumentSync value set with
         gimp_procedure_set_argument_sync():</doc>
          <type name="ArgumentSync" c:type="GimpArgumentSync"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1769">a #GimpProcedure</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1770">the name of one of @procedure's arguments or auxiliary arguments</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_arguments"
              c:identifier="gimp_procedure_get_arguments"
              version="3.0">
        <source-position filename="libgimp/gimpprocedure.h" line="182"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.c"
               line="1647">An array
         of @GParamSpec in the order they were added in.</doc>
          <array length="0" zero-terminated="0" c:type="GParamSpec**">
            <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1644">A #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="n_arguments"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1645">Returns the number of arguments.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_authors"
              c:identifier="gimp_procedure_get_authors"
              version="3.0">
        <source-position filename="libgimp/gimpprocedure.h" line="171"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.c"
               line="1326">The procedure's authors given in [method@Procedure.set_attribution].</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1324">A #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_aux_arguments"
              c:identifier="gimp_procedure_get_aux_arguments"
              version="3.0">
        <source-position filename="libgimp/gimpprocedure.h" line="184"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.c"
               line="1673">An array
         of @GParamSpec in the order they were added in.</doc>
          <array length="0" zero-terminated="0" c:type="GParamSpec**">
            <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1670">A #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="n_arguments"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1671">Returns the number of auxiliary arguments.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_blurb"
              c:identifier="gimp_procedure_get_blurb"
              version="3.0">
        <source-position filename="libgimp/gimpprocedure.h" line="163"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.c"
               line="1221">The procedure's blurb given in
[method@Procedure.set_documentation].</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1219">A #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_copyright"
              c:identifier="gimp_procedure_get_copyright"
              version="3.0">
        <source-position filename="libgimp/gimpprocedure.h" line="172"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.c"
               line="1347">The procedure's copyright given in
[method@Procedure.set_attribution].</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1345">A #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_date"
              c:identifier="gimp_procedure_get_date"
              version="3.0">
        <source-position filename="libgimp/gimpprocedure.h" line="173"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.c"
               line="1369">The procedure's date given in [method@Procedure.set_attribution].</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1367">A #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_help"
              c:identifier="gimp_procedure_get_help"
              version="3.0">
        <source-position filename="libgimp/gimpprocedure.h" line="164"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.c"
               line="1243">The procedure's help text given in
[method@Procedure.set_documentation].</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1241">A #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_help_id"
              c:identifier="gimp_procedure_get_help_id"
              version="3.0">
        <source-position filename="libgimp/gimpprocedure.h" line="165"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.c"
               line="1265">The procedure's help ID given in
[method@Procedure.set_documentation].</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1263">A #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_file"
              c:identifier="gimp_procedure_get_icon_file"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.c"
             line="1111">Gets the file of the icon if one was set for @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure.h" line="156"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.c"
               line="1117">the icon #GFile or %NULL if no
         file was set.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1113">a #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="gimp_procedure_get_icon_name"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.c"
             line="1085">Gets the name of the icon if one was set for @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure.h" line="155"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.c"
               line="1091">the icon name or %NULL if no icon name was set.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1087">a #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_pixbuf"
              c:identifier="gimp_procedure_get_icon_pixbuf"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.c"
             line="1138">Gets the #GdkPixbuf of the icon if an icon was set this way for
@procedure.</doc>
        <source-position filename="libgimp/gimpprocedure.h" line="157"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.c"
               line="1145">the icon pixbuf or %NULL if no
         icon name was set.</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1140">a #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_type"
              c:identifier="gimp_procedure_get_icon_type"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.c"
             line="1061">Gets the type of data set as @procedure's icon. Depending on the
result, you can call the relevant specific function, such as
[method@Procedure.get_icon_name].</doc>
        <source-position filename="libgimp/gimpprocedure.h" line="154"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.c"
               line="1069">the #GimpIconType of @procedure's icon.</doc>
          <type name="IconType" c:type="GimpIconType"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1063">a #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_image_types"
              c:identifier="gimp_procedure_get_image_types"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.c"
             line="774">This function retrieves the list of image types the procedure can
operate on. See gimp_procedure_set_image_types().</doc>
        <source-position filename="libgimp/gimpprocedure.h" line="132"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.c"
               line="781">The image types.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="776">A #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_menu_label"
              c:identifier="gimp_procedure_get_menu_label"
              version="3.0">
        <source-position filename="libgimp/gimpprocedure.h" line="141"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.c"
               line="904">The procedure's menu label given in
         gimp_procedure_set_menu_label().</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="902">A #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_menu_paths"
              c:identifier="gimp_procedure_get_menu_paths"
              version="3.0">
        <source-position filename="libgimp/gimpprocedure.h" line="145"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.c"
               line="982">the @procedure's
         menu paths as added with gimp_procedure_add_menu_path().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="980">A #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="gimp_procedure_get_name"
              glib:get-property="name"
              version="3.0">
        <source-position filename="libgimp/gimpprocedure.h" line="127"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.c"
               line="704">The procedure's name given in [ctor@Procedure.new].</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="702">A #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_plug_in"
              c:identifier="gimp_procedure_get_plug_in"
              glib:get-property="plug-in"
              version="3.0">
        <source-position filename="libgimp/gimpprocedure.h" line="126"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.c"
               line="684">The #GimpPlugIn given in [ctor@Procedure.new].</doc>
          <type name="PlugIn" c:type="GimpPlugIn*"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="682">A #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_proc_type"
              c:identifier="gimp_procedure_get_proc_type"
              version="3.0">
        <source-position filename="libgimp/gimpprocedure.h" line="128"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.c"
               line="724">The procedure's type given in [ctor@Procedure.new].</doc>
          <type name="PDBProcType" c:type="GimpPDBProcType"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="722">A #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_return_values"
              c:identifier="gimp_procedure_get_return_values"
              version="3.0">
        <source-position filename="libgimp/gimpprocedure.h" line="186"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.c"
               line="1699">An array
         of @GParamSpec in the order they were added in.</doc>
          <array length="0" zero-terminated="0" c:type="GParamSpec**">
            <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1696">A #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="n_return_values"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1697">Returns the number of return values.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sensitivity_mask"
              c:identifier="gimp_procedure_get_sensitivity_mask"
              version="3.0">
        <source-position filename="libgimp/gimpprocedure.h" line="136"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.c"
               line="850">The procedure's sensitivity mask given in
         [method@Procedure.set_sensitivity_mask].</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="848">A #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="new_return_values"
              c:identifier="gimp_procedure_new_return_values"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.c"
             line="1806">Format the expected return values from procedures.</doc>
        <source-position filename="libgimp/gimpprocedure.h" line="195"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.c"
               line="1817">the expected #GimpValueArray as could be returned
by a [callback@RunFunc].</doc>
          <type name="ValueArray" c:type="GimpValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1808">the procedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="status" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1809">the success status of the procedure run.</doc>
            <type name="PDBStatusType" c:type="GimpPDBStatusType"/>
          </parameter>
          <parameter name="error"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1810">
            an optional #GError. This parameter should be set if
            @status is either #GIMP_PDB_EXECUTION_ERROR or
            #GIMP_PDB_CALLING_ERROR.</doc>
            <type name="GLib.Error" c:type="GError*"/>
          </parameter>
        </parameters>
      </method>
      <method name="run"
              c:identifier="gimp_procedure_run"
              shadowed-by="run_config"
              version="3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.c"
             line="1887">Runs the procedure named @procedure_name with arguments given as
list of `(name, value)` pairs, terminated by %NULL.

The order of arguments does not matter and if any argument is missing, its
default value will be used. The value type must correspond to the argument
type as registered for @procedure_name.</doc>
        <source-position filename="libgimp/gimpprocedure.h" line="199"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.c"
               line="1902">the return values for the procedure call.</doc>
          <type name="ValueArray" c:type="GimpValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1889">the [class@Gimp.Procedure] to run.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="first_arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1890">the name of an argument of @procedure or %NULL to
                 run @procedure with default arguments.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1892">the value of @first_arg_name and any more argument
                 names and values as needed.</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="run_config"
              c:identifier="gimp_procedure_run_config"
              shadows="run"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.c"
             line="1995">Runs @procedure, calling the run_func given in [ctor@Procedure.new].

Create @config at default values with
[method@Gimp.Procedure.create_config] then set any argument you wish
to change from defaults with [method@GObject.Object.set].

If @config is %NULL, the default arguments of @procedure will be used.</doc>
        <source-position filename="libgimp/gimpprocedure.h" line="205"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.c"
               line="2008">The @procedure's return values.</doc>
          <type name="ValueArray" c:type="GimpValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1997">the [class@Gimp.Procedure] to run.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="config"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1998">the @procedure's arguments.</doc>
            <type name="ProcedureConfig" c:type="GimpProcedureConfig*"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_valist"
              c:identifier="gimp_procedure_run_valist"
              version="3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.c"
             line="1925">Runs @procedure with arguments names and values, given in the order as passed
to [method@Procedure.run].</doc>
        <source-position filename="libgimp/gimpprocedure.h" line="202"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.c"
               line="1936">the return values for the procedure call.</doc>
          <type name="ValueArray" c:type="GimpValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1927">the [class@Gimp.Procedure] to run.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="first_arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1928">the name of an argument of @procedure or %NULL to
                 run @procedure with default arguments.
@args            the value of @first_arg_name and any more argument
                 names and values as needed.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_argument_sync"
              c:identifier="gimp_procedure_set_argument_sync"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.c"
             line="1720">When the procedure's run() function exits, a #GimpProcedure's arguments
or auxiliary arguments can be automatically synced with a #GimpParasite of
the #GimpImage the procedure is running on.

In order to enable this, set @sync to %GIMP_ARGUMENT_SYNC_PARASITE.

Currently, it is possible to sync a string argument of type
#GParamSpecString with an image parasite of the same name, for
example the "gimp-comment" parasite in file save procedures.</doc>
        <source-position filename="libgimp/gimpprocedure.h" line="189"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1722">a #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1723">the name of one of @procedure's arguments or auxiliary arguments.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="sync" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1724">how to sync the argument or auxiliary argument.</doc>
            <type name="ArgumentSync" c:type="GimpArgumentSync"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_attribution"
              c:identifier="gimp_procedure_set_attribution"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.c"
             line="1283">Sets various attribution strings on @procedure.</doc>
        <source-position filename="libgimp/gimpprocedure.h" line="167"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1285">A #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="authors" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1286">The @procedure's author(s).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="copyright" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1287">The @procedure's copyright.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1288">The @procedure's date (written or published).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_documentation"
              c:identifier="gimp_procedure_set_documentation"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.c"
             line="1166">Sets various documentation strings on @procedure:

* @blurb is used for instance as the @procedure's tooltip when represented in
  the UI such as a menu entry.
* @help is a free-form text that's meant as additional documentation for
  developers of scripts and plug-ins. If the @blurb and the argument names
  and descriptions are enough for a quite self-explanatory procedure, you may
  set @help to %NULL, rather than setting an uninformative @help (avoid
  setting the same text as @blurb or redundant information).

Plug-ins are responsible for their own translations. You are expected to send
localized strings of @blurb and @help to GIMP if your plug-in is
internationalized.</doc>
        <source-position filename="libgimp/gimpprocedure.h" line="159"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1168">A #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="blurb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1169">The @procedure's blurb.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="help"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1170">The @procedure's help text.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="help_id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1171">The @procedure's help ID.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_file"
              c:identifier="gimp_procedure_set_icon_file"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.c"
             line="1040">Sets the icon for @procedure to the contents of an image file.</doc>
        <source-position filename="libgimp/gimpprocedure.h" line="149"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1042">a #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="file"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1043">a #GFile pointing to an image file.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="gimp_procedure_set_icon_name"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.c"
             line="999">Sets the icon for @procedure to the icon referenced by @icon_name.</doc>
        <source-position filename="libgimp/gimpprocedure.h" line="147"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1001">a #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="icon_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1002">an icon name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_pixbuf"
              c:identifier="gimp_procedure_set_icon_pixbuf"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.c"
             line="1019">Sets the icon for @procedure to @pixbuf.</doc>
        <source-position filename="libgimp/gimpprocedure.h" line="151"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1021">a #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="pixbuf"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="1022">a #GdkPixbuf.</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_image_types"
              c:identifier="gimp_procedure_set_image_types"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.c"
             line="741">This is a comma separated list of image types, or actually drawable
types, that this procedure can deal with. Wildcards are possible
here, so you could say "RGB*" instead of "RGB, RGBA" or "*" for all
image types.

Supported types are "RGB", "GRAY", "INDEXED" and their variants
with alpha.</doc>
        <source-position filename="libgimp/gimpprocedure.h" line="130"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="743">A #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="image_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="744">The image types this procedure can operate on.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_menu_label"
              c:identifier="gimp_procedure_set_menu_label"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.c"
             line="867">Sets the label to use for the @procedure's menu entry, The
location(s) where to register in the menu hierarchy is chosen using
gimp_procedure_add_menu_path().

Plug-ins are responsible for their own translations. You are expected to send
localized strings to GIMP if your plug-in is internationalized.</doc>
        <source-position filename="libgimp/gimpprocedure.h" line="139"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="869">A #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="menu_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="870">The @procedure's menu label.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sensitivity_mask"
              c:identifier="gimp_procedure_set_sensitivity_mask"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.c"
             line="797">Sets the case when @procedure is supposed to be sensitive or not.
Note that it will be used by the core to determine whether to show a
procedure as sensitive (hence forbid running it otherwise), yet it
will not forbid thid-party plug-ins for instance to run manually your
registered procedure. Therefore you should still handle non-supported
cases appropriately by returning with %GIMP_PDB_EXECUTION_ERROR and a
suitable error message.

Similarly third-party plug-ins should verify they are allowed to call
a procedure with [method@Procedure.get_sensitivity_mask] when running
with dynamic contents.

Note that by default, a procedure works on an image with a single
drawable selected. Hence not setting the mask, setting it with 0 or
setting it with a mask of %GIMP_PROCEDURE_SENSITIVE_DRAWABLE only are
equivalent.</doc>
        <source-position filename="libgimp/gimpprocedure.h" line="134"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="799">A #GimpProcedure.</doc>
            <type name="Procedure" c:type="GimpProcedure*"/>
          </instance-parameter>
          <parameter name="sensitivity_mask" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedure.c"
                 line="800">A binary mask of #GimpProcedureSensitivityMask.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="plug-in"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_plug_in">
        <type name="PlugIn"/>
      </property>
      <property name="procedure-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="GIMP_PDB_PROC_TYPE_PLUGIN">
        <type name="PDBProcType"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ProcedureClass"
            c:type="GimpProcedureClass"
            glib:is-gtype-struct-for="Procedure"
            version="3.0">
      <source-position filename="libgimp/gimpprocedure.h" line="116"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="install">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.h"
             line="74">called to install the procedure with the main GIMP
  application. This is an implementation detail and must never
  be called by any plug-in code.</doc>
        <callback name="install">
          <source-position filename="libgimp/gimpprocedure.h" line="93"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="procedure" transfer-ownership="none">
              <type name="Procedure" c:type="GimpProcedure*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="uninstall">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.h"
             line="77">called to uninstall the procedure from the main GIMP
  application. This is an implementation detail and must never
  be called by any plug-in code.</doc>
        <callback name="uninstall">
          <source-position filename="libgimp/gimpprocedure.h" line="94"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="procedure" transfer-ownership="none">
              <type name="Procedure" c:type="GimpProcedure*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="run">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.h"
             line="80">called when the procedure is executed via gimp_procedure_run().
  the default implementation simply calls the procedure's #GimpRunFunc,
  #GimpProcedure subclasses are free to modify the passed @args and
  call their own, subclass-specific run functions.</doc>
        <callback name="run">
          <source-position filename="libgimp/gimpprocedure.h" line="96"/>
          <return-value transfer-ownership="full">
            <type name="ValueArray" c:type="GimpValueArray*"/>
          </return-value>
          <parameters>
            <parameter name="procedure" transfer-ownership="none">
              <type name="Procedure" c:type="GimpProcedure*"/>
            </parameter>
            <parameter name="args" transfer-ownership="none">
              <type name="ValueArray" c:type="const GimpValueArray*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create_config" introspectable="0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.h"
             line="84">called when a #GimpConfig object is created using
  gimp_procedure_create_config().</doc>
        <callback name="create_config" introspectable="0">
          <source-position filename="libgimp/gimpprocedure.h" line="99"/>
          <return-value>
            <type name="ProcedureConfig" c:type="GimpProcedureConfig*"/>
          </return-value>
          <parameters>
            <parameter name="procedure" transfer-ownership="none">
              <type name="Procedure" c:type="GimpProcedure*"/>
            </parameter>
            <parameter name="args" transfer-ownership="none">
              <type name="GObject.ParamSpec" c:type="GParamSpec**"/>
            </parameter>
            <parameter name="n_args" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_sensitivity">
        <callback name="set_sensitivity">
          <source-position filename="libgimp/gimpprocedure.h" line="103"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="procedure" transfer-ownership="none">
              <type name="Procedure" c:type="GimpProcedure*"/>
            </parameter>
            <parameter name="sensitivity_mask" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gimp_reserved1" introspectable="0">
        <callback name="_gimp_reserved1">
          <source-position filename="libgimp/gimpprocedure.h" line="108"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved2" introspectable="0">
        <callback name="_gimp_reserved2">
          <source-position filename="libgimp/gimpprocedure.h" line="109"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved3" introspectable="0">
        <callback name="_gimp_reserved3">
          <source-position filename="libgimp/gimpprocedure.h" line="110"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved4" introspectable="0">
        <callback name="_gimp_reserved4">
          <source-position filename="libgimp/gimpprocedure.h" line="111"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved5" introspectable="0">
        <callback name="_gimp_reserved5">
          <source-position filename="libgimp/gimpprocedure.h" line="112"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved6" introspectable="0">
        <callback name="_gimp_reserved6">
          <source-position filename="libgimp/gimpprocedure.h" line="113"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved7" introspectable="0">
        <callback name="_gimp_reserved7">
          <source-position filename="libgimp/gimpprocedure.h" line="114"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved8" introspectable="0">
        <callback name="_gimp_reserved8">
          <source-position filename="libgimp/gimpprocedure.h" line="115"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="ProcedureConfig"
           c:symbol-prefix="procedure_config"
           c:type="GimpProcedureConfig"
           version="3.0"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="GimpProcedureConfig"
           glib:get-type="gimp_procedure_config_get_type"
           glib:type-struct="ProcedureConfigClass">
      <doc xml:space="preserve"
           filename="libgimp/gimpprocedureconfig.c"
           line="30">The base class for [class@Procedure] specific config objects and the main
interface to manage aspects of [class@Procedure]'s arguments such as
persistency of the last used arguments across GIMP sessions.

A procedure config is created by a [class@Procedure] using
[method@Procedure.create_config] and its properties match the
procedure's arguments and auxiliary arguments in number, order and
type.

It implements the [struct@Config] interface and therefore has all its
serialization and deserialization features.</doc>
      <source-position filename="libgimp/gimpprocedureconfig.h" line="50"/>
      <method name="get_choice_id"
              c:identifier="gimp_procedure_config_get_choice_id"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedureconfig.c"
             line="450">A utility function which will get the current string value of a
[struct@ParamSpecChoice] property in @config and convert it to the integer ID
mapped to this value.
This makes it easy to work with an Enum type locally, within a plug-in code.</doc>
        <source-position filename="libgimp/gimpprocedureconfig.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedureconfig.c"
                 line="452">a #GimpProcedureConfig</doc>
            <type name="ProcedureConfig" c:type="GimpProcedureConfig*"/>
          </instance-parameter>
          <parameter name="property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedureconfig.c"
                 line="453">the name of a [struct@ParamSpecChoice] property.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_procedure"
              c:identifier="gimp_procedure_config_get_procedure"
              glib:get-property="procedure"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedureconfig.c"
             line="222">This function returns the [class@Procedure] which created @config, see
[method@Procedure.create_config].</doc>
        <source-position filename="libgimp/gimpprocedureconfig.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedureconfig.c"
               line="229">The procedure which created this config.</doc>
          <type name="Procedure" c:type="GimpProcedure*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedureconfig.c"
                 line="224">a procedure config</doc>
            <type name="ProcedureConfig" c:type="GimpProcedureConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="save_metadata"
              c:identifier="gimp_procedure_config_save_metadata"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedureconfig.c"
             line="364">Note: There is normally no need to call this function because it's
already called by [class@ExportProcedure] at the end of the `run()` callback.

Only use this function if the [class@Metadata] passed as argument of a
[class@ExportProcedure]'s run() method needs to be written at a specific
point of the export, other than its end.

This function syncs back @config's export properties to the
metadata's [flags@MetadataSaveFlags] and writes the metadata to @file
using [method@Image.metadata_save_finish].

The metadata is only ever written once. If this function has been
called explicitly, it will do nothing when called a second time at the end of
the `run()` callback.</doc>
        <source-position filename="libgimp/gimpprocedureconfig.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedureconfig.c"
                 line="366">a #GimpProcedureConfig</doc>
            <type name="ProcedureConfig" c:type="GimpProcedureConfig*"/>
          </instance-parameter>
          <parameter name="exported_image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedureconfig.c"
                 line="367">the image that was actually exported</doc>
            <type name="Image" c:type="GimpImage*"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpprocedureconfig.c"
                 line="368">the file @exported_image was written to</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <property name="procedure"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_procedure">
        <type name="Procedure"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ProcedureConfigClass"
            c:type="GimpProcedureConfigClass"
            glib:is-gtype-struct-for="ProcedureConfig">
      <source-position filename="libgimp/gimpprocedureconfig.h" line="50"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_gimp_reserved1" introspectable="0">
        <callback name="_gimp_reserved1">
          <source-position filename="libgimp/gimpprocedureconfig.h" line="42"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved2" introspectable="0">
        <callback name="_gimp_reserved2">
          <source-position filename="libgimp/gimpprocedureconfig.h" line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved3" introspectable="0">
        <callback name="_gimp_reserved3">
          <source-position filename="libgimp/gimpprocedureconfig.h" line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved4" introspectable="0">
        <callback name="_gimp_reserved4">
          <source-position filename="libgimp/gimpprocedureconfig.h" line="45"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved5" introspectable="0">
        <callback name="_gimp_reserved5">
          <source-position filename="libgimp/gimpprocedureconfig.h" line="46"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved6" introspectable="0">
        <callback name="_gimp_reserved6">
          <source-position filename="libgimp/gimpprocedureconfig.h" line="47"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved7" introspectable="0">
        <callback name="_gimp_reserved7">
          <source-position filename="libgimp/gimpprocedureconfig.h" line="48"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved8" introspectable="0">
        <callback name="_gimp_reserved8">
          <source-position filename="libgimp/gimpprocedureconfig.h" line="49"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <bitfield name="ProcedureSensitivityMask"
              glib:type-name="GimpProcedureSensitivityMask"
              glib:get-type="gimp_procedure_sensitivity_mask_get_type"
              c:type="GimpProcedureSensitivityMask">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="946">The cases when a #GimpProcedure should be shown as sensitive.</doc>
      <member name="drawable"
              value="1"
              c:identifier="GIMP_PROCEDURE_SENSITIVE_DRAWABLE"
              glib:nick="drawable"
              glib:name="GIMP_PROCEDURE_SENSITIVE_DRAWABLE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="948">Handles image with one selected drawable.</doc>
      </member>
      <member name="drawables"
              value="4"
              c:identifier="GIMP_PROCEDURE_SENSITIVE_DRAWABLES"
              glib:nick="drawables"
              glib:name="GIMP_PROCEDURE_SENSITIVE_DRAWABLES">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="949">Handles image with several selected drawables.</doc>
      </member>
      <member name="no_drawables"
              value="8"
              c:identifier="GIMP_PROCEDURE_SENSITIVE_NO_DRAWABLES"
              glib:nick="no-drawables"
              glib:name="GIMP_PROCEDURE_SENSITIVE_NO_DRAWABLES">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="950">Handles image with no selected drawables.</doc>
      </member>
      <member name="no_image"
              value="16"
              c:identifier="GIMP_PROCEDURE_SENSITIVE_NO_IMAGE"
              glib:nick="no-image"
              glib:name="GIMP_PROCEDURE_SENSITIVE_NO_IMAGE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="951">Handles no image.</doc>
      </member>
      <member name="always"
              value="2147483647"
              c:identifier="GIMP_PROCEDURE_SENSITIVE_ALWAYS"
              glib:nick="always"
              glib:name="GIMP_PROCEDURE_SENSITIVE_ALWAYS">
      </member>
    </bitfield>
    <enumeration name="ProgressCommand"
                 glib:type-name="GimpProgressCommand"
                 glib:get-type="gimp_progress_command_get_type"
                 c:type="GimpProgressCommand">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="968">Commands for the progress API.</doc>
      <member name="start"
              value="0"
              c:identifier="GIMP_PROGRESS_COMMAND_START"
              glib:nick="start"
              glib:name="GIMP_PROGRESS_COMMAND_START">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="970">Start a progress</doc>
      </member>
      <member name="end"
              value="1"
              c:identifier="GIMP_PROGRESS_COMMAND_END"
              glib:nick="end"
              glib:name="GIMP_PROGRESS_COMMAND_END">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="971">End the progress</doc>
      </member>
      <member name="set_text"
              value="2"
              c:identifier="GIMP_PROGRESS_COMMAND_SET_TEXT"
              glib:nick="set-text"
              glib:name="GIMP_PROGRESS_COMMAND_SET_TEXT">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="972">Set the text</doc>
      </member>
      <member name="set_value"
              value="3"
              c:identifier="GIMP_PROGRESS_COMMAND_SET_VALUE"
              glib:nick="set-value"
              glib:name="GIMP_PROGRESS_COMMAND_SET_VALUE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="973">Set the percentage</doc>
      </member>
      <member name="pulse"
              value="4"
              c:identifier="GIMP_PROGRESS_COMMAND_PULSE"
              glib:nick="pulse"
              glib:name="GIMP_PROGRESS_COMMAND_PULSE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="974">Pulse the progress</doc>
      </member>
      <member name="get_window"
              value="5"
              c:identifier="GIMP_PROGRESS_COMMAND_GET_WINDOW"
              glib:nick="get-window"
              glib:name="GIMP_PROGRESS_COMMAND_GET_WINDOW">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="975">Get the window where the progress is shown</doc>
      </member>
    </enumeration>
    <callback name="ProgressFunc" c:type="GimpProgressFunc">
      <source-position filename="libgimpcolor/gimpadaptivesupersample.h"
                       line="60"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="min" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="max" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="current" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="ProgressVtable" c:type="GimpProgressVtable">
      <source-position filename="libgimp/gimpprogress.h" line="124"/>
      <field name="start" writable="1">
        <doc xml:space="preserve"
             filename="libgimp/gimpprogress.h"
             line="91">starts the progress.</doc>
        <type name="ProgressVtableStartFunc"
              c:type="GimpProgressVtableStartFunc"/>
      </field>
      <field name="end" writable="1">
        <doc xml:space="preserve"
             filename="libgimp/gimpprogress.h"
             line="92">ends the progress.</doc>
        <type name="ProgressVtableEndFunc" c:type="GimpProgressVtableEndFunc"/>
      </field>
      <field name="set_text" writable="1">
        <doc xml:space="preserve"
             filename="libgimp/gimpprogress.h"
             line="93">sets a new text on the progress.</doc>
        <type name="ProgressVtableSetTextFunc"
              c:type="GimpProgressVtableSetTextFunc"/>
      </field>
      <field name="set_value" writable="1">
        <doc xml:space="preserve"
             filename="libgimp/gimpprogress.h"
             line="94">sets a new percentage on the progress.</doc>
        <type name="ProgressVtableSetValueFunc"
              c:type="GimpProgressVtableSetValueFunc"/>
      </field>
      <field name="pulse" writable="1">
        <doc xml:space="preserve"
             filename="libgimp/gimpprogress.h"
             line="95">makes the progress pulse.</doc>
        <type name="ProgressVtablePulseFunc"
              c:type="GimpProgressVtablePulseFunc"/>
      </field>
      <field name="get_window_handle" writable="1">
        <doc xml:space="preserve"
             filename="libgimp/gimpprogress.h"
             line="96">returns the handle of the window where the progress is displayed.</doc>
        <type name="ProgressVtableGetWindowFunc"
              c:type="GimpProgressVtableGetWindowFunc"/>
      </field>
      <field name="_gimp_reserved1" introspectable="0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprogress.h"
             line="97">reserved pointer for future expansion.</doc>
        <callback name="_gimp_reserved1">
          <source-position filename="libgimp/gimpprogress.h" line="116"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved2" introspectable="0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprogress.h"
             line="98">reserved pointer for future expansion.</doc>
        <callback name="_gimp_reserved2">
          <source-position filename="libgimp/gimpprogress.h" line="117"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved3" introspectable="0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprogress.h"
             line="99">reserved pointer for future expansion.</doc>
        <callback name="_gimp_reserved3">
          <source-position filename="libgimp/gimpprogress.h" line="118"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved4" introspectable="0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprogress.h"
             line="100">reserved pointer for future expansion.</doc>
        <callback name="_gimp_reserved4">
          <source-position filename="libgimp/gimpprogress.h" line="119"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved5" introspectable="0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprogress.h"
             line="101">reserved pointer for future expansion.</doc>
        <callback name="_gimp_reserved5">
          <source-position filename="libgimp/gimpprogress.h" line="120"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved6" introspectable="0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprogress.h"
             line="102">reserved pointer for future expansion.</doc>
        <callback name="_gimp_reserved6">
          <source-position filename="libgimp/gimpprogress.h" line="121"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved7" introspectable="0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprogress.h"
             line="103">reserved pointer for future expansion.</doc>
        <callback name="_gimp_reserved7">
          <source-position filename="libgimp/gimpprogress.h" line="122"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved8" introspectable="0">
        <doc xml:space="preserve"
             filename="libgimp/gimpprogress.h"
             line="104">reserved pointer for future expansion.</doc>
        <callback name="_gimp_reserved8">
          <source-position filename="libgimp/gimpprogress.h" line="123"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <callback name="ProgressVtableEndFunc" c:type="GimpProgressVtableEndFunc">
      <doc xml:space="preserve"
           filename="libgimp/gimpprogress.h"
           line="42">Ends the progress</doc>
      <source-position filename="libgimp/gimpprogress.h" line="48"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="0">
          <doc xml:space="preserve"
               filename="libgimp/gimpprogress.h"
               line="44">User data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ProgressVtableGetWindowFunc"
              c:type="GimpProgressVtableGetWindowFunc">
      <source-position filename="libgimp/gimpprogress.h" line="84"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimpprogress.h"
             line="82">the handle of the window where the progress is displayed.</doc>
        <type name="GLib.Bytes" c:type="GBytes*"/>
      </return-value>
      <parameters>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="0">
          <doc xml:space="preserve"
               filename="libgimp/gimpprogress.h"
               line="80">User data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ProgressVtablePulseFunc"
              c:type="GimpProgressVtablePulseFunc">
      <doc xml:space="preserve"
           filename="libgimp/gimpprogress.h"
           line="70">Makes the progress pulse</doc>
      <source-position filename="libgimp/gimpprogress.h" line="76"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="0">
          <doc xml:space="preserve"
               filename="libgimp/gimpprogress.h"
               line="72">User data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ProgressVtableSetTextFunc"
              c:type="GimpProgressVtableSetTextFunc">
      <doc xml:space="preserve"
           filename="libgimp/gimpprogress.h"
           line="50">Sets a new text on the progress.</doc>
      <source-position filename="libgimp/gimpprogress.h" line="57"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprogress.h"
               line="52">The new text</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <doc xml:space="preserve"
               filename="libgimp/gimpprogress.h"
               line="53">User data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ProgressVtableSetValueFunc"
              c:type="GimpProgressVtableSetValueFunc">
      <doc xml:space="preserve"
           filename="libgimp/gimpprogress.h"
           line="60">Sets a new percentage on the progress.</doc>
      <source-position filename="libgimp/gimpprogress.h" line="67"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="percentage" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprogress.h"
               line="62">The progress in percent</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <doc xml:space="preserve"
               filename="libgimp/gimpprogress.h"
               line="63">User data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ProgressVtableStartFunc"
              c:type="GimpProgressVtableStartFunc">
      <doc xml:space="preserve"
           filename="libgimp/gimpprogress.h"
           line="30">Starts the progress</doc>
      <source-position filename="libgimp/gimpprogress.h" line="38"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprogress.h"
               line="32">The message to show</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="cancelable" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprogress.h"
               line="33">Whether the procedure is cancelable</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="libgimp/gimpprogress.h"
               line="34">User data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="PutPixelFunc" c:type="GimpPutPixelFunc">
      <source-position filename="libgimpcolor/gimpadaptivesupersample.h"
                       line="49"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="color" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="RGB"
            c:type="GimpRGB"
            glib:type-name="GimpRGB"
            glib:get-type="gimp_rgb_get_type"
            c:symbol-prefix="rgb">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimprgb.c"
           line="30">Definitions and Functions relating to RGB colors.</doc>
      <source-position filename="libgimpcolor/gimpcolortypes.h" line="58"/>
      <field name="r" writable="1">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolortypes.h"
             line="47">the red component</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="g" writable="1">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolortypes.h"
             line="48">the green component</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="b" writable="1">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolortypes.h"
             line="49">the blue component</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="a" writable="1">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolortypes.h"
             line="50">the alpha component</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <method name="_distance"
              c:identifier="gimp_rgba_distance"
              moved-to="rgba_distance">
        <source-position filename="libgimpcolor/gimprgb.h" line="102"/>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="rgba1" transfer-ownership="none">
            <type name="RGB" c:type="const GimpRGB*"/>
          </instance-parameter>
          <parameter name="rgba2" transfer-ownership="none">
            <type name="RGB" c:type="const GimpRGB*"/>
          </parameter>
        </parameters>
      </method>
      <method name="_get_uchar"
              c:identifier="gimp_rgba_get_uchar"
              moved-to="rgba_get_uchar">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimprgb.c"
             line="300">Gets the 8bit red, green, blue and alpha components of @rgba.</doc>
        <source-position filename="libgimpcolor/gimprgb.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rgba" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimprgb.c"
                 line="302">a #GimpRGB struct</doc>
            <type name="RGB" c:type="const GimpRGB*"/>
          </instance-parameter>
          <parameter name="red"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimprgb.c"
                 line="303">Location for the red component</doc>
            <type name="guint8" c:type="guchar*"/>
          </parameter>
          <parameter name="green"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimprgb.c"
                 line="304">Location for the green component</doc>
            <type name="guint8" c:type="guchar*"/>
          </parameter>
          <parameter name="blue"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimprgb.c"
                 line="305">Location for the blue component</doc>
            <type name="guint8" c:type="guchar*"/>
          </parameter>
          <parameter name="alpha"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimprgb.c"
                 line="306">Location for the alpha component</doc>
            <type name="guint8" c:type="guchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="_set" c:identifier="gimp_rgba_set" moved-to="rgba_set">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimprgb.c"
             line="247">Sets the red, green, blue and alpha components of @rgb. The values
should be between 0.0 and 1.0 but there is no check to enforce this
and the values are set exactly as they are passed in.</doc>
        <source-position filename="libgimpcolor/gimprgb.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rgba" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimprgb.c"
                 line="249">a #GimpRGB struct</doc>
            <type name="RGB" c:type="GimpRGB*"/>
          </instance-parameter>
          <parameter name="red" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimprgb.c"
                 line="250">the red component</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="green" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimprgb.c"
                 line="251">the green component</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="blue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimprgb.c"
                 line="252">the blue component</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimprgb.c"
                 line="253">the alpha component</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="_set_uchar"
              c:identifier="gimp_rgba_set_uchar"
              moved-to="rgba_set_uchar">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimprgb.c"
             line="274">Sets the red, green, blue and alpha components of @rgba from 8bit
values (0 to 255).</doc>
        <source-position filename="libgimpcolor/gimprgb.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rgba" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimprgb.c"
                 line="276">a #GimpRGB struct</doc>
            <type name="RGB" c:type="GimpRGB*"/>
          </instance-parameter>
          <parameter name="red" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimprgb.c"
                 line="277">the red component</doc>
            <type name="guint8" c:type="guchar"/>
          </parameter>
          <parameter name="green" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimprgb.c"
                 line="278">the green component</doc>
            <type name="guint8" c:type="guchar"/>
          </parameter>
          <parameter name="blue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimprgb.c"
                 line="279">the blue component</doc>
            <type name="guint8" c:type="guchar"/>
          </parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimprgb.c"
                 line="280">the alpha component</doc>
            <type name="guint8" c:type="guchar"/>
          </parameter>
        </parameters>
      </method>
      <method name="add" c:identifier="gimp_rgb_add">
        <source-position filename="libgimpcolor/gimprgb.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rgb1" transfer-ownership="none">
            <type name="RGB" c:type="GimpRGB*"/>
          </instance-parameter>
          <parameter name="rgb2" transfer-ownership="none">
            <type name="RGB" c:type="const GimpRGB*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clamp" c:identifier="gimp_rgb_clamp">
        <source-position filename="libgimpcolor/gimprgb.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rgb" transfer-ownership="none">
            <type name="RGB" c:type="GimpRGB*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="composite" c:identifier="gimp_rgb_composite">
        <source-position filename="libgimpcolor/gimprgb.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="color1" transfer-ownership="none">
            <type name="RGB" c:type="GimpRGB*"/>
          </instance-parameter>
          <parameter name="color2" transfer-ownership="none">
            <type name="RGB" c:type="const GimpRGB*"/>
          </parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="RGBCompositeMode" c:type="GimpRGBCompositeMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_uchar" c:identifier="gimp_rgb_get_uchar">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimprgb.c"
             line="121">Writes the red, green, blue and alpha components of @rgb to the
color components @red, @green and @blue.</doc>
        <source-position filename="libgimpcolor/gimprgb.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rgb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimprgb.c"
                 line="123">a #GimpRGB struct</doc>
            <type name="RGB" c:type="const GimpRGB*"/>
          </instance-parameter>
          <parameter name="red"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimprgb.c"
                 line="124">Location for red component, or %NULL</doc>
            <type name="guint8" c:type="guchar*"/>
          </parameter>
          <parameter name="green"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimprgb.c"
                 line="125">Location for green component, or %NULL</doc>
            <type name="guint8" c:type="guchar*"/>
          </parameter>
          <parameter name="blue"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimprgb.c"
                 line="126">Location for blue component, or %NULL</doc>
            <type name="guint8" c:type="guchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="max" c:identifier="gimp_rgb_max">
        <source-position filename="libgimpcolor/gimprgb.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="rgb" transfer-ownership="none">
            <type name="RGB" c:type="const GimpRGB*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="min" c:identifier="gimp_rgb_min">
        <source-position filename="libgimpcolor/gimprgb.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="rgb" transfer-ownership="none">
            <type name="RGB" c:type="const GimpRGB*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="multiply" c:identifier="gimp_rgb_multiply">
        <source-position filename="libgimpcolor/gimprgb.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rgb1" transfer-ownership="none">
            <type name="RGB" c:type="GimpRGB*"/>
          </instance-parameter>
          <parameter name="factor" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="gimp_rgb_set">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimprgb.c"
             line="57">Sets the red, green and blue components of @rgb and leaves the
alpha component unchanged. The color values should be between 0.0
and 1.0 but there is no check to enforce this and the values are
set exactly as they are passed in.</doc>
        <source-position filename="libgimpcolor/gimprgb.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rgb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimprgb.c"
                 line="59">a #GimpRGB struct</doc>
            <type name="RGB" c:type="GimpRGB*"/>
          </instance-parameter>
          <parameter name="red" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimprgb.c"
                 line="60">the red component</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="green" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimprgb.c"
                 line="61">the green component</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="blue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimprgb.c"
                 line="62">the blue component</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_alpha" c:identifier="gimp_rgb_set_alpha">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimprgb.c"
             line="82">Sets the alpha component of @rgb and leaves the RGB components unchanged.</doc>
        <source-position filename="libgimpcolor/gimprgb.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rgb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimprgb.c"
                 line="84">a #GimpRGB struct</doc>
            <type name="RGB" c:type="GimpRGB*"/>
          </instance-parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimprgb.c"
                 line="85">the alpha component</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uchar" c:identifier="gimp_rgb_set_uchar">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimprgb.c"
             line="98">Sets the red, green and blue components of @rgb from 8bit values
(0 to 255) and leaves the alpha component unchanged.</doc>
        <source-position filename="libgimpcolor/gimprgb.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rgb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimprgb.c"
                 line="100">a #GimpRGB struct</doc>
            <type name="RGB" c:type="GimpRGB*"/>
          </instance-parameter>
          <parameter name="red" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimprgb.c"
                 line="101">the red component</doc>
            <type name="guint8" c:type="guchar"/>
          </parameter>
          <parameter name="green" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimprgb.c"
                 line="102">the green component</doc>
            <type name="guint8" c:type="guchar"/>
          </parameter>
          <parameter name="blue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimprgb.c"
                 line="103">the blue component</doc>
            <type name="guint8" c:type="guchar"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_hsl" c:identifier="gimp_rgb_to_hsl">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolorspace.c"
             line="52">Convert an RGB color value to a HSL (Hue, Saturation, Lightness)
color value.</doc>
        <source-position filename="libgimpcolor/gimpcolorspace.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rgb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorspace.c"
                 line="54">A color value in the RGB colorspace</doc>
            <type name="RGB" c:type="const GimpRGB*"/>
          </instance-parameter>
          <parameter name="hsl"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpcolor/gimpcolorspace.c"
                 line="55">The value converted to HSL</doc>
            <type name="HSL" c:type="GimpHSL*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="RGBCompositeMode" c:type="GimpRGBCompositeMode">
      <source-position filename="libgimpcolor/gimprgb.h" line="53"/>
      <member name="none" value="0" c:identifier="GIMP_RGB_COMPOSITE_NONE">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimprgb.h"
             line="44">don't do compositing</doc>
      </member>
      <member name="normal" value="1" c:identifier="GIMP_RGB_COMPOSITE_NORMAL">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimprgb.h"
             line="45">composite on top</doc>
      </member>
      <member name="behind" value="2" c:identifier="GIMP_RGB_COMPOSITE_BEHIND">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimprgb.h"
             line="46">composite behind</doc>
      </member>
    </enumeration>
    <function-macro name="RGB_LUMINANCE"
                    c:identifier="GIMP_RGB_LUMINANCE"
                    introspectable="0">
      <source-position filename="libgimpcolor/gimprgb.h" line="121"/>
      <parameters>
        <parameter name="r">
        </parameter>
        <parameter name="g">
        </parameter>
        <parameter name="b">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="RGB_LUMINANCE_BLUE"
              value="0.060608"
              c:type="GIMP_RGB_LUMINANCE_BLUE">
      <source-position filename="libgimpcolor/gimprgb.h" line="119"/>
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="RGB_LUMINANCE_GREEN"
              value="0.716904"
              c:type="GIMP_RGB_LUMINANCE_GREEN">
      <source-position filename="libgimpcolor/gimprgb.h" line="118"/>
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="RGB_LUMINANCE_RED"
              value="0.222488"
              c:type="GIMP_RGB_LUMINANCE_RED">
      <source-position filename="libgimpcolor/gimprgb.h" line="117"/>
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <callback name="RenderFunc" c:type="GimpRenderFunc">
      <source-position filename="libgimpcolor/gimpadaptivesupersample.h"
                       line="38"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="color"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpadaptivesupersample.h"
               line="35">The rendered pixel as RGB</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="RepeatMode"
                 glib:type-name="GimpRepeatMode"
                 glib:get-type="gimp_repeat_mode_get_type"
                 c:type="GimpRepeatMode">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="994">Repeat modes for example for gradients.</doc>
      <member name="none"
              value="0"
              c:identifier="GIMP_REPEAT_NONE"
              glib:nick="none"
              glib:name="GIMP_REPEAT_NONE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="996">None (extend)</doc>
      </member>
      <member name="truncate"
              value="1"
              c:identifier="GIMP_REPEAT_TRUNCATE"
              glib:nick="truncate"
              glib:name="GIMP_REPEAT_TRUNCATE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="997">None (truncate)</doc>
      </member>
      <member name="sawtooth"
              value="2"
              c:identifier="GIMP_REPEAT_SAWTOOTH"
              glib:nick="sawtooth"
              glib:name="GIMP_REPEAT_SAWTOOTH">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="998">Sawtooth wave</doc>
      </member>
      <member name="triangular"
              value="3"
              c:identifier="GIMP_REPEAT_TRIANGULAR"
              glib:nick="triangular"
              glib:name="GIMP_REPEAT_TRIANGULAR">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="999">Triangular wave</doc>
      </member>
    </enumeration>
    <class name="Resource"
           c:symbol-prefix="resource"
           c:type="GimpResource"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="GimpResource"
           glib:get-type="gimp_resource_get_type"
           glib:type-struct="ResourceClass">
      <doc xml:space="preserve"
           filename="libgimp/gimpresource_pdb.c"
           line="30">Functions to manipulate resources.</doc>
      <source-position filename="libgimp/gimpresource.h" line="48"/>
      <implements name="ConfigInterface"/>
      <function name="get_by_id"
                c:identifier="gimp_resource_get_by_id"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpresource.c"
             line="302">Returns a #GimpResource representing @resource_id. Since #GimpResource is an
abstract class, the real object type will actually be the proper
subclass.

Note: in most use cases, you should not need to retrieve a
#GimpResource by its ID, which is mostly internal data and not
reusable across sessions. Use the appropriate functions for your use
case instead.</doc>
        <source-position filename="libgimp/gimpresource.h" line="51"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgimp/gimpresource.c"
               line="315">a #GimpResource for @resource_id or
         %NULL if @resource_id does not represent a valid resource.
         The object belongs to libgimp and you must not modify
         or unref it.</doc>
          <type name="Resource" c:type="GimpResource*"/>
        </return-value>
        <parameters>
          <parameter name="resource_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpresource.c"
                 line="304">The resource id.</doc>
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_by_name"
                c:identifier="gimp_resource_get_by_name"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpresource.c"
             line="335">Returns the resource with the given @resource_type and
@resource_name.</doc>
        <source-position filename="libgimp/gimpresource.h" line="52"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgimp/gimpresource.c"
               line="343">The resource.</doc>
          <type name="Resource" c:type="GimpResource*"/>
        </return-value>
        <parameters>
          <parameter name="resource_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpresource.c"
                 line="337">The #GType of the resource.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="resource_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpresource.c"
                 line="338">The name of the resource.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="id_is_brush"
                c:identifier="gimp_resource_id_is_brush"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpresource_pdb.c"
             line="169">Returns whether the resource ID is a brush.

This procedure returns TRUE if the specified resource ID is a brush.</doc>
        <source-position filename="libgimp/gimpresource_pdb.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpresource_pdb.c"
               line="177">TRUE if the resource ID is a brush, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="resource_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpresource_pdb.c"
                 line="171">The resource ID.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="id_is_font"
                c:identifier="gimp_resource_id_is_font"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpresource_pdb.c"
             line="316">Returns whether the resource ID is a font.

This procedure returns TRUE if the specified resource ID is a font.</doc>
        <source-position filename="libgimp/gimpresource_pdb.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpresource_pdb.c"
               line="324">TRUE if the resource ID is a font, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="resource_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpresource_pdb.c"
                 line="318">The resource ID.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="id_is_gradient"
                c:identifier="gimp_resource_id_is_gradient"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpresource_pdb.c"
             line="242">Returns whether the resource ID is a gradient.

This procedure returns TRUE if the specified resource ID is a
gradient.</doc>
        <source-position filename="libgimp/gimpresource_pdb.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpresource_pdb.c"
               line="251">TRUE if the resource ID is a gradient, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="resource_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpresource_pdb.c"
                 line="244">The resource ID.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="id_is_palette"
                c:identifier="gimp_resource_id_is_palette"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpresource_pdb.c"
             line="279">Returns whether the resource ID is a palette.

This procedure returns TRUE if the specified resource ID is a
palette.</doc>
        <source-position filename="libgimp/gimpresource_pdb.h" line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpresource_pdb.c"
               line="288">TRUE if the resource ID is a palette, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="resource_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpresource_pdb.c"
                 line="281">The resource ID.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="id_is_pattern"
                c:identifier="gimp_resource_id_is_pattern"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpresource_pdb.c"
             line="205">Returns whether the resource ID is a pattern.

This procedure returns TRUE if the specified resource ID is a
pattern.</doc>
        <source-position filename="libgimp/gimpresource_pdb.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpresource_pdb.c"
               line="214">TRUE if the resource ID is a pattern, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="resource_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpresource_pdb.c"
                 line="207">The resource ID.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="id_is_valid"
                c:identifier="gimp_resource_id_is_valid"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpresource_pdb.c"
             line="128">Returns TRUE if the resource ID is valid.

This procedure checks if the given resource ID is valid and refers
to an existing resource.

*Note*: in most use cases, you should not use this function. If you
got a [class@Gimp.Resource] from the API, you should trust it is
valid. This function is mostly for internal usage.</doc>
        <source-position filename="libgimp/gimpresource_pdb.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpresource_pdb.c"
               line="141">Whether the resource ID is valid.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="resource_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpresource_pdb.c"
                 line="130">The resource ID to check.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="select_new" c:identifier="gimp_resource_select_new">
        <doc xml:space="preserve"
             filename="libgimp/gimpresourceselect.c"
             line="246">Invoke a resource chooser dialog which may call @callback with the chosen
@resource and @owner_data.

A proxy to a remote dialog in core, which knows the installed resources.</doc>
        <source-position filename="libgimp/gimpresourceselect.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpresourceselect.c"
               line="260">the name of a temporary PDB procedure. The
         string belongs to the resource selection dialog and will be
         freed automatically when the dialog is closed.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpresourceselect.c"
                 line="248">Title of the resource selection dialog.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="parent_handle" transfer-ownership="none">
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
          <parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpresourceselect.c"
                 line="249">The resource to set as the initial choice.</doc>
            <type name="Resource" c:type="GimpResource*"/>
          </parameter>
          <parameter name="resource_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpresourceselect.c"
                 line="250">The type of the subclass of [class@Resource].</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="5"
                     destroy="6">
            <doc xml:space="preserve"
                 filename="libgimp/gimpresourceselect.c"
                 line="251">The callback function to call when the user chooses a resource.</doc>
            <type name="ResourceChoosedCallback"
                  c:type="GimpResourceChoosedCallback"/>
          </parameter>
          <parameter name="owner_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="4">
            <doc xml:space="preserve"
                 filename="libgimp/gimpresourceselect.c"
                 line="252">The run_data given to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="data_destroy"
                     transfer-ownership="none"
                     scope="async"
                     destroy="5">
            <doc xml:space="preserve"
                 filename="libgimp/gimpresourceselect.c"
                 line="253">The destroy function for @owner_data.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </function>
      <function name="select_set" c:identifier="gimp_resource_select_set">
        <source-position filename="libgimp/gimpresourceselect.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="callback_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="resource" transfer-ownership="none">
            <type name="Resource" c:type="GimpResource*"/>
          </parameter>
        </parameters>
      </function>
      <method name="delete" c:identifier="gimp_resource_delete" version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpresource_pdb.c"
             line="556">Deletes a resource.

Deletes a resource. Returns an error if the resource is not
deletable. Deletes the resource's data. You should not use the
resource afterwards.</doc>
        <source-position filename="libgimp/gimpresource_pdb.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpresource_pdb.c"
               line="566">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpresource_pdb.c"
                 line="558">The resource.</doc>
            <type name="Resource" c:type="GimpResource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="duplicate"
              c:identifier="gimp_resource_duplicate"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpresource_pdb.c"
             line="480">Duplicates a resource.

Returns a copy having a different, unique ID.</doc>
        <source-position filename="libgimp/gimpresource_pdb.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpresource_pdb.c"
               line="488">A copy of the resource.</doc>
          <type name="Resource" c:type="GimpResource*"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpresource_pdb.c"
                 line="482">The resource.</doc>
            <type name="Resource" c:type="GimpResource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="gimp_resource_get_id"
              glib:get-property="id"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpresource.c"
             line="276">Note: in most use cases, you should not need a resource's ID which is
mostly internal data and not reusable across sessions.</doc>
        <source-position filename="libgimp/gimpresource.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpresource.c"
               line="283">the resource ID.</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpresource.c"
                 line="278">The resource.</doc>
            <type name="Resource" c:type="GimpResource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="gimp_resource_get_name"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpresource_pdb.c"
             line="352">Returns the resource's name.

This procedure returns the resource's name.</doc>
        <source-position filename="libgimp/gimpresource_pdb.h" line="47"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpresource_pdb.c"
               line="360">The resource's name.
         The returned value must be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpresource_pdb.c"
                 line="354">The resource.</doc>
            <type name="Resource" c:type="GimpResource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_brush"
              c:identifier="gimp_resource_is_brush"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpresource.c"
             line="378">Returns whether the resource is a brush.

This procedure returns TRUE if the specified resource is a brush.</doc>
        <source-position filename="libgimp/gimpresource.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpresource.c"
               line="386">TRUE if the resource is a brush, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpresource.c"
                 line="380">The resource.</doc>
            <type name="Resource" c:type="GimpResource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_editable"
              c:identifier="gimp_resource_is_editable"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpresource_pdb.c"
             line="444">Whether the resource can be edited.

Returns TRUE if you have permission to change the resource.</doc>
        <source-position filename="libgimp/gimpresource_pdb.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpresource_pdb.c"
               line="452">TRUE if the resource can be edited.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpresource_pdb.c"
                 line="446">The resource.</doc>
            <type name="Resource" c:type="GimpResource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_font"
              c:identifier="gimp_resource_is_font"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpresource.c"
             line="450">Returns whether the resource is a font.

This procedure returns TRUE if the specified resource is a font.</doc>
        <source-position filename="libgimp/gimpresource.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpresource.c"
               line="458">TRUE if the resource is a font, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpresource.c"
                 line="452">The resource.</doc>
            <type name="Resource" c:type="GimpResource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_gradient"
              c:identifier="gimp_resource_is_gradient"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpresource.c"
             line="414">Returns whether the resource is a gradient.

This procedure returns TRUE if the specified resource is a gradient.</doc>
        <source-position filename="libgimp/gimpresource.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpresource.c"
               line="422">TRUE if the resource is a gradient, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpresource.c"
                 line="416">The resource.</doc>
            <type name="Resource" c:type="GimpResource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_palette"
              c:identifier="gimp_resource_is_palette"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpresource.c"
             line="432">Returns whether the resource is a palette.

This procedure returns TRUE if the specified resource is a palette.</doc>
        <source-position filename="libgimp/gimpresource.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpresource.c"
               line="440">TRUE if the resource is a palette, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpresource.c"
                 line="434">The resource.</doc>
            <type name="Resource" c:type="GimpResource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_pattern"
              c:identifier="gimp_resource_is_pattern"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpresource.c"
             line="396">Returns whether the resource is a pattern.

This procedure returns TRUE if the specified resource is a pattern.</doc>
        <source-position filename="libgimp/gimpresource.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpresource.c"
               line="404">TRUE if the resource is a pattern, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpresource.c"
                 line="398">The resource.</doc>
            <type name="Resource" c:type="GimpResource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_valid"
              c:identifier="gimp_resource_is_valid"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpresource.c"
             line="359">Returns TRUE if the resource is valid.

This procedure checks if the given resource is valid and refers to an
existing resource.</doc>
        <source-position filename="libgimp/gimpresource.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpresource.c"
               line="368">Whether the resource is valid.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpresource.c"
                 line="361">The resource to check.</doc>
            <type name="Resource" c:type="GimpResource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="rename" c:identifier="gimp_resource_rename" version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpresource_pdb.c"
             line="516">Renames a resource. When the name is in use, renames to a unique
name.

Renames a resource. When the proposed name is already used, GIMP
generates a unique name.</doc>
        <source-position filename="libgimp/gimpresource_pdb.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpresource_pdb.c"
               line="527">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpresource_pdb.c"
                 line="518">The resource.</doc>
            <type name="Resource" c:type="GimpResource*"/>
          </instance-parameter>
          <parameter name="new_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpresource_pdb.c"
                 line="519">The proposed new name of the resource.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_id"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <callback name="ResourceChoosedCallback"
              c:type="GimpResourceChoosedCallback">
      <doc xml:space="preserve"
           filename="libgimp/gimpresourceselect.h"
           line="28">Callback from libgimp GimpResourceSelect adapter to owner.</doc>
      <source-position filename="libgimp/gimpresourceselect.h" line="36"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="resource" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpresourceselect.h"
               line="30">Chosen resource</doc>
          <type name="Resource" c:type="GimpResource*"/>
        </parameter>
        <parameter name="is_dialog_closing" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpresourceselect.h"
               line="31">Did user click Close button of dialog?</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="owner_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="libgimp/gimpresourceselect.h"
               line="32">Owner's data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="ResourceClass"
            c:type="GimpResourceClass"
            glib:is-gtype-struct-for="Resource">
      <source-position filename="libgimp/gimpresource.h" line="48"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_gimp_reserved1" introspectable="0">
        <callback name="_gimp_reserved1">
          <source-position filename="libgimp/gimpresource.h" line="40"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved2" introspectable="0">
        <callback name="_gimp_reserved2">
          <source-position filename="libgimp/gimpresource.h" line="41"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved3" introspectable="0">
        <callback name="_gimp_reserved3">
          <source-position filename="libgimp/gimpresource.h" line="42"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved4" introspectable="0">
        <callback name="_gimp_reserved4">
          <source-position filename="libgimp/gimpresource.h" line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved5" introspectable="0">
        <callback name="_gimp_reserved5">
          <source-position filename="libgimp/gimpresource.h" line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved6" introspectable="0">
        <callback name="_gimp_reserved6">
          <source-position filename="libgimp/gimpresource.h" line="45"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved7" introspectable="0">
        <callback name="_gimp_reserved7">
          <source-position filename="libgimp/gimpresource.h" line="46"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gimp_reserved8" introspectable="0">
        <callback name="_gimp_reserved8">
          <source-position filename="libgimp/gimpresource.h" line="47"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="RotationType"
                 glib:type-name="GimpRotationType"
                 glib:get-type="gimp_rotation_type_get_type"
                 c:type="GimpRotationType">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="1016">Types of simple rotations.</doc>
      <member name="degrees90"
              value="0"
              c:identifier="GIMP_ROTATE_DEGREES90"
              glib:nick="degrees90"
              glib:name="GIMP_ROTATE_DEGREES90">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1018">90 degrees</doc>
      </member>
      <member name="degrees180"
              value="1"
              c:identifier="GIMP_ROTATE_DEGREES180"
              glib:nick="degrees180"
              glib:name="GIMP_ROTATE_DEGREES180">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1019">180 degrees</doc>
      </member>
      <member name="degrees270"
              value="2"
              c:identifier="GIMP_ROTATE_DEGREES270"
              glib:nick="degrees270"
              glib:name="GIMP_ROTATE_DEGREES270">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1020">270 degrees</doc>
      </member>
    </enumeration>
    <callback name="RunExportFunc" c:type="GimpRunExportFunc" version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimpexportprocedure.h"
           line="32">The export function is run during the lifetime of the GIMP session,
each time a plug-in export procedure is called.

If a MimeType was passed in gimp_export_procedure_new(), then @metadata will be
non-%NULL and can be tweaked by the run() function if needed. Otherwise you
can let it as-is and it will be stored back into the exported @file according
to rules on metadata export shared across formats.</doc>
      <source-position filename="libgimp/gimpexportprocedure.h" line="57"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimpexportprocedure.h"
             line="53">the @procedure's return values.</doc>
        <type name="ValueArray" c:type="GimpValueArray*"/>
      </return-value>
      <parameters>
        <parameter name="procedure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpexportprocedure.h"
               line="34">the #GimpProcedure that runs.</doc>
          <type name="Procedure" c:type="GimpProcedure*"/>
        </parameter>
        <parameter name="run_mode" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpexportprocedure.h"
               line="35">the #GimpRunMode.</doc>
          <type name="RunMode" c:type="GimpRunMode"/>
        </parameter>
        <parameter name="image" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpexportprocedure.h"
               line="36">the image to export.</doc>
          <type name="Image" c:type="GimpImage*"/>
        </parameter>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpexportprocedure.h"
               line="37">the #GFile to export to.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="options" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpexportprocedure.h"
               line="38">the #GimpExportOptions settings.</doc>
          <type name="ExportOptions" c:type="GimpExportOptions*"/>
        </parameter>
        <parameter name="metadata" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpexportprocedure.h"
               line="39">metadata object prepared for the mimetype passed in
              gimp_file_procedure_set_mime_types() if export_metadata
              argument was set in gimp_export_procedure_new().</doc>
          <type name="Metadata" c:type="GimpMetadata*"/>
        </parameter>
        <parameter name="config" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpexportprocedure.h"
               line="42">the @procedure's remaining arguments.</doc>
          <type name="ProcedureConfig" c:type="GimpProcedureConfig*"/>
        </parameter>
        <parameter name="run_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="7">
          <doc xml:space="preserve"
               filename="libgimp/gimpexportprocedure.h"
               line="43">the run_data given in gimp_export_procedure_new().</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="RunFunc" c:type="GimpRunFunc" version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimpprocedure.h"
           line="34">The run function is run during the lifetime of the GIMP session,
each time a plug-in procedure is called.</doc>
      <source-position filename="libgimp/gimpprocedure.h" line="47"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimpprocedure.h"
             line="43">the @procedure's return values.</doc>
        <type name="ValueArray" c:type="GimpValueArray*"/>
      </return-value>
      <parameters>
        <parameter name="procedure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.h"
               line="36">the #GimpProcedure that runs.</doc>
          <type name="Procedure" c:type="GimpProcedure*"/>
        </parameter>
        <parameter name="config" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.h"
               line="37">the @procedure's arguments in a config object.</doc>
          <type name="ProcedureConfig" c:type="GimpProcedureConfig*"/>
        </parameter>
        <parameter name="run_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="libgimp/gimpprocedure.h"
               line="38">the run_data given in gimp_procedure_new().</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="RunImageFunc" c:type="GimpRunImageFunc" version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimpimageprocedure.h"
           line="32">The image function is run during the lifetime of the GIMP session,
each time a plug-in image procedure is called.</doc>
      <source-position filename="libgimp/gimpimageprocedure.h" line="49"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimpimageprocedure.h"
             line="45">the @procedure's return values.</doc>
        <type name="ValueArray" c:type="GimpValueArray*"/>
      </return-value>
      <parameters>
        <parameter name="procedure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageprocedure.h"
               line="34">the #GimpProcedure that runs.</doc>
          <type name="Procedure" c:type="GimpProcedure*"/>
        </parameter>
        <parameter name="run_mode" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageprocedure.h"
               line="35">the #GimpRunMode.</doc>
          <type name="RunMode" c:type="GimpRunMode"/>
        </parameter>
        <parameter name="image" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageprocedure.h"
               line="36">the #GimpImage.</doc>
          <type name="Image" c:type="GimpImage*"/>
        </parameter>
        <parameter name="n_drawables" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageprocedure.h"
               line="37">the number of #GimpDrawable-s.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="drawables" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageprocedure.h"
               line="38">the input #GimpDrawable-s.</doc>
          <array length="3" zero-terminated="0" c:type="GimpDrawable**">
            <type name="Drawable" c:type="GimpDrawable*"/>
          </array>
        </parameter>
        <parameter name="config" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageprocedure.h"
               line="39">the @procedure's remaining arguments.</doc>
          <type name="ProcedureConfig" c:type="GimpProcedureConfig*"/>
        </parameter>
        <parameter name="run_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="6">
          <doc xml:space="preserve"
               filename="libgimp/gimpimageprocedure.h"
               line="40">the run_data given in gimp_image_procedure_new().</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="RunLoadFunc" c:type="GimpRunLoadFunc" version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimploadprocedure.h"
           line="32">The load function is run during the lifetime of the GIMP session, each time a
plug-in load procedure is called.

You are expected to read @file and create a [class@Gimp.Image] out of its
data. This image will be the first return value.
@metadata will be filled from metadata from @file if our infrastructure
supports this format. You may tweak this object, for instance adding metadata
specific to the format. You can also edit @flags if you need to filter out
some specific common fields. For instance, it is customary to remove a
colorspace field with [flags@MetadataLoadFlags] when a profile was added.</doc>
      <source-position filename="libgimp/gimploadprocedure.h" line="57"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimploadprocedure.h"
             line="53">the @procedure's return values.</doc>
        <type name="ValueArray" c:type="GimpValueArray*"/>
      </return-value>
      <parameters>
        <parameter name="procedure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimploadprocedure.h"
               line="34">the [class@Gimp.Procedure] that runs.</doc>
          <type name="Procedure" c:type="GimpProcedure*"/>
        </parameter>
        <parameter name="run_mode" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimploadprocedure.h"
               line="35">the [enum@RunMode].</doc>
          <type name="RunMode" c:type="GimpRunMode"/>
        </parameter>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimploadprocedure.h"
               line="36">the [iface@Gio.File] to load from.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="metadata" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimploadprocedure.h"
               line="37">the [class@Gimp.Metadata] which will be added to the new image.</doc>
          <type name="Metadata" c:type="GimpMetadata*"/>
        </parameter>
        <parameter name="flags"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimploadprocedure.h"
               line="38">flags to filter which metadata will be added..</doc>
          <type name="MetadataLoadFlags" c:type="GimpMetadataLoadFlags*"/>
        </parameter>
        <parameter name="config" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimploadprocedure.h"
               line="39">the @procedure's remaining arguments.</doc>
          <type name="ProcedureConfig" c:type="GimpProcedureConfig*"/>
        </parameter>
        <parameter name="run_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="6">
          <doc xml:space="preserve"
               filename="libgimp/gimploadprocedure.h"
               line="40">the run_data given in gimp_load_procedure_new().</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="RunMode"
                 glib:type-name="GimpRunMode"
                 glib:get-type="gimp_run_mode_get_type"
                 c:type="GimpRunMode">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="1039">Run modes for plug-ins.</doc>
      <member name="interactive"
              value="0"
              c:identifier="GIMP_RUN_INTERACTIVE"
              glib:nick="interactive"
              glib:name="GIMP_RUN_INTERACTIVE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1041">Run interactively</doc>
      </member>
      <member name="noninteractive"
              value="1"
              c:identifier="GIMP_RUN_NONINTERACTIVE"
              glib:nick="noninteractive"
              glib:name="GIMP_RUN_NONINTERACTIVE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1042">Run non-interactively</doc>
      </member>
      <member name="with_last_vals"
              value="2"
              c:identifier="GIMP_RUN_WITH_LAST_VALS"
              glib:nick="with-last-vals"
              glib:name="GIMP_RUN_WITH_LAST_VALS">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1043">Run with last used values</doc>
      </member>
    </enumeration>
    <callback name="RunThumbnailFunc"
              c:type="GimpRunThumbnailFunc"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimpthumbnailprocedure.h"
           line="32">The thumbnail function is run during the lifetime of the GIMP session,
each time a plug-in thumbnail procedure is called.

[class@ThumbnailProcedure] are always run non-interactively.

On success, the returned array must contain:
1. a [class@Image]: this is the only mandatory return value. It should
   ideally be a simple image whose dimensions are closest to @size and meant
   to be displayed as a small static image.
2. (optional) the full image's width (not the thumbnail's image's), or 0 if
   unknown.
3. (optional) the full image's height, or 0 if unknown.
4. (optional) the [enum@ImageType] of the full image.
5. (optional) the number of layers in the full image.</doc>
      <source-position filename="libgimp/gimpthumbnailprocedure.h" line="59"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimpthumbnailprocedure.h"
             line="55">the @procedure's return values.</doc>
        <type name="ValueArray" c:type="GimpValueArray*"/>
      </return-value>
      <parameters>
        <parameter name="procedure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpthumbnailprocedure.h"
               line="34">the #GimpProcedure that runs.</doc>
          <type name="Procedure" c:type="GimpProcedure*"/>
        </parameter>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpthumbnailprocedure.h"
               line="35">the #GFile to load the thumbnail from.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="size" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpthumbnailprocedure.h"
               line="36">the requested thumbnail size.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="config" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpthumbnailprocedure.h"
               line="37">the @procedure's remaining arguments.</doc>
          <type name="ProcedureConfig" c:type="GimpProcedureConfig*"/>
        </parameter>
        <parameter name="run_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="4">
          <doc xml:space="preserve"
               filename="libgimp/gimpthumbnailprocedure.h"
               line="38">the run_data given in gimp_thumbnail_procedure_new().</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="RunVectorLoadFunc"
              c:type="GimpRunVectorLoadFunc"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimpvectorloadprocedure.h"
           line="49">The load function is run during the lifetime of the GIMP session, each time a
plug-in load procedure is called.

You are expected to read @file and create a [class@Gimp.Image] out of its
data. This image will be the first return value.
@metadata will be filled from metadata from @file if our infrastructure
supports this format. You may tweak this object, for instance adding metadata
specific to the format. You can also edit @flags if you need to filter out
some specific common fields. For instance, it is customary to remove a
colorspace field with [flags@MetadataLoadFlags] when a profile was added.

Regarding returned image dimensions:

1. If @width or @height is 0 or negative, the actual value will be computed
   so that ratio is preserved. If @prefer_native_dimension is %FALSE, at
   least one of the 2 dimensions should be strictly positive.
2. If @preserve_ratio is %TRUE, then @width and @height are considered as a
   max size in their respective dimension. I.e. that the resulting image will
   be at most @widthx@height while preserving original ratio. @preserve_ratio
   is implied when any of the dimension is 0 or negative.
3. If @prefer_native_dimension is %TRUE, and if the image has some kind of
   native size (if the format has such metadata or it can be computed), it
   will be used rather than @widthx@height. Note that if both dimensions are
   0 or negative, even if @prefer_native_dimension is TRUE yet the procedure
   cannot determine native dimensions, then maybe a dialog could be popped
   up (if implemented), unless the @run_mode is
   [enum@Gimp.RunMode.NONINTERACTIVE].</doc>
      <source-position filename="libgimp/gimpvectorloadprocedure.h" line="95"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimpvectorloadprocedure.h"
             line="91">the @procedure's return values.</doc>
        <type name="ValueArray" c:type="GimpValueArray*"/>
      </return-value>
      <parameters>
        <parameter name="procedure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpvectorloadprocedure.h"
               line="51">the [class@Gimp.Procedure] that runs.</doc>
          <type name="Procedure" c:type="GimpProcedure*"/>
        </parameter>
        <parameter name="run_mode" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpvectorloadprocedure.h"
               line="52">the [enum@RunMode].</doc>
          <type name="RunMode" c:type="GimpRunMode"/>
        </parameter>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpvectorloadprocedure.h"
               line="53">the [iface@Gio.File] to load from.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpvectorloadprocedure.h"
               line="54">the desired width in pixel for the created image.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpvectorloadprocedure.h"
               line="55">the desired height in pixel for the created image.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="extracted_data" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpvectorloadprocedure.h"
               line="56">dimensions returned by [callback@ExtractVectorFunc].</doc>
          <type name="VectorLoadData" c:type="GimpVectorLoadData"/>
        </parameter>
        <parameter name="metadata" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpvectorloadprocedure.h"
               line="57">the [class@Gimp.Metadata] which will be added to the new image.</doc>
          <type name="Metadata" c:type="GimpMetadata*"/>
        </parameter>
        <parameter name="flags"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpvectorloadprocedure.h"
               line="58">flags to filter which metadata will be added..</doc>
          <type name="MetadataLoadFlags" c:type="GimpMetadataLoadFlags*"/>
        </parameter>
        <parameter name="config" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpvectorloadprocedure.h"
               line="59">the @procedure's remaining arguments.</doc>
          <type name="ProcedureConfig" c:type="GimpProcedureConfig*"/>
        </parameter>
        <parameter name="data_from_extract"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="9">
          <doc xml:space="preserve"
               filename="libgimp/gimpvectorloadprocedure.h"
               line="60">@data_for_run returned by [callback@ExtractVectorFunc].</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="run_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="10">
          <doc xml:space="preserve"
               filename="libgimp/gimpvectorloadprocedure.h"
               line="61">@run_data given in gimp_vector_load_procedure_new().</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="Scanner"
            c:type="GimpScanner"
            opaque="1"
            glib:type-name="GimpScanner"
            glib:get-type="gimp_scanner_get_type"
            c:symbol-prefix="scanner">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpscanner.c"
           line="42">A wrapper around #GScanner with some convenience API.</doc>
      <source-position filename="libgimpconfig/gimpconfigtypes.h" line="32"/>
      <constructor name="new_file"
                   c:identifier="gimp_scanner_new_file"
                   version="2.10"
                   throws="1">
        <source-position filename="libgimpconfig/gimpscanner.h" line="44"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpscanner.c"
               line="86">The new #GimpScanner.</doc>
          <type name="Scanner" c:type="GimpScanner*"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpscanner.c"
                 line="83">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_stream"
                   c:identifier="gimp_scanner_new_stream"
                   version="2.10"
                   throws="1">
        <source-position filename="libgimpconfig/gimpscanner.h" line="46"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpscanner.c"
               line="164">The new #GimpScanner.</doc>
          <type name="Scanner" c:type="GimpScanner*"/>
        </return-value>
        <parameters>
          <parameter name="input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpscanner.c"
                 line="161">a #GInputStream</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_string"
                   c:identifier="gimp_scanner_new_string"
                   version="2.4"
                   throws="1">
        <source-position filename="libgimpconfig/gimpscanner.h" line="48"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpscanner.c"
               line="237">The new #GimpScanner.</doc>
          <type name="Scanner" c:type="GimpScanner*"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <array length="1" zero-terminated="0" c:type="const gchar*">
              <type name="utf8" c:type="gchar"/>
            </array>
          </parameter>
          <parameter name="text_len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpscanner.c"
                 line="234">The length of @text, or -1 if NULL-terminated</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="parse_boolean"
              c:identifier="gimp_scanner_parse_boolean"
              version="2.4">
        <source-position filename="libgimpconfig/gimpscanner.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpscanner.c"
               line="623">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="scanner" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpscanner.c"
                 line="619">A #GimpScanner created by gimp_scanner_new_file() or
          gimp_scanner_new_string()</doc>
            <type name="Scanner" c:type="GimpScanner*"/>
          </instance-parameter>
          <parameter name="dest"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpscanner.c"
                 line="621">Return location for the parsed boolean</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="parse_color"
              c:identifier="gimp_scanner_parse_color"
              version="2.4">
        <source-position filename="libgimpconfig/gimpscanner.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpscanner.c"
               line="675">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="scanner" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpscanner.c"
                 line="671">A #GimpScanner created by gimp_scanner_new_file() or
          gimp_scanner_new_string()</doc>
            <type name="Scanner" c:type="GimpScanner*"/>
          </instance-parameter>
          <parameter name="color"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpscanner.c"
                 line="673">Pointer to a color to store the result</doc>
            <type name="Gegl.Color" c:type="GeglColor**"/>
          </parameter>
        </parameters>
      </method>
      <method name="parse_data"
              c:identifier="gimp_scanner_parse_data"
              version="2.4">
        <source-position filename="libgimpconfig/gimpscanner.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpscanner.c"
               line="472">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="scanner" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpscanner.c"
                 line="467">A #GimpScanner created by gimp_scanner_new_file() or
          gimp_scanner_new_string()</doc>
            <type name="Scanner" c:type="GimpScanner*"/>
          </instance-parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpscanner.c"
                 line="469">Length of the data to parse</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="dest"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpscanner.c"
                 line="470">Return location for the parsed data</doc>
            <array length="0" zero-terminated="0" c:type="guint8**">
              <type name="guint8" c:type="guint8*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="parse_float"
              c:identifier="gimp_scanner_parse_float"
              version="2.4">
        <source-position filename="libgimpconfig/gimpscanner.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpscanner.c"
               line="570">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="scanner" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpscanner.c"
                 line="566">A #GimpScanner created by gimp_scanner_new_file() or
          gimp_scanner_new_string()</doc>
            <type name="Scanner" c:type="GimpScanner*"/>
          </instance-parameter>
          <parameter name="dest"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpscanner.c"
                 line="568">Return location for the parsed float</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="parse_identifier"
              c:identifier="gimp_scanner_parse_identifier"
              version="2.4">
        <source-position filename="libgimpconfig/gimpscanner.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpscanner.c"
               line="381">%TRUE if the next token is an identifier and if its
value matches @identifier.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="scanner" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpscanner.c"
                 line="377">A #GimpScanner created by gimp_scanner_new_file() or
          gimp_scanner_new_string()</doc>
            <type name="Scanner" c:type="GimpScanner*"/>
          </instance-parameter>
          <parameter name="identifier"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpscanner.c"
                 line="379">the expected identifier.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="parse_int"
              c:identifier="gimp_scanner_parse_int"
              version="2.4">
        <source-position filename="libgimpconfig/gimpscanner.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpscanner.c"
               line="500">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="scanner" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpscanner.c"
                 line="496">A #GimpScanner created by gimp_scanner_new_file() or
          gimp_scanner_new_string()</doc>
            <type name="Scanner" c:type="GimpScanner*"/>
          </instance-parameter>
          <parameter name="dest"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpscanner.c"
                 line="498">Return location for the parsed integer</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="parse_int64"
              c:identifier="gimp_scanner_parse_int64"
              version="2.8">
        <source-position filename="libgimpconfig/gimpscanner.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpscanner.c"
               line="535">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="scanner" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpscanner.c"
                 line="531">A #GimpScanner created by gimp_scanner_new_file() or
          gimp_scanner_new_string()</doc>
            <type name="Scanner" c:type="GimpScanner*"/>
          </instance-parameter>
          <parameter name="dest"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpscanner.c"
                 line="533">Return location for the parsed integer</doc>
            <type name="gint64" c:type="gint64*"/>
          </parameter>
        </parameters>
      </method>
      <method name="parse_matrix2"
              c:identifier="gimp_scanner_parse_matrix2"
              version="2.4">
        <source-position filename="libgimpconfig/gimpscanner.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpscanner.c"
               line="900">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="scanner" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpscanner.c"
                 line="896">A #GimpScanner created by gimp_scanner_new_file() or
          gimp_scanner_new_string()</doc>
            <type name="Scanner" c:type="GimpScanner*"/>
          </instance-parameter>
          <parameter name="dest"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpscanner.c"
                 line="898">Pointer to a matrix to store the result</doc>
            <type name="Matrix2" c:type="GimpMatrix2*"/>
          </parameter>
        </parameters>
      </method>
      <method name="parse_string"
              c:identifier="gimp_scanner_parse_string"
              version="2.4">
        <source-position filename="libgimpconfig/gimpscanner.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpscanner.c"
               line="407">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="scanner" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpscanner.c"
                 line="403">A #GimpScanner created by gimp_scanner_new_file() or
          gimp_scanner_new_string()</doc>
            <type name="Scanner" c:type="GimpScanner*"/>
          </instance-parameter>
          <parameter name="dest"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpscanner.c"
                 line="405">Return location for the parsed string</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="parse_string_no_validate"
              c:identifier="gimp_scanner_parse_string_no_validate"
              version="2.4">
        <source-position filename="libgimpconfig/gimpscanner.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpscanner.c"
               line="444">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="scanner" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpscanner.c"
                 line="440">A #GimpScanner created by gimp_scanner_new_file() or
          gimp_scanner_new_string()</doc>
            <type name="Scanner" c:type="GimpScanner*"/>
          </instance-parameter>
          <parameter name="dest"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpscanner.c"
                 line="442">Return location for the parsed string</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="parse_token"
              c:identifier="gimp_scanner_parse_token"
              version="2.4">
        <source-position filename="libgimpconfig/gimpscanner.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpscanner.c"
               line="359">%TRUE if the next token is @token, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="scanner" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpscanner.c"
                 line="355">A #GimpScanner created by gimp_scanner_new_file() or
          gimp_scanner_new_string()</doc>
            <type name="Scanner" c:type="GimpScanner*"/>
          </instance-parameter>
          <parameter name="token" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpscanner.c"
                 line="357">the #GTokenType expected as next token.</doc>
            <type name="GLib.TokenType" c:type="GTokenType"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="gimp_scanner_ref" version="3.0">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpscanner.c"
             line="293">Adds a reference to a #GimpScanner.</doc>
        <source-position filename="libgimpconfig/gimpscanner.h" line="52"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpscanner.c"
               line="299">the same @scanner.</doc>
          <type name="Scanner" c:type="GimpScanner*"/>
        </return-value>
        <parameters>
          <instance-parameter name="scanner" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpscanner.c"
                 line="295">#GimpScanner to ref</doc>
            <type name="Scanner" c:type="GimpScanner*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="gimp_scanner_unref" version="3.0">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpscanner.c"
             line="317">Unref a #GimpScanner. If the reference count drops to zero, the
scanner is freed.</doc>
        <source-position filename="libgimpconfig/gimpscanner.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="scanner" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpconfig/gimpscanner.c"
                 line="319">A #GimpScanner created by gimp_scanner_new_file() or
          gimp_scanner_new_string()</doc>
            <type name="Scanner" c:type="GimpScanner*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="SelectCriterion"
                 glib:type-name="GimpSelectCriterion"
                 glib:get-type="gimp_select_criterion_get_type"
                 c:type="GimpSelectCriterion">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="1059">Criterions for color similarity.</doc>
      <member name="composite"
              value="0"
              c:identifier="GIMP_SELECT_CRITERION_COMPOSITE"
              glib:nick="composite"
              glib:name="GIMP_SELECT_CRITERION_COMPOSITE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1061">Composite</doc>
      </member>
      <member name="rgb_red"
              value="1"
              c:identifier="GIMP_SELECT_CRITERION_RGB_RED"
              glib:nick="rgb-red"
              glib:name="GIMP_SELECT_CRITERION_RGB_RED">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1062">Red</doc>
      </member>
      <member name="rgb_green"
              value="2"
              c:identifier="GIMP_SELECT_CRITERION_RGB_GREEN"
              glib:nick="rgb-green"
              glib:name="GIMP_SELECT_CRITERION_RGB_GREEN">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1063">Green</doc>
      </member>
      <member name="rgb_blue"
              value="3"
              c:identifier="GIMP_SELECT_CRITERION_RGB_BLUE"
              glib:nick="rgb-blue"
              glib:name="GIMP_SELECT_CRITERION_RGB_BLUE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1064">Blue</doc>
      </member>
      <member name="hsv_hue"
              value="4"
              c:identifier="GIMP_SELECT_CRITERION_HSV_HUE"
              glib:nick="hsv-hue"
              glib:name="GIMP_SELECT_CRITERION_HSV_HUE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1065">HSV Hue</doc>
      </member>
      <member name="hsv_saturation"
              value="5"
              c:identifier="GIMP_SELECT_CRITERION_HSV_SATURATION"
              glib:nick="hsv-saturation"
              glib:name="GIMP_SELECT_CRITERION_HSV_SATURATION">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1066">HSV Saturation</doc>
      </member>
      <member name="hsv_value"
              value="6"
              c:identifier="GIMP_SELECT_CRITERION_HSV_VALUE"
              glib:nick="hsv-value"
              glib:name="GIMP_SELECT_CRITERION_HSV_VALUE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1067">HSV Value</doc>
      </member>
      <member name="lch_lightness"
              value="7"
              c:identifier="GIMP_SELECT_CRITERION_LCH_LIGHTNESS"
              glib:nick="lch-lightness"
              glib:name="GIMP_SELECT_CRITERION_LCH_LIGHTNESS">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1068">LCh Lightness</doc>
      </member>
      <member name="lch_chroma"
              value="8"
              c:identifier="GIMP_SELECT_CRITERION_LCH_CHROMA"
              glib:nick="lch-chroma"
              glib:name="GIMP_SELECT_CRITERION_LCH_CHROMA">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1069">LCh Chroma</doc>
      </member>
      <member name="lch_hue"
              value="9"
              c:identifier="GIMP_SELECT_CRITERION_LCH_HUE"
              glib:nick="lch-hue"
              glib:name="GIMP_SELECT_CRITERION_LCH_HUE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1070">LCh Hue</doc>
      </member>
      <member name="alpha"
              value="10"
              c:identifier="GIMP_SELECT_CRITERION_ALPHA"
              glib:nick="alpha"
              glib:name="GIMP_SELECT_CRITERION_ALPHA">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1071">Alpha</doc>
      </member>
    </enumeration>
    <class name="Selection"
           c:symbol-prefix="selection"
           c:type="GimpSelection"
           parent="Channel"
           glib:type-name="GimpSelection"
           glib:get-type="gimp_selection_get_type"
           glib:type-struct="SelectionClass">
      <doc xml:space="preserve"
           filename="libgimp/gimpselection_pdb.c"
           line="30">Functions for manipulating selections.</doc>
      <source-position filename="libgimp/gimpselection.h" line="37"/>
      <function name="all" c:identifier="gimp_selection_all">
        <doc xml:space="preserve"
             filename="libgimp/gimpselection_pdb.c"
             line="342">Select all of the image.

This procedure sets the selection mask to completely encompass the
image. Every pixel in the selection channel is set to 255.</doc>
        <source-position filename="libgimp/gimpselection_pdb.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpselection_pdb.c"
               line="351">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection_pdb.c"
                 line="344">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </parameter>
        </parameters>
      </function>
      <function name="border" c:identifier="gimp_selection_border">
        <doc xml:space="preserve"
             filename="libgimp/gimpselection_pdb.c"
             line="447">Border the image's selection

This procedure borders the selection. Bordering creates a new
selection which is defined along the boundary of the previous
selection at every point within the specified radius.</doc>
        <source-position filename="libgimp/gimpselection_pdb.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpselection_pdb.c"
               line="458">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection_pdb.c"
                 line="449">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </parameter>
          <parameter name="radius" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection_pdb.c"
                 line="450">Radius of border (in pixels).</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="bounds" c:identifier="gimp_selection_bounds">
        <doc xml:space="preserve"
             filename="libgimp/gimpselection_pdb.c"
             line="39">Find the bounding box of the current selection.

This procedure returns whether there is a selection for the
specified image. If there is one, the upper left and lower right
corners of the bounding box are returned. These coordinates are
relative to the image. Please note that the pixel specified by the
lower right coordinate of the bounding box is not part of the
selection. The selection ends at the upper left corner of this
pixel. This means the width of the selection can be calculated as
(x2 - x1), its height as (y2 - y1).</doc>
        <source-position filename="libgimp/gimpselection_pdb.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpselection_pdb.c"
               line="59">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection_pdb.c"
                 line="41">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </parameter>
          <parameter name="non_empty"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection_pdb.c"
                 line="42">TRUE if there is a selection.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="x1"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection_pdb.c"
                 line="43">x coordinate of upper left corner of selection bounds.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y1"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection_pdb.c"
                 line="44">y coordinate of upper left corner of selection bounds.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="x2"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection_pdb.c"
                 line="45">x coordinate of lower right corner of selection bounds.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y2"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection_pdb.c"
                 line="46">y coordinate of lower right corner of selection bounds.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </function>
      <function name="feather" c:identifier="gimp_selection_feather">
        <doc xml:space="preserve"
             filename="libgimp/gimpselection_pdb.c"
             line="410">Feather the image's selection

This procedure feathers the selection. Feathering is implemented
using a gaussian blur.</doc>
        <source-position filename="libgimp/gimpselection_pdb.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpselection_pdb.c"
               line="420">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection_pdb.c"
                 line="412">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </parameter>
          <parameter name="radius" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection_pdb.c"
                 line="413">Radius of feather (in pixels).</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="float" c:identifier="gimp_selection_float">
        <doc xml:space="preserve"
             filename="libgimp/gimpselection.c"
             line="73">Float the selection from the specified drawable with initial offsets
as specified.

This procedure determines the region of the specified drawable that
lies beneath the current selection. The region is then cut from the
drawable and the resulting data is made into a new layer which is
instantiated as a floating selection. The offsets allow initial
positioning of the new floating selection.</doc>
        <source-position filename="libgimp/gimpselection.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpselection.c"
               line="91">The floated layer.</doc>
          <type name="Layer" c:type="GimpLayer*"/>
        </return-value>
        <parameters>
          <parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection.c"
                 line="75">ignored</doc>
            <type name="Image" c:type="GimpImage*"/>
          </parameter>
          <parameter name="n_drawables" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection.c"
                 line="76">Size of @drawables.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="drawables" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection.c"
                 line="77">The drawables from which to
              float selection.</doc>
            <array length="1" zero-terminated="0" c:type="GimpDrawable**">
              <type name="Drawable" c:type="GimpDrawable*"/>
            </array>
          </parameter>
          <parameter name="offx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection.c"
                 line="79">x offset for translation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="offy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection.c"
                 line="80">y offset for translation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="flood"
                c:identifier="gimp_selection_flood"
                version="2.10">
        <doc xml:space="preserve"
             filename="libgimp/gimpselection_pdb.c"
             line="560">Remove holes from the image's selection

This procedure removes holes from the selection, that can come from
selecting a patchy area with the Fuzzy Select Tool. In technical
terms this procedure floods the selection. See the Algorithms page
in the developer wiki for details.</doc>
        <source-position filename="libgimp/gimpselection_pdb.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpselection_pdb.c"
               line="571">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection_pdb.c"
                 line="562">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_by_id"
                c:identifier="gimp_selection_get_by_id"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpselection.c"
             line="47">Returns a #GimpSelection representing @selection_id. This function
calls gimp_item_get_by_id() and returns the item if it is selection
or %NULL otherwise.</doc>
        <source-position filename="libgimp/gimpselection.h" line="40"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgimp/gimpselection.c"
               line="55">a #GimpSelection for
         @selection_id or %NULL if @selection_id does not represent
         a valid selection. The object belongs to libgimp and you
         must not modify or unref it.</doc>
          <type name="Selection" c:type="GimpSelection*"/>
        </return-value>
        <parameters>
          <parameter name="selection_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection.c"
                 line="49">The selection id.</doc>
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </function>
      <function name="grow" c:identifier="gimp_selection_grow">
        <doc xml:space="preserve"
             filename="libgimp/gimpselection_pdb.c"
             line="485">Grow the image's selection

This procedure grows the selection. Growing involves expanding the
boundary in all directions by the specified pixel amount.</doc>
        <source-position filename="libgimp/gimpselection_pdb.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpselection_pdb.c"
               line="495">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection_pdb.c"
                 line="487">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </parameter>
          <parameter name="steps" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection_pdb.c"
                 line="488">Steps of grow (in pixels).</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="invert" c:identifier="gimp_selection_invert">
        <doc xml:space="preserve"
             filename="libgimp/gimpselection_pdb.c"
             line="272">Invert the selection mask.

This procedure inverts the selection mask. For every pixel in the
selection channel, its new value is calculated as (255 - old-value).</doc>
        <source-position filename="libgimp/gimpselection_pdb.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpselection_pdb.c"
               line="281">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection_pdb.c"
                 line="274">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </parameter>
        </parameters>
      </function>
      <function name="is_empty" c:identifier="gimp_selection_is_empty">
        <doc xml:space="preserve"
             filename="libgimp/gimpselection_pdb.c"
             line="145">Determine whether the selection is empty.

This procedure returns TRUE if the selection for the specified image
is empty.</doc>
        <source-position filename="libgimp/gimpselection_pdb.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpselection_pdb.c"
               line="154">Is the selection empty?</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection_pdb.c"
                 line="147">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </parameter>
        </parameters>
      </function>
      <function name="none" c:identifier="gimp_selection_none">
        <doc xml:space="preserve"
             filename="libgimp/gimpselection_pdb.c"
             line="376">Deselect the entire image.

This procedure deselects the entire image. Every pixel in the
selection channel is set to 0.</doc>
        <source-position filename="libgimp/gimpselection_pdb.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpselection_pdb.c"
               line="385">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection_pdb.c"
                 line="378">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </parameter>
        </parameters>
      </function>
      <function name="save" c:identifier="gimp_selection_save">
        <doc xml:space="preserve"
             filename="libgimp/gimpselection_pdb.c"
             line="598">Copy the selection mask to a new channel.

This procedure copies the selection mask and stores the content in a
new channel. The new channel is automatically inserted into the
image's list of channels.</doc>
        <source-position filename="libgimp/gimpselection_pdb.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpselection_pdb.c"
               line="608">The new channel.</doc>
          <type name="Channel" c:type="GimpChannel*"/>
        </return-value>
        <parameters>
          <parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection_pdb.c"
                 line="600">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </parameter>
        </parameters>
      </function>
      <function name="sharpen" c:identifier="gimp_selection_sharpen">
        <doc xml:space="preserve"
             filename="libgimp/gimpselection_pdb.c"
             line="306">Sharpen the selection mask.

This procedure sharpens the selection mask. For every pixel in the
selection channel, if the value is &amp;gt; 127, the new pixel is
assigned a value of 255. This removes any \"anti-aliasing\" that
might exist in the selection mask's boundary.</doc>
        <source-position filename="libgimp/gimpselection_pdb.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpselection_pdb.c"
               line="317">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection_pdb.c"
                 line="308">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </parameter>
        </parameters>
      </function>
      <function name="shrink" c:identifier="gimp_selection_shrink">
        <doc xml:space="preserve"
             filename="libgimp/gimpselection_pdb.c"
             line="522">Shrink the image's selection

This procedure shrinks the selection. Shrinking involves trimming
the existing selection boundary on all sides by the specified number
of pixels.</doc>
        <source-position filename="libgimp/gimpselection_pdb.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpselection_pdb.c"
               line="533">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection_pdb.c"
                 line="524">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </parameter>
          <parameter name="steps" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection_pdb.c"
                 line="525">Steps of shrink (in pixels).</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="translate" c:identifier="gimp_selection_translate">
        <doc xml:space="preserve"
             filename="libgimp/gimpselection_pdb.c"
             line="180">Translate the selection by the specified offsets.

This procedure actually translates the selection for the specified
image by the specified offsets. Regions that are translated from
beyond the bounds of the image are set to empty. Valid regions of
the selection which are translated beyond the bounds of the image
because of this call are lost.</doc>
        <source-position filename="libgimp/gimpselection_pdb.h" line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpselection_pdb.c"
               line="194">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection_pdb.c"
                 line="182">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </parameter>
          <parameter name="offx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection_pdb.c"
                 line="183">x offset for translation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="offy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection_pdb.c"
                 line="184">y offset for translation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="value" c:identifier="gimp_selection_value">
        <doc xml:space="preserve"
             filename="libgimp/gimpselection_pdb.c"
             line="104">Find the value of the selection at the specified coordinates.

This procedure returns the value of the selection at the specified
coordinates. If the coordinates lie out of bounds, 0 is returned.</doc>
        <source-position filename="libgimp/gimpselection_pdb.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpselection_pdb.c"
               line="115">Value of the selection.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection_pdb.c"
                 line="106">The image.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection_pdb.c"
                 line="107">x coordinate of value.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpselection_pdb.c"
                 line="108">y coordinate of value.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
    </class>
    <record name="SelectionClass"
            c:type="GimpSelectionClass"
            glib:is-gtype-struct-for="Selection">
      <source-position filename="libgimp/gimpselection.h" line="37"/>
      <field name="parent_class">
        <type name="ChannelClass" c:type="GimpChannelClass"/>
      </field>
    </record>
    <callback name="SignalHandlerFunc" c:type="GimpSignalHandlerFunc">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpsignal.h"
           line="29">A prototype for a reference to a signal handler functions. Note
that each function which takes or returns a variable of this type
also accepts or may return special values defined by your system's
signal.h header file (like @SIG_DFL or @SIG_IGN).</doc>
      <source-position filename="libgimpbase/gimpsignal.h" line="39"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="signum" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpsignal.h"
               line="31">The number of the signal. Useful if different signals are
         handled by a single handler.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="SizeType"
                 glib:type-name="GimpSizeType"
                 glib:get-type="gimp_size_type_get_type"
                 c:type="GimpSizeType">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="1095">Size types for the old-style text API.</doc>
      <member name="pixels"
              value="0"
              c:identifier="GIMP_PIXELS"
              glib:nick="pixels"
              glib:name="GIMP_PIXELS">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1097">Pixels</doc>
      </member>
      <member name="points"
              value="1"
              c:identifier="GIMP_POINTS"
              glib:nick="points"
              glib:name="GIMP_POINTS">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1098">Points</doc>
      </member>
    </enumeration>
    <enumeration name="StackTraceMode"
                 glib:type-name="GimpStackTraceMode"
                 glib:get-type="gimp_stack_trace_mode_get_type"
                 c:type="GimpStackTraceMode">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="1113">When to generate stack traces in case of an error.</doc>
      <member name="never"
              value="0"
              c:identifier="GIMP_STACK_TRACE_NEVER"
              glib:nick="never"
              glib:name="GIMP_STACK_TRACE_NEVER">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1115">Never</doc>
      </member>
      <member name="query"
              value="1"
              c:identifier="GIMP_STACK_TRACE_QUERY"
              glib:nick="query"
              glib:name="GIMP_STACK_TRACE_QUERY">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1116">Ask each time</doc>
      </member>
      <member name="always"
              value="2"
              c:identifier="GIMP_STACK_TRACE_ALWAYS"
              glib:nick="always"
              glib:name="GIMP_STACK_TRACE_ALWAYS">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1117">Always</doc>
      </member>
    </enumeration>
    <enumeration name="StrokeMethod"
                 glib:type-name="GimpStrokeMethod"
                 glib:get-type="gimp_stroke_method_get_type"
                 c:type="GimpStrokeMethod">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="1133">Methods of stroking selections and paths.</doc>
      <member name="line"
              value="0"
              c:identifier="GIMP_STROKE_LINE"
              glib:nick="line"
              glib:name="GIMP_STROKE_LINE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1135">Stroke line</doc>
      </member>
      <member name="paint_method"
              value="1"
              c:identifier="GIMP_STROKE_PAINT_METHOD"
              glib:nick="paint-method"
              glib:name="GIMP_STROKE_PAINT_METHOD">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1136">Stroke with a paint tool</doc>
      </member>
    </enumeration>
    <enumeration name="TextDirection"
                 glib:type-name="GimpTextDirection"
                 glib:get-type="gimp_text_direction_get_type"
                 c:type="GimpTextDirection">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="1151">Text directions.</doc>
      <member name="ltr"
              value="0"
              c:identifier="GIMP_TEXT_DIRECTION_LTR"
              glib:nick="ltr"
              glib:name="GIMP_TEXT_DIRECTION_LTR">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1153">From left to right</doc>
      </member>
      <member name="rtl"
              value="1"
              c:identifier="GIMP_TEXT_DIRECTION_RTL"
              glib:nick="rtl"
              glib:name="GIMP_TEXT_DIRECTION_RTL">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1154">From right to left</doc>
      </member>
      <member name="ttb_rtl"
              value="2"
              c:identifier="GIMP_TEXT_DIRECTION_TTB_RTL"
              glib:nick="ttb-rtl"
              glib:name="GIMP_TEXT_DIRECTION_TTB_RTL">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1155">Characters are from top to bottom, Lines are from right to left</doc>
      </member>
      <member name="ttb_rtl_upright"
              value="3"
              c:identifier="GIMP_TEXT_DIRECTION_TTB_RTL_UPRIGHT"
              glib:nick="ttb-rtl-upright"
              glib:name="GIMP_TEXT_DIRECTION_TTB_RTL_UPRIGHT">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1156">Upright characters are from top to bottom, Lines are from right to left</doc>
      </member>
      <member name="ttb_ltr"
              value="4"
              c:identifier="GIMP_TEXT_DIRECTION_TTB_LTR"
              glib:nick="ttb-ltr"
              glib:name="GIMP_TEXT_DIRECTION_TTB_LTR">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1157">Characters are from top to bottom, Lines are from left to right</doc>
      </member>
      <member name="ttb_ltr_upright"
              value="5"
              c:identifier="GIMP_TEXT_DIRECTION_TTB_LTR_UPRIGHT"
              glib:nick="ttb-ltr-upright"
              glib:name="GIMP_TEXT_DIRECTION_TTB_LTR_UPRIGHT">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1158">Upright characters are from top to bottom, Lines are from left to right</doc>
      </member>
    </enumeration>
    <enumeration name="TextHintStyle"
                 glib:type-name="GimpTextHintStyle"
                 glib:get-type="gimp_text_hint_style_get_type"
                 c:type="GimpTextHintStyle">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="1177">Text hint strengths.</doc>
      <member name="none"
              value="0"
              c:identifier="GIMP_TEXT_HINT_STYLE_NONE"
              glib:nick="none"
              glib:name="GIMP_TEXT_HINT_STYLE_NONE">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1179">None</doc>
      </member>
      <member name="slight"
              value="1"
              c:identifier="GIMP_TEXT_HINT_STYLE_SLIGHT"
              glib:nick="slight"
              glib:name="GIMP_TEXT_HINT_STYLE_SLIGHT">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1180">Slight</doc>
      </member>
      <member name="medium"
              value="2"
              c:identifier="GIMP_TEXT_HINT_STYLE_MEDIUM"
              glib:nick="medium"
              glib:name="GIMP_TEXT_HINT_STYLE_MEDIUM">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1181">Medium</doc>
      </member>
      <member name="full"
              value="3"
              c:identifier="GIMP_TEXT_HINT_STYLE_FULL"
              glib:nick="full"
              glib:name="GIMP_TEXT_HINT_STYLE_FULL">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1182">Full</doc>
      </member>
    </enumeration>
    <enumeration name="TextJustification"
                 glib:type-name="GimpTextJustification"
                 glib:get-type="gimp_text_justification_get_type"
                 c:type="GimpTextJustification">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="1199">Text justifications.</doc>
      <member name="left"
              value="0"
              c:identifier="GIMP_TEXT_JUSTIFY_LEFT"
              glib:nick="left"
              glib:name="GIMP_TEXT_JUSTIFY_LEFT">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1201">Left justified</doc>
      </member>
      <member name="right"
              value="1"
              c:identifier="GIMP_TEXT_JUSTIFY_RIGHT"
              glib:nick="right"
              glib:name="GIMP_TEXT_JUSTIFY_RIGHT">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1202">Right justified</doc>
      </member>
      <member name="center"
              value="2"
              c:identifier="GIMP_TEXT_JUSTIFY_CENTER"
              glib:nick="center"
              glib:name="GIMP_TEXT_JUSTIFY_CENTER">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1203">Centered</doc>
      </member>
      <member name="fill"
              value="3"
              c:identifier="GIMP_TEXT_JUSTIFY_FILL"
              glib:nick="fill"
              glib:name="GIMP_TEXT_JUSTIFY_FILL">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1204">Filled</doc>
      </member>
    </enumeration>
    <class name="TextLayer"
           c:symbol-prefix="text_layer"
           c:type="GimpTextLayer"
           parent="Layer"
           glib:type-name="GimpTextLayer"
           glib:get-type="gimp_text_layer_get_type"
           glib:type-struct="TextLayerClass">
      <doc xml:space="preserve"
           filename="libgimp/gimptextlayer_pdb.c"
           line="30">Functions for querying and manipulating text layers.</doc>
      <source-position filename="libgimp/gimptextlayer.h" line="38"/>
      <constructor name="new" c:identifier="gimp_text_layer_new" version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimptextlayer.c"
             line="83">Create a new layer.

This procedure creates a new text layer displaying the specified @text. By
default the width and height of the layer will be determined by the @text
contents, the @fontname, @size and @unit.

The new layer still needs to be added to the image, as this is not automatic.
Add the new layer with the gimp_image_insert_layer() command. Other
attributes such as layer mask modes, and offsets should be set with explicit
procedure calls.</doc>
        <source-position filename="libgimp/gimptextlayer.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptextlayer.c"
               line="102">The newly created text layer.
         The object belongs to libgimp and you should not free it.</doc>
          <type name="TextLayer" c:type="GimpTextLayer*"/>
        </return-value>
        <parameters>
          <parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer.c"
                 line="85">The image to which to add the layer.</doc>
            <type name="Image" c:type="GimpImage*"/>
          </parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer.c"
                 line="86">The text to generate (in UTF-8 encoding).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer.c"
                 line="87">The name of the font.</doc>
            <type name="Font" c:type="GimpFont*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer.c"
                 line="88">The size of text in either pixels or points.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer.c"
                 line="89">The units of specified size.</doc>
            <type name="Unit" c:type="GimpUnit*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_by_id"
                c:identifier="gimp_text_layer_get_by_id"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimptextlayer.c"
             line="57">Returns a #GimpTextLayer representing @layer_id. This function calls
gimp_item_get_by_id() and returns the item if it is layer or %NULL
otherwise.</doc>
        <source-position filename="libgimp/gimptextlayer.h" line="41"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgimp/gimptextlayer.c"
               line="65">a #GimpTextLayer for @layer_id or
         %NULL if @layer_id does not represent a valid layer. The
         object belongs to libgimp and you must not modify or unref
         it.</doc>
          <type name="TextLayer" c:type="GimpTextLayer*"/>
        </return-value>
        <parameters>
          <parameter name="layer_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer.c"
                 line="59">The layer id.</doc>
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_antialias"
              c:identifier="gimp_text_layer_get_antialias"
              version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimptextlayer_pdb.c"
             line="411">Check if antialiasing is used in the text layer.

This procedure checks if antialiasing is enabled in the specified
text layer.</doc>
        <source-position filename="libgimp/gimptextlayer_pdb.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptextlayer_pdb.c"
               line="420">A flag which is true if antialiasing is used for rendering the font in the text layer.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="413">The text layer.</doc>
            <type name="TextLayer" c:type="GimpTextLayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_base_direction"
              c:identifier="gimp_text_layer_get_base_direction"
              version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimptextlayer_pdb.c"
             line="717">Get the base direction used for rendering the text layer.

This procedure returns the base direction used for rendering the
text in the text layer</doc>
        <source-position filename="libgimp/gimptextlayer_pdb.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptextlayer_pdb.c"
               line="726">The based direction used for the text layer.</doc>
          <type name="TextDirection" c:type="GimpTextDirection"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="719">The text layer.</doc>
            <type name="TextLayer" c:type="GimpTextLayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_color"
              c:identifier="gimp_text_layer_get_color"
              version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimptextlayer_pdb.c"
             line="869">Get the color of the text in a text layer.

This procedure returns the color of the text in a text layer.</doc>
        <source-position filename="libgimp/gimptextlayer_pdb.h" line="72"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimptextlayer_pdb.c"
               line="877">The color of the text.</doc>
          <type name="Gegl.Color" c:type="GeglColor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="871">The text layer.</doc>
            <type name="TextLayer" c:type="GimpTextLayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_font"
              c:identifier="gimp_text_layer_get_font"
              version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimptextlayer_pdb.c"
             line="251">Get the font from a text layer as string.

This procedure returns the font from a text layer.</doc>
        <source-position filename="libgimp/gimptextlayer_pdb.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptextlayer_pdb.c"
               line="259">
         The font which is used in the specified text layer.</doc>
          <type name="Font" c:type="GimpFont*"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="253">The text layer.</doc>
            <type name="TextLayer" c:type="GimpTextLayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_font_size"
              c:identifier="gimp_text_layer_get_font_size"
              version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimptextlayer_pdb.c"
             line="326">Get the font size from a text layer.

This procedure returns the size of the font which is used in a text
layer. You will receive the size as a float 'font-size' in 'unit'
units.</doc>
        <source-position filename="libgimp/gimptextlayer_pdb.h" line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptextlayer_pdb.c"
               line="337">The font size.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="328">The text layer.</doc>
            <type name="TextLayer" c:type="GimpTextLayer*"/>
          </instance-parameter>
          <parameter name="unit"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="329">The unit used for the font size.</doc>
            <type name="Unit" c:type="GimpUnit**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_hint_style"
              c:identifier="gimp_text_layer_get_hint_style"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimptextlayer_pdb.c"
             line="487">Get information about hinting in the specified text layer.

This procedure provides information about the hinting that is being
used in a text layer. Hinting can be optimized for fidelity or
contrast or it can be turned entirely off.</doc>
        <source-position filename="libgimp/gimptextlayer_pdb.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptextlayer_pdb.c"
               line="497">The hint style used for font outlines.</doc>
          <type name="TextHintStyle" c:type="GimpTextHintStyle"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="489">The text layer.</doc>
            <type name="TextLayer" c:type="GimpTextLayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_indent"
              c:identifier="gimp_text_layer_get_indent"
              version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimptextlayer_pdb.c"
             line="943">Get the line indentation of text layer.

This procedure returns the indentation of the first line in a text
layer.</doc>
        <source-position filename="libgimp/gimptextlayer_pdb.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptextlayer_pdb.c"
               line="952">The indentation value of the first line.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="945">The text layer.</doc>
            <type name="TextLayer" c:type="GimpTextLayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_justification"
              c:identifier="gimp_text_layer_get_justification"
              version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimptextlayer_pdb.c"
             line="793">Get the text justification information of the text layer.

This procedure returns the alignment of the lines in the text layer
relative to each other.</doc>
        <source-position filename="libgimp/gimptextlayer_pdb.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptextlayer_pdb.c"
               line="802">The justification used in the text layer.</doc>
          <type name="TextJustification" c:type="GimpTextJustification"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="795">The text layer.</doc>
            <type name="TextLayer" c:type="GimpTextLayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kerning"
              c:identifier="gimp_text_layer_get_kerning"
              version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimptextlayer_pdb.c"
             line="565">Check if kerning is used in the text layer.

This procedure checks if kerning is enabled in the specified text
layer.</doc>
        <source-position filename="libgimp/gimptextlayer_pdb.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptextlayer_pdb.c"
               line="574">A flag which is true if kerning is used in the text layer.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="567">The text layer.</doc>
            <type name="TextLayer" c:type="GimpTextLayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_language"
              c:identifier="gimp_text_layer_get_language"
              version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimptextlayer_pdb.c"
             line="640">Get the language used in the text layer.

This procedure returns the language string which is set for the text
in the text layer.</doc>
        <source-position filename="libgimp/gimptextlayer_pdb.h" line="63"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimptextlayer_pdb.c"
               line="649">The language used in the text layer.
         The returned value must be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="642">The text layer.</doc>
            <type name="TextLayer" c:type="GimpTextLayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_letter_spacing"
              c:identifier="gimp_text_layer_get_letter_spacing"
              version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimptextlayer_pdb.c"
             line="1095">Get the letter spacing used in a text layer.

This procedure returns the additional spacing between the single
glyphs in a text layer.</doc>
        <source-position filename="libgimp/gimptextlayer_pdb.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptextlayer_pdb.c"
               line="1104">The letter-spacing value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="1097">The text layer.</doc>
            <type name="TextLayer" c:type="GimpTextLayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_line_spacing"
              c:identifier="gimp_text_layer_get_line_spacing"
              version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimptextlayer_pdb.c"
             line="1019">Get the spacing between lines of text.

This procedure returns the line-spacing between lines of text in a
text layer.</doc>
        <source-position filename="libgimp/gimptextlayer_pdb.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptextlayer_pdb.c"
               line="1028">The line-spacing value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="1021">The text layer.</doc>
            <type name="TextLayer" c:type="GimpTextLayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_markup"
              c:identifier="gimp_text_layer_get_markup"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimptextlayer_pdb.c"
             line="167">Get the markup from a text layer as string.

This procedure returns the markup of the styles from a text layer.
The markup will be in the form of Pango's markup - See
https://www.pango.org/ for more information about Pango and its
markup.</doc>
        <source-position filename="libgimp/gimptextlayer_pdb.h" line="43"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimptextlayer_pdb.c"
               line="178">
         The markup which represents the style of the specified text layer.
         The returned value must be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="169">The text layer.</doc>
            <type name="TextLayer" c:type="GimpTextLayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_text"
              c:identifier="gimp_text_layer_get_text"
              version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimptextlayer_pdb.c"
             line="92">Get the text from a text layer as string.

This procedure returns the text from a text layer as a string.</doc>
        <source-position filename="libgimp/gimptextlayer_pdb.h" line="40"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimptextlayer_pdb.c"
               line="100">The text from the specified text layer.
         The returned value must be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="94">The text layer.</doc>
            <type name="TextLayer" c:type="GimpTextLayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="resize"
              c:identifier="gimp_text_layer_resize"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimptextlayer_pdb.c"
             line="1171">Resize the box of a text layer.

This procedure changes the width and height of a text layer while
keeping it as a text layer and not converting it to a bitmap like
gimp_layer_resize() would do.</doc>
        <source-position filename="libgimp/gimptextlayer_pdb.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptextlayer_pdb.c"
               line="1183">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="1173">The text layer.</doc>
            <type name="TextLayer" c:type="GimpTextLayer*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="1174">The new box width in pixels.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="1175">The new box height in pixels.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_antialias"
              c:identifier="gimp_text_layer_set_antialias"
              version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimptextlayer_pdb.c"
             line="448">Enable/disable anti-aliasing in a text layer.

This procedure enables or disables anti-aliasing of the text in a
text layer.</doc>
        <source-position filename="libgimp/gimptextlayer_pdb.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptextlayer_pdb.c"
               line="458">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="450">The text layer.</doc>
            <type name="TextLayer" c:type="GimpTextLayer*"/>
          </instance-parameter>
          <parameter name="antialias" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="451">Enable/disable antialiasing of the text.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_base_direction"
              c:identifier="gimp_text_layer_set_base_direction"
              version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimptextlayer_pdb.c"
             line="754">Set the base direction in the text layer.

This procedure sets the base direction used in applying the Unicode
bidirectional algorithm when rendering the text.</doc>
        <source-position filename="libgimp/gimptextlayer_pdb.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptextlayer_pdb.c"
               line="764">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="756">The text layer.</doc>
            <type name="TextLayer" c:type="GimpTextLayer*"/>
          </instance-parameter>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="757">The base direction of the text.</doc>
            <type name="TextDirection" c:type="GimpTextDirection"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_color"
              c:identifier="gimp_text_layer_set_color"
              version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimptextlayer_pdb.c"
             line="905">Set the color of the text in the text layer.

This procedure sets the text color in the text layer 'layer'.</doc>
        <source-position filename="libgimp/gimptextlayer_pdb.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptextlayer_pdb.c"
               line="914">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="907">The text layer.</doc>
            <type name="TextLayer" c:type="GimpTextLayer*"/>
          </instance-parameter>
          <parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="908">The color to use for the text.</doc>
            <type name="Gegl.Color" c:type="GeglColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_font"
              c:identifier="gimp_text_layer_set_font"
              version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimptextlayer_pdb.c"
             line="288">Set the font of a text layer.

This procedure modifies the font used in the specified text layer.</doc>
        <source-position filename="libgimp/gimptextlayer_pdb.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptextlayer_pdb.c"
               line="297">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="290">The text layer.</doc>
            <type name="TextLayer" c:type="GimpTextLayer*"/>
          </instance-parameter>
          <parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="291">The new font to use.</doc>
            <type name="Font" c:type="GimpFont*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_font_size"
              c:identifier="gimp_text_layer_set_font_size"
              version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimptextlayer_pdb.c"
             line="369">Set the font size.

This procedure changes the font size of a text layer. The size of
your font will be a double 'font-size' of 'unit' units.</doc>
        <source-position filename="libgimp/gimptextlayer_pdb.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptextlayer_pdb.c"
               line="380">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="371">The text layer.</doc>
            <type name="TextLayer" c:type="GimpTextLayer*"/>
          </instance-parameter>
          <parameter name="font_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="372">The font size.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="373">The unit to use for the font size.</doc>
            <type name="Unit" c:type="GimpUnit*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_style"
              c:identifier="gimp_text_layer_set_hint_style"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimp/gimptextlayer_pdb.c"
             line="525">Control how font outlines are hinted in a text layer.

This procedure sets the hint style for font outlines in a text
layer. This controls whether to fit font outlines to the pixel grid,
and if so, whether to optimize for fidelity or contrast.</doc>
        <source-position filename="libgimp/gimptextlayer_pdb.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptextlayer_pdb.c"
               line="536">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="527">The text layer.</doc>
            <type name="TextLayer" c:type="GimpTextLayer*"/>
          </instance-parameter>
          <parameter name="style" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="528">The new hint style.</doc>
            <type name="TextHintStyle" c:type="GimpTextHintStyle"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_indent"
              c:identifier="gimp_text_layer_set_indent"
              version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimptextlayer_pdb.c"
             line="980">Set the indentation of the first line in a text layer.

This procedure sets the indentation of the first line in the text
layer.</doc>
        <source-position filename="libgimp/gimptextlayer_pdb.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptextlayer_pdb.c"
               line="990">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="982">The text layer.</doc>
            <type name="TextLayer" c:type="GimpTextLayer*"/>
          </instance-parameter>
          <parameter name="indent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="983">The indentation for the first line.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_justification"
              c:identifier="gimp_text_layer_set_justification"
              version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimptextlayer_pdb.c"
             line="830">Set the justification of the text in a text layer.

This procedure sets the alignment of the lines in the text layer
relative to each other.</doc>
        <source-position filename="libgimp/gimptextlayer_pdb.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptextlayer_pdb.c"
               line="840">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="832">The text layer.</doc>
            <type name="TextLayer" c:type="GimpTextLayer*"/>
          </instance-parameter>
          <parameter name="justify" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="833">The justification for your text.</doc>
            <type name="TextJustification" c:type="GimpTextJustification"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_kerning"
              c:identifier="gimp_text_layer_set_kerning"
              version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimptextlayer_pdb.c"
             line="602">Enable/disable kerning in a text layer.

This procedure enables or disables kerning in a text layer.</doc>
        <source-position filename="libgimp/gimptextlayer_pdb.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptextlayer_pdb.c"
               line="611">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="604">The text layer.</doc>
            <type name="TextLayer" c:type="GimpTextLayer*"/>
          </instance-parameter>
          <parameter name="kerning" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="605">Enable/disable kerning in the text.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_language"
              c:identifier="gimp_text_layer_set_language"
              version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimptextlayer_pdb.c"
             line="678">Set the language of the text layer.

This procedure sets the language of the text in text layer. For some
scripts the language has an influence of how the text is rendered.</doc>
        <source-position filename="libgimp/gimptextlayer_pdb.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptextlayer_pdb.c"
               line="688">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="680">The text layer.</doc>
            <type name="TextLayer" c:type="GimpTextLayer*"/>
          </instance-parameter>
          <parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="681">The new language to use for the text layer.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_letter_spacing"
              c:identifier="gimp_text_layer_set_letter_spacing"
              version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimptextlayer_pdb.c"
             line="1132">Adjust the letter spacing in a text layer.

This procedure sets the additional spacing between the single glyphs
in a text layer.</doc>
        <source-position filename="libgimp/gimptextlayer_pdb.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptextlayer_pdb.c"
               line="1142">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="1134">The text layer.</doc>
            <type name="TextLayer" c:type="GimpTextLayer*"/>
          </instance-parameter>
          <parameter name="letter_spacing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="1135">The additional letter spacing to use.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_line_spacing"
              c:identifier="gimp_text_layer_set_line_spacing"
              version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimptextlayer_pdb.c"
             line="1056">Adjust the line spacing in a text layer.

This procedure sets the additional spacing used between lines a text
layer.</doc>
        <source-position filename="libgimp/gimptextlayer_pdb.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptextlayer_pdb.c"
               line="1066">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="1058">The text layer.</doc>
            <type name="TextLayer" c:type="GimpTextLayer*"/>
          </instance-parameter>
          <parameter name="line_spacing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="1059">The additional line spacing to use.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_markup"
              c:identifier="gimp_text_layer_set_markup"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimptextlayer_pdb.c"
             line="208">Set the markup for a text layer from a string.

This procedure sets the markup of the styles for a text layer. The
markup should be in the form of Pango's markup - See
https://docs.gtk.org/Pango/pango_markup.html for a reference.
Note that GIMP's text tool does not support all of Pango markup. Any
unsupported markup will still be applied to your text layer, yet
would be dropped as soon as you edit text with the tool.</doc>
        <source-position filename="libgimp/gimptextlayer_pdb.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptextlayer_pdb.c"
               line="222">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="210">The text layer.</doc>
            <type name="TextLayer" c:type="GimpTextLayer*"/>
          </instance-parameter>
          <parameter name="markup" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="211">The new markup to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_text"
              c:identifier="gimp_text_layer_set_text"
              version="2.6">
        <doc xml:space="preserve"
             filename="libgimp/gimptextlayer_pdb.c"
             line="129">Set the text of a text layer.

This procedure changes the text of a text layer.</doc>
        <source-position filename="libgimp/gimptextlayer_pdb.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptextlayer_pdb.c"
               line="138">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="131">The text layer.</doc>
            <type name="TextLayer" c:type="GimpTextLayer*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimptextlayer_pdb.c"
                 line="132">The new text to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="TextLayerClass"
            c:type="GimpTextLayerClass"
            glib:is-gtype-struct-for="TextLayer">
      <source-position filename="libgimp/gimptextlayer.h" line="38"/>
      <field name="parent_class">
        <type name="LayerClass" c:type="GimpLayerClass"/>
      </field>
    </record>
    <class name="ThumbnailProcedure"
           c:symbol-prefix="thumbnail_procedure"
           c:type="GimpThumbnailProcedure"
           parent="Procedure"
           glib:type-name="GimpThumbnailProcedure"
           glib:get-type="gimp_thumbnail_procedure_get_type"
           glib:type-struct="ThumbnailProcedureClass">
      <source-position filename="libgimp/gimpthumbnailprocedure.h" line="67"/>
      <constructor name="new"
                   c:identifier="gimp_thumbnail_procedure_new"
                   version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpthumbnailprocedure.c"
             line="218">Creates a new thumbnail procedure named @name which will call @run_func
when invoked.

See gimp_procedure_new() for information about @proc_type.

#GimpThumbnailProcedure is a #GimpProcedure subclass that makes it easier
to write file thumbnail procedures.

It automatically adds the standard

(#GFile, size)

arguments and the standard

(#GimpImage, image-width, image-height, #GimpImageType, num-layers)

return value of a thumbnail procedure. It is possible to add
additional arguments.

When invoked via gimp_procedure_run(), it unpacks these standard
arguments and calls @run_func which is a #GimpRunThumbnailFunc. The
"args" #GimpValueArray of #GimpRunThumbnailFunc only contains
additionally added arguments.

#GimpRunThumbnailFunc must gimp_value_array_truncate() the returned
#GimpValueArray to the number of return values it actually uses.</doc>
        <source-position filename="libgimp/gimpthumbnailprocedure.h"
                         line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpthumbnailprocedure.c"
               line="254">a new #GimpProcedure.</doc>
          <type name="Procedure" c:type="GimpProcedure*"/>
        </return-value>
        <parameters>
          <parameter name="plug_in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpthumbnailprocedure.c"
                 line="220">a #GimpPlugIn.</doc>
            <type name="PlugIn" c:type="GimpPlugIn*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpthumbnailprocedure.c"
                 line="221">the new procedure's name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="proc_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpthumbnailprocedure.c"
                 line="222">the new procedure's #GimpPDBProcType.</doc>
            <type name="PDBProcType" c:type="GimpPDBProcType"/>
          </parameter>
          <parameter name="run_func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4"
                     destroy="5">
            <doc xml:space="preserve"
                 filename="libgimp/gimpthumbnailprocedure.c"
                 line="223">the run function for the new procedure.</doc>
            <type name="RunThumbnailFunc" c:type="GimpRunThumbnailFunc"/>
          </parameter>
          <parameter name="run_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpthumbnailprocedure.c"
                 line="224">user data passed to @run_func.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="run_data_destroy"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="libgimp/gimpthumbnailprocedure.c"
                 line="225">free function for @run_data, or %NULL.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
    </class>
    <record name="ThumbnailProcedureClass"
            c:type="GimpThumbnailProcedureClass"
            glib:is-gtype-struct-for="ThumbnailProcedure">
      <source-position filename="libgimp/gimpthumbnailprocedure.h" line="67"/>
      <field name="parent_class">
        <type name="ProcedureClass" c:type="GimpProcedureClass"/>
      </field>
    </record>
    <enumeration name="TransferMode"
                 glib:type-name="GimpTransferMode"
                 glib:get-type="gimp_transfer_mode_get_type"
                 c:type="GimpTransferMode">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="1221">For choosing which brightness ranges to transform.</doc>
      <member name="shadows"
              value="0"
              c:identifier="GIMP_TRANSFER_SHADOWS"
              glib:nick="shadows"
              glib:name="GIMP_TRANSFER_SHADOWS">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1223">Shadows</doc>
      </member>
      <member name="midtones"
              value="1"
              c:identifier="GIMP_TRANSFER_MIDTONES"
              glib:nick="midtones"
              glib:name="GIMP_TRANSFER_MIDTONES">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1224">Midtones</doc>
      </member>
      <member name="highlights"
              value="2"
              c:identifier="GIMP_TRANSFER_HIGHLIGHTS"
              glib:nick="highlights"
              glib:name="GIMP_TRANSFER_HIGHLIGHTS">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1225">Highlights</doc>
      </member>
    </enumeration>
    <enumeration name="TransformDirection"
                 glib:type-name="GimpTransformDirection"
                 glib:get-type="gimp_transform_direction_get_type"
                 c:type="GimpTransformDirection">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="1241">Transform directions.</doc>
      <member name="forward"
              value="0"
              c:identifier="GIMP_TRANSFORM_FORWARD"
              glib:nick="forward"
              glib:name="GIMP_TRANSFORM_FORWARD">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1243">Normal (Forward)</doc>
      </member>
      <member name="backward"
              value="1"
              c:identifier="GIMP_TRANSFORM_BACKWARD"
              glib:nick="backward"
              glib:name="GIMP_TRANSFORM_BACKWARD">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1244">Corrective (Backward)</doc>
      </member>
    </enumeration>
    <enumeration name="TransformResize"
                 glib:type-name="GimpTransformResize"
                 glib:get-type="gimp_transform_resize_get_type"
                 c:type="GimpTransformResize">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="1259">Ways of clipping the result when transforming drawables.</doc>
      <member name="adjust"
              value="0"
              c:identifier="GIMP_TRANSFORM_RESIZE_ADJUST"
              glib:nick="adjust"
              glib:name="GIMP_TRANSFORM_RESIZE_ADJUST">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1261">Adjust</doc>
      </member>
      <member name="clip"
              value="1"
              c:identifier="GIMP_TRANSFORM_RESIZE_CLIP"
              glib:nick="clip"
              glib:name="GIMP_TRANSFORM_RESIZE_CLIP">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1262">Clip</doc>
      </member>
      <member name="crop"
              value="2"
              c:identifier="GIMP_TRANSFORM_RESIZE_CROP"
              glib:nick="crop"
              glib:name="GIMP_TRANSFORM_RESIZE_CROP">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1263">Crop to result</doc>
      </member>
      <member name="crop_with_aspect"
              value="3"
              c:identifier="GIMP_TRANSFORM_RESIZE_CROP_WITH_ASPECT"
              glib:nick="crop-with-aspect"
              glib:name="GIMP_TRANSFORM_RESIZE_CROP_WITH_ASPECT">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1264">Crop with aspect</doc>
      </member>
    </enumeration>
    <function-macro name="UNAVAILABLE"
                    c:identifier="GIMP_UNAVAILABLE"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpbasetypes.h" line="39"/>
      <parameters>
        <parameter name="maj">
        </parameter>
        <parameter name="min">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Unit"
           c:symbol-prefix="unit"
           c:type="GimpUnit"
           parent="GObject.Object"
           glib:type-name="GimpUnit"
           glib:get-type="gimp_unit_get_type"
           glib:type-struct="UnitClass">
      <doc xml:space="preserve"
           filename="libgimp/gimpunit_pdb.c"
           line="30">Provides operations on units, a collection of predefined units and
functions to create new units.</doc>
      <source-position filename="libgimpbase/gimpunit.h" line="41"/>
      <constructor name="new" c:identifier="gimp_unit_new">
        <doc xml:space="preserve"
             filename="libgimp/gimpunit_pdb.c"
             line="40">Creates a new unit.

This procedure creates a new unit and returns it. Note that the new
unit will have it's deletion flag set to TRUE, so you will have to
set it to FALSE with gimp_unit_set_deletion_flag() to make it
persistent.</doc>
        <source-position filename="libgimp/gimpunit_pdb.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpunit_pdb.c"
               line="55">The new unit.</doc>
          <type name="Unit" c:type="GimpUnit*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpunit_pdb.c"
                 line="42">The new unit's name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="factor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpunit_pdb.c"
                 line="43">The new unit's factor.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="digits" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpunit_pdb.c"
                 line="44">The new unit's digits.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="symbol" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpunit_pdb.c"
                 line="45">The new unit's symbol.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="abbreviation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpunit_pdb.c"
                 line="46">The new unit's abbreviation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="format_string"
                c:identifier="gimp_unit_format_string"
                version="2.8">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpunit.c"
             line="761">The @format string supports the following percent expansions:

* `%n`: Name (long label)
* `%a`: Abbreviation (short label)
* `%%`: Literal percent
* `%f`: Factor (how many units make up an inch)
* `%y`: Symbol (e.g. `''` for `GIMP_UNIT_INCH`)</doc>
        <source-position filename="libgimpbase/gimpunit.h" line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="775">A newly allocated string with above percent
         expressions replaced with the resp. strings for @unit.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpunit.c"
                 line="763">A printf-like format string which is used to create the unit
         string.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpunit.c"
                 line="765">A unit.</doc>
            <type name="Unit" c:type="GimpUnit*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_by_id"
                c:identifier="gimp_unit_get_by_id"
                version="3.0">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpunit.c"
             line="494">Returns the unique [class@Unit] object corresponding to @unit_id,
which is the integer identifier as returned by [method@Unit.get_id].</doc>
        <source-position filename="libgimpbase/gimpunit.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="501">the #GimpUnit object with ID @unit_id.</doc>
          <type name="Unit" c:type="GimpUnit*"/>
        </return-value>
        <parameters>
          <parameter name="unit_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpunit.c"
                 line="496">The unit id.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="inch" c:identifier="gimp_unit_inch" version="3.0">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpunit.c"
             line="616">Returns the unique object representing inch unit.

This procedure returns the unit representing inch. The returned
object is unique across the whole run.</doc>
        <source-position filename="libgimpbase/gimpunit.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="624">The unique inch unit.</doc>
          <type name="Unit" c:type="GimpUnit*"/>
        </return-value>
      </function>
      <function name="mm" c:identifier="gimp_unit_mm" version="3.0">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpunit.c"
             line="634">Returns the unique object representing millimeter unit.

This procedure returns the unit representing millimeter. The
returned object is unique across the whole run.</doc>
        <source-position filename="libgimpbase/gimpunit.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="642">The unique millimeter unit.</doc>
          <type name="Unit" c:type="GimpUnit*"/>
        </return-value>
      </function>
      <function name="percent" c:identifier="gimp_unit_percent" version="3.0">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpunit.c"
             line="688">Returns the unique object representing percent dimensions relatively
to an image.

This procedure returns the unit representing typographical points.
The returned object is unique across the whole run.</doc>
        <source-position filename="libgimpbase/gimpunit.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="697">The unique percent unit.</doc>
          <type name="Unit" c:type="GimpUnit*"/>
        </return-value>
      </function>
      <function name="pica" c:identifier="gimp_unit_pica" version="3.0">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpunit.c"
             line="670">Returns the unique object representing Pica unit.

This procedure returns the unit representing Picas.
The returned object is unique across the whole run.</doc>
        <source-position filename="libgimpbase/gimpunit.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="678">The unique pica unit.</doc>
          <type name="Unit" c:type="GimpUnit*"/>
        </return-value>
      </function>
      <function name="pixel" c:identifier="gimp_unit_pixel" version="3.0">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpunit.c"
             line="598">Returns the unique object representing pixel unit.

This procedure returns the unit representing pixel. The returned
object is unique across the whole run.</doc>
        <source-position filename="libgimpbase/gimpunit.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="606">The unique pixel unit.</doc>
          <type name="Unit" c:type="GimpUnit*"/>
        </return-value>
      </function>
      <function name="point" c:identifier="gimp_unit_point" version="3.0">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpunit.c"
             line="652">Returns the unique object representing typographical point unit.

This procedure returns the unit representing typographical points.
The returned object is unique across the whole run.</doc>
        <source-position filename="libgimpbase/gimpunit.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="660">The unique point unit.</doc>
          <type name="Unit" c:type="GimpUnit*"/>
        </return-value>
      </function>
      <method name="get_abbreviation"
              c:identifier="gimp_unit_get_abbreviation"
              glib:get-property="abbreviation">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpunit.c"
             line="422">This function returns the abbreviation of the unit (e.g. "in" for
inches).
It can be used as a short label for the unit in the interface.
For long labels, use [method@Unit.get_name].

NOTE: This string must not be changed or freed.</doc>
        <source-position filename="libgimpbase/gimpunit.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="433">The unit's abbreviation.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpunit.c"
                 line="424">The unit you want to know the abbreviation of.</doc>
            <type name="Unit" c:type="GimpUnit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_deletion_flag"
              c:identifier="gimp_unit_get_deletion_flag">
        <source-position filename="libgimpbase/gimpunit.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="447">The unit's @deletion_flag.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpunit.c"
                 line="445">The unit you want to know the @deletion_flag of.</doc>
            <type name="Unit" c:type="GimpUnit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_digits"
              c:identifier="gimp_unit_get_digits"
              glib:get-property="digits">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpunit.c"
             line="349">Returns the number of digits set for @unit.
Built-in units' accuracy is approximately the same as an inch with
two digits. User-defined units can suggest a different accuracy.

Note: the value is as-set by defaults or by the user and does not
necessary provide enough precision on high-resolution units.
When the information is needed for a specific unit, the use of
gimp_unit_get_scaled_digits() may be more appropriate.

Returns 0 for @unit == GIMP_UNIT_PIXEL.</doc>
        <source-position filename="libgimpbase/gimpunit.h" line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="364">The suggested number of digits.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpunit.c"
                 line="351">The unit you want to know the digits.</doc>
            <type name="Unit" c:type="GimpUnit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_factor"
              c:identifier="gimp_unit_get_factor"
              glib:get-property="factor">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpunit.c"
             line="329">A #GimpUnit's @factor is defined to be:

distance_in_units == (@factor * distance_in_inches)

Returns 0 for @unit == GIMP_UNIT_PIXEL.</doc>
        <source-position filename="libgimpbase/gimpunit.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="339">The unit's factor.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpunit.c"
                 line="331">The unit you want to know the factor of.</doc>
            <type name="Unit" c:type="GimpUnit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="gimp_unit_get_id"
              glib:get-property="id">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpunit.c"
             line="290">The ID can be used to retrieve the unit with [func@Unit.get_by_id].

Note that this ID will be stable within a single session of GIMP, but
you should not expect this ID to stay the same across multiple runs.</doc>
        <source-position filename="libgimpbase/gimpunit.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="299">The unit's ID.</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpunit.c"
                 line="292">The unit you want to know the integer ID of.</doc>
            <type name="Unit" c:type="GimpUnit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="gimp_unit_get_name"
              glib:get-property="name">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpunit.c"
             line="309">This function returns the usual name of the unit (e.g. "inches").
It can be used as the long label for the unit in the interface.
For short labels, use [method@Unit.get_abbreviation].

NOTE: This string must not be changed or freed.</doc>
        <source-position filename="libgimpbase/gimpunit.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="319">The unit's name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpunit.c"
                 line="311">The unit you want to know the name of.</doc>
            <type name="Unit" c:type="GimpUnit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_scaled_digits"
              c:identifier="gimp_unit_get_scaled_digits">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpunit.c"
             line="374">Returns the number of digits a @unit field should provide to get
enough accuracy so that every pixel position shows a different
value from neighboring pixels.

Note: when needing digit accuracy to display a diagonal distance,
the @resolution may not correspond to the unit's horizontal or
vertical resolution, but instead to the result of:
`distance_in_pixel / distance_in_inch`.</doc>
        <source-position filename="libgimpbase/gimpunit.h" line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="388">The suggested number of digits.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpunit.c"
                 line="376">The unit you want to know the digits.</doc>
            <type name="Unit" c:type="GimpUnit*"/>
          </instance-parameter>
          <parameter name="resolution" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpunit.c"
                 line="377">the resolution in PPI.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_symbol"
              c:identifier="gimp_unit_get_symbol"
              glib:get-property="symbol">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpunit.c"
             line="404">This is e.g. "''" for UNIT_INCH.

NOTE: This string must not be changed or freed.</doc>
        <source-position filename="libgimpbase/gimpunit.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="412">The unit's symbol.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpunit.c"
                 line="406">The unit you want to know the symbol of.</doc>
            <type name="Unit" c:type="GimpUnit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_built_in"
              c:identifier="gimp_unit_is_built_in"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpunit.c"
             line="707">Returns whether the unit is built-in.

This procedure returns @unit is a built-in unit. In particular the
deletion flag cannot be set on built-in units.</doc>
        <source-position filename="libgimpbase/gimpunit.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="716">Whether @unit is built-in.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpunit.c"
                 line="709">the unit.</doc>
            <type name="Unit" c:type="GimpUnit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_metric"
              c:identifier="gimp_unit_is_metric"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpunit.c"
             line="728">Checks if the given @unit is metric. A simplistic test is used
that looks at the unit's factor and checks if it is 2.54 multiplied
by some common powers of 10. Currently it checks for mm, cm, dm, m.

See also: gimp_unit_get_factor()</doc>
        <source-position filename="libgimpbase/gimpunit.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="738">%TRUE if the @unit is metric.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpunit.c"
                 line="730">The unit</doc>
            <type name="Unit" c:type="GimpUnit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_deletion_flag"
              c:identifier="gimp_unit_set_deletion_flag">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpunit.c"
             line="465">Sets a #GimpUnit's @deletion_flag. If the @deletion_flag of a unit is
%TRUE when GIMP exits, this unit will not be saved in the users's
"unitrc" file.

Trying to change the @deletion_flag of a built-in unit will be silently
ignored.</doc>
        <source-position filename="libgimpbase/gimpunit.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpunit.c"
                 line="467">The unit you want to set the @deletion_flag for.</doc>
            <type name="Unit" c:type="GimpUnit*"/>
          </instance-parameter>
          <parameter name="deletion_flag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpunit.c"
                 line="468">The new deletion_flag.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="abbreviation"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_abbreviation"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="digits"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_digits"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="factor"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_factor"
                default-value="1.000000">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_id"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="symbol"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_symbol"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="UnitClass"
            c:type="GimpUnitClass"
            glib:is-gtype-struct-for="Unit">
      <source-position filename="libgimpbase/gimpunit.h" line="41"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="UnitID" c:type="GimpUnitID">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="1281">Integer IDs of built-in units used for dimensions in images. These
IDs are meant to stay stable but user-created units IDs may change
from one session to another.</doc>
      <source-position filename="libgimpbase/gimpbaseenums.h" line="1307"/>
      <member name="pixel" value="0" c:identifier="GIMP_UNIT_PIXEL">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1283">Pixels</doc>
      </member>
      <member name="inch" value="1" c:identifier="GIMP_UNIT_INCH">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1284">Inches</doc>
      </member>
      <member name="mm" value="2" c:identifier="GIMP_UNIT_MM">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1285">Millimeters</doc>
      </member>
      <member name="point" value="3" c:identifier="GIMP_UNIT_POINT">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1286">Points</doc>
      </member>
      <member name="pica" value="4" c:identifier="GIMP_UNIT_PICA">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1287">Picas</doc>
      </member>
      <member name="end" value="5" c:identifier="GIMP_UNIT_END">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1288">Marker for end-of-builtin-units</doc>
      </member>
      <member name="percent" value="65536" c:identifier="GIMP_UNIT_PERCENT">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbaseenums.h"
             line="1289">Pseudo-unit percent</doc>
      </member>
    </enumeration>
    <function-macro name="VALUES_DUP_BYTES"
                    c:identifier="GIMP_VALUES_DUP_BYTES"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="174"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_DUP_FILE"
                    c:identifier="GIMP_VALUES_DUP_FILE"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="383"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_DUP_FLOAT_ARRAY"
                    c:identifier="GIMP_VALUES_DUP_FLOAT_ARRAY"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="204"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_DUP_INT32_ARRAY"
                    c:identifier="GIMP_VALUES_DUP_INT32_ARRAY"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="189"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_DUP_OBJECT_ARRAY"
                    c:identifier="GIMP_VALUES_DUP_OBJECT_ARRAY"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="234"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_DUP_PARAM"
                    c:identifier="GIMP_VALUES_DUP_PARAM"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="159"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_DUP_PARASITE"
                    c:identifier="GIMP_VALUES_DUP_PARASITE"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="144"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_DUP_STRING"
                    c:identifier="GIMP_VALUES_DUP_STRING"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="111"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_DUP_STRV"
                    c:identifier="GIMP_VALUES_DUP_STRV"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="219"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_BOOLEAN"
                    c:identifier="GIMP_VALUES_GET_BOOLEAN"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="46"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_BRUSH"
                    c:identifier="GIMP_VALUES_GET_BRUSH"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="400"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_BYTES"
                    c:identifier="GIMP_VALUES_GET_BYTES"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="171"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_CHANNEL"
                    c:identifier="GIMP_VALUES_GET_CHANNEL"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="332"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_CHANNEL_ID"
                    c:identifier="GIMP_VALUES_GET_CHANNEL_ID"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="335"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_CHOICE"
                    c:identifier="GIMP_VALUES_GET_CHOICE"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="99"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_COLOR"
                    c:identifier="GIMP_VALUES_GET_COLOR"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="132"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_DISPLAY"
                    c:identifier="GIMP_VALUES_GET_DISPLAY"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="248"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_DISPLAY_ID"
                    c:identifier="GIMP_VALUES_GET_DISPLAY_ID"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="251"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_DOUBLE"
                    c:identifier="GIMP_VALUES_GET_DOUBLE"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="81"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_DRAWABLE"
                    c:identifier="GIMP_VALUES_GET_DRAWABLE"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="284"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_DRAWABLE_ID"
                    c:identifier="GIMP_VALUES_GET_DRAWABLE_ID"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="287"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_ENUM"
                    c:identifier="GIMP_VALUES_GET_ENUM"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="90"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_FILE"
                    c:identifier="GIMP_VALUES_GET_FILE"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="380"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_FLOAT_ARRAY"
                    c:identifier="GIMP_VALUES_GET_FLOAT_ARRAY"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="201"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_FONT"
                    c:identifier="GIMP_VALUES_GET_FONT"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="405"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_GRADIENT"
                    c:identifier="GIMP_VALUES_GET_GRADIENT"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="410"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_GROUP_LAYER"
                    c:identifier="GIMP_VALUES_GET_GROUP_LAYER"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="320"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_GROUP_LAYER_ID"
                    c:identifier="GIMP_VALUES_GET_GROUP_LAYER_ID"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="323"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_IMAGE"
                    c:identifier="GIMP_VALUES_GET_IMAGE"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="260"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_IMAGE_ID"
                    c:identifier="GIMP_VALUES_GET_IMAGE_ID"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="263"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_INT"
                    c:identifier="GIMP_VALUES_GET_INT"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="55"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_INT32_ARRAY"
                    c:identifier="GIMP_VALUES_GET_INT32_ARRAY"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="186"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_ITEM"
                    c:identifier="GIMP_VALUES_GET_ITEM"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="272"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_ITEM_ID"
                    c:identifier="GIMP_VALUES_GET_ITEM_ID"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="275"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_LAYER"
                    c:identifier="GIMP_VALUES_GET_LAYER"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="296"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_LAYER_ID"
                    c:identifier="GIMP_VALUES_GET_LAYER_ID"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="299"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_LAYER_MASK"
                    c:identifier="GIMP_VALUES_GET_LAYER_MASK"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="344"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_LAYER_MASK_ID"
                    c:identifier="GIMP_VALUES_GET_LAYER_MASK_ID"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="347"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_OBJECT_ARRAY"
                    c:identifier="GIMP_VALUES_GET_OBJECT_ARRAY"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="231"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_PALETTE"
                    c:identifier="GIMP_VALUES_GET_PALETTE"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="415"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_PARAM"
                    c:identifier="GIMP_VALUES_GET_PARAM"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="156"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_PARASITE"
                    c:identifier="GIMP_VALUES_GET_PARASITE"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="141"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_PATH"
                    c:identifier="GIMP_VALUES_GET_PATH"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="368"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_PATH_ID"
                    c:identifier="GIMP_VALUES_GET_PATH_ID"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="371"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_PATTERN"
                    c:identifier="GIMP_VALUES_GET_PATTERN"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="420"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_RESOURCE"
                    c:identifier="GIMP_VALUES_GET_RESOURCE"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="395"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_SELECTION"
                    c:identifier="GIMP_VALUES_GET_SELECTION"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="356"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_SELECTION_ID"
                    c:identifier="GIMP_VALUES_GET_SELECTION_ID"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="359"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_STRING"
                    c:identifier="GIMP_VALUES_GET_STRING"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="108"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_STRV"
                    c:identifier="GIMP_VALUES_GET_STRV"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="216"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_TEXT_LAYER"
                    c:identifier="GIMP_VALUES_GET_TEXT_LAYER"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="308"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_TEXT_LAYER_ID"
                    c:identifier="GIMP_VALUES_GET_TEXT_LAYER_ID"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="311"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_UCHAR"
                    c:identifier="GIMP_VALUES_GET_UCHAR"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="73"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_UINT"
                    c:identifier="GIMP_VALUES_GET_UINT"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="64"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_GET_UNIT"
                    c:identifier="GIMP_VALUES_GET_UNIT"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="428"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_BOOLEAN"
                    c:identifier="GIMP_VALUES_SET_BOOLEAN"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="49"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_BRUSH"
                    c:identifier="GIMP_VALUES_SET_BRUSH"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="402"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_BYTES"
                    c:identifier="GIMP_VALUES_SET_BYTES"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="177"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_CHANNEL"
                    c:identifier="GIMP_VALUES_SET_CHANNEL"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="338"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_CHOICE"
                    c:identifier="GIMP_VALUES_SET_CHOICE"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="102"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_COLOR"
                    c:identifier="GIMP_VALUES_SET_COLOR"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="135"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_DISPLAY"
                    c:identifier="GIMP_VALUES_SET_DISPLAY"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="254"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_DOUBLE"
                    c:identifier="GIMP_VALUES_SET_DOUBLE"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="84"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_DRAWABLE"
                    c:identifier="GIMP_VALUES_SET_DRAWABLE"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="290"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_ENUM"
                    c:identifier="GIMP_VALUES_SET_ENUM"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="93"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_FILE"
                    c:identifier="GIMP_VALUES_SET_FILE"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="386"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_FLOAT_ARRAY"
                    c:identifier="GIMP_VALUES_SET_FLOAT_ARRAY"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="207"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
        <parameter name="length">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_FONT"
                    c:identifier="GIMP_VALUES_SET_FONT"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="407"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_GRADIENT"
                    c:identifier="GIMP_VALUES_SET_GRADIENT"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="412"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_GROUP_LAYER"
                    c:identifier="GIMP_VALUES_SET_GROUP_LAYER"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="326"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_IMAGE"
                    c:identifier="GIMP_VALUES_SET_IMAGE"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="266"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_INT"
                    c:identifier="GIMP_VALUES_SET_INT"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="58"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_INT32_ARRAY"
                    c:identifier="GIMP_VALUES_SET_INT32_ARRAY"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="192"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
        <parameter name="length">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_ITEM"
                    c:identifier="GIMP_VALUES_SET_ITEM"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="278"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_LAYER"
                    c:identifier="GIMP_VALUES_SET_LAYER"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="302"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_LAYER_MASK"
                    c:identifier="GIMP_VALUES_SET_LAYER_MASK"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="350"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_OBJECT_ARRAY"
                    c:identifier="GIMP_VALUES_SET_OBJECT_ARRAY"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="237"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="object_type">
        </parameter>
        <parameter name="value">
        </parameter>
        <parameter name="length">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_PALETTE"
                    c:identifier="GIMP_VALUES_SET_PALETTE"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="417"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_PARAM"
                    c:identifier="GIMP_VALUES_SET_PARAM"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="162"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_PARASITE"
                    c:identifier="GIMP_VALUES_SET_PARASITE"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="147"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_PATH"
                    c:identifier="GIMP_VALUES_SET_PATH"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="374"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_PATTERN"
                    c:identifier="GIMP_VALUES_SET_PATTERN"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="422"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_RESOURCE"
                    c:identifier="GIMP_VALUES_SET_RESOURCE"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="397"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_SELECTION"
                    c:identifier="GIMP_VALUES_SET_SELECTION"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="362"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_STRING"
                    c:identifier="GIMP_VALUES_SET_STRING"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="114"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_STRV"
                    c:identifier="GIMP_VALUES_SET_STRV"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="222"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_TEXT_LAYER"
                    c:identifier="GIMP_VALUES_SET_TEXT_LAYER"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="314"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_UCHAR"
                    c:identifier="GIMP_VALUES_SET_UCHAR"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="76"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_UINT"
                    c:identifier="GIMP_VALUES_SET_UINT"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="67"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_SET_UNIT"
                    c:identifier="GIMP_VALUES_SET_UNIT"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="430"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_TAKE_BYTES"
                    c:identifier="GIMP_VALUES_TAKE_BYTES"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="180"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
        <parameter name="length">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_TAKE_FILE"
                    c:identifier="GIMP_VALUES_TAKE_FILE"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="389"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_TAKE_FLOAT_ARRAY"
                    c:identifier="GIMP_VALUES_TAKE_FLOAT_ARRAY"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="210"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
        <parameter name="length">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_TAKE_INT32_ARRAY"
                    c:identifier="GIMP_VALUES_TAKE_INT32_ARRAY"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="195"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
        <parameter name="length">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_TAKE_OBJECT_ARRAY"
                    c:identifier="GIMP_VALUES_TAKE_OBJECT_ARRAY"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="241"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="object_type">
        </parameter>
        <parameter name="value">
        </parameter>
        <parameter name="length">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_TAKE_PARAM"
                    c:identifier="GIMP_VALUES_TAKE_PARAM"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="165"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_TAKE_PARASITE"
                    c:identifier="GIMP_VALUES_TAKE_PARASITE"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="150"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_TAKE_STRING"
                    c:identifier="GIMP_VALUES_TAKE_STRING"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="117"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUES_TAKE_STRV"
                    c:identifier="GIMP_VALUES_TAKE_STRV"
                    introspectable="0">
      <source-position filename="libgimp/gimpprocedure-params.h" line="225"/>
      <parameters>
        <parameter name="args">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUE_HOLDS_ARRAY"
                    c:identifier="GIMP_VALUE_HOLDS_ARRAY"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="205"/>
      <parameters>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUE_HOLDS_BRUSH"
                    c:identifier="GIMP_VALUE_HOLDS_BRUSH"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="372"/>
      <parameters>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUE_HOLDS_CHANNEL"
                    c:identifier="GIMP_VALUE_HOLDS_CHANNEL"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="203"/>
      <parameters>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUE_HOLDS_COLOR"
                    c:identifier="GIMP_VALUE_HOLDS_COLOR"
                    introspectable="0">
      <source-position filename="libgimpcolor/gimpcolor.h" line="47"/>
      <parameters>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUE_HOLDS_COLOR_ARRAY"
                    c:identifier="GIMP_VALUE_HOLDS_COLOR_ARRAY"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="361"/>
      <parameters>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUE_HOLDS_CONFIG_PATH"
                    c:identifier="GIMP_VALUE_HOLDS_CONFIG_PATH"
                    introspectable="0">
      <source-position filename="libgimpconfig/gimpconfig-path.h" line="39"/>
      <parameters>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUE_HOLDS_DISPLAY"
                    c:identifier="GIMP_VALUE_HOLDS_DISPLAY"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="311"/>
      <parameters>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUE_HOLDS_DRAWABLE"
                    c:identifier="GIMP_VALUE_HOLDS_DRAWABLE"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="95"/>
      <parameters>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUE_HOLDS_EXPORT_OPTIONS"
                    c:identifier="GIMP_VALUE_HOLDS_EXPORT_OPTIONS"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpexportoptions.h" line="36"/>
      <parameters>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUE_HOLDS_FLOAT_ARRAY"
                    c:identifier="GIMP_VALUE_HOLDS_FLOAT_ARRAY"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="283"/>
      <parameters>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUE_HOLDS_FONT"
                    c:identifier="GIMP_VALUE_HOLDS_FONT"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="488"/>
      <parameters>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUE_HOLDS_GRADIENT"
                    c:identifier="GIMP_VALUE_HOLDS_GRADIENT"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="430"/>
      <parameters>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUE_HOLDS_GROUP_LAYER"
                    c:identifier="GIMP_VALUE_HOLDS_GROUP_LAYER"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="176"/>
      <parameters>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUE_HOLDS_IMAGE"
                    c:identifier="GIMP_VALUE_HOLDS_IMAGE"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="37"/>
      <parameters>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUE_HOLDS_INT32_ARRAY"
                    c:identifier="GIMP_VALUE_HOLDS_INT32_ARRAY"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="238"/>
      <parameters>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUE_HOLDS_ITEM"
                    c:identifier="GIMP_VALUE_HOLDS_ITEM"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="66"/>
      <parameters>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUE_HOLDS_LAYER"
                    c:identifier="GIMP_VALUE_HOLDS_LAYER"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="122"/>
      <parameters>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUE_HOLDS_LAYER_MASK"
                    c:identifier="GIMP_VALUE_HOLDS_LAYER_MASK"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="230"/>
      <parameters>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUE_HOLDS_MATRIX2"
                    c:identifier="GIMP_VALUE_HOLDS_MATRIX2"
                    introspectable="0">
      <source-position filename="libgimpmath/gimpmatrix.h" line="39"/>
      <parameters>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUE_HOLDS_MATRIX3"
                    c:identifier="GIMP_VALUE_HOLDS_MATRIX3"
                    introspectable="0">
      <source-position filename="libgimpmath/gimpmatrix.h" line="75"/>
      <parameters>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUE_HOLDS_MEMSIZE"
                    c:identifier="GIMP_VALUE_HOLDS_MEMSIZE"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpmemsize.h" line="36"/>
      <parameters>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUE_HOLDS_OBJECT_ARRAY"
                    c:identifier="GIMP_VALUE_HOLDS_OBJECT_ARRAY"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="400"/>
      <parameters>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUE_HOLDS_PALETTE"
                    c:identifier="GIMP_VALUE_HOLDS_PALETTE"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="459"/>
      <parameters>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUE_HOLDS_PARASITE"
                    c:identifier="GIMP_VALUE_HOLDS_PARASITE"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpparasite.h" line="39"/>
      <parameters>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUE_HOLDS_PATH"
                    c:identifier="GIMP_VALUE_HOLDS_PATH"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="284"/>
      <parameters>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUE_HOLDS_PATTERN"
                    c:identifier="GIMP_VALUE_HOLDS_PATTERN"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="401"/>
      <parameters>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUE_HOLDS_RESOURCE"
                    c:identifier="GIMP_VALUE_HOLDS_RESOURCE"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="340"/>
      <parameters>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUE_HOLDS_SELECTION"
                    c:identifier="GIMP_VALUE_HOLDS_SELECTION"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="257"/>
      <parameters>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUE_HOLDS_TEXT_LAYER"
                    c:identifier="GIMP_VALUE_HOLDS_TEXT_LAYER"
                    introspectable="0">
      <source-position filename="libgimp/gimpparamspecs.h" line="149"/>
      <parameters>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUE_HOLDS_UNIT"
                    c:identifier="GIMP_VALUE_HOLDS_UNIT"
                    introspectable="0">
      <source-position filename="libgimpbase/gimpunit.h" line="87"/>
      <parameters>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="VERSION" value="2.99.19" c:type="GIMP_VERSION">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpversion.h"
           line="45">The GIMP version as a string.</doc>
      <source-position filename="libgimpbase/gimpversion.h" line="50"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <record name="ValueArray"
            c:type="GimpValueArray"
            opaque="1"
            version="2.10"
            glib:type-name="GimpValueArray"
            glib:get-type="gimp_value_array_get_type"
            c:symbol-prefix="value_array">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpvaluearray.c"
           line="35">The prime purpose of a #GimpValueArray is for it to be used as an
object property that holds an array of values. A #GimpValueArray wraps
an array of #GValue elements in order for it to be used as a boxed
type through %GIMP_TYPE_VALUE_ARRAY.</doc>
      <source-position filename="libgimpbase/gimpbasetypes.h" line="53"/>
      <constructor name="new"
                   c:identifier="gimp_value_array_new"
                   version="2.10">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpvaluearray.c"
             line="167">Allocate and initialize a new #GimpValueArray, optionally preserve space
for @n_prealloced elements. New arrays always contain 0 elements,
regardless of the value of @n_prealloced.</doc>
        <source-position filename="libgimpbase/gimpvaluearray.h" line="43"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpvaluearray.c"
               line="175">a newly allocated #GimpValueArray with 0 values</doc>
          <type name="ValueArray" c:type="GimpValueArray*"/>
        </return-value>
        <parameters>
          <parameter name="n_prealloced" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpvaluearray.c"
                 line="169">number of values to preallocate space for</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_types"
                   c:identifier="gimp_value_array_new_from_types"
                   version="3.0"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpvaluearray.c"
             line="191">Allocate and initialize a new #GimpValueArray, and fill it with
values that are given as a list of (#GType, value) pairs,
terminated by #G_TYPE_NONE.</doc>
        <source-position filename="libgimpbase/gimpvaluearray.h" line="44"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpvaluearray.c"
               line="201">a newly allocated #GimpValueArray, or %NULL if
         an error happened.</doc>
          <type name="ValueArray" c:type="GimpValueArray*"/>
        </return-value>
        <parameters>
          <parameter name="error_msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpvaluearray.c"
                 line="193">return location for an error message.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="first_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpvaluearray.c"
                 line="194">first type in the array, or #G_TYPE_NONE.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpvaluearray.c"
                 line="195">the remaining types in the array, terminated by #G_TYPE_NONE</doc>
            <varargs/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_types_valist"
                   c:identifier="gimp_value_array_new_from_types_valist"
                   version="3.0"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpvaluearray.c"
             line="227">Allocate and initialize a new #GimpValueArray, and fill it with
@va_args given in the order as passed to
gimp_value_array_new_from_types().</doc>
        <source-position filename="libgimpbase/gimpvaluearray.h" line="47"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpvaluearray.c"
               line="237">a newly allocated #GimpValueArray, or %NULL if
         an error happened.</doc>
          <type name="ValueArray" c:type="GimpValueArray*"/>
        </return-value>
        <parameters>
          <parameter name="error_msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpvaluearray.c"
                 line="229">return location for an error message.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="first_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpvaluearray.c"
                 line="230">first type in the array, or #G_TYPE_NONE.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="va_args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpvaluearray.c"
                 line="231">a va_list of GTypes and values, terminated by #G_TYPE_NONE</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_values"
                   c:identifier="gimp_value_array_new_from_values"
                   version="3.0">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpvaluearray.c"
             line="314">Allocate and initialize a new #GimpValueArray, and fill it with
the given #GValues.  When no #GValues are given, returns empty #GimpValueArray.</doc>
        <source-position filename="libgimpbase/gimpvaluearray.h" line="50"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpvaluearray.c"
               line="322">a newly allocated #GimpValueArray.</doc>
          <type name="ValueArray" c:type="GimpValueArray*"/>
        </return-value>
        <parameters>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpvaluearray.c"
                 line="316">The #GValue elements</doc>
            <array length="1" zero-terminated="0" c:type="const GValue*">
              <type name="GObject.Value" c:type="GValue"/>
            </array>
          </parameter>
          <parameter name="n_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpvaluearray.c"
                 line="317">the number of value elements</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="append"
              c:identifier="gimp_value_array_append"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpvaluearray.c"
             line="430">Insert a copy of @value as last element of @value_array. If @value is
%NULL, an uninitialized value is appended.</doc>
        <source-position filename="libgimpbase/gimpvaluearray.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpvaluearray.c"
               line="438">the #GimpValueArray passed in as @value_array</doc>
          <type name="ValueArray" c:type="GimpValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpvaluearray.c"
                 line="432">#GimpValueArray to add an element to</doc>
            <type name="ValueArray" c:type="GimpValueArray*"/>
          </instance-parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpvaluearray.c"
                 line="433">#GValue to copy into #GimpValueArray, or %NULL</doc>
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="gimp_value_array_copy" version="3.0">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpvaluearray.c"
             line="295">Return an exact copy of a #GimpValueArray by duplicating all its values.</doc>
        <source-position filename="libgimpbase/gimpvaluearray.h" line="53"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpvaluearray.c"
               line="301">a newly allocated #GimpValueArray.</doc>
          <type name="ValueArray" c:type="GimpValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpvaluearray.c"
                 line="297">#GimpValueArray to copy</doc>
            <type name="ValueArray" c:type="const GimpValueArray*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_color_array"
              c:identifier="gimp_value_array_get_color_array"
              version="3.0">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpvaluearray.c"
             line="100">Return a pointer to the value at @index contained in @value_array. This value
is supposed to be a [type@ColorArray].</doc>
        <source-position filename="libgimpbase/gimpvaluearray.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpvaluearray.c"
               line="108">the [type@ColorArray] stored at @index in @value_array.</doc>
          <array c:type="GeglColor**">
            <type name="Gegl.Color" c:type="GeglColor*"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="value_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpvaluearray.c"
                 line="102">#GimpValueArray to get a value from</doc>
            <type name="ValueArray" c:type="const GimpValueArray*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpvaluearray.c"
                 line="103">index of the value of interest</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="index"
              c:identifier="gimp_value_array_index"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpvaluearray.c"
             line="73">Return a pointer to the value at @index contained in @value_array.

*Note*: in binding languages, some custom types fail to be correctly passed
through. For these types, you should use specific functions.
For instance, in the Python binding, a [type@ColorArray] `GValue`
won't be usable with this function. You should use instead
[method@ValueArray.get_color_array].</doc>
        <source-position filename="libgimpbase/gimpvaluearray.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpvaluearray.c"
               line="86">pointer to a value at @index in @value_array</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpvaluearray.c"
                 line="75">#GimpValueArray to get a value from</doc>
            <type name="ValueArray" c:type="const GimpValueArray*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpvaluearray.c"
                 line="76">index of the value of interest</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert"
              c:identifier="gimp_value_array_insert"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpvaluearray.c"
             line="451">Insert a copy of @value at specified position into @value_array. If @value
is %NULL, an uninitialized value is inserted.</doc>
        <source-position filename="libgimpbase/gimpvaluearray.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpvaluearray.c"
               line="460">the #GimpValueArray passed in as @value_array</doc>
          <type name="ValueArray" c:type="GimpValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpvaluearray.c"
                 line="453">#GimpValueArray to add an element to</doc>
            <type name="ValueArray" c:type="GimpValueArray*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpvaluearray.c"
                 line="454">insertion position, must be &amp;lt;= gimp_value_array_length()</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpvaluearray.c"
                 line="455">#GValue to copy into #GimpValueArray, or %NULL</doc>
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="length" c:identifier="gimp_value_array_length">
        <source-position filename="libgimpbase/gimpvaluearray.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="value_array" transfer-ownership="none">
            <type name="ValueArray" c:type="const GimpValueArray*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepend"
              c:identifier="gimp_value_array_prepend"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpvaluearray.c"
             line="409">Insert a copy of @value as first element of @value_array. If @value is
%NULL, an uninitialized value is prepended.</doc>
        <source-position filename="libgimpbase/gimpvaluearray.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpvaluearray.c"
               line="417">the #GimpValueArray passed in as @value_array</doc>
          <type name="ValueArray" c:type="GimpValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpvaluearray.c"
                 line="411">#GimpValueArray to add an element to</doc>
            <type name="ValueArray" c:type="GimpValueArray*"/>
          </instance-parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpvaluearray.c"
                 line="412">#GValue to copy into #GimpValueArray, or %NULL</doc>
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="gimp_value_array_ref" version="2.10">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpvaluearray.c"
             line="348">Adds a reference to a #GimpValueArray.</doc>
        <source-position filename="libgimpbase/gimpvaluearray.h" line="55"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpvaluearray.c"
               line="354">the same @value_array</doc>
          <type name="ValueArray" c:type="GimpValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpvaluearray.c"
                 line="350">#GimpValueArray to ref</doc>
            <type name="ValueArray" c:type="GimpValueArray*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove"
              c:identifier="gimp_value_array_remove"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpvaluearray.c"
             line="492">Remove the value at position @index from @value_array.</doc>
        <source-position filename="libgimpbase/gimpvaluearray.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpvaluearray.c"
               line="500">the #GimpValueArray passed in as @value_array</doc>
          <type name="ValueArray" c:type="GimpValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpvaluearray.c"
                 line="494">#GimpValueArray to remove an element from</doc>
            <type name="ValueArray" c:type="GimpValueArray*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpvaluearray.c"
                 line="495">position of value to remove, which must be less than
        gimp_value_array_length()</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="truncate" c:identifier="gimp_value_array_truncate">
        <source-position filename="libgimpbase/gimpvaluearray.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value_array" transfer-ownership="none">
            <type name="ValueArray" c:type="GimpValueArray*"/>
          </instance-parameter>
          <parameter name="n_values" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref"
              c:identifier="gimp_value_array_unref"
              version="2.10">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpvaluearray.c"
             line="368">Unref a #GimpValueArray. If the reference count drops to zero, the
array including its contents are freed.</doc>
        <source-position filename="libgimpbase/gimpvaluearray.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpbase/gimpvaluearray.c"
                 line="370">#GimpValueArray to unref</doc>
            <type name="ValueArray" c:type="GimpValueArray*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="Vector2"
            c:type="GimpVector2"
            glib:type-name="GimpVector2"
            glib:get-type="gimp_vector2_get_type"
            c:symbol-prefix="vector2">
      <doc xml:space="preserve"
           filename="libgimpmath/gimpmathtypes.h"
           line="72">A two dimensional vector.</doc>
      <source-position filename="libgimpmath/gimpmathtypes.h" line="82"/>
      <field name="x" writable="1">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmathtypes.h"
             line="74">the x axis</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="y" writable="1">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmathtypes.h"
             line="75">the y axis</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <constructor name="new" c:identifier="gimp_vector2_new">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="73">Creates a [struct@Vector2] of coordinates @x and @y.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="40"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="80">the resulting vector</doc>
          <type name="Vector2" c:type="GimpVector2"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="75">the X coordinate.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="76">the Y coordinate.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_val" c:identifier="gimp_vector2_add_val">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="287">This function is identical to gimp_vector2_add() but the vectors
are passed by value rather than by reference.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="58"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="295">the resulting #GimpVector2.</doc>
          <type name="Vector2" c:type="GimpVector2"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="289">the first #GimpVector2.</doc>
            <type name="Vector2" c:type="GimpVector2"/>
          </instance-parameter>
          <parameter name="vector2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="290">the second #GimpVector2.</doc>
            <type name="Vector2" c:type="GimpVector2"/>
          </parameter>
        </parameters>
      </method>
      <method name="cross_product" c:identifier="gimp_vector2_cross_product">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="383">Compute the cross product of two vectors. The result is a
#GimpVector2 which is orthogonal to both @vector1 and @vector2. If
@vector1 and @vector2 are parallel, the result will be the nul
vector.

Note that in 2D, this function is useful to test if two vectors are
parallel or not, or to compute the area spawned by two vectors.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="69"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="396">The cross product.</doc>
          <type name="Vector2" c:type="GimpVector2"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="385">a pointer to the first #GimpVector2.</doc>
            <type name="Vector2" c:type="const GimpVector2*"/>
          </instance-parameter>
          <parameter name="vector2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="386">a pointer to the second #GimpVector2.</doc>
            <type name="Vector2" c:type="const GimpVector2*"/>
          </parameter>
        </parameters>
      </method>
      <method name="cross_product_val"
              c:identifier="gimp_vector2_cross_product_val">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="410">Identical to [method@Vector2.cross_product], but the
vectors are passed by value rather than by reference.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="71"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="418">The cross product.</doc>
          <type name="Vector2" c:type="GimpVector2"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="412">the first #GimpVector2.</doc>
            <type name="Vector2" c:type="GimpVector2"/>
          </instance-parameter>
          <parameter name="vector2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="413">the second #GimpVector2.</doc>
            <type name="Vector2" c:type="GimpVector2"/>
          </parameter>
        </parameters>
      </method>
      <method name="inner_product" c:identifier="gimp_vector2_inner_product">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="349">Computes the inner (dot) product of two 2D vectors.
This product is zero if and only if the two vectors are orthogonal.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="357">The inner product.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="351">a pointer to the first #GimpVector2.</doc>
            <type name="Vector2" c:type="const GimpVector2*"/>
          </instance-parameter>
          <parameter name="vector2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="352">a pointer to the second #GimpVector2.</doc>
            <type name="Vector2" c:type="const GimpVector2*"/>
          </parameter>
        </parameters>
      </method>
      <method name="inner_product_val"
              c:identifier="gimp_vector2_inner_product_val">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="366">Identical to [method@Vector2.inner_product], but the
vectors are passed by value rather than by reference.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="374">The inner product.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="368">the first #GimpVector2.</doc>
            <type name="Vector2" c:type="GimpVector2"/>
          </instance-parameter>
          <parameter name="vector2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="369">the second #GimpVector2.</doc>
            <type name="Vector2" c:type="GimpVector2"/>
          </parameter>
        </parameters>
      </method>
      <method name="length" c:identifier="gimp_vector2_length">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="111">Computes the length of a 2D vector.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="117">the length of @vector (a positive gdouble).</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="113">a pointer to a #GimpVector2.</doc>
            <type name="Vector2" c:type="const GimpVector2*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="length_val" c:identifier="gimp_vector2_length_val">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="125">Identical to [method@Vector2.length], but the vector is passed by value
rather than by reference.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="132">the length of @vector (a positive gdouble).</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="127">a #GimpVector2.</doc>
            <type name="Vector2" c:type="GimpVector2"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="mul" c:identifier="gimp_vector2_mul">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="140">Multiplies each component of the @vector by @factor. Note that this
is equivalent to multiplying the vectors length by @factor.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="142">a pointer to a #GimpVector2.</doc>
            <type name="Vector2" c:type="GimpVector2*"/>
          </instance-parameter>
          <parameter name="factor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="143">a scalar.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="mul_val" c:identifier="gimp_vector2_mul_val">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="156">Identical to [method@Vector2.mul], but the vector is passed by value rather
than by reference.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="49"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="164">the resulting #GimpVector2.</doc>
          <type name="Vector2" c:type="GimpVector2"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="158">a #GimpVector2.</doc>
            <type name="Vector2" c:type="GimpVector2"/>
          </instance-parameter>
          <parameter name="factor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="159">a scalar.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="neg" c:identifier="gimp_vector2_neg">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="236">Negates the @vector (i.e. negate all its coordinates).</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="238">a pointer to a #GimpVector2.</doc>
            <type name="Vector2" c:type="GimpVector2*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="neg_val" c:identifier="gimp_vector2_neg_val">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="249">Identical to [method@Vector2.neg], but the vector
is passed by value rather than by reference.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="54"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="256">the negated #GimpVector2.</doc>
          <type name="Vector2" c:type="GimpVector2"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="251">a #GimpVector2.</doc>
            <type name="Vector2" c:type="GimpVector2"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="normal" c:identifier="gimp_vector2_normal" version="2.8">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="474">Compute a normalized perpendicular vector to @vector</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="77"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="480">a #GimpVector2 perpendicular to @vector, with a length of 1.0.</doc>
          <type name="Vector2" c:type="GimpVector2"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="476">a pointer to a #GimpVector2.</doc>
            <type name="Vector2" c:type="GimpVector2*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="normal_val"
              c:identifier="gimp_vector2_normal_val"
              version="2.8">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="497">Identical to [method@Vector2.normal], but the vector
is passed by value rather than by reference.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="78"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="504">a #GimpVector2 perpendicular to @vector, with a length of 1.0.</doc>
          <type name="Vector2" c:type="GimpVector2"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="499">a #GimpVector2.</doc>
            <type name="Vector2" c:type="GimpVector2"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="normalize" c:identifier="gimp_vector2_normalize">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="179">Normalizes the @vector so the length of the @vector is 1.0. The nul
vector will not be changed.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="181">a pointer to a #GimpVector2.</doc>
            <type name="Vector2" c:type="GimpVector2*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="normalize_val" c:identifier="gimp_vector2_normalize_val">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="205">Identical to [method@Vector2.normalize], but the
vector is passed by value rather than by reference.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="52"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="212">a #GimpVector2 parallel to @vector, pointing in the same
direction but with a length of 1.0.</doc>
          <type name="Vector2" c:type="GimpVector2"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="207">a #GimpVector2.</doc>
            <type name="Vector2" c:type="GimpVector2"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="rotate" c:identifier="gimp_vector2_rotate">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="432">Rotates the @vector counterclockwise by @alpha radians.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="434">a pointer to a #GimpVector2.</doc>
            <type name="Vector2" c:type="GimpVector2*"/>
          </instance-parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="435">an angle (in radians).</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="rotate_val" c:identifier="gimp_vector2_rotate_val">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="451">Identical to [method@Vector2.rotate], but the vector
is passed by value rather than by reference.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="75"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="459">a #GimpVector2 representing @vector rotated by @alpha
radians.</doc>
          <type name="Vector2" c:type="GimpVector2"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="453">a #GimpVector2.</doc>
            <type name="Vector2" c:type="GimpVector2"/>
          </instance-parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="454">an angle (in radians).</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="gimp_vector2_set">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="94">Sets the X and Y coordinates of @vector to @x and @y.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="96">a pointer to a #GimpVector2.</doc>
            <type name="Vector2" c:type="GimpVector2*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="97">the X coordinate.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="98">the Y coordinate.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="sub_val" c:identifier="gimp_vector2_sub_val">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="327">This function is identical to gimp_vector2_sub() but the vectors
are passed by value rather than by reference.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="63"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="335">the resulting #GimpVector2.</doc>
          <type name="Vector2" c:type="GimpVector2"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="329">the first #GimpVector2.</doc>
            <type name="Vector2" c:type="GimpVector2"/>
          </instance-parameter>
          <parameter name="vector2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="330">the second #GimpVector2.</doc>
            <type name="Vector2" c:type="GimpVector2"/>
          </parameter>
        </parameters>
      </method>
      <function name="add" c:identifier="gimp_vector2_add">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="269">Computes the sum of two 2D vectors. The resulting #GimpVector2 is
stored in @result.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="result"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="271">destination for the resulting #GimpVector2.</doc>
            <type name="Vector2" c:type="GimpVector2*"/>
          </parameter>
          <parameter name="vector1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="272">a pointer to the first #GimpVector2.</doc>
            <type name="Vector2" c:type="const GimpVector2*"/>
          </parameter>
          <parameter name="vector2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="273">a pointer to the second #GimpVector2.</doc>
            <type name="Vector2" c:type="const GimpVector2*"/>
          </parameter>
        </parameters>
      </function>
      <function name="sub" c:identifier="gimp_vector2_sub">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="309">Computes the difference of two 2D vectors (@vector1 minus @vector2).
The resulting #GimpVector2 is stored in @result.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="result"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="311">the destination for the resulting #GimpVector2.</doc>
            <type name="Vector2" c:type="GimpVector2*"/>
          </parameter>
          <parameter name="vector1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="312">a pointer to the first #GimpVector2.</doc>
            <type name="Vector2" c:type="const GimpVector2*"/>
          </parameter>
          <parameter name="vector2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="313">a pointer to the second #GimpVector2.</doc>
            <type name="Vector2" c:type="const GimpVector2*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="Vector3"
            c:type="GimpVector3"
            glib:type-name="GimpVector3"
            glib:get-type="gimp_vector3_get_type"
            c:symbol-prefix="vector3">
      <doc xml:space="preserve"
           filename="libgimpmath/gimpmathtypes.h"
           line="94">A three dimensional vector.</doc>
      <source-position filename="libgimpmath/gimpmathtypes.h" line="105"/>
      <field name="x" writable="1">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmathtypes.h"
             line="96">the x axis</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="y" writable="1">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmathtypes.h"
             line="97">the y axis</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="z" writable="1">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmathtypes.h"
             line="98">the z axis</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <constructor name="new" c:identifier="gimp_vector3_new">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="524">Creates a #GimpVector3 of coordinate @x, @y and @z.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="83"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="532">the resulting #GimpVector3.</doc>
          <type name="Vector3" c:type="GimpVector3"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="526">the X coordinate.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="527">the Y coordinate.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="528">the Z coordinate.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_val" c:identifier="gimp_vector3_add_val">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="754">This function is identical to gimp_vector3_add() but the vectors
are passed by value rather than by reference.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="103"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="762">the resulting #GimpVector3.</doc>
          <type name="Vector3" c:type="GimpVector3"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="756">a #GimpVector3.</doc>
            <type name="Vector3" c:type="GimpVector3"/>
          </instance-parameter>
          <parameter name="vector2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="757">a #GimpVector3.</doc>
            <type name="Vector3" c:type="GimpVector3"/>
          </parameter>
        </parameters>
      </method>
      <method name="cross_product" c:identifier="gimp_vector3_cross_product">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="857">Compute the cross product of two vectors. The result is a
#GimpVector3 which is orthogonal to both @vector1 and @vector2. If
@vector1 and @vector2 and parallel, the result will be the nul
vector.

This function can be used to compute the normal of the plane
defined by @vector1 and @vector2.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="114"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="870">The cross product.</doc>
          <type name="Vector3" c:type="GimpVector3"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="859">a pointer to the first #GimpVector3.</doc>
            <type name="Vector3" c:type="const GimpVector3*"/>
          </instance-parameter>
          <parameter name="vector2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="860">a pointer to the second #GimpVector3.</doc>
            <type name="Vector3" c:type="const GimpVector3*"/>
          </parameter>
        </parameters>
      </method>
      <method name="cross_product_val"
              c:identifier="gimp_vector3_cross_product_val">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="885">Identical to [method@Vector3.cross_product], but the
vectors are passed by value rather than by reference.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="116"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="893">The cross product.</doc>
          <type name="Vector3" c:type="GimpVector3"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="887">the first #GimpVector3.</doc>
            <type name="Vector3" c:type="GimpVector3"/>
          </instance-parameter>
          <parameter name="vector2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="888">the second #GimpVector3.</doc>
            <type name="Vector3" c:type="GimpVector3"/>
          </parameter>
        </parameters>
      </method>
      <method name="inner_product" c:identifier="gimp_vector3_inner_product">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="819">Computes the inner (dot) product of two 3D vectors. This product
is zero if and only if the two vectors are orthogonal.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="110"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="827">The inner product.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="821">a pointer to the first #GimpVector3.</doc>
            <type name="Vector3" c:type="const GimpVector3*"/>
          </instance-parameter>
          <parameter name="vector2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="822">a pointer to the second #GimpVector3.</doc>
            <type name="Vector3" c:type="const GimpVector3*"/>
          </parameter>
        </parameters>
      </method>
      <method name="inner_product_val"
              c:identifier="gimp_vector3_inner_product_val">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="838">Identical to [method@Vector3.inner_product], but the
vectors are passed by value rather than by reference.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="112"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="846">The inner product.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="840">the first #GimpVector3.</doc>
            <type name="Vector3" c:type="GimpVector3"/>
          </instance-parameter>
          <parameter name="vector2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="841">the second #GimpVector3.</doc>
            <type name="Vector3" c:type="GimpVector3"/>
          </parameter>
        </parameters>
      </method>
      <method name="length" c:identifier="gimp_vector3_length">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="568">Computes the length of a 3D vector.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="574">the length of @vector (a positive gdouble).</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="570">a pointer to a #GimpVector3.</doc>
            <type name="Vector3" c:type="const GimpVector3*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="length_val" c:identifier="gimp_vector3_length_val">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="584">Identical to [method@Vector3.length], but the vector
is passed by value rather than by reference.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="591">the length of @vector (a positive gdouble).</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="586">a #GimpVector3.</doc>
            <type name="Vector3" c:type="GimpVector3"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="mul" c:identifier="gimp_vector3_mul">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="601">Multiplies each component of the @vector by @factor. Note that
this is equivalent to multiplying the vectors length by @factor.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="603">a pointer to a #GimpVector3.</doc>
            <type name="Vector3" c:type="GimpVector3*"/>
          </instance-parameter>
          <parameter name="factor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="604">a scalar.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="mul_val" c:identifier="gimp_vector3_mul_val">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="618">Identical to [method@Vector3.mul], but the vector is
passed by value rather than by reference.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="94"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="626">the resulting #GimpVector3.</doc>
          <type name="Vector3" c:type="GimpVector3"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="620">a #GimpVector3.</doc>
            <type name="Vector3" c:type="GimpVector3"/>
          </instance-parameter>
          <parameter name="factor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="621">a scalar.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="neg" c:identifier="gimp_vector3_neg">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="700">Negates the @vector (i.e. negate all its coordinates).</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="702">a pointer to a #GimpVector3.</doc>
            <type name="Vector3" c:type="GimpVector3*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="neg_val" c:identifier="gimp_vector3_neg_val">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="714">Identical to [method@Vector3.neg], but the vector
is passed by value rather than by reference.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="99"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="721">the negated #GimpVector3.</doc>
          <type name="Vector3" c:type="GimpVector3"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="716">a #GimpVector3.</doc>
            <type name="Vector3" c:type="GimpVector3"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="normalize" c:identifier="gimp_vector3_normalize">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="641">Normalizes the @vector so the length of the @vector is 1.0. The nul
vector will not be changed.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="643">a pointer to a #GimpVector3.</doc>
            <type name="Vector3" c:type="GimpVector3*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="normalize_val" c:identifier="gimp_vector3_normalize_val">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="668">Identical to [method@Vector3.normalize], but the
vector is passed by value rather than by reference.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="97"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="675">a #GimpVector3 parallel to @vector, pointing in the same
direction but with a length of 1.0.</doc>
          <type name="Vector3" c:type="GimpVector3"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="670">a #GimpVector3.</doc>
            <type name="Vector3" c:type="GimpVector3"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="rotate" c:identifier="gimp_vector3_rotate">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="908">Rotates the @vector around the three axis (Z, Y, and X) by @alpha,
@beta and @gamma, respectively.

Note that the order of the rotation is very important. If you
expect a vector to be rotated around X, and then around Y, you will
have to call this function twice. Also, it is often wise to call
this function with only one of @alpha, @beta and @gamma non-zero.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="118"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="910">a pointer to a #GimpVector3.</doc>
            <type name="Vector3" c:type="GimpVector3*"/>
          </instance-parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="911">the angle (in radian) of rotation around the Z axis.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="beta" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="912">the angle (in radian) of rotation around the Y axis.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="gamma" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="913">the angle (in radian) of rotation around the X axis.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="rotate_val" c:identifier="gimp_vector3_rotate_val">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="952">Identical to [method@Vector3.rotate], but the vectors
are passed by value rather than by reference.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="122"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="962">the rotated vector.</doc>
          <type name="Vector3" c:type="GimpVector3"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="954">a #GimpVector3.</doc>
            <type name="Vector3" c:type="GimpVector3"/>
          </instance-parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="955">the angle (in radian) of rotation around the Z axis.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="beta" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="956">the angle (in radian) of rotation around the Y axis.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="gamma" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="957">the angle (in radian) of rotation around the X axis.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="gimp_vector3_set">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="548">Sets the X, Y and Z coordinates of @vector to @x, @y and @z.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="550">a pointer to a #GimpVector3.</doc>
            <type name="Vector3" c:type="GimpVector3*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="551">the X coordinate.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="552">the Y coordinate.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="553">the Z coordinate.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="sub_val" c:identifier="gimp_vector3_sub_val">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="796">This function is identical to gimp_vector3_sub() but the vectors
are passed by value rather than by reference.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="108"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="804">the resulting #GimpVector3.</doc>
          <type name="Vector3" c:type="GimpVector3"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="798">a #GimpVector3.</doc>
            <type name="Vector3" c:type="GimpVector3"/>
          </instance-parameter>
          <parameter name="vector2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="799">a #GimpVector3.</doc>
            <type name="Vector3" c:type="GimpVector3"/>
          </parameter>
        </parameters>
      </method>
      <function name="add" c:identifier="gimp_vector3_add">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="735">Computes the sum of two 3D vectors. The resulting #GimpVector3 is
stored in @result.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="100"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="result"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="737">destination for the resulting #GimpVector3.</doc>
            <type name="Vector3" c:type="GimpVector3*"/>
          </parameter>
          <parameter name="vector1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="738">a pointer to the first #GimpVector3.</doc>
            <type name="Vector3" c:type="const GimpVector3*"/>
          </parameter>
          <parameter name="vector2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="739">a pointer to the second #GimpVector3.</doc>
            <type name="Vector3" c:type="const GimpVector3*"/>
          </parameter>
        </parameters>
      </function>
      <function name="sub" c:identifier="gimp_vector3_sub">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="777">Computes the difference of two 3D vectors (@vector1 minus @vector2).
The resulting #GimpVector3 is stored in @result.</doc>
        <source-position filename="libgimpmath/gimpvector.h" line="105"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="result"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="779">the destination for the resulting #GimpVector3.</doc>
            <type name="Vector3" c:type="GimpVector3*"/>
          </parameter>
          <parameter name="vector1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="780">a pointer to the first #GimpVector3.</doc>
            <type name="Vector3" c:type="const GimpVector3*"/>
          </parameter>
          <parameter name="vector2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimpmath/gimpvector.c"
                 line="781">a pointer to the second #GimpVector3.</doc>
            <type name="Vector3" c:type="const GimpVector3*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="Vector4" c:type="GimpVector4">
      <doc xml:space="preserve"
           filename="libgimpmath/gimpmathtypes.h"
           line="117">A four dimensional vector.</doc>
      <source-position filename="libgimpmath/gimpmathtypes.h" line="129"/>
      <field name="x" writable="1">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmathtypes.h"
             line="119">the x axis</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="y" writable="1">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmathtypes.h"
             line="120">the y axis</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="z" writable="1">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmathtypes.h"
             line="121">the z axis</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="w" writable="1">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmathtypes.h"
             line="122">the w axis</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </record>
    <record name="VectorLoadData" c:type="GimpVectorLoadData">
      <source-position filename="libgimp/gimpvectorloadprocedure.h" line="47"/>
      <field name="width" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="width_unit" writable="1">
        <type name="Unit" c:type="GimpUnit*"/>
      </field>
      <field name="exact_width" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="height" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="height_unit" writable="1">
        <type name="Unit" c:type="GimpUnit*"/>
      </field>
      <field name="exact_height" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="correct_ratio" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="pixel_density" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="density_unit" writable="1">
        <type name="Unit" c:type="GimpUnit*"/>
      </field>
      <field name="exact_density" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </record>
    <class name="VectorLoadProcedure"
           c:symbol-prefix="vector_load_procedure"
           c:type="GimpVectorLoadProcedure"
           parent="LoadProcedure"
           final="1"
           glib:type-name="GimpVectorLoadProcedure"
           glib:get-type="gimp_vector_load_procedure_get_type"
           glib:type-struct="VectorLoadProcedureClass">
      <doc xml:space="preserve"
           filename="libgimp/gimpvectorloadprocedure.c"
           line="39">A [class@Procedure] subclass that makes it easier to write load procedures
for vector image formats.

It automatically adds the standard arguments:
([enum@RunMode], [iface@Gio.File], int width, int height)

and the standard return value: ( [class@Image] )

It is possible to add additional arguments.

When invoked via [method@Procedure.run], it unpacks these standard
arguments and calls @run_func which is a [callback@RunImageFunc]. The
[class@ProcedureConfig] of [callback@Gimp.RunVectorLoadFunc] contains
additionally added arguments but also the arguments added by this class.</doc>
      <source-position filename="libgimp/gimpvectorloadprocedure.h"
                       line="167"/>
      <constructor name="new"
                   c:identifier="gimp_vector_load_procedure_new"
                   version="3.0">
        <doc xml:space="preserve"
             filename="libgimp/gimpvectorloadprocedure.c"
             line="478">Creates a new load procedure named @name which will call @run_func
when invoked.

See gimp_procedure_new() for information about @proc_type.</doc>
        <source-position filename="libgimp/gimpvectorloadprocedure.h"
                         line="170"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpvectorloadprocedure.c"
               line="492">a new #GimpProcedure.</doc>
          <type name="Procedure" c:type="GimpProcedure*"/>
        </return-value>
        <parameters>
          <parameter name="plug_in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpvectorloadprocedure.c"
                 line="480">a #GimpPlugIn.</doc>
            <type name="PlugIn" c:type="GimpPlugIn*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpvectorloadprocedure.c"
                 line="481">the new procedure's name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="proc_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpvectorloadprocedure.c"
                 line="482">the new procedure's #GimpPDBProcType.</doc>
            <type name="PDBProcType" c:type="GimpPDBProcType"/>
          </parameter>
          <parameter name="extract_func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4"
                     destroy="5">
            <type name="ExtractVectorFunc" c:type="GimpExtractVectorFunc"/>
          </parameter>
          <parameter name="extract_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="extract_data_destroy"
                     transfer-ownership="none"
                     scope="async">
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
          <parameter name="run_func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="7"
                     destroy="8">
            <doc xml:space="preserve"
                 filename="libgimp/gimpvectorloadprocedure.c"
                 line="483">the run function for the new procedure.</doc>
            <type name="RunVectorLoadFunc" c:type="GimpRunVectorLoadFunc"/>
          </parameter>
          <parameter name="run_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgimp/gimpvectorloadprocedure.c"
                 line="484">user data passed to @run_func.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="run_data_destroy"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="libgimp/gimpvectorloadprocedure.c"
                 line="485">free function for @run_data, or %NULL.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="extract_dimensions"
              c:identifier="gimp_vector_load_procedure_extract_dimensions"
              throws="1">
        <doc xml:space="preserve"
             filename="libgimp/gimpvectorloadprocedure.c"
             line="531">Extracts native or suggested dimensions from @file, which must be a vector
file in the right format supported by @procedure. It is considered a
programming error to pass a file of invalid format.</doc>
        <source-position filename="libgimp/gimpvectorloadprocedure.h"
                         line="180"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpvectorloadprocedure.c"
               line="542">%TRUE if dimensions could be extracted.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="procedure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpvectorloadprocedure.c"
                 line="533">the associated #GimpVectorLoadProcedure.</doc>
            <type name="VectorLoadProcedure"
                  c:type="GimpVectorLoadProcedure*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpvectorloadprocedure.c"
                 line="534">a [iface@Gio.File] which can be processed by @procedure.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="data"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgimp/gimpvectorloadprocedure.c"
                 line="535">the returned dimension data.</doc>
            <type name="VectorLoadData" c:type="GimpVectorLoadData*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="VectorLoadProcedureClass"
            c:type="GimpVectorLoadProcedureClass"
            glib:is-gtype-struct-for="VectorLoadProcedure">
      <source-position filename="libgimp/gimpvectorloadprocedure.h"
                       line="167"/>
      <field name="parent_class">
        <type name="LoadProcedureClass" c:type="GimpLoadProcedureClass"/>
      </field>
    </record>
    <function name="adaptive_supersample_area"
              c:identifier="gimp_adaptive_supersample_area">
      <source-position filename="libgimpcolor/gimpadaptivesupersample.h"
                       line="66"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpadaptivesupersample.c"
             line="296">the number of pixels processed.</doc>
        <type name="gulong" c:type="gulong"/>
      </return-value>
      <parameters>
        <parameter name="x1" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpadaptivesupersample.c"
               line="280">left x coordinate of the area to process.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y1" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpadaptivesupersample.c"
               line="281">top y coordinate of the area to process.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="x2" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpadaptivesupersample.c"
               line="282">right x coordinate of the area to process.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y2" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpadaptivesupersample.c"
               line="283">bottom y coordinate of the area to process.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="max_depth" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpadaptivesupersample.c"
               line="284">maximum depth of supersampling.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="threshold" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpadaptivesupersample.c"
               line="285">lower threshold of pixel difference that stops
                 supersampling.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="render_func"
                   transfer-ownership="none"
                   scope="call"
                   closure="7">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpadaptivesupersample.c"
               line="287">function calculate the color value at
                 given  coordinates.</doc>
          <type name="RenderFunc" c:type="GimpRenderFunc"/>
        </parameter>
        <parameter name="render_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpadaptivesupersample.c"
               line="289">user data passed to @render_func.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="put_pixel_func"
                   transfer-ownership="none"
                   scope="call"
                   closure="9">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpadaptivesupersample.c"
               line="290">function to a pixels to a color at
                 given coordinates.</doc>
          <type name="PutPixelFunc" c:type="GimpPutPixelFunc"/>
        </parameter>
        <parameter name="put_pixel_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpadaptivesupersample.c"
               line="292">user data passed to @put_pixel_func.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="progress_func"
                   transfer-ownership="none"
                   scope="call"
                   closure="11">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpadaptivesupersample.c"
               line="293">function to report progress.</doc>
          <type name="ProgressFunc" c:type="GimpProgressFunc"/>
        </parameter>
        <parameter name="progress_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpadaptivesupersample.c"
               line="294">user data passed to @progress_func.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="airbrush" c:identifier="gimp_airbrush">
      <doc xml:space="preserve"
           filename="libgimp/gimppainttools_pdb.c"
           line="39">Paint in the current brush with varying pressure. Paint application
is time-dependent.

This tool simulates the use of an airbrush. Paint pressure
represents the relative intensity of the paint application. High
pressure results in a thicker layer of paint while low pressure
results in a thinner layer.</doc>
      <source-position filename="libgimp/gimppainttools_pdb.h" line="35"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimppainttools_pdb.c"
             line="54">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="drawable" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="41">The affected drawable.</doc>
          <type name="Drawable" c:type="GimpDrawable*"/>
        </parameter>
        <parameter name="pressure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="42">The pressure of the airbrush strokes.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="num_strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="43">Number of stroke control points (count each coordinate as 2 points).</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="44">Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y, ..., sn.x, sn.y }.</doc>
          <array length="2" zero-terminated="0" c:type="const gdouble*">
            <type name="gdouble"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="airbrush_default" c:identifier="gimp_airbrush_default">
      <doc xml:space="preserve"
           filename="libgimp/gimppainttools_pdb.c"
           line="86">Paint in the current brush with varying pressure. Paint application
is time-dependent.

This tool simulates the use of an airbrush. It is similar to
gimp_airbrush() except that the pressure is derived from the
airbrush tools options box. It the option has not been set the
default for the option will be used.</doc>
      <source-position filename="libgimp/gimppainttools_pdb.h" line="39"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimppainttools_pdb.c"
             line="100">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="drawable" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="88">The affected drawable.</doc>
          <type name="Drawable" c:type="GimpDrawable*"/>
        </parameter>
        <parameter name="num_strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="89">Number of stroke control points (count each coordinate as 2 points).</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="90">Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y, ..., sn.x, sn.y }.</doc>
          <array length="1" zero-terminated="0" c:type="const gdouble*">
            <type name="gdouble"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="any_to_utf8"
              c:identifier="gimp_any_to_utf8"
              introspectable="0">
      <doc xml:space="preserve"
           filename="libgimpbase/gimputils.c"
           line="154">This function takes any string (UTF-8 or not) and always returns a valid
UTF-8 string.

If @str is valid UTF-8, a copy of the string is returned.

If UTF-8 validation fails, g_locale_to_utf8() is tried and if it
succeeds the resulting string is returned.

Otherwise, the portion of @str that is UTF-8, concatenated
with "(invalid UTF-8 string)" is returned. If not even the start
of @str is valid UTF-8, only "(invalid UTF-8 string)" is returned.</doc>
      <source-position filename="libgimpbase/gimputils.h" line="31"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpbase/gimputils.c"
             line="176">The UTF-8 string as described above.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="156">The string to be converted to UTF-8.</doc>
          <array length="1" zero-terminated="0" c:type="const gchar*">
            <type name="utf8" c:type="gchar"/>
          </array>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="157">The length of the string, or -1 if the string
                 is nul-terminated.</doc>
          <type name="gssize" c:type="gssize"/>
        </parameter>
        <parameter name="warning_format" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="159">The message format for the warning message if conversion
                 to UTF-8 fails. See the &lt;function&gt;printf()&lt;/function&gt;
                 documentation.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="162">The parameters to insert into the format string.</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="attach_parasite"
              c:identifier="gimp_attach_parasite"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimp_pdb.c"
           line="111">Add a global parasite.

This procedure attaches a global parasite. It has no return values.</doc>
      <source-position filename="libgimp/gimp_pdb.h" line="37"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimp_pdb.c"
             line="119">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="parasite" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimp_pdb.c"
               line="113">The parasite to attach.</doc>
          <type name="Parasite" c:type="const GimpParasite*"/>
        </parameter>
      </parameters>
    </function>
    <function name="bilinear" c:identifier="gimp_bilinear">
      <source-position filename="libgimpcolor/gimpbilinear.h" line="34"/>
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="values" transfer-ownership="none">
          <array zero-terminated="0" c:type="gdouble*" fixed-size="4">
            <type name="gdouble" c:type="gdouble"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="bilinear_16" c:identifier="gimp_bilinear_16">
      <source-position filename="libgimpcolor/gimpbilinear.h" line="40"/>
      <return-value transfer-ownership="none">
        <type name="guint16" c:type="guint16"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="values" transfer-ownership="none">
          <array zero-terminated="0" c:type="guint16*" fixed-size="4">
            <type name="guint16" c:type="guint16"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="bilinear_32" c:identifier="gimp_bilinear_32">
      <source-position filename="libgimpcolor/gimpbilinear.h" line="43"/>
      <return-value transfer-ownership="none">
        <type name="guint32" c:type="guint32"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="values" transfer-ownership="none">
          <array zero-terminated="0" c:type="guint32*" fixed-size="4">
            <type name="guint32" c:type="guint32"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="bilinear_8" c:identifier="gimp_bilinear_8">
      <source-position filename="libgimpcolor/gimpbilinear.h" line="37"/>
      <return-value transfer-ownership="none">
        <type name="guint8" c:type="guchar"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="values" transfer-ownership="none">
          <array zero-terminated="0" c:type="guchar*" fixed-size="4">
            <type name="guint8" c:type="guchar"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="bilinear_rgb" c:identifier="gimp_bilinear_rgb">
      <source-position filename="libgimpcolor/gimpbilinear.h" line="46"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpbilinear.c"
               line="160">Array of pixels in RGBA double format</doc>
          <array zero-terminated="0" c:type="gdouble*" fixed-size="16">
            <type name="gdouble" c:type="gdouble"/>
          </array>
        </parameter>
        <parameter name="has_alpha" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpbilinear.c"
               line="161">Whether @values has an alpha channel</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="retvalues" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpbilinear.c"
               line="162">Resulting pixel</doc>
          <array zero-terminated="0" c:type="gdouble*" fixed-size="4">
            <type name="gdouble" c:type="gdouble"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="bind_text_domain"
              c:identifier="gimp_bind_text_domain"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimpbase/gimputils.c"
           line="1669">This function wraps bindtextdomain on UNIX and wbintextdomain on Windows.
@dir_name is expected to be in the encoding used by the C library on UNIX
and UTF-8 on Windows.</doc>
      <source-position filename="libgimpbase/gimputils.h" line="91"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="domain_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="1671">a gettext domain name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="dir_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="1672">path of the catalog directory</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="brushes_close_popup"
              c:identifier="gimp_brushes_close_popup">
      <doc xml:space="preserve"
           filename="libgimp/gimpbrushselect_pdb.c"
           line="82">Close the brush selection dialog.

Closes an open brush selection dialog.</doc>
      <source-position filename="libgimp/gimpbrushselect_pdb.h" line="39"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpbrushselect_pdb.c"
             line="90">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="brush_callback" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbrushselect_pdb.c"
               line="84">The name of the callback registered for this pop-up.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="brushes_get_list" c:identifier="gimp_brushes_get_list">
      <doc xml:space="preserve"
           filename="libgimp/gimpbrushes_pdb.c"
           line="71">Retrieve a complete listing of the available brushes.

This procedure returns a complete listing of available GIMP brushes.
Each name returned can be used as input to the
gimp_context_set_brush() procedure.</doc>
      <source-position filename="libgimp/gimpbrushes_pdb.h" line="36"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimpbrushes_pdb.c"
             line="81">The list of brush names.
         The returned value must be freed with g_strfreev().</doc>
        <array c:type="gchar**">
          <type name="utf8"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="filter" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbrushes_pdb.c"
               line="73">An optional regular expression used to filter the list.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="brushes_popup" c:identifier="gimp_brushes_popup">
      <doc xml:space="preserve"
           filename="libgimp/gimpbrushselect_pdb.c"
           line="40">Invokes the GIMP brush selection dialog.

Opens a dialog letting a user choose a brush.</doc>
      <source-position filename="libgimp/gimpbrushselect_pdb.h" line="35"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpbrushselect_pdb.c"
             line="51">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="brush_callback" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbrushselect_pdb.c"
               line="42">The callback PDB proc to call when user chooses a brush.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="popup_title" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbrushselect_pdb.c"
               line="43">Title of the brush selection dialog.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="initial_brush" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbrushselect_pdb.c"
               line="44">The brush to set as the initial choice.</doc>
          <type name="Brush" c:type="GimpBrush*"/>
        </parameter>
        <parameter name="parent_window" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbrushselect_pdb.c"
               line="45">An optional parent window handle for the popup to be set transient to.</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </parameter>
      </parameters>
    </function>
    <function name="brushes_refresh" c:identifier="gimp_brushes_refresh">
      <doc xml:space="preserve"
           filename="libgimp/gimpbrushes_pdb.c"
           line="39">Refresh current brushes. This function always succeeds.

This procedure retrieves all brushes currently in the user's brush
path and updates the brush dialogs accordingly.</doc>
      <source-position filename="libgimp/gimpbrushes_pdb.h" line="35"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpbrushes_pdb.c"
             line="47">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="brushes_set_popup" c:identifier="gimp_brushes_set_popup">
      <doc xml:space="preserve"
           filename="libgimp/gimpbrushselect_pdb.c"
           line="115">Sets the selected brush in a brush selection dialog.

Sets the selected brush in a brush selection dialog.</doc>
      <source-position filename="libgimp/gimpbrushselect_pdb.h" line="40"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpbrushselect_pdb.c"
             line="124">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="brush_callback" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbrushselect_pdb.c"
               line="117">The name of the callback registered for this pop-up.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="brush" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbrushselect_pdb.c"
               line="118">The brush to set as selected.</doc>
          <type name="Brush" c:type="GimpBrush*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_delete"
              c:identifier="gimp_buffer_delete"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimp/gimpbuffer_pdb.c"
           line="118">Deletes a named buffer.

This procedure deletes a named buffer.</doc>
      <source-position filename="libgimp/gimpbuffer_pdb.h" line="38"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpbuffer_pdb.c"
             line="126">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="buffer_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbuffer_pdb.c"
               line="120">The buffer name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_bytes"
              c:identifier="gimp_buffer_get_bytes"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimp/gimpbuffer_pdb.c"
           line="225">Retrieves the specified buffer's bytes.

This procedure retrieves the specified named buffer's bytes.</doc>
      <source-position filename="libgimp/gimpbuffer_pdb.h" line="41"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpbuffer_pdb.c"
             line="233">The buffer bpp.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="buffer_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbuffer_pdb.c"
               line="227">The buffer name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_height"
              c:identifier="gimp_buffer_get_height"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimp/gimpbuffer_pdb.c"
           line="189">Retrieves the specified buffer's height.

This procedure retrieves the specified named buffer's height.</doc>
      <source-position filename="libgimp/gimpbuffer_pdb.h" line="40"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpbuffer_pdb.c"
             line="197">The buffer height.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="buffer_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbuffer_pdb.c"
               line="191">The buffer name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_image_type"
              c:identifier="gimp_buffer_get_image_type"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimp/gimpbuffer_pdb.c"
           line="261">Retrieves the specified buffer's image type.

This procedure retrieves the specified named buffer's image type.</doc>
      <source-position filename="libgimp/gimpbuffer_pdb.h" line="42"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpbuffer_pdb.c"
             line="269">The buffer image type.</doc>
        <type name="ImageType" c:type="GimpImageType"/>
      </return-value>
      <parameters>
        <parameter name="buffer_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbuffer_pdb.c"
               line="263">The buffer name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_width"
              c:identifier="gimp_buffer_get_width"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimp/gimpbuffer_pdb.c"
           line="153">Retrieves the specified buffer's width.

This procedure retrieves the specified named buffer's width.</doc>
      <source-position filename="libgimp/gimpbuffer_pdb.h" line="39"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpbuffer_pdb.c"
             line="161">The buffer width.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="buffer_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbuffer_pdb.c"
               line="155">The buffer name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_rename"
              c:identifier="gimp_buffer_rename"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimp/gimpbuffer_pdb.c"
           line="78">Renames a named buffer.

This procedure renames a named buffer.</doc>
      <source-position filename="libgimp/gimpbuffer_pdb.h" line="36"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimpbuffer_pdb.c"
             line="87">The real name given to the buffer.
         The returned value must be freed with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="buffer_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbuffer_pdb.c"
               line="80">The buffer name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="new_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbuffer_pdb.c"
               line="81">The buffer's new name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffers_get_list"
              c:identifier="gimp_buffers_get_list"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimp/gimpbuffer_pdb.c"
           line="39">Retrieve a complete listing of the available buffers.

This procedure returns a complete listing of available named
buffers.</doc>
      <source-position filename="libgimp/gimpbuffer_pdb.h" line="35"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimpbuffer_pdb.c"
             line="48">
         The list of buffer names.
         The returned value must be freed with g_strfreev().</doc>
        <array c:type="gchar**">
          <type name="utf8"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="filter" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpbuffer_pdb.c"
               line="41">An optional regular expression used to filter the list.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cache_directory"
              c:identifier="gimp_cache_directory"
              version="2.10.10">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpenv.c"
           line="624">Returns the default top directory for GIMP cached files. If the
environment variable GIMP3_CACHEDIR exists, that is used.  It
should be an absolute pathname.  Otherwise, a subdirectory of the
directory returned by g_get_user_cache_dir() is used.

Note that the actual directories used for GIMP caches files can
be overridden by the user in the preferences dialog.

In config files such as gimprc, the string ${gimp_cache_dir}
expands to this directory.

The returned string is owned by GIMP and must not be modified or
freed. The returned string is in the encoding used for filenames by
GLib, which isn't necessarily UTF-8. (On Windows it always is
UTF-8.).</doc>
      <source-position filename="libgimpbase/gimpenv.h" line="55"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpenv.c"
             line="645">The default top directory for GIMP cached files.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="cairo_checkerboard_create"
              c:identifier="gimp_cairo_checkerboard_create"
              version="2.6">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimpcairo.c"
           line="46">Create a repeating checkerboard pattern.</doc>
      <source-position filename="libgimpcolor/gimpcairo.h" line="27"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcairo.c"
             line="55">a new Cairo pattern that can be used as a source on @cr.</doc>
        <type name="cairo.Pattern" c:type="cairo_pattern_t*"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcairo.c"
               line="48">Cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="size" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcairo.c"
               line="49">check size</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="light" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcairo.c"
               line="50">light check color or %NULL to use the default light gray</doc>
          <type name="Gegl.Color" c:type="const GeglColor*"/>
        </parameter>
        <parameter name="dark" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcairo.c"
               line="51">dark check color or %NULL to use the default dark gray</doc>
          <type name="Gegl.Color" c:type="const GeglColor*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cairo_surface_create_buffer"
              c:identifier="gimp_cairo_surface_create_buffer"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimpcairo.c"
           line="157">This function returns a #GeglBuffer which wraps @surface's pixels.
It must only be called on image surfaces, calling it on other surface
types is an error.

If @format is set, the returned [class@Gegl.Buffer] will use it. It has to
map with @surface Cairo format. If unset, the buffer format will be
determined from @surface. The main difference is that automatically
determined format has sRGB space and TRC by default.</doc>
      <source-position filename="libgimpcolor/gimpcairo.h" line="33"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcairo.c"
             line="171">a #GeglBuffer</doc>
        <type name="Gegl.Buffer" c:type="GeglBuffer*"/>
      </return-value>
      <parameters>
        <parameter name="surface" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcairo.c"
               line="159">a Cairo surface</doc>
          <type name="cairo.Surface" c:type="cairo_surface_t*"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcairo.c"
               line="160">a Babl format.</doc>
          <type name="Babl.Object" c:type="const Babl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cairo_surface_get_format"
              c:identifier="gimp_cairo_surface_get_format"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimpcairo.c"
           line="121">This function returns a #Babl format that corresponds to @surface's
pixel format.</doc>
      <source-position filename="libgimpcolor/gimpcairo.h" line="32"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcairo.c"
             line="128">the #Babl format of @surface.</doc>
        <type name="Babl.Object" c:type="const Babl*"/>
      </return-value>
      <parameters>
        <parameter name="surface" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcairo.c"
               line="123">a Cairo surface</doc>
          <type name="cairo.Surface" c:type="cairo_surface_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="canonicalize_identifier"
              c:identifier="gimp_canonicalize_identifier"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimpbase/gimputils.c"
           line="661">Turns any input string into a canonicalized string.

Canonical identifiers are e.g. expected by the PDB for procedure
and parameter names. Every character of the input string that is
not either '-', 'a-z', 'A-Z' or '0-9' will be replaced by a '-'.</doc>
      <source-position filename="libgimpbase/gimputils.h" line="47"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpbase/gimputils.c"
             line="671">The canonicalized identifier. This is a newly allocated
         string that should be freed with g_free() when no longer
         needed.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="identifier" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="663">The identifier string to canonicalize.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="check_custom_color1"
              c:identifier="gimp_check_custom_color1"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimp.c"
           line="785">Returns the first checkerboard custom color that can
be used in previews.

This is a constant value given at plug-in configuration time.</doc>
      <source-position filename="libgimp/gimp.h" line="190"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimp.c"
             line="793">the _check_custom_color1 value</doc>
        <type name="Gegl.Color" c:type="const GeglColor*"/>
      </return-value>
    </function>
    <function name="check_custom_color2"
              c:identifier="gimp_check_custom_color2"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimp.c"
           line="803">Returns the second checkerboard custom color that can
be used in previews.

This is a constant value given at plug-in configuration time.</doc>
      <source-position filename="libgimp/gimp.h" line="191"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimp.c"
             line="811">the _check_custom_color2 value</doc>
        <type name="Gegl.Color" c:type="const GeglColor*"/>
      </return-value>
    </function>
    <function name="check_size" c:identifier="gimp_check_size" version="2.2">
      <doc xml:space="preserve"
           filename="libgimp/gimp.c"
           line="751">Returns the size of the checkerboard to be used in previews.

This is a constant value given at plug-in configuration time.</doc>
      <source-position filename="libgimp/gimp.h" line="188"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimp.c"
             line="758">the check_size value</doc>
        <type name="CheckSize" c:type="GimpCheckSize"/>
      </return-value>
    </function>
    <function name="check_type" c:identifier="gimp_check_type" version="2.2">
      <doc xml:space="preserve"
           filename="libgimp/gimp.c"
           line="768">Returns the type of the checkerboard to be used in previews.

This is a constant value given at plug-in configuration time.</doc>
      <source-position filename="libgimp/gimp.h" line="189"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimp.c"
             line="775">the check_type value</doc>
        <type name="CheckType" c:type="GimpCheckType"/>
      </return-value>
    </function>
    <function name="checks_get_colors"
              c:identifier="gimp_checks_get_colors"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpchecks.c"
           line="42">Retrieves the colors to use when drawing a checkerboard for a certain
#GimpCheckType and custom colors.
If @type is %GIMP_CHECK_TYPE_CUSTOM_CHECKS, then @color1 and @color2
will remain untouched, which means you must initialize them to the
values expected for custom checks.

To obtain the user-set colors in Preferences, just call:
|[&lt;!-- language="C" --&gt;
GeglColor *color1 = gimp_check_custom_color1 ();
GeglColor *color2 = gimp_check_custom_color2 ();
gimp_checks_get_colors (gimp_check_type (), &amp;color1, &amp;color2);
]|</doc>
      <source-position filename="libgimpbase/gimpchecks.h" line="138"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpchecks.c"
               line="44">the checkerboard type</doc>
          <type name="CheckType" c:type="GimpCheckType"/>
        </parameter>
        <parameter name="color1"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpchecks.c"
               line="45">current custom color and return location for the first color.</doc>
          <type name="Gegl.Color" c:type="GeglColor**"/>
        </parameter>
        <parameter name="color2"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpchecks.c"
               line="46">current custom color and return location for the second color.</doc>
          <type name="Gegl.Color" c:type="GeglColor**"/>
        </parameter>
      </parameters>
    </function>
    <function name="clone" c:identifier="gimp_clone">
      <doc xml:space="preserve"
           filename="libgimp/gimppainttools_pdb.c"
           line="130">Clone from the source to the dest drawable using the current brush

This tool clones (copies) from the source drawable starting at the
specified source coordinates to the dest drawable. If the
\"clone_type\" argument is set to PATTERN-CLONE, then the current
pattern is used as the source and the \"src_drawable\" argument is
ignored. Pattern cloning assumes a tileable pattern and mods the sum
of the src coordinates and subsequent stroke offsets with the width
and height of the pattern. For image cloning, if the sum of the src
coordinates and subsequent stroke offsets exceeds the extents of the
src drawable, then no paint is transferred. The clone tool is
capable of transforming between any image types including
RGB-&amp;gt;Indexed--although converting from any type to indexed is
significantly slower.</doc>
      <source-position filename="libgimp/gimppainttools_pdb.h" line="42"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimppainttools_pdb.c"
             line="155">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="drawable" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="132">The affected drawable.</doc>
          <type name="Drawable" c:type="GimpDrawable*"/>
        </parameter>
        <parameter name="src_drawable" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="133">The source drawable.</doc>
          <type name="Drawable" c:type="GimpDrawable*"/>
        </parameter>
        <parameter name="clone_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="134">The type of clone.</doc>
          <type name="CloneType" c:type="GimpCloneType"/>
        </parameter>
        <parameter name="src_x" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="135">The x coordinate in the source image.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="src_y" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="136">The y coordinate in the source image.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="num_strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="137">Number of stroke control points (count each coordinate as 2 points).</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="138">Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y, ..., sn.x, sn.y }.</doc>
          <array length="5" zero-terminated="0" c:type="const gdouble*">
            <type name="gdouble"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="clone_default" c:identifier="gimp_clone_default">
      <doc xml:space="preserve"
           filename="libgimp/gimppainttools_pdb.c"
           line="193">Clone from the source to the dest drawable using the current brush

This tool clones (copies) from the source drawable starting at the
specified source coordinates to the dest drawable. This function
performs exactly the same as the gimp_clone() function except that
the tools arguments are obtained from the clones option dialog. It
this dialog has not been activated then the dialogs default values
will be used.</doc>
      <source-position filename="libgimp/gimppainttools_pdb.h" line="49"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimppainttools_pdb.c"
             line="208">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="drawable" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="195">The affected drawable.</doc>
          <type name="Drawable" c:type="GimpDrawable*"/>
        </parameter>
        <parameter name="num_strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="196">Number of stroke control points (count each coordinate as 2 points).</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="197">Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y, ..., sn.x, sn.y }.</doc>
          <array length="1" zero-terminated="0" c:type="const gdouble*">
            <type name="gdouble"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="color_array_copy" c:identifier="gimp_color_array_copy">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparamspecs.c"
           line="976">Creates a new #GimpColorArray containing a deep copy of a %NULL-terminated
array of [class@Gegl.Color].</doc>
      <source-position filename="libgimpbase/gimpparamspecs.h" line="371"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparamspecs.c"
             line="983">a new #GimpColorArray.</doc>
        <type name="ColorArray" c:type="GimpColorArray"/>
      </return-value>
      <parameters>
        <parameter name="array" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="978">an array of colors.</doc>
          <type name="ColorArray" c:type="GimpColorArray"/>
        </parameter>
      </parameters>
    </function>
    <function name="color_array_free" c:identifier="gimp_color_array_free">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparamspecs.c"
           line="999">Frees a %NULL-terminated array of [class@Gegl.Color].</doc>
      <source-position filename="libgimpbase/gimpparamspecs.h" line="372"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="array" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="1001">an array of colors.</doc>
          <type name="ColorArray" c:type="GimpColorArray"/>
        </parameter>
      </parameters>
    </function>
    <function name="color_array_get_length"
              c:identifier="gimp_color_array_get_length">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="373"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparamspecs.c"
             line="1020">the number of [class@Gegl.Color] in @array.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="array" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="1018">an array of colors.</doc>
          <type name="ColorArray" c:type="GimpColorArray"/>
        </parameter>
      </parameters>
    </function>
    <function name="color_array_get_type"
              c:identifier="gimp_color_array_get_type">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="369"/>
      <return-value transfer-ownership="none">
        <type name="GType" c:type="GType"/>
      </return-value>
    </function>
    <function name="color_is_out_of_gamut"
              c:identifier="gimp_color_is_out_of_gamut"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimpcolor.c"
           line="245">Determine whether @color is out of its @space gamut.
A small error of margin is accepted, so that for instance a component
at -0.0000001 is not making the whole color to be considered as
out-of-gamut while it may just be computation imprecision.</doc>
      <source-position filename="libgimpcolor/gimpcolor.h" line="69"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolor.c"
             line="255">whether the color is out of @space gamut.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="color" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolor.c"
               line="247">a [class@Gegl.Color]</doc>
          <type name="Gegl.Color" c:type="GeglColor*"/>
        </parameter>
        <parameter name="space" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolor.c"
               line="248">a color space to convert @color to.</doc>
          <type name="Babl.Object" c:type="const Babl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="color_is_out_of_self_gamut"
              c:identifier="gimp_color_is_out_of_self_gamut"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimpcolor.c"
           line="153">Determine whether @color is out of its own space gamut. This can only
happen if the color space is unbounded and any of the color component
is out of the `[0; 1]` range.
A small error of margin is accepted, so that for instance a component
at -0.0000001 is not making the whole color to be considered as
out-of-gamut while it may just be computation imprecision.</doc>
      <source-position filename="libgimpcolor/gimpcolor.h" line="68"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolor.c"
             line="164">whether the color is out of its own color space gamut.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="color" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolor.c"
               line="155">a [class@Gegl.Color]</doc>
          <type name="Gegl.Color" c:type="GeglColor*"/>
        </parameter>
      </parameters>
    </function>
    <function name="color_is_perceptually_identical"
              c:identifier="gimp_color_is_perceptually_identical"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimpcolor.c"
           line="100">Determine whether @color1 and @color2 can be considered identical to the
human eyes, by computing the distance in a color space as perceptually
uniform as possible.

This function will also consider any transparency channel, so that if you
only want to compare the pure color, you could for instance set both color's
alpha channel to 1.0 first (possibly on duplicates of the colors if originals
should not be modified), such as:

```C
gimp_color_set_alpha (color1, 1.0);
gimp_color_set_alpha (color2, 1.0);
if (gimp_color_is_perceptually_identical (color1, color2))
  {
    printf ("Both colors are identical, ignoring their alpha component");
  }
```</doc>
      <source-position filename="libgimpcolor/gimpcolor.h" line="53"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolor.c"
             line="123">whether the 2 colors can be considered the same for the human eyes.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="color1" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolor.c"
               line="102">a [class@Gegl.Color]</doc>
          <type name="Gegl.Color" c:type="GeglColor*"/>
        </parameter>
        <parameter name="color2" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolor.c"
               line="103">a [class@Gegl.Color]</doc>
          <type name="Gegl.Color" c:type="GeglColor*"/>
        </parameter>
      </parameters>
    </function>
    <function name="color_list_names"
              c:identifier="gimp_color_list_names"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimpcolor-parse.c"
           line="262">Returns the list of [SVG 1.0 color
keywords](https://www.w3.org/TR/SVG/types.html) that is recognized by
[func@color_parse_name].

The returned strings are const and must not be freed. Only the array
must be freed with `g_free()`.

The optional @colors arrays must be freed with [func@color_array_free] when
they are no longer needed.</doc>
      <source-position filename="libgimpcolor/gimpcolor.h" line="59"/>
      <return-value transfer-ownership="container">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolor-parse.c"
             line="276">an array of color names.</doc>
        <array c:type="const gchar**">
          <type name="utf8"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="colors"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolor-parse.c"
               line="264">return location for an array of [class@Gegl.Color]</doc>
          <array c:type="GimpColorArray*">
            <type name="Gegl.Color"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="color_parse_css" c:identifier="gimp_color_parse_css">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimpcolor-parse.c"
           line="210">Attempts to parse a string describing an sRGB color in CSS notation. This can
be either a numerical representation (`rgb(255,0,0)` or `rgb(100%,0%,0%)`)
or a hexadecimal notation as parsed by [func@color_parse_hex] (`##ff0000`) or
a color name as parsed by [func@color_parse_css] (`red`).

Additionally the `rgba()`, `hsl()` and `hsla()` functions are supported too.</doc>
      <source-position filename="libgimpcolor/gimpcolor.h" line="56"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolor-parse.c"
             line="221">a newly allocated [class@Gegl.Color] if @css was
                          parsed successfully, %NULL otherwise</doc>
        <type name="Gegl.Color" c:type="GeglColor*"/>
      </return-value>
      <parameters>
        <parameter name="css" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolor-parse.c"
               line="212">a string describing a color in CSS notation</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="color_parse_css_substring"
              c:identifier="gimp_color_parse_css_substring"
              version="2.2"
              introspectable="0">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimpcolor-parse.c"
           line="311">Attempts to parse a string describing an sRGB color in CSS notation. This can
be either a numerical representation (`rgb(255,0,0)` or `rgb(100%,0%,0%)`) or
a hexadecimal notation as parsed by [func@color_parse_hex] (`##ff0000`) or a
color name as parsed by [func@color_parse_name] (`red`).

Additionally the `rgba()`, `hsl()` and `hsla()` functions are supported too.</doc>
      <source-position filename="libgimpcolor/gimpcolor.h" line="61"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolor-parse.c"
             line="323">a newly allocated [class@Gegl.Color] if @css was
                          parsed successfully, %NULL otherwise</doc>
        <type name="Gegl.Color" c:type="GeglColor*"/>
      </return-value>
      <parameters>
        <parameter name="css" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolor-parse.c"
               line="313">a string describing a color in CSS notation</doc>
          <array length="1" zero-terminated="0" c:type="const gchar*">
            <type name="utf8" c:type="gchar"/>
          </array>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolor-parse.c"
               line="314">the length of @css, in bytes. or -1 if @css is nul-terminated</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="color_parse_hex" c:identifier="gimp_color_parse_hex">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimpcolor-parse.c"
           line="230">Attempts to parse a string describing a sRGB color in hexadecimal
notation (optionally prefixed with a '#').</doc>
      <source-position filename="libgimpcolor/gimpcolor.h" line="57"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolor-parse.c"
             line="237">a newly allocated color representing @hex.</doc>
        <type name="Gegl.Color" c:type="GeglColor*"/>
      </return-value>
      <parameters>
        <parameter name="hex" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolor-parse.c"
               line="232">a string describing a color in hexadecimal notation</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="color_parse_hex_substring"
              c:identifier="gimp_color_parse_hex_substring"
              version="2.2"
              introspectable="0">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimpcolor-parse.c"
           line="349">Attempts to parse a string describing an RGB color in hexadecimal
notation (optionally prefixed with a '#').

This function does not touch the alpha component of @rgb.</doc>
      <source-position filename="libgimpcolor/gimpcolor.h" line="63"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolor-parse.c"
             line="359">a newly allocated color representing @hex.</doc>
        <type name="Gegl.Color" c:type="GeglColor*"/>
      </return-value>
      <parameters>
        <parameter name="hex" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolor-parse.c"
               line="351">a string describing a color in hexadecimal notation</doc>
          <array length="1" zero-terminated="0" c:type="const gchar*">
            <type name="utf8" c:type="gchar"/>
          </array>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolor-parse.c"
               line="352">the length of @hex, in bytes. or -1 if @hex is nul-terminated</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="color_parse_name" c:identifier="gimp_color_parse_name">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimpcolor-parse.c"
           line="245">Attempts to parse a color name. This function accepts [SVG 1.1 color
keywords](https://www.w3.org/TR/SVG11/types.html#ColorKeywords).</doc>
      <source-position filename="libgimpcolor/gimpcolor.h" line="58"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolor-parse.c"
             line="252">a sRGB color as defined in "4.4. Recognized color
         keyword names" list of SVG 1.1 specification, if @name was parsed
         successfully, %NULL otherwise</doc>
        <type name="Gegl.Color" c:type="GeglColor*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolor-parse.c"
               line="247">a color name (in UTF-8 encoding)</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="color_parse_name_substring"
              c:identifier="gimp_color_parse_name_substring"
              version="2.2"
              introspectable="0">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimpcolor-parse.c"
           line="381">Attempts to parse a color name. This function accepts [SVG 1.1 color
keywords](https://www.w3.org/TR/SVG11/types.html#ColorKeywords).</doc>
      <source-position filename="libgimpcolor/gimpcolor.h" line="65"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolor-parse.c"
             line="389">a sRGB color as defined in "4.4. Recognized color
         keyword names" list of SVG 1.1 specification, if @name was parsed
         successfully, %NULL otherwise</doc>
        <type name="Gegl.Color" c:type="GeglColor*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolor-parse.c"
               line="383">a color name (in UTF-8 encoding)</doc>
          <array length="1" zero-terminated="0" c:type="const gchar*">
            <type name="utf8" c:type="gchar"/>
          </array>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolor-parse.c"
               line="384">the length of @name, in bytes. or -1 if @name is nul-terminated</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="color_set_alpha"
              c:identifier="gimp_color_set_alpha"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimpcolor.c"
           line="55">Update the @alpha channel, and any other component if necessary (e.g. in case
of premultiplied channels), without changing the format of @color.

If @color has no alpha component, this function is a no-op.</doc>
      <source-position filename="libgimpcolor/gimpcolor.h" line="50"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="color" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolor.c"
               line="57">a [class@Gegl.Color]</doc>
          <type name="Gegl.Color" c:type="GeglColor*"/>
        </parameter>
        <parameter name="alpha" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolor.c"
               line="58">new value for the alpha channel.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="config_build_data_path"
              c:identifier="gimp_config_build_data_path"
              moved-to="ConfigInterface.build_data_path"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-path.c"
           line="196">Creates a search path as it is used in the gimprc file.  The path
returned by gimp_config_build_data_path() includes a directory
below the user's gimp directory and one in the system-wide data
directory.

Note that you cannot use this path directly with gimp_path_parse().
As it is in the gimprc notation, you first need to expand and
recode it using gimp_config_path_expand().</doc>
      <source-position filename="libgimpconfig/gimpconfig-path.h" line="101"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-path.c"
             line="209">a newly allocated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-path.c"
               line="198">directory name (in UTF-8 encoding)</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="config_build_plug_in_path"
              c:identifier="gimp_config_build_plug_in_path"
              moved-to="ConfigInterface.build_plug_in_path"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-path.c"
           line="229">Creates a search path as it is used in the gimprc file.  The path
returned by gimp_config_build_plug_in_path() includes a directory
below the user's gimp directory and one in the system-wide plug-in
directory.

Note that you cannot use this path directly with gimp_path_parse().
As it is in the gimprc notation, you first need to expand and
recode it using gimp_config_path_expand().</doc>
      <source-position filename="libgimpconfig/gimpconfig-path.h" line="103"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-path.c"
             line="242">a newly allocated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-path.c"
               line="231">directory name (in UTF-8 encoding)</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="config_build_system_path"
              c:identifier="gimp_config_build_system_path"
              moved-to="ConfigInterface.build_system_path"
              version="2.10.6">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-path.c"
           line="277">Creates a search path as it is used in the gimprc file.  The path
returned by gimp_config_build_system_path() is just the read-only
parts of the search path constructed by gimp_config_build_plug_in_path().

Note that you cannot use this path directly with gimp_path_parse().
As it is in the gimprc notation, you first need to expand and
recode it using gimp_config_path_expand().</doc>
      <source-position filename="libgimpconfig/gimpconfig-path.h" line="104"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-path.c"
             line="289">a newly allocated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-path.c"
               line="279">directory name (in UTF-8 encoding)</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="config_build_writable_path"
              c:identifier="gimp_config_build_writable_path"
              moved-to="ConfigInterface.build_writable_path"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-path.c"
           line="255">Creates a search path as it is used in the gimprc file.  The path
returned by gimp_config_build_writable_path() is just the writable
parts of the search path constructed by gimp_config_build_data_path().

Note that you cannot use this path directly with gimp_path_parse().
As it is in the gimprc notation, you first need to expand and
recode it using gimp_config_path_expand().</doc>
      <source-position filename="libgimpconfig/gimpconfig-path.h" line="102"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-path.c"
             line="267">a newly allocated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-path.c"
               line="257">directory name (in UTF-8 encoding)</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="config_deserialize_return"
              c:identifier="gimp_config_deserialize_return"
              moved-to="ConfigInterface.deserialize_return"
              version="2.4">
      <source-position filename="libgimpconfig/gimpconfig-iface.h" line="113"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="scanner" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-iface.c"
               line="641">a #GScanner</doc>
          <type name="GLib.Scanner" c:type="GScanner*"/>
        </parameter>
        <parameter name="expected_token" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-iface.c"
               line="642">the expected token</doc>
          <type name="GLib.TokenType" c:type="GTokenType"/>
        </parameter>
        <parameter name="nest_level" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-iface.c"
               line="643">the nest level</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="config_deserialize_strv"
              c:identifier="gimp_config_deserialize_strv"
              moved-to="ConfigInterface.deserialize_strv"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-array.c"
           line="82">Sets @value to new #GStrv.
Scans i.e. consumes serialization to fill the GStrv.

Requires @value to be initialized to hold type #G_TYPE_BOXED.</doc>
      <source-position filename="libgimpconfig/gimpconfig-array.h" line="42"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-array.c"
             line="92">G_TOKEN_RIGHT_PAREN on success.
G_TOKEN_INT on failure to scan length.
G_TOKEN_STRING on failure to scan enough quoted strings.

On failure, the value in @value is not touched and could be NULL.</doc>
        <type name="GLib.TokenType" c:type="GTokenType"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-array.c"
               line="84">destination #GValue to hold a #GStrv</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="scanner" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-array.c"
               line="85">#GScanner positioned in serialization stream</doc>
          <type name="GLib.Scanner" c:type="GScanner*"/>
        </parameter>
      </parameters>
    </function>
    <function name="config_diff"
              c:identifier="gimp_config_diff"
              moved-to="ConfigInterface.diff"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-utils.c"
           line="161">Compares all properties of @a and @b that have all @flags set. If
@flags is 0, all properties are compared.

If the two objects are not of the same type, only properties that
exist in both object classes and are of the same value_type are
compared.</doc>
      <source-position filename="libgimpconfig/gimpconfig-utils.h" line="34"/>
      <return-value transfer-ownership="container">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-utils.c"
             line="174">a GList of differing GParamSpecs.</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="GObject.ParamSpec"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-utils.c"
               line="163">a #GObject</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-utils.c"
               line="164">another #GObject object</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-utils.c"
               line="165">a mask of GParamFlags</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="config_error_quark"
              c:identifier="gimp_config_error_quark"
              moved-to="ConfigInterface.error_quark"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-error.c"
           line="38">This function is never called directly. Use GIMP_CONFIG_ERROR() instead.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-error.c"
             line="43">the #GQuark that defines the GimpConfig error domain.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="config_param_spec_duplicate"
              c:identifier="gimp_config_param_spec_duplicate"
              moved-to="ConfigInterface.param_spec_duplicate"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-params.c"
           line="60">Creates an exact copy of @pspec, with all its properties, returns
%NULL if @pspec is of an unknown type that can't be duplicated.</doc>
      <source-position filename="libgimpconfig/gimpconfig-params.h"
                       line="229"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-params.c"
             line="67">The new #GParamSpec, or %NULL.</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="pspec" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-params.c"
               line="62">the #GParamSpec to duplicate</doc>
          <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
        </parameter>
      </parameters>
    </function>
    <function name="config_reset_properties"
              c:identifier="gimp_config_reset_properties"
              moved-to="ConfigInterface.reset_properties"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-utils.c"
           line="265">Resets all writable properties of @object to the default values as
defined in their #GParamSpec. Properties marked as "construct-only"
are not touched.

If you want to reset a #GimpConfig object, please use gimp_config_reset().</doc>
      <source-position filename="libgimpconfig/gimpconfig-utils.h" line="42"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-utils.c"
               line="267">a #GObject</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </function>
    <function name="config_reset_property"
              c:identifier="gimp_config_reset_property"
              moved-to="ConfigInterface.reset_property"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-utils.c"
           line="351">Resets the property named @property_name to its default value.  The
property must be writable and must not be marked as "construct-only".</doc>
      <source-position filename="libgimpconfig/gimpconfig-utils.h" line="43"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-utils.c"
               line="353">a #GObject</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="property_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-utils.c"
               line="354">name of the property to reset</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="config_serialize_strv"
              c:identifier="gimp_config_serialize_strv"
              moved-to="ConfigInterface.serialize_strv"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-array.c"
           line="36">Appends a string repr of the #GStrv value of #GValue to @str.
Repr is an integer literal greater than or equal to zero,
followed by a possibly empty sequence
of quoted and escaped string literals.</doc>
      <source-position filename="libgimpconfig/gimpconfig-array.h" line="40"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-array.c"
             line="46">%TRUE always</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-array.c"
               line="38">source #GValue holding a #GStrv</doc>
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-array.c"
               line="39">destination string</doc>
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
      </parameters>
    </function>
    <function name="config_serialize_value"
              c:identifier="gimp_config_serialize_value"
              moved-to="ConfigInterface.serialize_value"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-serialize.c"
           line="497">This utility function appends a string representation of #GValue to @str.</doc>
      <source-position filename="libgimpconfig/gimpconfig-serialize.h"
                       line="45"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-serialize.c"
             line="505">%TRUE if serialization succeeded, %FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-serialize.c"
               line="499">a #GValue.</doc>
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-serialize.c"
               line="500">a #GString.</doc>
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
        <parameter name="escaped" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-serialize.c"
               line="501">whether to escape string values.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="config_string_append_escaped"
              c:identifier="gimp_config_string_append_escaped"
              moved-to="ConfigInterface.string_append_escaped"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-utils.c"
           line="416">Escapes and quotes @val and appends it to @string. The escape
algorithm is different from the one used by g_strescape() since it
leaves non-ASCII characters intact and thus preserves UTF-8
strings. Only control characters and quotes are being escaped.</doc>
      <source-position filename="libgimpconfig/gimpconfig-utils.h" line="46"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="string" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-utils.c"
               line="418">pointer to a #GString</doc>
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-utils.c"
               line="419">a string to append or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="config_sync"
              c:identifier="gimp_config_sync"
              moved-to="ConfigInterface.sync"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-utils.c"
           line="196">Compares all read- and write-able properties from @src and @dest
that have all @flags set. Differing values are then copied from
@src to @dest. If @flags is 0, all differing read/write properties.

Properties marked as "construct-only" are not touched.

If the two objects are not of the same type, only properties that
exist in both object classes and are of the same value_type are
synchronized</doc>
      <source-position filename="libgimpconfig/gimpconfig-utils.h" line="38"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-utils.c"
             line="212">%TRUE if @dest was modified, %FALSE otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-utils.c"
               line="198">a #GObject</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="dest" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-utils.c"
               line="199">another #GObject</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-utils.c"
               line="200">a mask of GParamFlags</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="config_type_register"
              c:identifier="gimp_config_type_register"
              moved-to="ConfigInterface.type_register"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-register.c"
           line="55">This function is a fancy wrapper around g_type_register_static().
It creates a new object type as subclass of @parent_type, installs
@pspecs on it and makes the new type implement the #GimpConfig
interface.</doc>
      <source-position filename="libgimpconfig/gimpconfig-register.h"
                       line="34"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-register.c"
             line="67">the newly registered #GType</doc>
        <type name="GType" c:type="GType"/>
      </return-value>
      <parameters>
        <parameter name="parent_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-register.c"
               line="57">type from which this type will be derived</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="type_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-register.c"
               line="58">string used as the name of the new type</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="pspecs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-register.c"
               line="59">array of #GParamSpec to install as properties on the new type</doc>
          <array length="3" zero-terminated="0" c:type="GParamSpec**">
            <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
          </array>
        </parameter>
        <parameter name="n_pspecs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-register.c"
               line="60">the number of param specs in @pspecs</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_are_dynamics_enabled"
              c:identifier="gimp_context_are_dynamics_enabled"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="1886">Whether the currently active paint dynamics will be applied to
painting.

Returns whether the currently active paint dynamics (as returned by
gimp_context_get_dynamics()) is enabled.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="88"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="1895">Whether dynamics enabled or disabled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="context_enable_dynamics"
              c:identifier="gimp_context_enable_dynamics"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="1922">Enables paint dynamics using the active paint dynamics.

Enables the active paint dynamics to be used in all subsequent paint
operations.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="89"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="1931">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="enable" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="1924">Whether to enable or disable dynamics.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_get_antialias"
              c:identifier="gimp_context_get_antialias"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="2665">Get the antialias setting.

Returns the antialias setting.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="110"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="2672">The antialias setting.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="context_get_background"
              c:identifier="gimp_context_get_background"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="402">Get the current GIMP background color.

Returns the current GIMP background color. The background color is
used in a variety of tools such as blending, erasing (with non-alpha
images), and image filling.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="45"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="411">The background color.</doc>
        <type name="Gegl.Color" c:type="GeglColor*"/>
      </return-value>
    </function>
    <function name="context_get_brush"
              c:identifier="gimp_context_get_brush"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="1218">Get the currently active brush.

Returns the currently active brush. All paint and stroke operations
use this brush.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="69"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="1226">The active brush.</doc>
        <type name="Brush" c:type="GimpBrush*"/>
      </return-value>
    </function>
    <function name="context_get_brush_angle"
              c:identifier="gimp_context_get_brush_angle"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="1462">Get brush angle in degrees.

Set the angle in degrees for brush based paint tools.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="76"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="1469">Angle in degrees.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
    </function>
    <function name="context_get_brush_aspect_ratio"
              c:identifier="gimp_context_get_brush_aspect_ratio"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="1393">Get brush aspect ratio.

Set the aspect ratio for brush based paint tools.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="74"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="1400">Aspect ratio.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
    </function>
    <function name="context_get_brush_force"
              c:identifier="gimp_context_get_brush_force"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="1739">Get brush force in paint options.

Get the brush application force for brush based paint tools.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="84"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="1746">Brush application force.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
    </function>
    <function name="context_get_brush_hardness"
              c:identifier="gimp_context_get_brush_hardness"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="1636">Get brush hardness in paint options.

Get the brush hardness for brush based paint tools.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="81"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="1643">Brush hardness.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
    </function>
    <function name="context_get_brush_size"
              c:identifier="gimp_context_get_brush_size"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="1290">Get brush size in pixels.

Get the brush size in pixels for brush based paint tools.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="71"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="1297">Brush size in pixels.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
    </function>
    <function name="context_get_brush_spacing"
              c:identifier="gimp_context_get_brush_spacing"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="1531">Get brush spacing as percent of size.

Get the brush spacing as percent of size for brush based paint
tools.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="78"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="1539">Brush spacing as fraction of size.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
    </function>
    <function name="context_get_diagonal_neighbors"
              c:identifier="gimp_context_get_diagonal_neighbors"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="3287">Get the diagonal neighbors setting.

Returns the diagonal neighbors setting.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="128"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="3294">The diagonal neighbors setting.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="context_get_distance_metric"
              c:identifier="gimp_context_get_distance_metric"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="3365">Get the distance metric used in some computations.

Returns the distance metric in the current context. See
gimp_context_set_distance_metric() to know more about its usage.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="130"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="3373">The distance metric.</doc>
        <type name="Gegl.DistanceMetric" c:type="GeglDistanceMetric"/>
      </return-value>
    </function>
    <function name="context_get_dynamics"
              c:identifier="gimp_context_get_dynamics"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="1808">Get the currently active paint dynamics.

Returns the name of the currently active paint dynamics. If enabled,
all paint operations and stroke operations use this paint dynamics
to control the application of paint to the image. If disabled, the
dynamics will be ignored during paint actions.
See gimp_context_are_dynamics_enabled() to enquire whether dynamics
are used or ignored.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="86"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="1820">The name of the active paint dynamics.
         The returned value must be freed with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="context_get_feather"
              c:identifier="gimp_context_get_feather"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="2744">Get the feather setting.

Returns the feather setting.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="112"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="2751">The feather setting.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="context_get_feather_radius"
              c:identifier="gimp_context_get_feather_radius"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="2822">Get the feather radius setting.

Returns the feather radius setting.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="114"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="2831">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="feather_radius_x"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="2824">The horizontal feather radius.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="feather_radius_y"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="2825">The vertical feather radius.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_get_font"
              c:identifier="gimp_context_get_font"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="2594">Get the currently active font.

Returns the currently active font.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="108"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="2601">The active font.</doc>
        <type name="Font" c:type="GimpFont*"/>
      </return-value>
    </function>
    <function name="context_get_foreground"
              c:identifier="gimp_context_get_foreground"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="329">Get the current GIMP foreground color.

Returns the current GIMP foreground color. The foreground color is
used in a variety of tools such as paint tools, blending, and bucket
fill.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="43"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="338">The foreground color.</doc>
        <type name="Gegl.Color" c:type="GeglColor*"/>
      </return-value>
    </function>
    <function name="context_get_gradient"
              c:identifier="gimp_context_get_gradient"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="2105">Get the currently active gradient.

Returns the currently active gradient.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="94"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="2112">The active gradient.</doc>
        <type name="Gradient" c:type="GimpGradient*"/>
      </return-value>
    </function>
    <function name="context_get_gradient_blend_color_space"
              c:identifier="gimp_context_get_gradient_blend_color_space"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="2312">Get the gradient blend color space.

Get the gradient blend color space for paint tools and the gradient
tool.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="100"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="2320">Color blend space.</doc>
        <type name="GradientBlendColorSpace"
              c:type="GimpGradientBlendColorSpace"/>
      </return-value>
    </function>
    <function name="context_get_gradient_repeat_mode"
              c:identifier="gimp_context_get_gradient_repeat_mode"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="2383">Get the gradient repeat mode.

Get the gradient repeat mode for paint tools and the gradient tool.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="102"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="2390">Repeat mode.</doc>
        <type name="RepeatMode" c:type="GimpRepeatMode"/>
      </return-value>
    </function>
    <function name="context_get_gradient_reverse"
              c:identifier="gimp_context_get_gradient_reverse"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="2452">Get the gradient reverse setting.

Get the gradient reverse setting for paint tools and the gradient
tool.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="104"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="2460">Reverse.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="context_get_ink_angle"
              c:identifier="gimp_context_get_ink_angle"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="3746">Get ink angle in degrees.

Get the ink angle in degrees for ink tool.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="140"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="3753">ink angle in degrees.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
    </function>
    <function name="context_get_ink_blob_angle"
              c:identifier="gimp_context_get_ink_blob_angle"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="4160">Get ink blob angle in degrees.

Get the ink blob angle in degrees for ink tool.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="152"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="4167">ink blob angle in degrees.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
    </function>
    <function name="context_get_ink_blob_aspect_ratio"
              c:identifier="gimp_context_get_ink_blob_aspect_ratio"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="4091">Get ink blob aspect ratio.

Get the ink blob aspect ratio for ink tool.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="150"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="4098">ink blob aspect ratio.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
    </function>
    <function name="context_get_ink_blob_type"
              c:identifier="gimp_context_get_ink_blob_type"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="4022">Get ink blob type.

Get the ink blob type for ink tool.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="148"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="4029">Ink blob type.</doc>
        <type name="InkBlobType" c:type="GimpInkBlobType"/>
      </return-value>
    </function>
    <function name="context_get_ink_size"
              c:identifier="gimp_context_get_ink_size"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="3677">Get ink blob size in pixels.

Get the ink blob size in pixels for ink tool.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="138"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="3684">ink blob size in pixels.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
    </function>
    <function name="context_get_ink_size_sensitivity"
              c:identifier="gimp_context_get_ink_size_sensitivity"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="3815">Get ink size sensitivity.

Get the ink size sensitivity for ink tool.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="142"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="3822">ink size sensitivity.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
    </function>
    <function name="context_get_ink_speed_sensitivity"
              c:identifier="gimp_context_get_ink_speed_sensitivity"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="3953">Get ink speed sensitivity.

Get the ink speed sensitivity for ink tool.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="146"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="3960">ink speed sensitivity.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
    </function>
    <function name="context_get_ink_tilt_sensitivity"
              c:identifier="gimp_context_get_ink_tilt_sensitivity"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="3884">Get ink tilt sensitivity.

Get the ink tilt sensitivity for ink tool.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="144"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="3891">ink tilt sensitivity.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
    </function>
    <function name="context_get_interpolation"
              c:identifier="gimp_context_get_interpolation"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="3441">Get the interpolation type.

Returns the interpolation setting. The return value is an integer
which corresponds to the values listed in the argument description.
If the interpolation has not been set explicitly by
gimp_context_set_interpolation(), the default interpolation set in
gimprc will be used.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="132"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="3452">The interpolation type.</doc>
        <type name="InterpolationType" c:type="GimpInterpolationType"/>
      </return-value>
    </function>
    <function name="context_get_line_cap_style"
              c:identifier="gimp_context_get_line_cap_style"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="832">Get the line cap style setting.

Returns the line cap style setting.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="57"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="839">The line cap style setting.</doc>
        <type name="CapStyle" c:type="GimpCapStyle"/>
      </return-value>
    </function>
    <function name="context_get_line_dash_offset"
              c:identifier="gimp_context_get_line_dash_offset"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="1053">Get the line dash offset setting.

Returns the line dash offset setting.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="63"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="1060">The line dash offset setting.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
    </function>
    <function name="context_get_line_dash_pattern"
              c:identifier="gimp_context_get_line_dash_pattern"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="1126">Get the line dash pattern setting.

Returns the line dash pattern setting.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="65"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="1135">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="num_dashes"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="1128">The number of dashes in the dash_pattern array.</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="dashes"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="1129">The line dash pattern setting.</doc>
          <array length="0" zero-terminated="0" c:type="gdouble**">
            <type name="gdouble"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="context_get_line_join_style"
              c:identifier="gimp_context_get_line_join_style"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="905">Get the line join style setting.

Returns the line join style setting.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="59"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="912">The line join style setting.</doc>
        <type name="JoinStyle" c:type="GimpJoinStyle"/>
      </return-value>
    </function>
    <function name="context_get_line_miter_limit"
              c:identifier="gimp_context_get_line_miter_limit"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="977">Get the line miter limit setting.

Returns the line miter limit setting.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="61"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="984">The line miter limit setting.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
    </function>
    <function name="context_get_line_width"
              c:identifier="gimp_context_get_line_width"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="686">Get the line width setting.

Returns the line width setting.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="53"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="693">The line width setting.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
    </function>
    <function name="context_get_line_width_unit"
              c:identifier="gimp_context_get_line_width_unit"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="759">Get the line width unit setting.

Returns the line width unit setting.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="55"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="766">The line width unit setting.</doc>
        <type name="Unit" c:type="GimpUnit*"/>
      </return-value>
    </function>
    <function name="context_get_mypaint_brush"
              c:identifier="gimp_context_get_mypaint_brush"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="1958">Get the currently active MyPaint brush.

Returns the name of the currently active MyPaint brush.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="90"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="1965">The name of the active MyPaint brush.
         The returned value must be freed with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="context_get_opacity"
              c:identifier="gimp_context_get_opacity"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="545">Get the opacity.

Returns the opacity setting. The return value is a floating point
number between 0 and 100.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="49"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="553">The opacity.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
    </function>
    <function name="context_get_paint_method"
              c:identifier="gimp_context_get_paint_method"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="186">Get the currently active paint method.

Returns the name of the currently active paint method.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="39"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="193">The name of the active paint method.
         The returned value must be freed with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="context_get_paint_mode"
              c:identifier="gimp_context_get_paint_mode"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="616">Get the paint mode.

Returns the paint-mode setting. The return value is an integer which
corresponds to the values listed in the argument description.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="51"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="624">The paint mode.</doc>
        <type name="LayerMode" c:type="GimpLayerMode"/>
      </return-value>
    </function>
    <function name="context_get_palette"
              c:identifier="gimp_context_get_palette"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="2523">Get the currently active palette.

Returns the currently active palette.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="106"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="2530">The active palette.</doc>
        <type name="Palette" c:type="GimpPalette*"/>
      </return-value>
    </function>
    <function name="context_get_pattern"
              c:identifier="gimp_context_get_pattern"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="2031">Get the currently active pattern.

Returns the active pattern in the current context. All clone and
bucket-fill operations with patterns will use this pattern to
control the application of paint to the image.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="92"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="2040">The active pattern.</doc>
        <type name="Pattern" c:type="GimpPattern*"/>
      </return-value>
    </function>
    <function name="context_get_sample_criterion"
              c:identifier="gimp_context_get_sample_criterion"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="2986">Get the sample criterion setting.

Returns the sample criterion setting.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="120"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="2993">The sample criterion setting.</doc>
        <type name="SelectCriterion" c:type="GimpSelectCriterion"/>
      </return-value>
    </function>
    <function name="context_get_sample_merged"
              c:identifier="gimp_context_get_sample_merged"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="2908">Get the sample merged setting.

Returns the sample merged setting.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="118"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="2915">The sample merged setting.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="context_get_sample_threshold"
              c:identifier="gimp_context_get_sample_threshold"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="3062">Get the sample threshold setting.

Returns the sample threshold setting.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="122"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="3069">The sample threshold setting.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
    </function>
    <function name="context_get_sample_threshold_int"
              c:identifier="gimp_context_get_sample_threshold_int"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="3139">Get the sample threshold setting as an integer value.

Returns the sample threshold setting as an integer value. See
gimp_context_get_sample_threshold().</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="124"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="3147">The sample threshold setting.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
    </function>
    <function name="context_get_sample_transparent"
              c:identifier="gimp_context_get_sample_transparent"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="3210">Get the sample transparent setting.

Returns the sample transparent setting.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="126"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="3217">The sample transparent setting.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="context_get_stroke_method"
              c:identifier="gimp_context_get_stroke_method"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="259">Get the currently active stroke method.

Returns the currently active stroke method.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="41"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="266">The active stroke method.</doc>
        <type name="StrokeMethod" c:type="GimpStrokeMethod"/>
      </return-value>
    </function>
    <function name="context_get_transform_direction"
              c:identifier="gimp_context_get_transform_direction"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="3521">Get the transform direction.

Returns the transform direction. The return value is an integer
which corresponds to the values listed in the argument description.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="134"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="3529">The transform direction.</doc>
        <type name="TransformDirection" c:type="GimpTransformDirection"/>
      </return-value>
    </function>
    <function name="context_get_transform_resize"
              c:identifier="gimp_context_get_transform_resize"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="3597">Get the transform resize type.

Returns the transform resize setting. The return value is an integer
which corresponds to the values listed in the argument description.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="136"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="3605">The transform resize type.</doc>
        <type name="TransformResize" c:type="GimpTransformResize"/>
      </return-value>
    </function>
    <function name="context_list_paint_methods"
              c:identifier="gimp_context_list_paint_methods"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="146">Lists the available paint methods.

Lists the names of the available paint methods. Any of the names can
be used for gimp_context_set_paint_method().</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="38"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="155">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="paint_methods"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="148">The names of the available paint methods.</doc>
          <array c:type="gchar***">
            <type name="utf8" c:type="gchar**"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="context_pop" c:identifier="gimp_context_pop" version="2.2">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="74">Pops the topmost context from the plug-in's context stack.

Removes the topmost context from the plug-in's context stack. The
next context on the stack becomes the new current context of the
plug-in, that is, the context that was active before the
corresponding call to gimp_context_push()</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="36"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="84">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="context_push"
              c:identifier="gimp_context_push"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="39">Pushes a context onto the top of the plug-in's context stack.

Creates a new context by copying the current context. The copy
becomes the new current context for the calling plug-in until it is
popped again using gimp_context_pop().</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="35"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="48">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="context_set_antialias"
              c:identifier="gimp_context_set_antialias"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="2699">Set the antialias setting.

Modifies the antialias setting. If antialiasing is turned on, the
edges of selected region will contain intermediate values which give
the appearance of a sharper, less pixelized edge. This should be set
as TRUE most of the time unless a binary-only selection is wanted.

This setting affects the following procedures:
gimp_image_select_color(), gimp_image_select_contiguous_color(),
gimp_image_select_round_rectangle(), gimp_image_select_ellipse(),
gimp_image_select_polygon(), gimp_image_select_item(),
gimp_drawable_edit_bucket_fill(), gimp_drawable_edit_stroke_item(),
gimp_drawable_edit_stroke_selection().</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="111"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="2717">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="antialias" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="2701">The antialias setting.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_background"
              c:identifier="gimp_context_set_background"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="438">Set the current GIMP background color.

Sets the current GIMP background color. After this is set,
operations which use background such as blending, filling images,
clearing, and erasing (in non-alpha images) will use the new value.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="46"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="448">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="background" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="440">The background color.</doc>
          <type name="Gegl.Color" c:type="GeglColor*"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_brush"
              c:identifier="gimp_context_set_brush"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="1253">Set the active brush.

Sets the active brush in the current context. The brush will be used
in subsequent paint and stroke operations. Returns an error when the
brush data was uninstalled since the brush object was created.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="70"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="1263">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="brush" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="1255">The brush.</doc>
          <type name="Brush" c:type="GimpBrush*"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_brush_angle"
              c:identifier="gimp_context_set_brush_angle"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="1496">Set brush angle in degrees.

Set the angle in degrees for brush based paint tools.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="77"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="1504">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="angle" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="1498">Angle in degrees.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_brush_aspect_ratio"
              c:identifier="gimp_context_set_brush_aspect_ratio"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="1427">Set brush aspect ratio.

Set the aspect ratio for brush based paint tools.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="75"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="1435">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="aspect" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="1429">Aspect ratio.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_brush_default_hardness"
              c:identifier="gimp_context_set_brush_default_hardness"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="1705">Set brush spacing to its default.

Set the brush spacing to the default for paintbrush, airbrush, or
pencil tools.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="83"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="1713">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="context_set_brush_default_size"
              c:identifier="gimp_context_set_brush_default_size"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="1359">Set brush size to its default.

Set the brush size to the default (max of width and height) for
paintbrush, airbrush, or pencil tools.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="73"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="1367">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="context_set_brush_default_spacing"
              c:identifier="gimp_context_set_brush_default_spacing"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="1602">Set brush spacing to its default.

Set the brush spacing to the default for paintbrush, airbrush, or
pencil tools.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="80"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="1610">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="context_set_brush_force"
              c:identifier="gimp_context_set_brush_force"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="1773">Set brush application force.

Set the brush application force for brush based paint tools.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="85"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="1781">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="force" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="1775">Brush application force.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_brush_hardness"
              c:identifier="gimp_context_set_brush_hardness"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="1670">Set brush hardness.

Set the brush hardness for brush based paint tools.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="82"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="1678">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="hardness" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="1672">Brush hardness.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_brush_size"
              c:identifier="gimp_context_set_brush_size"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="1324">Set brush size in pixels.

Set the brush size in pixels for brush based paint tools.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="72"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="1332">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="size" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="1326">Brush size in pixels.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_brush_spacing"
              c:identifier="gimp_context_set_brush_spacing"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="1566">Set brush spacing as percent of size.

Set the brush spacing as percent of size for brush based paint
tools.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="79"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="1575">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="spacing" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="1568">Brush spacing as fraction of size.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_default_colors"
              c:identifier="gimp_context_set_default_colors"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="475">Set the current GIMP foreground and background colors to black and
white.

Sets the current GIMP foreground and background colors to their
initial default values, black and white.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="47"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="484">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="context_set_defaults"
              c:identifier="gimp_context_set_defaults"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="110">Reset context settings to their default values.

Resets context settings used by various procedures to their default
value. You should usually call this after a context push so that a
script which calls procedures affected by context settings will not
be affected by changes in the global context.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="37"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="120">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="context_set_diagonal_neighbors"
              c:identifier="gimp_context_set_diagonal_neighbors"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="3321">Set the diagonal neighbors setting.

Modifies the diagonal neighbors setting. If the affected region of
an operation is based on a seed point, like when doing a seed fill,
then, when this setting is TRUE, all eight neighbors of each pixel
are considered when calculating the affected region; in contrast,
when this setting is FALSE, only the four orthogonal neighbors of
each pixel are considered.

This setting affects the following procedures:
gimp_image_select_contiguous_color(),
gimp_drawable_edit_bucket_fill().</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="129"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="3338">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="diagonal_neighbors" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="3323">The diagonal neighbors setting.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_distance_metric"
              c:identifier="gimp_context_set_distance_metric"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="3400">Set the distance metric used in some computations.

Modifies the distance metric used in some computations, such as
gimp_drawable_edit_gradient_fill(). In particular, it does not
change the metric used in generic distance computation on canvas, as
in the Measure tool.

This setting affects the following procedures:
gimp_drawable_edit_gradient_fill().</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="131"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="3414">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="metric" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="3402">The distance metric.</doc>
          <type name="Gegl.DistanceMetric" c:type="GeglDistanceMetric"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_dynamics"
              c:identifier="gimp_context_set_dynamics"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="1848">Set the active paint dynamics.

Sets the active paint dynamics. The paint dynamics will be used in
all subsequent paint operations when dynamics are enabled. The name
should be a name of an installed paint dynamics. Returns an error if
no matching paint dynamics is found.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="87"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="1859">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="1850">A name of a paint dynamics.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_feather"
              c:identifier="gimp_context_set_feather"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="2778">Set the feather setting.

Modifies the feather setting. If the feather option is enabled,
selections will be blurred before combining. The blur is a gaussian
blur; its radii can be controlled using
gimp_context_set_feather_radius().

This setting affects the following procedures:
gimp_image_select_color(), gimp_image_select_contiguous_color(),
gimp_image_select_rectangle(), gimp_image_select_round_rectangle(),
gimp_image_select_ellipse(), gimp_image_select_polygon(),
gimp_image_select_item().</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="113"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="2795">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="feather" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="2780">The feather setting.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_feather_radius"
              c:identifier="gimp_context_set_feather_radius"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="2867">Set the feather radius setting.

Modifies the feather radius setting.

This setting affects all procedures that are affected by
gimp_context_set_feather().</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="116"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="2879">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="feather_radius_x" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="2869">The horizontal feather radius.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="feather_radius_y" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="2870">The vertical feather radius.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_font"
              c:identifier="gimp_context_set_font"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="2628">Set the active font.

Sets the active font in the current context. The font will be used
in subsequent text operations. Returns an error when the font data
was uninstalled since the font object was created.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="109"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="2638">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="font" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="2630">The font.</doc>
          <type name="Font" c:type="GimpFont*"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_foreground"
              c:identifier="gimp_context_set_foreground"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="365">Set the current GIMP foreground color.

Sets the current GIMP foreground color. After this is set,
operations which use foreground such as paint tools, blending, and
bucket fill will use the new value.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="44"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="375">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="foreground" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="367">The foreground color.</doc>
          <type name="Gegl.Color" c:type="GeglColor*"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_gradient"
              c:identifier="gimp_context_set_gradient"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="2139">Sets the active gradient.

Sets the active gradient in the current context. The gradient will
be used in subsequent gradient operations. Returns an error when the
gradient data was uninstalled since the gradient object was created.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="95"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="2149">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="gradient" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="2141">The gradient.</doc>
          <type name="Gradient" c:type="GimpGradient*"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_gradient_blend_color_space"
              c:identifier="gimp_context_set_gradient_blend_color_space"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="2347">Set the gradient blend color space.

Set the gradient blend color space for paint tools and the gradient
tool.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="101"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="2356">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="blend_color_space" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="2349">Blend color space.</doc>
          <type name="GradientBlendColorSpace"
                c:type="GimpGradientBlendColorSpace"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_gradient_fg_bg_hsv_ccw"
              c:identifier="gimp_context_set_gradient_fg_bg_hsv_ccw"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="2244">Sets the built-in FG-BG HSV (ccw) gradient as the active gradient.

Sets the built-in FG-BG HSV (ccw) gradient as the active gradient.
The gradient will be used for subsequent gradient operations.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="98"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="2252">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="context_set_gradient_fg_bg_hsv_cw"
              c:identifier="gimp_context_set_gradient_fg_bg_hsv_cw"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="2210">Sets the built-in FG-BG HSV (cw) gradient as the active gradient.

Sets the built-in FG-BG HSV (cw) gradient as the active gradient.
The gradient will be used for subsequent gradient operations.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="97"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="2218">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="context_set_gradient_fg_bg_rgb"
              c:identifier="gimp_context_set_gradient_fg_bg_rgb"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="2176">Sets the built-in FG-BG RGB gradient as the active gradient.

Sets the built-in FG-BG RGB gradient as the active gradient. The
gradient will be used for subsequent gradient operations.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="96"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="2184">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="context_set_gradient_fg_transparent"
              c:identifier="gimp_context_set_gradient_fg_transparent"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="2278">Sets the built-in FG-Transparent gradient as the active gradient.

Sets the built-in FG-Transparent gradient as the active gradient.
The gradient will be used for subsequent gradient operations.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="99"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="2286">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="context_set_gradient_repeat_mode"
              c:identifier="gimp_context_set_gradient_repeat_mode"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="2417">Set the gradient repeat mode.

Set the gradient repeat mode for paint tools and the gradient tool.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="103"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="2425">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="repeat_mode" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="2419">Repeat mode.</doc>
          <type name="RepeatMode" c:type="GimpRepeatMode"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_gradient_reverse"
              c:identifier="gimp_context_set_gradient_reverse"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="2487">Set the gradient reverse setting.

Set the gradient reverse setting for paint tools and the gradient
tool.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="105"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="2496">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="reverse" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="2489">Reverse.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_ink_angle"
              c:identifier="gimp_context_set_ink_angle"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="3780">Set ink angle in degrees.

Set the ink angle in degrees for ink tool.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="141"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="3788">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="angle" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="3782">ink angle in degrees.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_ink_blob_angle"
              c:identifier="gimp_context_set_ink_blob_angle"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="4194">Set ink blob angle in degrees.

Set the ink blob angle in degrees for ink tool.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="153"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="4202">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="angle" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="4196">ink blob angle in degrees.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_ink_blob_aspect_ratio"
              c:identifier="gimp_context_set_ink_blob_aspect_ratio"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="4125">Set ink blob aspect ratio.

Set the ink blob aspect ratio for ink tool.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="151"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="4133">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="aspect" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="4127">ink blob aspect ratio.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_ink_blob_type"
              c:identifier="gimp_context_set_ink_blob_type"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="4056">Set ink blob type.

Set the ink blob type for ink tool.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="149"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="4064">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="4058">Ink blob type.</doc>
          <type name="InkBlobType" c:type="GimpInkBlobType"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_ink_size"
              c:identifier="gimp_context_set_ink_size"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="3711">Set ink blob size in pixels.

Set the ink blob size in pixels for ink tool.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="139"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="3719">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="size" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="3713">ink blob size in pixels.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_ink_size_sensitivity"
              c:identifier="gimp_context_set_ink_size_sensitivity"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="3849">Set ink size sensitivity.

Set the ink size sensitivity for ink tool.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="143"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="3857">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="size" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="3851">ink size sensitivity.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_ink_speed_sensitivity"
              c:identifier="gimp_context_set_ink_speed_sensitivity"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="3987">Set ink speed sensitivity.

Set the ink speed sensitivity for ink tool.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="147"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="3995">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="speed" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="3989">ink speed sensitivity.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_ink_tilt_sensitivity"
              c:identifier="gimp_context_set_ink_tilt_sensitivity"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="3918">Set ink tilt sensitivity.

Set the ink tilt sensitivity for ink tool.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="145"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="3926">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="tilt" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="3920">ink tilt sensitivity.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_interpolation"
              c:identifier="gimp_context_set_interpolation"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="3479">Set the interpolation type.

Modifies the interpolation setting.

This setting affects affects the following procedures:
gimp_item_transform_flip(), gimp_item_transform_perspective(),
gimp_item_transform_rotate(), gimp_item_transform_scale(),
gimp_item_transform_shear(), gimp_item_transform_2d(),
gimp_item_transform_matrix(), gimp_image_scale(),
gimp_layer_scale().</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="133"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="3494">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="interpolation" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="3481">The interpolation type.</doc>
          <type name="InterpolationType" c:type="GimpInterpolationType"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_line_cap_style"
              c:identifier="gimp_context_set_line_cap_style"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="866">Set the line cap style setting.

Modifies the line cap style setting for stroking lines.

This setting affects the following procedures:
gimp_drawable_edit_stroke_selection(),
gimp_drawable_edit_stroke_item().</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="58"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="878">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="cap_style" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="868">The line cap style setting.</doc>
          <type name="CapStyle" c:type="GimpCapStyle"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_line_dash_offset"
              c:identifier="gimp_context_set_line_dash_offset"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="1087">Set the line dash offset setting.

Modifies the line dash offset setting for stroking lines.

This setting affects the following procedures:
gimp_drawable_edit_stroke_selection(),
gimp_drawable_edit_stroke_item().</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="64"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="1099">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="dash_offset" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="1089">The line dash offset setting.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_line_dash_pattern"
              c:identifier="gimp_context_set_line_dash_pattern"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="1171">Set the line dash pattern setting.

Modifies the line dash pattern setting for stroking lines.

The unit of the dash pattern segments is the actual line width used
for the stroke operation, in other words a segment length of 1.0
results in a square segment shape (or gap shape).

This setting affects the following procedures:
gimp_drawable_edit_stroke_selection(),
gimp_drawable_edit_stroke_item().</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="67"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="1188">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="num_dashes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="1173">The number of dashes in the dash_pattern array.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="dashes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="1174">The line dash pattern setting.</doc>
          <array length="0" zero-terminated="0" c:type="const gdouble*">
            <type name="gdouble"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_line_join_style"
              c:identifier="gimp_context_set_line_join_style"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="939">Set the line join style setting.

Modifies the line join style setting for stroking lines.
This setting affects the following procedures:
gimp_drawable_edit_stroke_selection(),
gimp_drawable_edit_stroke_item().</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="60"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="950">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="join_style" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="941">The line join style setting.</doc>
          <type name="JoinStyle" c:type="GimpJoinStyle"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_line_miter_limit"
              c:identifier="gimp_context_set_line_miter_limit"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="1011">Set the line miter limit setting.

Modifies the line miter limit setting for stroking lines.
A mitered join is converted to a bevelled join if the miter would
extend to a distance of more than (miter-limit * line-width) from
the actual join point.

This setting affects the following procedures:
gimp_drawable_edit_stroke_selection(),
gimp_drawable_edit_stroke_item().</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="62"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="1026">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="miter_limit" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="1013">The line miter limit setting.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_line_width"
              c:identifier="gimp_context_set_line_width"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="720">Set the line width setting.

Modifies the line width setting for stroking lines.

This setting affects the following procedures:
gimp_drawable_edit_stroke_selection(),
gimp_drawable_edit_stroke_item().</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="54"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="732">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="line_width" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="722">The line width setting.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_line_width_unit"
              c:identifier="gimp_context_set_line_width_unit"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="793">Set the line width unit setting.

Modifies the line width unit setting for stroking lines.

This setting affects the following procedures:
gimp_drawable_edit_stroke_selection(),
gimp_drawable_edit_stroke_item().</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="56"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="805">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="line_width_unit" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="795">The line width setting unit.</doc>
          <type name="Unit" c:type="GimpUnit*"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_mypaint_brush"
              c:identifier="gimp_context_set_mypaint_brush"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="1993">Set a MyPaint brush as the active MyPaint brush.

Sets the active MyPaint brush to the named MyPaint brush. The brush
will be used in all subsequent MyPaint paint operations. The name
should be a name of an installed MyPaint brush. Returns an error if
no matching MyPaint brush is found.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="91"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="2004">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="1995">A name of a MyPaint brush.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_opacity"
              c:identifier="gimp_context_set_opacity"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="580">Set the opacity.

Modifies the opacity setting. The value should be a floating point
number between 0 and 100.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="50"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="589">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="opacity" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="582">The opacity.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_paint_method"
              c:identifier="gimp_context_set_paint_method"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="221">Set the active paint method.

Sets the active paint method to the named paint method. The paint
method will be used in all subsequent paint operations. The name
should be a name of an available paint method. Returns an error if
no matching paint method is found.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="40"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="232">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="223">The name of the paint method.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_paint_mode"
              c:identifier="gimp_context_set_paint_mode"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="651">Set the paint mode.

Modifies the paint_mode setting.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="52"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="659">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="paint_mode" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="653">The paint mode.</doc>
          <type name="LayerMode" c:type="GimpLayerMode"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_palette"
              c:identifier="gimp_context_set_palette"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="2557">Set the active palette.

Sets the active palette in the current context. The palette will be
used in subsequent paint operations. Returns an error when the
palette data was uninstalled since the palette object was created.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="107"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="2567">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="palette" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="2559">The palette.</doc>
          <type name="Palette" c:type="GimpPalette*"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_pattern"
              c:identifier="gimp_context_set_pattern"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="2067">Set the active pattern.

Sets the active pattern in the current context. The pattern will be
used in subsequent fill operations using a pattern. Returns an error
when the pattern data was uninstalled since the pattern object was
created.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="93"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="2078">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pattern" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="2069">The pattern.</doc>
          <type name="Pattern" c:type="GimpPattern*"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_sample_criterion"
              c:identifier="gimp_context_set_sample_criterion"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="3020">Set the sample criterion setting.

Modifies the sample criterion setting. If an operation depends on
the colors of the pixels present in a drawable, like when doing a
seed fill, this setting controls how color similarity is determined.
SELECT_CRITERION_COMPOSITE is the default value.

This setting affects the following procedures:
gimp_image_select_color(), gimp_image_select_contiguous_color(),
gimp_drawable_edit_bucket_fill().</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="121"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="3035">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="sample_criterion" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="3022">The sample criterion setting.</doc>
          <type name="SelectCriterion" c:type="GimpSelectCriterion"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_sample_merged"
              c:identifier="gimp_context_set_sample_merged"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="2942">Set the sample merged setting.

Modifies the sample merged setting. If an operation depends on the
colors of the pixels present in a drawable, like when doing a seed
fill, this setting controls whether the pixel data from the given
drawable is used ('sample-merged' is FALSE), or the pixel data from
the composite image ('sample-merged' is TRUE. This is equivalent to
sampling for colors after merging all visible layers).

This setting affects the following procedures:
gimp_image_select_color(), gimp_image_select_contiguous_color(),
gimp_drawable_edit_bucket_fill().</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="119"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="2959">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="sample_merged" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="2944">The sample merged setting.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_sample_threshold"
              c:identifier="gimp_context_set_sample_threshold"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="3096">Set the sample threshold setting.

Modifies the sample threshold setting. If an operation depends on
the colors of the pixels present in a drawable, like when doing a
seed fill, this setting controls what is \"sufficiently close\" to
be considered a similar color. If the sample threshold has not been
set explicitly, the default threshold set in gimprc will be used.

This setting affects the following procedures:
gimp_image_select_color(), gimp_image_select_contiguous_color(),
gimp_drawable_edit_bucket_fill().</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="123"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="3112">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="sample_threshold" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="3098">The sample threshold setting.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_sample_threshold_int"
              c:identifier="gimp_context_set_sample_threshold_int"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="3174">Set the sample threshold setting as an integer value.

Modifies the sample threshold setting as an integer value. See
gimp_context_set_sample_threshold().</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="125"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="3183">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="sample_threshold" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="3176">The sample threshold setting.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_sample_transparent"
              c:identifier="gimp_context_set_sample_transparent"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="3244">Set the sample transparent setting.

Modifies the sample transparent setting. If an operation depends on
the colors of the pixels present in a drawable, like when doing a
seed fill, this setting controls whether transparency is considered
to be a unique selectable color. When this setting is TRUE,
transparent areas can be selected or filled.

This setting affects the following procedures:
gimp_image_select_color(), gimp_image_select_contiguous_color(),
gimp_drawable_edit_bucket_fill().</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="127"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="3260">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="sample_transparent" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="3246">The sample transparent setting.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_stroke_method"
              c:identifier="gimp_context_set_stroke_method"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="293">Set the active stroke method.

Sets the active stroke method. The method will be used in all
subsequent stroke operations.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="42"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="302">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="stroke_method" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="295">The new stroke method.</doc>
          <type name="StrokeMethod" c:type="GimpStrokeMethod"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_transform_direction"
              c:identifier="gimp_context_set_transform_direction"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="3556">Set the transform direction.

Modifies the transform direction setting.

This setting affects affects the following procedures:
gimp_item_transform_flip(), gimp_item_transform_perspective(),
gimp_item_transform_rotate(), gimp_item_transform_scale(),
gimp_item_transform_shear(), gimp_item_transform_2d(),
gimp_item_transform_matrix().</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="135"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="3570">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="transform_direction" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="3558">The transform direction.</doc>
          <type name="TransformDirection" c:type="GimpTransformDirection"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_transform_resize"
              c:identifier="gimp_context_set_transform_resize"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="3632">Set the transform resize type.

Modifies the transform resize setting. When transforming pixels, if
the result of a transform operation has a different size than the
original area, this setting determines how the resulting area is
sized.

This setting affects affects the following procedures:
gimp_item_transform_flip(), gimp_item_transform_flip_simple(),
gimp_item_transform_perspective(), gimp_item_transform_rotate(),
gimp_item_transform_rotate_simple(), gimp_item_transform_scale(),
gimp_item_transform_shear(), gimp_item_transform_2d(),
gimp_item_transform_matrix().</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="137"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="3650">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="transform_resize" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpcontext_pdb.c"
               line="3634">The transform resize type.</doc>
          <type name="TransformResize" c:type="GimpTransformResize"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_swap_colors"
              c:identifier="gimp_context_swap_colors"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="510">Swap the current GIMP foreground and background colors.

Swaps the current GIMP foreground and background colors, so that the
new foreground color becomes the old background color and vice
versa.</doc>
      <source-position filename="libgimp/gimpcontext_pdb.h" line="48"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpcontext_pdb.c"
             line="519">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="convolve" c:identifier="gimp_convolve">
      <doc xml:space="preserve"
           filename="libgimp/gimppainttools_pdb.c"
           line="238">Convolve (Blur, Sharpen) using the current brush.

This tool convolves the specified drawable with either a sharpening
or blurring kernel. The pressure parameter controls the magnitude of
the operation. Like the paintbrush, this tool linearly interpolates
between the specified stroke coordinates.</doc>
      <source-position filename="libgimp/gimppainttools_pdb.h" line="52"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimppainttools_pdb.c"
             line="253">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="drawable" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="240">The affected drawable.</doc>
          <type name="Drawable" c:type="GimpDrawable*"/>
        </parameter>
        <parameter name="pressure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="241">The pressure.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="convolve_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="242">Convolve type.</doc>
          <type name="ConvolveType" c:type="GimpConvolveType"/>
        </parameter>
        <parameter name="num_strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="243">Number of stroke control points (count each coordinate as 2 points).</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="244">Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y, ..., sn.x, sn.y }.</doc>
          <array length="3" zero-terminated="0" c:type="const gdouble*">
            <type name="gdouble"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="convolve_default" c:identifier="gimp_convolve_default">
      <doc xml:space="preserve"
           filename="libgimp/gimppainttools_pdb.c"
           line="287">Convolve (Blur, Sharpen) using the current brush.

This tool convolves the specified drawable with either a sharpening
or blurring kernel. This function performs exactly the same as the
gimp_convolve() function except that the tools arguments are
obtained from the convolve option dialog. It this dialog has not
been activated then the dialogs default values will be used.</doc>
      <source-position filename="libgimp/gimppainttools_pdb.h" line="57"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimppainttools_pdb.c"
             line="301">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="drawable" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="289">The affected drawable.</doc>
          <type name="Drawable" c:type="GimpDrawable*"/>
        </parameter>
        <parameter name="num_strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="290">Number of stroke control points (count each coordinate as 2 points).</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="291">Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y, ..., sn.x, sn.y }.</doc>
          <array length="1" zero-terminated="0" c:type="const gdouble*">
            <type name="gdouble"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="cpu_accel_get_support"
              c:identifier="gimp_cpu_accel_get_support"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpcpuaccel.c"
           line="56">Query for CPU acceleration support.</doc>
      <source-position filename="libgimpbase/gimpcpuaccel.h" line="67"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpcpuaccel.c"
             line="61">#GimpCpuAccelFlags as supported by the CPU.</doc>
        <type name="CpuAccelFlags" c:type="GimpCpuAccelFlags"/>
      </return-value>
    </function>
    <function name="cpu_accel_set_use"
              c:identifier="gimp_cpu_accel_set_use"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpcpuaccel.c"
           line="71">This function is for internal use only.</doc>
      <source-position filename="libgimpbase/gimpcpuaccel.h" line="71"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="use" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpcpuaccel.c"
               line="73">whether to use CPU acceleration features or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="data_directory" c:identifier="gimp_data_directory">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpenv.c"
           line="466">Returns the default top directory for GIMP data. If the environment
variable GIMP3_DATADIR exists, that is used.  It should be an
absolute pathname.  Otherwise, on Unix the compile-time defined
directory is used. On Windows, the installation directory as
deduced from the executable's full filename is used.

Note that the actual directories used for GIMP data files can be
overridden by the user in the preferences dialog.

In config files such as gimprc, the string ${gimp_data_dir} expands
to this directory.

The returned string is owned by GIMP and must not be modified or
freed. The returned string is in the encoding used for filenames by
GLib, which isn't necessarily UTF-8. (On Windows it always is
UTF-8.)</doc>
      <source-position filename="libgimpbase/gimpenv.h" line="51"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpenv.c"
             line="486">The top directory for GIMP data.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="data_directory_file"
              c:identifier="gimp_data_directory_file"
              version="2.10"
              introspectable="0">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpenv.c"
           line="790">Returns a #GFile in the data directory, or the data directory
itself if @first_element is %NULL.

See also: gimp_data_directory().</doc>
      <source-position filename="libgimpbase/gimpenv.h" line="62"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpenv.c"
             line="804">
         a new @GFile for the path, Free with g_object_unref().</doc>
        <type name="Gio.File" c:type="GFile*"/>
      </return-value>
      <parameters>
        <parameter name="first_element" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpenv.c"
               line="792">the first element of a path to a file in the
                data directory, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpenv.c"
               line="794">a %NULL terminated list of the remaining elements of the path
      to the file.</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_timer_end" c:identifier="gimp_debug_timer_end">
      <doc xml:space="preserve"
           filename="libgimp/gimpdebug_pdb.c"
           line="78">Finishes measuring elapsed time.

This procedure stops the timer started by a previous
gimp_debug_timer_start() call, and prints and returns the elapsed
time.
If there was already an active timer at the time of corresponding
call to gimp_debug_timer_start(), a dummy value is returned.

This is a debug utility procedure. It is subject to change at any
point, and should not be used in production.</doc>
      <source-position filename="libgimp/gimpdebug_pdb.h" line="36"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpdebug_pdb.c"
             line="92">The elapsed time, in seconds.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
    </function>
    <function name="debug_timer_start" c:identifier="gimp_debug_timer_start">
      <doc xml:space="preserve"
           filename="libgimp/gimpdebug_pdb.c"
           line="40">Starts measuring elapsed time.

This procedure starts a timer, measuring the elapsed time since the
call. Each call to this procedure should be matched by a call to
gimp_debug_timer_end(), which returns the elapsed time.
If there is already an active timer, it is not affected by the call,
however, a matching gimp_debug_timer_end() call is still required.

This is a debug utility procedure. It is subject to change at any
point, and should not be used in production.</doc>
      <source-position filename="libgimp/gimpdebug_pdb.h" line="35"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpdebug_pdb.c"
             line="54">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="default_display" c:identifier="gimp_default_display">
      <doc xml:space="preserve"
           filename="libgimp/gimp.c"
           line="821">Returns the default display ID. This corresponds to the display the
running procedure's menu entry was invoked from.

This is a constant value given at plug-in configuration time.</doc>
      <source-position filename="libgimp/gimp.h" line="192"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimp.c"
             line="829">the default display ID
         The object belongs to libgimp and you should not free it.</doc>
        <type name="Display" c:type="GimpDisplay*"/>
      </return-value>
    </function>
    <function name="detach_parasite"
              c:identifier="gimp_detach_parasite"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimp_pdb.c"
           line="146">Removes a global parasite.

This procedure detaches a global parasite from. It has no return
values.</doc>
      <source-position filename="libgimp/gimp_pdb.h" line="38"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimp_pdb.c"
             line="155">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimp_pdb.c"
               line="148">The name of the parasite to detach.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="directory" c:identifier="gimp_directory">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpenv.c"
           line="191">Returns the user-specific GIMP settings directory. If the
environment variable GIMP3_DIRECTORY exists, it is used. If it is
an absolute path, it is used as is.  If it is a relative path, it
is taken to be a subdirectory of the home directory. If it is a
relative path, and no home directory can be determined, it is taken
to be a subdirectory of gimp_data_directory().

The usual case is that no GIMP3_DIRECTORY environment variable
exists, and then we use the GIMPDIR subdirectory of the local
configuration directory:

- UNIX: $XDG_CONFIG_HOME (defaults to $HOME/.config/)

- Windows: CSIDL_APPDATA

- OSX (UNIX exception): the Application Support Directory.

If neither the configuration nor home directory exist,
g_get_user_config_dir() will return {tmp}/{user_name}/.config/ where
the temporary directory {tmp} and the {user_name} are determined
according to platform rules.

In any case, we always return some non-empty string, whether it
corresponds to an existing directory or not.

In config files such as gimprc, the string ${gimp_dir} expands to
this directory.

The returned string is owned by GIMP and must not be modified or
freed. The returned string is in the encoding used for filenames by
GLib, which isn't necessarily UTF-8 (on Windows it is always
UTF-8.)</doc>
      <source-position filename="libgimpbase/gimpenv.h" line="49"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpenv.c"
             line="227">The user-specific GIMP settings directory.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="directory_file"
              c:identifier="gimp_directory_file"
              version="2.10"
              introspectable="0">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpenv.c"
           line="728">Returns a #GFile in the user's GIMP directory, or the GIMP
directory itself if @first_element is %NULL.

See also: gimp_directory().</doc>
      <source-position filename="libgimpbase/gimpenv.h" line="58"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpenv.c"
             line="742">
         a new @GFile for the path, Free with g_object_unref().</doc>
        <type name="Gio.File" c:type="GFile*"/>
      </return-value>
      <parameters>
        <parameter name="first_element" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpenv.c"
               line="730">the first element of a path to a file in the
                user's GIMP directory, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpenv.c"
               line="732">a %NULL terminated list of the remaining elements of the path
      to the file.</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="displays_flush" c:identifier="gimp_displays_flush">
      <doc xml:space="preserve"
           filename="libgimp/gimpdisplay_pdb.c"
           line="234">Flush all internal changes to the user interface

This procedure takes no arguments and returns nothing except a
success status. Its purpose is to flush all pending updates of image
manipulations to the user interface. It should be called whenever
appropriate.</doc>
      <source-position filename="libgimp/gimpdisplay_pdb.h" line="40"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpdisplay_pdb.c"
             line="244">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="displays_reconnect" c:identifier="gimp_displays_reconnect">
      <doc xml:space="preserve"
           filename="libgimp/gimpdisplay_pdb.c"
           line="268">Reconnect displays from one image to another image.

This procedure connects all displays of the old_image to the
new_image. If the old_image has no display or new_image already has
a display the reconnect is not performed and the procedure returns
without success. You should rarely need to use this function.</doc>
      <source-position filename="libgimp/gimpdisplay_pdb.h" line="41"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpdisplay_pdb.c"
             line="280">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="old_image" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdisplay_pdb.c"
               line="270">The old image (must have at least one display).</doc>
          <type name="Image" c:type="GimpImage*"/>
        </parameter>
        <parameter name="new_image" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdisplay_pdb.c"
               line="271">The new image (must not have a display).</doc>
          <type name="Image" c:type="GimpImage*"/>
        </parameter>
      </parameters>
    </function>
    <function name="dodgeburn" c:identifier="gimp_dodgeburn">
      <doc xml:space="preserve"
           filename="libgimp/gimppainttools_pdb.c"
           line="331">Dodgeburn image with varying exposure.

Dodgeburn. More details here later.</doc>
      <source-position filename="libgimp/gimppainttools_pdb.h" line="60"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimppainttools_pdb.c"
             line="344">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="drawable" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="333">The affected drawable.</doc>
          <type name="Drawable" c:type="GimpDrawable*"/>
        </parameter>
        <parameter name="exposure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="334">The exposure of the strokes.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="dodgeburn_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="335">The type either dodge or burn.</doc>
          <type name="DodgeBurnType" c:type="GimpDodgeBurnType"/>
        </parameter>
        <parameter name="dodgeburn_mode" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="336">The mode.</doc>
          <type name="TransferMode" c:type="GimpTransferMode"/>
        </parameter>
        <parameter name="num_strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="337">Number of stroke control points (count each coordinate as 2 points).</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="338">Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y, ..., sn.x, sn.y }.</doc>
          <array length="4" zero-terminated="0" c:type="const gdouble*">
            <type name="gdouble"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="dodgeburn_default" c:identifier="gimp_dodgeburn_default">
      <doc xml:space="preserve"
           filename="libgimp/gimppainttools_pdb.c"
           line="380">Dodgeburn image with varying exposure. This is the same as the
gimp_dodgeburn() function except that the exposure, type and mode
are taken from the tools option dialog. If the dialog has not been
activated then the defaults as used by the dialog will be used.

Dodgeburn. More details here later.</doc>
      <source-position filename="libgimp/gimppainttools_pdb.h" line="66"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimppainttools_pdb.c"
             line="393">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="drawable" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="382">The affected drawable.</doc>
          <type name="Drawable" c:type="GimpDrawable*"/>
        </parameter>
        <parameter name="num_strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="383">Number of stroke control points (count each coordinate as 2 points).</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="384">Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y, ..., sn.x, sn.y }.</doc>
          <array length="1" zero-terminated="0" c:type="const gdouble*">
            <type name="gdouble"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="drawables_close_popup"
              c:identifier="gimp_drawables_close_popup">
      <doc xml:space="preserve"
           filename="libgimp/gimpdrawableselect_pdb.c"
           line="84">Close the drawable selection dialog.

Closes an open drawable selection dialog.</doc>
      <source-position filename="libgimp/gimpdrawableselect_pdb.h" line="40"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawableselect_pdb.c"
             line="92">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="callback" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawableselect_pdb.c"
               line="86">The name of the callback registered for this pop-up.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drawables_popup" c:identifier="gimp_drawables_popup">
      <doc xml:space="preserve"
           filename="libgimp/gimpdrawableselect_pdb.c"
           line="39">Invokes the drawable selection dialog.

Opens a dialog letting a user choose an drawable.</doc>
      <source-position filename="libgimp/gimpdrawableselect_pdb.h" line="35"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawableselect_pdb.c"
             line="51">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="callback" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawableselect_pdb.c"
               line="41">The callback PDB proc to call when user chooses an drawable.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="popup_title" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawableselect_pdb.c"
               line="42">Title of the drawable selection dialog.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="drawable_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawableselect_pdb.c"
               line="43">The name of the GIMP_TYPE_DRAWABLE subtype.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="initial_drawable" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawableselect_pdb.c"
               line="44">The drawable to set as the initial choice.</doc>
          <type name="Drawable" c:type="GimpDrawable*"/>
        </parameter>
        <parameter name="parent_window" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawableselect_pdb.c"
               line="45">An optional parent window handle for the popup to be set transient to.</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drawables_set_popup"
              c:identifier="gimp_drawables_set_popup">
      <doc xml:space="preserve"
           filename="libgimp/gimpdrawableselect_pdb.c"
           line="117">Sets the selected drawable in a drawable selection dialog.

Sets the selected drawable in a drawable selection dialog.</doc>
      <source-position filename="libgimp/gimpdrawableselect_pdb.h" line="41"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpdrawableselect_pdb.c"
             line="126">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="callback" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawableselect_pdb.c"
               line="119">The name of the callback registered for this pop-up.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="drawable" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdrawableselect_pdb.c"
               line="120">The drawable to set as selected.</doc>
          <type name="Drawable" c:type="GimpDrawable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="dynamics_get_list"
              c:identifier="gimp_dynamics_get_list"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpdynamics_pdb.c"
           line="74">Retrieve the list of loaded paint dynamics.

This procedure returns a list of the paint dynamics that are
currently available.</doc>
      <source-position filename="libgimp/gimpdynamics_pdb.h" line="36"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimpdynamics_pdb.c"
             line="83">
         The list of paint dynamics names.
         The returned value must be freed with g_strfreev().</doc>
        <array c:type="gchar**">
          <type name="utf8"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="filter" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpdynamics_pdb.c"
               line="76">An optional regular expression used to filter the list.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="dynamics_refresh"
              c:identifier="gimp_dynamics_refresh"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimpdynamics_pdb.c"
           line="39">Refresh current paint dynamics. This function always succeeds.

This procedure retrieves all paint dynamics currently in the user's
paint dynamics path and updates the paint dynamics dialogs
accordingly.</doc>
      <source-position filename="libgimp/gimpdynamics_pdb.h" line="35"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpdynamics_pdb.c"
             line="48">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="edit_copy" c:identifier="gimp_edit_copy">
      <doc xml:space="preserve"
           filename="libgimp/gimpedit_pdb.c"
           line="85">Copy from the specified drawables.

If there is a selection in the image, then the area specified by the
selection is copied from the specified drawables and placed in an
internal GIMP edit buffer. It can subsequently be retrieved using
the gimp_edit_paste() command. If there is no selection, then the
specified drawables' contents will be stored in the internal GIMP
edit buffer.
This procedure will return %FALSE if the selected area lies
completely outside the bounds of the current drawables and there is
nothing to copy from.
All the drawables must belong to the same image.</doc>
      <source-position filename="libgimp/gimpedit_pdb.h" line="37"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpedit_pdb.c"
             line="103">TRUE if the cut was successful, FALSE if there was nothing to copy from.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="num_drawables" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpedit_pdb.c"
               line="87">The number of drawables to save.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="drawables" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpedit_pdb.c"
               line="88">Drawables to copy from.</doc>
          <array length="0" zero-terminated="0" c:type="const GimpItem**">
            <type name="Item"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="edit_copy_visible"
              c:identifier="gimp_edit_copy_visible"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimp/gimpedit_pdb.c"
           line="132">Copy from the projection.

If there is a selection in the image, then the area specified by the
selection is copied from the projection and placed in an internal
GIMP edit buffer. It can subsequently be retrieved using the
gimp_edit_paste() command. If there is no selection, then the
projection's contents will be stored in the internal GIMP edit
buffer.</doc>
      <source-position filename="libgimp/gimpedit_pdb.h" line="39"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpedit_pdb.c"
             line="145">TRUE if the copy was successful.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="image" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpedit_pdb.c"
               line="134">The image to copy from.</doc>
          <type name="Image" c:type="GimpImage*"/>
        </parameter>
      </parameters>
    </function>
    <function name="edit_cut" c:identifier="gimp_edit_cut">
      <doc xml:space="preserve"
           filename="libgimp/gimpedit_pdb.c"
           line="39">Cut from the specified drawables.

If there is a selection in the image, then the area specified by the
selection is cut from the specified drawables and placed in an
internal GIMP edit buffer. It can subsequently be retrieved using
the gimp_edit_paste() command. If there is no selection and only one
specified drawable, then the specified drawable will be removed and
its contents stored in the internal GIMP edit buffer.
This procedure will return %FALSE if the selected area lies
completely outside the bounds of the current drawables and there is
nothing to cut from.</doc>
      <source-position filename="libgimp/gimpedit_pdb.h" line="35"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpedit_pdb.c"
             line="56">TRUE if the cut was successful, FALSE if there was nothing to copy from.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="num_drawables" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpedit_pdb.c"
               line="41">The number of drawables.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="drawables" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpedit_pdb.c"
               line="42">The drawables to cut from.</doc>
          <array length="0" zero-terminated="0" c:type="const GimpItem**">
            <type name="Item"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="edit_named_copy"
              c:identifier="gimp_edit_named_copy"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimp/gimpedit_pdb.c"
           line="318">Copy into a named buffer.

This procedure works like gimp_edit_copy(), but additionally stores
the copied buffer into a named buffer that will stay available for
later pasting, regardless of any intermediate copy or cut
operations.</doc>
      <source-position filename="libgimp/gimpedit_pdb.h" line="47"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimpedit_pdb.c"
             line="331">
         The real name given to the buffer, or NULL if the copy failed.
         The returned value must be freed with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="num_drawables" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpedit_pdb.c"
               line="320">The number of drawables.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="drawables" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpedit_pdb.c"
               line="321">The drawables to copy from.</doc>
          <array length="0" zero-terminated="0" c:type="const GimpItem**">
            <type name="Item"/>
          </array>
        </parameter>
        <parameter name="buffer_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpedit_pdb.c"
               line="322">The name of the buffer to create.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="edit_named_copy_visible"
              c:identifier="gimp_edit_named_copy_visible"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimp/gimpedit_pdb.c"
           line="366">Copy from the projection into a named buffer.

This procedure works like gimp_edit_copy_visible(), but additionally
stores the copied buffer into a named buffer that will stay
available for later pasting, regardless of any intermediate copy or
cut operations.</doc>
      <source-position filename="libgimp/gimpedit_pdb.h" line="50"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimpedit_pdb.c"
             line="378">
         The real name given to the buffer, or NULL if the copy failed.
         The returned value must be freed with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="image" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpedit_pdb.c"
               line="368">The image to copy from.</doc>
          <type name="Image" c:type="GimpImage*"/>
        </parameter>
        <parameter name="buffer_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpedit_pdb.c"
               line="369">The name of the buffer to create.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="edit_named_cut"
              c:identifier="gimp_edit_named_cut"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimp/gimpedit_pdb.c"
           line="270">Cut into a named buffer.

This procedure works like gimp_edit_cut(), but additionally stores
the cut buffer into a named buffer that will stay available for
later pasting, regardless of any intermediate copy or cut
operations.</doc>
      <source-position filename="libgimp/gimpedit_pdb.h" line="44"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimpedit_pdb.c"
             line="283">
         The real name given to the buffer, or NULL if the cut failed.
         The returned value must be freed with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="num_drawables" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpedit_pdb.c"
               line="272">The number of drawables.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="drawables" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpedit_pdb.c"
               line="273">The drawables to cut from.</doc>
          <array length="0" zero-terminated="0" c:type="const GimpItem**">
            <type name="Item"/>
          </array>
        </parameter>
        <parameter name="buffer_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpedit_pdb.c"
               line="274">The name of the buffer to create.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="edit_named_paste"
              c:identifier="gimp_edit_named_paste"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimp/gimpedit_pdb.c"
           line="410">Paste named buffer to the specified drawable.

This procedure works like gimp_edit_paste() but pastes a named
buffer instead of the global buffer.</doc>
      <source-position filename="libgimp/gimpedit_pdb.h" line="52"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpedit_pdb.c"
             line="421">The new floating selection.</doc>
        <type name="Layer" c:type="GimpLayer*"/>
      </return-value>
      <parameters>
        <parameter name="drawable" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpedit_pdb.c"
               line="412">The drawable to paste to.</doc>
          <type name="Drawable" c:type="GimpDrawable*"/>
        </parameter>
        <parameter name="buffer_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpedit_pdb.c"
               line="413">The name of the buffer to paste.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="paste_into" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpedit_pdb.c"
               line="414">Clear selection, or paste behind it?</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="edit_named_paste_as_new_image"
              c:identifier="gimp_edit_named_paste_as_new_image"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpedit_pdb.c"
           line="453">Paste named buffer to a new image.

This procedure works like gimp_edit_paste_as_new_image() but pastes
a named buffer instead of the global buffer.</doc>
      <source-position filename="libgimp/gimpedit_pdb.h" line="55"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpedit_pdb.c"
             line="462">The new image.</doc>
        <type name="Image" c:type="GimpImage*"/>
      </return-value>
      <parameters>
        <parameter name="buffer_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpedit_pdb.c"
               line="455">The name of the buffer to paste.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="edit_paste" c:identifier="gimp_edit_paste">
      <doc xml:space="preserve"
           filename="libgimp/gimpedit_pdb.c"
           line="173">Paste buffer to the specified drawable.

This procedure pastes a copy of the internal GIMP edit buffer to the
specified drawable. The GIMP edit buffer will be empty unless a call
was previously made to either gimp_edit_cut() or gimp_edit_copy().
The \"paste_into\" option specifies whether to clear the current
image selection, or to paste the buffer \"behind\" the selection.
This allows the selection to act as a mask for the pasted buffer.
Anywhere that the selection mask is non-zero, the pasted buffer will
show through. The pasted data may be a floating selection when
relevant, layers otherwise. If the image has a floating selection at
the time of pasting, the old floating selection will be anchored to
its drawable before the new floating selection is added.
This procedure returns the new layers (floating or not). If the
result is a floating selection, it will already be attached to the
specified drawable, and a subsequent call to floating_sel_attach is
not needed.</doc>
      <source-position filename="libgimp/gimpedit_pdb.h" line="40"/>
      <return-value transfer-ownership="container">
        <doc xml:space="preserve"
             filename="libgimp/gimpedit_pdb.c"
             line="197">
         The list of pasted layers.
         The returned value must be freed with g_free().</doc>
        <array length="2" zero-terminated="0" c:type="GimpLayer**">
          <type name="Layer"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="drawable" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpedit_pdb.c"
               line="175">The drawable to paste to.</doc>
          <type name="Drawable" c:type="GimpDrawable*"/>
        </parameter>
        <parameter name="paste_into" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpedit_pdb.c"
               line="176">Clear selection, or paste behind it?</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="num_layers"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpedit_pdb.c"
               line="177">The newly pasted layers.</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="edit_paste_as_new_image"
              c:identifier="gimp_edit_paste_as_new_image"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimpedit_pdb.c"
           line="233">Paste buffer to a new image.

This procedure pastes a copy of the internal GIMP edit buffer to a
new image. The GIMP edit buffer will be empty unless a call was
previously made to either gimp_edit_cut() or gimp_edit_copy(). This
procedure returns the new image or -1 if the edit buffer was empty.</doc>
      <source-position filename="libgimp/gimpedit_pdb.h" line="43"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpedit_pdb.c"
             line="243">The new image.</doc>
        <type name="Image" c:type="GimpImage*"/>
      </return-value>
    </function>
    <function name="enum_get_desc"
              c:identifier="gimp_enum_get_desc"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimpbase/gimputils.c"
           line="705">Retrieves #GimpEnumDesc associated with the given value, or %NULL.</doc>
      <source-position filename="libgimpbase/gimputils.h" line="49"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimputils.c"
             line="712">the value's #GimpEnumDesc.</doc>
        <type name="EnumDesc" c:type="const GimpEnumDesc*"/>
      </return-value>
      <parameters>
        <parameter name="enum_class" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="707">a #GEnumClass</doc>
          <type name="GObject.EnumClass" c:type="GEnumClass*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="708">a value from @enum_class</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="enum_get_value"
              c:identifier="gimp_enum_get_value"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimpbase/gimputils.c"
           line="741">Checks if @value is valid for the enum registered as @enum_type.
If the value exists in that enum, its name, nick and its translated
description and help are returned (if @value_name, @value_nick,
@value_desc and @value_help are not %NULL).</doc>
      <source-position filename="libgimpbase/gimputils.h" line="51"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimputils.c"
             line="757">%TRUE if @value is valid for the @enum_type, %FALSE otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="enum_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="743">the #GType of a registered enum</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="744">an integer value</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="value_name"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="745">return location for the value's name, or %NULL</doc>
          <type name="utf8" c:type="const gchar**"/>
        </parameter>
        <parameter name="value_nick"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="746">return location for the value's nick, or %NULL</doc>
          <type name="utf8" c:type="const gchar**"/>
        </parameter>
        <parameter name="value_desc"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="747">return location for the value's translated
                               description, or %NULL</doc>
          <type name="utf8" c:type="const gchar**"/>
        </parameter>
        <parameter name="value_help"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="749">return location for the value's translated
                               help, or %NULL</doc>
          <type name="utf8" c:type="const gchar**"/>
        </parameter>
      </parameters>
    </function>
    <function name="enum_get_value_descriptions"
              c:identifier="gimp_enum_get_value_descriptions"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbasetypes.c"
           line="148">Retrieves the array of human readable and translatable descriptions
and help texts for enum values.</doc>
      <source-position filename="libgimpbase/gimpbasetypes.h" line="101"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbasetypes.c"
             line="155">a %NULL terminated constant array of #GimpEnumDesc</doc>
        <type name="EnumDesc" c:type="const GimpEnumDesc*"/>
      </return-value>
      <parameters>
        <parameter name="enum_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpbasetypes.c"
               line="150">a #GType</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="enum_set_value_descriptions"
              c:identifier="gimp_enum_set_value_descriptions"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbasetypes.c"
           line="126">Sets the array of human readable and translatable descriptions
and help texts for enum values.</doc>
      <source-position filename="libgimpbase/gimpbasetypes.h" line="99"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="enum_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpbasetypes.c"
               line="128">a #GType</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="descriptions" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpbasetypes.c"
               line="129">a %NULL terminated constant static array of #GimpEnumDesc</doc>
          <type name="EnumDesc" c:type="const GimpEnumDesc*"/>
        </parameter>
      </parameters>
    </function>
    <function name="enum_value_get_abbrev"
              c:identifier="gimp_enum_value_get_abbrev"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimpbase/gimputils.c"
           line="898">Retrieves the translated abbreviation for a given @enum_value.</doc>
      <source-position filename="libgimpbase/gimputils.h" line="61"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimputils.c"
             line="905">the translated abbreviation of the enum value</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="enum_class" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="900">a #GEnumClass</doc>
          <type name="GObject.EnumClass" c:type="GEnumClass*"/>
        </parameter>
        <parameter name="enum_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="901">a #GEnumValue from @enum_class</doc>
          <type name="GObject.EnumValue" c:type="const GEnumValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="enum_value_get_desc"
              c:identifier="gimp_enum_value_get_desc"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimpbase/gimputils.c"
           line="832">Retrieves the translated description for a given @enum_value.</doc>
      <source-position filename="libgimpbase/gimputils.h" line="57"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimputils.c"
             line="839">the translated description of the enum value</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="enum_class" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="834">a #GEnumClass</doc>
          <type name="GObject.EnumClass" c:type="GEnumClass*"/>
        </parameter>
        <parameter name="enum_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="835">a #GEnumValue from @enum_class</doc>
          <type name="GObject.EnumValue" c:type="const GEnumValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="enum_value_get_help"
              c:identifier="gimp_enum_value_get_help"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimpbase/gimputils.c"
           line="871">Retrieves the translated help for a given @enum_value.</doc>
      <source-position filename="libgimpbase/gimputils.h" line="59"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimputils.c"
             line="878">the translated help of the enum value</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="enum_class" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="873">a #GEnumClass</doc>
          <type name="GObject.EnumClass" c:type="GEnumClass*"/>
        </parameter>
        <parameter name="enum_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="874">a #GEnumValue from @enum_class</doc>
          <type name="GObject.EnumValue" c:type="const GEnumValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="enums_get_type_names"
              c:identifier="gimp_enums_get_type_names"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimp/gimpenums.c"
           line="521">This function gives access to the list of enums registered by libgimp.
The returned array is static and must not be modified.</doc>
      <source-position filename="libgimp/gimpenums.h" line="277"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpenums.c"
             line="528">an array with type names</doc>
        <array length="0" zero-terminated="0" c:type="const gchar**">
          <type name="utf8"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="n_type_names"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpenums.c"
               line="523">return location for the number of names</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="enums_init" c:identifier="gimp_enums_init" version="2.4">
      <doc xml:space="preserve"
           filename="libgimp/gimpenums.c"
           line="476">This function makes sure all the enum types are registered
with the #GType system. This is intended for use by language
bindings that need the symbols early, before gimp_main is run.
It's not necessary for plug-ins to call this directly, because
the normal plug-in initialization code will handle it implicitly.</doc>
      <source-position filename="libgimp/gimpenums.h" line="275"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="env_init" c:identifier="gimp_env_init" version="2.4">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpenv.c"
           line="97">You don't need to care about this function. It is being called for
you automatically (by means of the MAIN() macro that every plug-in
runs). Calling it again will cause a fatal error.</doc>
      <source-position filename="libgimpbase/gimpenv.h" line="82"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="plug_in" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpenv.c"
               line="99">must be %TRUE if this function is called from a plug-in</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="eraser" c:identifier="gimp_eraser">
      <doc xml:space="preserve"
           filename="libgimp/gimppainttools_pdb.c"
           line="423">Erase using the current brush.

This tool erases using the current brush mask. If the specified
drawable contains an alpha channel, then the erased pixels will
become transparent. Otherwise, the eraser tool replaces the contents
of the drawable with the background color. Like paintbrush, this
tool linearly interpolates between the specified stroke coordinates.</doc>
      <source-position filename="libgimp/gimppainttools_pdb.h" line="69"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimppainttools_pdb.c"
             line="439">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="drawable" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="425">The affected drawable.</doc>
          <type name="Drawable" c:type="GimpDrawable*"/>
        </parameter>
        <parameter name="num_strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="426">Number of stroke control points (count each coordinate as 2 points).</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="427">Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y, ..., sn.x, sn.y }.</doc>
          <array length="1" zero-terminated="0" c:type="const gdouble*">
            <type name="gdouble"/>
          </array>
        </parameter>
        <parameter name="hardness" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="428">How to apply the brush.</doc>
          <type name="BrushApplicationMode" c:type="GimpBrushApplicationMode"/>
        </parameter>
        <parameter name="method" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="429">The paint method to use.</doc>
          <type name="PaintApplicationMode" c:type="GimpPaintApplicationMode"/>
        </parameter>
      </parameters>
    </function>
    <function name="eraser_default" c:identifier="gimp_eraser_default">
      <doc xml:space="preserve"
           filename="libgimp/gimppainttools_pdb.c"
           line="473">Erase using the current brush.

This tool erases using the current brush mask. This function
performs exactly the same as the gimp_eraser() function except that
the tools arguments are obtained from the eraser option dialog. It
this dialog has not been activated then the dialogs default values
will be used.</doc>
      <source-position filename="libgimp/gimppainttools_pdb.h" line="74"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimppainttools_pdb.c"
             line="487">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="drawable" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="475">The affected drawable.</doc>
          <type name="Drawable" c:type="GimpDrawable*"/>
        </parameter>
        <parameter name="num_strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="476">Number of stroke control points (count each coordinate as 2 points).</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="477">Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y, ..., sn.x, sn.y }.</doc>
          <array length="1" zero-terminated="0" c:type="const gdouble*">
            <type name="gdouble"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="escape_uline"
              c:identifier="gimp_escape_uline"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimpbase/gimputils.c"
           line="578">This function returns a copy of @str with all underline converted
to two adjacent underlines. This comes in handy when needing to display
strings with underlines (like filenames) in a place that would convert
them to mnemonics.</doc>
      <source-position filename="libgimpbase/gimputils.h" line="44"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpbase/gimputils.c"
             line="587">A (possibly escaped) copy of @str which should be
freed using g_free() when it is not needed any longer.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="str"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="580">Underline infested string (or %NULL)</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="export_color_profile"
              c:identifier="gimp_export_color_profile"
              version="2.10.4">
      <doc xml:space="preserve"
           filename="libgimp/gimp.c"
           line="635">Returns whether file plug-ins should default to exporting the
image's color profile.</doc>
      <source-position filename="libgimp/gimp.h" line="181"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimp.c"
             line="641">TRUE if preferences are set to export the color profile.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="export_comment"
              c:identifier="gimp_export_comment"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimp.c"
           line="651">Returns whether file plug-ins should default to exporting the
image's comment.</doc>
      <source-position filename="libgimp/gimp.h" line="182"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimp.c"
             line="657">TRUE if preferences are set to export the comment.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="export_exif"
              c:identifier="gimp_export_exif"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimp.c"
           line="667">Returns whether file plug-ins should default to exporting Exif
metadata, according preferences (original settings is %FALSE since
metadata can contain sensitive information).</doc>
      <source-position filename="libgimp/gimp.h" line="183"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimp.c"
             line="674">TRUE if preferences are set to export Exif.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="export_iptc"
              c:identifier="gimp_export_iptc"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimp.c"
           line="701">Returns whether file plug-ins should default to exporting IPTC
metadata, according preferences (original settings is %FALSE since
metadata can contain sensitive information).</doc>
      <source-position filename="libgimp/gimp.h" line="185"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimp.c"
             line="708">TRUE if preferences are set to export IPTC.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="export_thumbnail"
              c:identifier="gimp_export_thumbnail"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimp.c"
           line="718">Returns whether file plug-ins should default to exporting the
image's comment.</doc>
      <source-position filename="libgimp/gimp.h" line="186"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimp.c"
             line="724">TRUE if preferences are set to export the thumbnail.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="export_xmp" c:identifier="gimp_export_xmp" version="2.10">
      <doc xml:space="preserve"
           filename="libgimp/gimp.c"
           line="684">Returns whether file plug-ins should default to exporting XMP
metadata, according preferences (original settings is %FALSE since
metadata can contain sensitive information).</doc>
      <source-position filename="libgimp/gimp.h" line="184"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimp.c"
             line="691">TRUE if preferences are set to export XMP.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="file_get_config_path"
              c:identifier="gimp_file_get_config_path"
              version="2.10"
              throws="1">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-path.c"
           line="478">Unexpands @file's path using gimp_config_path_unexpand() and
returns the unexpanded path.

The inverse operation of gimp_file_new_for_config_path().</doc>
      <source-position filename="libgimpconfig/gimpconfig-path.h" line="98"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-path.c"
             line="488">a newly allocated NUL-terminated UTF-8 string, or %NULL if
              unexpanding failed.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-path.c"
               line="480">a #GFile</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_get_utf8_name"
              c:identifier="gimp_file_get_utf8_name"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimpbase/gimputils.c"
           line="278">This function works like gimp_filename_to_utf8() and returns
a UTF-8 encoded string that does not need to be freed.

It converts a #GFile's path or uri to UTF-8 temporarily.  The
return value is a pointer to a string that is guaranteed to be
valid only during the current iteration of the main loop or until
the next call to gimp_file_get_utf8_name().

The only purpose of this function is to provide an easy way to pass
a #GFile's name to a function that expects an UTF-8 encoded string.

See g_file_get_parse_name().</doc>
      <source-position filename="libgimpbase/gimputils.h" line="37"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimputils.c"
             line="297">A temporarily valid UTF-8 representation of @file's name.
              This string must not be changed or freed.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="280">a #GFile</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_has_extension"
              c:identifier="gimp_file_has_extension"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimpbase/gimputils.c"
           line="315">This function checks if @file's URI ends with @extension. It behaves
like g_str_has_suffix() on g_file_get_uri(), except that the string
comparison is done case-insensitively using g_ascii_strcasecmp().</doc>
      <source-position filename="libgimpbase/gimputils.h" line="38"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimputils.c"
             line="326">%TRUE if @file's URI ends with @extension,
              %FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="317">a #GFile</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="extension" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="318">an ASCII extension</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_load" c:identifier="gimp_file_load">
      <doc xml:space="preserve"
           filename="libgimp/gimpfile_pdb.c"
           line="39">Loads an image file by invoking the right load handler.

This procedure invokes the correct file load handler using magic if
possible, and falling back on the file's extension and/or prefix if
not.</doc>
      <source-position filename="libgimp/gimpfile_pdb.h" line="35"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpfile_pdb.c"
             line="50">The output image.</doc>
        <type name="Image" c:type="GimpImage*"/>
      </return-value>
      <parameters>
        <parameter name="run_mode" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfile_pdb.c"
               line="41">The run mode.</doc>
          <type name="RunMode" c:type="GimpRunMode"/>
        </parameter>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfile_pdb.c"
               line="42">The file to load.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_load_layer"
              c:identifier="gimp_file_load_layer"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimp/gimpfile_pdb.c"
           line="78">Loads an image file as a layer for an existing image.

This procedure behaves like the file-load procedure but opens the
specified image as a layer for an existing image. The returned layer
needs to be added to the existing image with
gimp_image_insert_layer().</doc>
      <source-position filename="libgimp/gimpfile_pdb.h" line="37"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpfile_pdb.c"
             line="91">The layer created when loading the image file.</doc>
        <type name="Layer" c:type="GimpLayer*"/>
      </return-value>
      <parameters>
        <parameter name="run_mode" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfile_pdb.c"
               line="80">The run mode.</doc>
          <type name="RunMode" c:type="GimpRunMode"/>
        </parameter>
        <parameter name="image" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfile_pdb.c"
               line="81">Destination image.</doc>
          <type name="Image" c:type="GimpImage*"/>
        </parameter>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfile_pdb.c"
               line="82">The file to load.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_load_layers"
              c:identifier="gimp_file_load_layers"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimp/gimpfile_pdb.c"
           line="123">Loads an image file as layers for an existing image.

This procedure behaves like the file-load procedure but opens the
specified image as layers for an existing image. The returned layers
needs to be added to the existing image with
gimp_image_insert_layer().</doc>
      <source-position filename="libgimp/gimpfile_pdb.h" line="40"/>
      <return-value transfer-ownership="container">
        <doc xml:space="preserve"
             filename="libgimp/gimpfile_pdb.c"
             line="137">
         The list of loaded layers.
         The returned value must be freed with g_free().</doc>
        <array length="3" zero-terminated="0" c:type="GimpLayer**">
          <type name="Layer"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="run_mode" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfile_pdb.c"
               line="125">The run mode.</doc>
          <type name="RunMode" c:type="GimpRunMode"/>
        </parameter>
        <parameter name="image" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfile_pdb.c"
               line="126">Destination image.</doc>
          <type name="Image" c:type="GimpImage*"/>
        </parameter>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfile_pdb.c"
               line="127">The file to load.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="num_layers"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpfile_pdb.c"
               line="128">The number of loaded layers.</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_new_for_config_path"
              c:identifier="gimp_file_new_for_config_path"
              version="2.10"
              throws="1">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-path.c"
           line="442">Expands @path using gimp_config_path_expand() and returns a #GFile
for the expanded path.

To reverse the expansion, use gimp_file_get_config_path().</doc>
      <source-position filename="libgimpconfig/gimpconfig-path.h" line="96"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-path.c"
             line="452">a newly allocated #GFile,
         or %NULL if the expansion failed.</doc>
        <type name="Gio.File" c:type="GFile*"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-path.c"
               line="444">a NUL-terminated string in UTF-8 encoding</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_save" c:identifier="gimp_file_save">
      <doc xml:space="preserve"
           filename="libgimp/gimpfile_pdb.c"
           line="177">Saves a file by extension.

This procedure invokes the correct file save handler according to
the file's extension and/or prefix.
The @options argument is currently unused and should be set to %NULL
right now.</doc>
      <source-position filename="libgimp/gimpfile_pdb.h" line="44"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpfile_pdb.c"
             line="191">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="run_mode" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfile_pdb.c"
               line="179">The run mode.</doc>
          <type name="RunMode" c:type="GimpRunMode"/>
        </parameter>
        <parameter name="image" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfile_pdb.c"
               line="180">Input image.</doc>
          <type name="Image" c:type="GimpImage*"/>
        </parameter>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfile_pdb.c"
               line="181">The file to save the image in.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="options"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimp/gimpfile_pdb.c"
               line="182">Export option settings.</doc>
          <type name="ExportOptions" c:type="GimpExportOptions*"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_save_thumbnail"
              c:identifier="gimp_file_save_thumbnail">
      <doc xml:space="preserve"
           filename="libgimp/gimpfile_pdb.c"
           line="222">Saves a thumbnail for the given image

This procedure saves a thumbnail for the given image according to
the Free Desktop Thumbnail Managing Standard. The thumbnail is saved
so that it belongs to the given file. This means you have to save
the image under this name first, otherwise this procedure will fail.
This procedure may become useful if you want to explicitly save a
thumbnail with a file.</doc>
      <source-position filename="libgimp/gimpfile_pdb.h" line="48"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpfile_pdb.c"
             line="236">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="image" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfile_pdb.c"
               line="224">The image.</doc>
          <type name="Image" c:type="GimpImage*"/>
        </parameter>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfile_pdb.c"
               line="225">The file the thumbnail belongs to.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_show_in_file_manager"
              c:identifier="gimp_file_show_in_file_manager"
              version="2.10"
              throws="1">
      <doc xml:space="preserve"
           filename="libgimpbase/gimputils.c"
           line="357">Shows @file in the system file manager.</doc>
      <source-position filename="libgimpbase/gimputils.h" line="40"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimputils.c"
             line="366">%TRUE on success, %FALSE otherwise. On %FALSE, @error
              is set.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="359">a #GFile</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
      </parameters>
    </function>
    <function name="filename_to_utf8" c:identifier="gimp_filename_to_utf8">
      <doc xml:space="preserve"
           filename="libgimpbase/gimputils.c"
           line="232">Convert a filename in the filesystem's encoding to UTF-8
temporarily.  The return value is a pointer to a string that is
guaranteed to be valid only during the current iteration of the
main loop or until the next call to gimp_filename_to_utf8().

The only purpose of this function is to provide an easy way to pass
a filename in the filesystem encoding to a function that expects an
UTF-8 encoded filename.</doc>
      <source-position filename="libgimpbase/gimputils.h" line="35"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimputils.c"
             line="245">A temporarily valid UTF-8 representation of @filename.
              This string must not be changed or freed.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="234">The filename to be converted to UTF-8.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="flags_get_first_desc"
              c:identifier="gimp_flags_get_first_desc"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimpbase/gimputils.c"
           line="930">Retrieves the first #GimpFlagsDesc that matches the given value, or %NULL.</doc>
      <source-position filename="libgimpbase/gimputils.h" line="64"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="libgimpbase/gimputils.c"
             line="937">the value's #GimpFlagsDesc.</doc>
        <type name="FlagsDesc" c:type="const GimpFlagsDesc*"/>
      </return-value>
      <parameters>
        <parameter name="flags_class" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="932">a #GFlagsClass</doc>
          <type name="GObject.FlagsClass" c:type="GFlagsClass*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="933">a value from @flags_class</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="flags_get_first_value"
              c:identifier="gimp_flags_get_first_value"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimpbase/gimputils.c"
           line="966">Checks if @value is valid for the flags registered as @flags_type.
If the value exists in that flags, its name, nick and its
translated description and help are returned (if @value_name,
@value_nick, @value_desc and @value_help are not %NULL).</doc>
      <source-position filename="libgimpbase/gimputils.h" line="66"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimputils.c"
             line="982">%TRUE if @value is valid for the @flags_type, %FALSE otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="flags_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="968">the #GType of registered flags</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="969">an integer value</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="value_name"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="970">return location for the value's name, or %NULL</doc>
          <type name="utf8" c:type="const gchar**"/>
        </parameter>
        <parameter name="value_nick"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="971">return location for the value's nick, or %NULL</doc>
          <type name="utf8" c:type="const gchar**"/>
        </parameter>
        <parameter name="value_desc"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="972">return location for the value's translated
                               description, or %NULL</doc>
          <type name="utf8" c:type="const gchar**"/>
        </parameter>
        <parameter name="value_help"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="974">return location for the value's translated
                               help, or %NULL</doc>
          <type name="utf8" c:type="const gchar**"/>
        </parameter>
      </parameters>
    </function>
    <function name="flags_get_value_descriptions"
              c:identifier="gimp_flags_get_value_descriptions"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbasetypes.c"
           line="190">Retrieves the array of human readable and translatable descriptions
and help texts for flags values.</doc>
      <source-position filename="libgimpbase/gimpbasetypes.h" line="105"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbasetypes.c"
             line="197">a %NULL terminated constant array of #GimpFlagsDesc</doc>
        <type name="FlagsDesc" c:type="const GimpFlagsDesc*"/>
      </return-value>
      <parameters>
        <parameter name="flags_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpbasetypes.c"
               line="192">a #GType</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="flags_set_value_descriptions"
              c:identifier="gimp_flags_set_value_descriptions"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbasetypes.c"
           line="168">Sets the array of human readable and translatable descriptions
and help texts for flags values.</doc>
      <source-position filename="libgimpbase/gimpbasetypes.h" line="103"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="flags_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpbasetypes.c"
               line="170">a #GType</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="descriptions" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpbasetypes.c"
               line="171">a %NULL terminated constant static array of #GimpFlagsDesc</doc>
          <type name="FlagsDesc" c:type="const GimpFlagsDesc*"/>
        </parameter>
      </parameters>
    </function>
    <function name="flags_value_get_abbrev"
              c:identifier="gimp_flags_value_get_abbrev"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimpbase/gimputils.c"
           line="1101">Retrieves the translated abbreviation for a given @flags_value.</doc>
      <source-position filename="libgimpbase/gimputils.h" line="76"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimputils.c"
             line="1108">the translated abbreviation of the flags value</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="flags_class" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="1103">a #GFlagsClass</doc>
          <type name="GObject.FlagsClass" c:type="GFlagsClass*"/>
        </parameter>
        <parameter name="flags_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="1104">a #GFlagsValue from @flags_class</doc>
          <type name="GObject.FlagsValue" c:type="const GFlagsValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="flags_value_get_desc"
              c:identifier="gimp_flags_value_get_desc"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimpbase/gimputils.c"
           line="1035">Retrieves the translated description for a given @flags_value.</doc>
      <source-position filename="libgimpbase/gimputils.h" line="72"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimputils.c"
             line="1042">the translated description of the flags value</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="flags_class" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="1037">a #GFlagsClass</doc>
          <type name="GObject.FlagsClass" c:type="GFlagsClass*"/>
        </parameter>
        <parameter name="flags_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="1038">a #GFlagsValue from @flags_class</doc>
          <type name="GObject.FlagsValue" c:type="const GFlagsValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="flags_value_get_help"
              c:identifier="gimp_flags_value_get_help"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimpbase/gimputils.c"
           line="1074">Retrieves the translated help for a given @flags_value.</doc>
      <source-position filename="libgimpbase/gimputils.h" line="74"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimputils.c"
             line="1081">the translated help of the flags value</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="flags_class" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="1076">a #GFlagsClass</doc>
          <type name="GObject.FlagsClass" c:type="GFlagsClass*"/>
        </parameter>
        <parameter name="flags_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="1077">a #GFlagsValue from @flags_class</doc>
          <type name="GObject.FlagsValue" c:type="const GFlagsValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="floating_sel_anchor"
              c:identifier="gimp_floating_sel_anchor">
      <doc xml:space="preserve"
           filename="libgimp/gimpfloatingsel_pdb.c"
           line="74">Anchor the specified floating selection to its associated drawable.

This procedure anchors the floating selection to its associated
drawable. This is similar to merging with a merge type of
ClipToBottomLayer. The floating selection layer is no longer valid
after this operation.</doc>
      <source-position filename="libgimp/gimpfloatingsel_pdb.h" line="36"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpfloatingsel_pdb.c"
             line="85">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="floating_sel" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfloatingsel_pdb.c"
               line="76">The floating selection.</doc>
          <type name="Layer" c:type="GimpLayer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="floating_sel_attach"
              c:identifier="gimp_floating_sel_attach">
      <doc xml:space="preserve"
           filename="libgimp/gimpfloatingsel_pdb.c"
           line="150">Attach the specified layer as floating to the specified drawable.

This procedure attaches the layer as floating selection to the
drawable.</doc>
      <source-position filename="libgimp/gimpfloatingsel_pdb.h" line="38"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpfloatingsel_pdb.c"
             line="160">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="layer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfloatingsel_pdb.c"
               line="152">The layer (is attached as floating selection).</doc>
          <type name="Layer" c:type="GimpLayer*"/>
        </parameter>
        <parameter name="drawable" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfloatingsel_pdb.c"
               line="153">The drawable (where to attach the floating selection).</doc>
          <type name="Drawable" c:type="GimpDrawable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="floating_sel_remove"
              c:identifier="gimp_floating_sel_remove">
      <doc xml:space="preserve"
           filename="libgimp/gimpfloatingsel_pdb.c"
           line="39">Remove the specified floating selection from its associated
drawable.

This procedure removes the floating selection completely, without
any side effects. The associated drawable is then set to active.</doc>
      <source-position filename="libgimp/gimpfloatingsel_pdb.h" line="35"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpfloatingsel_pdb.c"
             line="49">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="floating_sel" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfloatingsel_pdb.c"
               line="41">The floating selection.</doc>
          <type name="Layer" c:type="GimpLayer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="floating_sel_to_layer"
              c:identifier="gimp_floating_sel_to_layer">
      <doc xml:space="preserve"
           filename="libgimp/gimpfloatingsel_pdb.c"
           line="110">Transforms the specified floating selection into a layer.

This procedure transforms the specified floating selection into a
layer with the same offsets and extents. The composited image will
look precisely the same, but the floating selection layer will no
longer be clipped to the extents of the drawable it was attached to.
The floating selection will become the active layer. This procedure
will not work if the floating selection has a different base type
from the underlying image. This might be the case if the floating
selection is above an auxiliary channel or a layer mask.</doc>
      <source-position filename="libgimp/gimpfloatingsel_pdb.h" line="37"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpfloatingsel_pdb.c"
             line="125">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="floating_sel" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfloatingsel_pdb.c"
               line="112">The floating selection.</doc>
          <type name="Layer" c:type="GimpLayer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="fonts_close_popup" c:identifier="gimp_fonts_close_popup">
      <doc xml:space="preserve"
           filename="libgimp/gimpfontselect_pdb.c"
           line="90">Close the font selection dialog.

Closes an open font selection dialog.</doc>
      <source-position filename="libgimp/gimpfontselect_pdb.h" line="39"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpfontselect_pdb.c"
             line="98">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="font_callback" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfontselect_pdb.c"
               line="92">The name of the callback registered in the PDB for this dialog.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="fonts_get_by_name"
              c:identifier="gimp_fonts_get_by_name"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimpfont_pdb.c"
           line="116">Returns the fonts with the given name.

Returns the fonts with the given name. There may be more than one.</doc>
      <source-position filename="libgimp/gimpfont_pdb.h" line="37"/>
      <return-value transfer-ownership="container">
        <doc xml:space="preserve"
             filename="libgimp/gimpfont_pdb.c"
             line="125">
         The fonts with the given name.
         The returned value must be freed with g_free().</doc>
        <array length="1" zero-terminated="0" c:type="GimpFont**">
          <type name="Font"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfont_pdb.c"
               line="118">The name of the font.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="num_fonts"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpfont_pdb.c"
               line="119">The number of fonts with the given name.</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="fonts_get_list" c:identifier="gimp_fonts_get_list">
      <doc xml:space="preserve"
           filename="libgimp/gimpfonts_pdb.c"
           line="116">Retrieve the list of loaded fonts.

This procedure returns a list of the fonts that are currently
available.</doc>
      <source-position filename="libgimp/gimpfonts_pdb.h" line="39"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimpfonts_pdb.c"
             line="125">The list of font names.
         The returned value must be freed with g_strfreev().</doc>
        <array c:type="gchar**">
          <type name="utf8"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="filter" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfonts_pdb.c"
               line="118">An optional regular expression used to filter the list.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="fonts_popup" c:identifier="gimp_fonts_popup">
      <doc xml:space="preserve"
           filename="libgimp/gimpfontselect_pdb.c"
           line="48">Invokes the Gimp font selection dialog.

Opens a dialog letting a user choose a font.</doc>
      <source-position filename="libgimp/gimpfontselect_pdb.h" line="35"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpfontselect_pdb.c"
             line="59">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="font_callback" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfontselect_pdb.c"
               line="50">The callback PDB proc to call when user chooses a font.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="popup_title" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfontselect_pdb.c"
               line="51">Title of the font selection dialog.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="initial_font" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfontselect_pdb.c"
               line="52">The name of the initial font choice.</doc>
          <type name="Font" c:type="GimpFont*"/>
        </parameter>
        <parameter name="parent_window" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfontselect_pdb.c"
               line="53">An optional parent window handle for the popup to be set transient to.</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </parameter>
      </parameters>
    </function>
    <function name="fonts_refresh" c:identifier="gimp_fonts_refresh">
      <doc xml:space="preserve"
           filename="libgimp/gimpfonts_pdb.c"
           line="39">Refresh current fonts. This function always succeeds.

This procedure retrieves all fonts currently in the user's font path
and updates the font dialogs accordingly. Depending on the amount of
fonts on the system, this can take considerable time.</doc>
      <source-position filename="libgimp/gimpfonts_pdb.h" line="35"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpfonts_pdb.c"
             line="48">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="fonts_set_popup" c:identifier="gimp_fonts_set_popup">
      <doc xml:space="preserve"
           filename="libgimp/gimpfontselect_pdb.c"
           line="123">Sets the current font in a font selection dialog.

Sets the current font in a font selection dialog.</doc>
      <source-position filename="libgimp/gimpfontselect_pdb.h" line="40"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpfontselect_pdb.c"
             line="132">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="font_callback" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfontselect_pdb.c"
               line="125">The name of the callback registered in the PDB for the dialog.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="font" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpfontselect_pdb.c"
               line="126">The font to set as selected.</doc>
          <type name="Font" c:type="GimpFont*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_color_configuration"
              c:identifier="gimp_get_color_configuration"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimp/gimpgimprc.c"
           line="26">Retrieve a copy of the current color management configuration.</doc>
      <source-position filename="libgimp/gimpgimprc.h" line="33"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimpgimprc.c"
             line="31">A copy of the core's #GimpColorConfig. You
         should unref this copy if you don't need it any longer.</doc>
        <type name="ColorConfig" c:type="GimpColorConfig*"/>
      </return-value>
    </function>
    <function name="get_default_comment"
              c:identifier="gimp_get_default_comment">
      <doc xml:space="preserve"
           filename="libgimp/gimpgimprc_pdb.c"
           line="122">Get the default image comment as specified in the Preferences.

Returns a copy of the default image comment.</doc>
      <source-position filename="libgimp/gimpgimprc_pdb.h" line="38"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimpgimprc_pdb.c"
             line="129">Default image comment.
         The returned value must be freed with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="get_default_unit"
              c:identifier="gimp_get_default_unit"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimp/gimpgimprc_pdb.c"
           line="155">Get the default unit (taken from the user's locale).

Returns the default unit.</doc>
      <source-position filename="libgimp/gimpgimprc_pdb.h" line="39"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpgimprc_pdb.c"
             line="162">Default unit.</doc>
        <type name="Unit" c:type="GimpUnit*"/>
      </return-value>
    </function>
    <function name="get_images" c:identifier="gimp_get_images">
      <doc xml:space="preserve"
           filename="libgimp/gimpimage_pdb.c"
           line="77">Returns the list of images currently open.

This procedure returns the list of images currently open in GIMP.</doc>
      <source-position filename="libgimp/gimpimage_pdb.h" line="36"/>
      <return-value transfer-ownership="container">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage_pdb.c"
             line="85">
         The list of images currently open.
         The returned value must be freed with g_free().</doc>
        <array length="0" zero-terminated="0" c:type="GimpImage**">
          <type name="Image"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="num_images"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpimage_pdb.c"
               line="79">The number of images currently open.</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_module_load_inhibit"
              c:identifier="gimp_get_module_load_inhibit">
      <doc xml:space="preserve"
           filename="libgimp/gimpgimprc_pdb.c"
           line="271">Get the list of modules which should not be loaded.

Returns a copy of the list of modules which should not be loaded.</doc>
      <source-position filename="libgimp/gimpgimprc_pdb.h" line="43"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimpgimprc_pdb.c"
             line="278">The list of modules.
         The returned value must be freed with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="get_monitor_resolution"
              c:identifier="gimp_get_monitor_resolution">
      <doc xml:space="preserve"
           filename="libgimp/gimpgimprc_pdb.c"
           line="189">Get the monitor resolution as specified in the Preferences.

Returns the resolution of the monitor in pixels/inch. This value is
taken from the Preferences (or the windowing system if this is set
in the Preferences) and there's no guarantee for the value to be
reasonable.</doc>
      <source-position filename="libgimp/gimpgimprc_pdb.h" line="40"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpgimprc_pdb.c"
             line="201">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="xres"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpgimprc_pdb.c"
               line="191">X resolution.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="yres"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimpgimprc_pdb.c"
               line="192">Y resolution.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_num_processors"
              c:identifier="gimp_get_num_processors"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimp.c"
           line="734">Returns the number of threads set explicitly by the user in the
preferences. This information can be used by plug-ins wishing to
follow user settings for multi-threaded implementations.</doc>
      <source-position filename="libgimp/gimp.h" line="187"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimp.c"
             line="741">the preferred number of threads to use.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
    </function>
    <function name="get_parasite"
              c:identifier="gimp_get_parasite"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimp_pdb.c"
           line="182">Look up a global parasite.

Finds and returns the global parasite that was previously attached.</doc>
      <source-position filename="libgimp/gimp_pdb.h" line="39"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimp_pdb.c"
             line="190">The found parasite.</doc>
        <type name="Parasite" c:type="GimpParasite*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimp_pdb.c"
               line="184">The name of the parasite to find.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_parasite_list"
              c:identifier="gimp_get_parasite_list"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimp/gimp_pdb.c"
           line="218">List all parasites.

Returns a list of all currently attached global parasites.</doc>
      <source-position filename="libgimp/gimp_pdb.h" line="40"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimp_pdb.c"
             line="225">
         The names of currently attached parasites.
         The returned value must be freed with g_strfreev().</doc>
        <array c:type="gchar**">
          <type name="utf8"/>
        </array>
      </return-value>
    </function>
    <function name="get_pdb" c:identifier="gimp_get_pdb" version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimp.c"
           line="549">This function returns the plug-in's #GimpPDB instance, which is a
singleton that can exist exactly once per running plug-in.</doc>
      <source-position filename="libgimp/gimp.h" line="169"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="libgimp/gimp.c"
             line="555">The plug-in's #GimpPDB singleton.</doc>
        <type name="PDB" c:type="GimpPDB*"/>
      </return-value>
    </function>
    <function name="get_plug_in" c:identifier="gimp_get_plug_in" version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimp.c"
           line="533">This function returns the plug-in's #GimpPlugIn instance, which is
a a singleton that can exist exactly once per running plug-in.</doc>
      <source-position filename="libgimp/gimp.h" line="165"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="libgimp/gimp.c"
             line="539">The plug-in's #GimpPlugIn singleton.</doc>
        <type name="PlugIn" c:type="GimpPlugIn*"/>
      </return-value>
    </function>
    <function name="get_progname" c:identifier="gimp_get_progname">
      <doc xml:space="preserve"
           filename="libgimp/gimp.c"
           line="921">Returns the plug-in's executable name.</doc>
      <source-position filename="libgimp/gimp.h" line="199"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimp.c"
             line="926">the executable name</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="getpid" c:identifier="gimp_getpid" version="2.4">
      <doc xml:space="preserve"
           filename="libgimp/gimp_pdb.c"
           line="77">Returns the PID of the host GIMP process.

This procedure returns the process ID of the currently running GIMP.</doc>
      <source-position filename="libgimp/gimp_pdb.h" line="36"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimp_pdb.c"
             line="84">The PID.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
    </function>
    <docsection name="gimp">
      <doc xml:space="preserve"
           filename="libgimp/gimp_pdb.c"
           line="30">Main functions needed for building a GIMP plug-in.
This header includes all other GIMP Library headers.

Also contains some miscellaneous procedures that don't fit in any
other category.</doc>
    </docsection>
    <docsection name="gimpadaptivesupersample">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimpadaptivesupersample.c"
           line="31">Functions to perform adaptive supersampling on an area.</doc>
    </docsection>
    <docsection name="gimpbaseenums">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbaseenums.h"
           line="23">Basic GIMP enumeration data types.</doc>
    </docsection>
    <docsection name="gimpbasetypes">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbasetypes.c"
           line="29">Translation between gettext translation domain identifier and
GType.</doc>
    </docsection>
    <docsection name="gimpbilinear">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimpbilinear.c"
           line="31">Utility functions for bilinear interpolation.</doc>
    </docsection>
    <docsection name="gimpbrushes">
      <doc xml:space="preserve"
           filename="libgimp/gimpbrushes_pdb.c"
           line="30">Functions related to getting and setting brushes.</doc>
    </docsection>
    <docsection name="gimpbrushselect">
      <doc xml:space="preserve"
           filename="libgimp/gimpbrushselect_pdb.c"
           line="30">A dialog letting a user choose a brush.  Read more at
gimpfontselect.</doc>
    </docsection>
    <docsection name="gimpbuffer">
      <doc xml:space="preserve"
           filename="libgimp/gimpbuffer_pdb.c"
           line="30">Functions related to named cut buffers.</doc>
    </docsection>
    <docsection name="gimpcairo">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimpcairo.c"
           line="36">Utility functions that make cairo easier to use with GIMP color
data types.</doc>
    </docsection>
    <docsection name="gimpchecks">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpchecks.c"
           line="32">Constants and functions related to rendering checkerboards.</doc>
    </docsection>
    <docsection name="gimpcolor">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimpcolor.c"
           line="36">#GimpColor contains a few helper functions to manipulate [class@Gegl.Color]
objects more easily.</doc>
    </docsection>
    <docsection name="gimpcolorspace">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimpcolorspace.c"
           line="33">When programming pixel data manipulation functions you will often
use algorithms operating on a color model different from the one
GIMP uses.  This file provides utility functions to convert colors
between different color spaces.</doc>
    </docsection>
    <docsection name="gimpconfig-deserialize">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-deserialize.c"
           line="45">Deserializing code for libgimpconfig.</doc>
    </docsection>
    <docsection name="gimpconfig-error">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-error.c"
           line="29">Error utils for libgimpconfig.</doc>
    </docsection>
    <docsection name="gimpconfig-params">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-params.c"
           line="37">Macros and defines to install config properties.</doc>
    </docsection>
    <docsection name="gimpconfig-path">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-path.c"
           line="37">File path utilities for libgimpconfig.</doc>
    </docsection>
    <docsection name="gimpconfig-serialize">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-serialize.c"
           line="43">Serializing interface for libgimpconfig.</doc>
    </docsection>
    <docsection name="gimpconfig-utils">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-utils.c"
           line="39">Miscellaneous utility functions for libgimpconfig.</doc>
    </docsection>
    <docsection name="gimpcontext">
      <doc xml:space="preserve"
           filename="libgimp/gimpcontext_pdb.c"
           line="30">Functions to manipulate a plug-in's context.</doc>
    </docsection>
    <docsection name="gimpcpuaccel">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpcpuaccel.c"
           line="41">Functions to query and configure CPU acceleration.</doc>
    </docsection>
    <docsection name="gimpdebug">
      <doc xml:space="preserve"
           filename="libgimp/gimpdebug_pdb.c"
           line="30">Miscellaneous debug utility functions. Not part of the stable
library interface.</doc>
    </docsection>
    <docsection name="gimpdrawablecolor">
      <doc xml:space="preserve"
           filename="libgimp/gimpdrawablecolor_pdb.c"
           line="30">Functions for manipulating a drawable's color, including curves and
histograms.</doc>
    </docsection>
    <docsection name="gimpdrawableedit">
      <doc xml:space="preserve"
           filename="libgimp/gimpdrawableedit_pdb.c"
           line="30">Drawable edit functions (clear, fill, gradient, stroke etc.)</doc>
    </docsection>
    <docsection name="gimpdynamics">
      <doc xml:space="preserve"
           filename="libgimp/gimpdynamics_pdb.c"
           line="30">Operations related to paint dynamics.</doc>
    </docsection>
    <docsection name="gimpedit">
      <doc xml:space="preserve"
           filename="libgimp/gimpedit_pdb.c"
           line="30">Edit menu functions (cut, copy, paste, clear, etc.)</doc>
    </docsection>
    <docsection name="gimpenv">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpenv.c"
           line="77">A set of functions to find the locations of GIMP's data directories
and configuration files.</doc>
    </docsection>
    <docsection name="gimpfile">
      <doc xml:space="preserve"
           filename="libgimp/gimpfile_pdb.c"
           line="30">Image file operations (load, save, etc.)</doc>
    </docsection>
    <docsection name="gimpfloatingsel">
      <doc xml:space="preserve"
           filename="libgimp/gimpfloatingsel_pdb.c"
           line="30">Functions for removing or attaching floating selections.</doc>
    </docsection>
    <docsection name="gimpfonts">
      <doc xml:space="preserve"
           filename="libgimp/gimpfonts_pdb.c"
           line="30">Operations related to fonts.</doc>
    </docsection>
    <docsection name="gimpfontselect">
      <doc xml:space="preserve"
           filename="libgimp/gimpfontselect_pdb.c"
           line="30">A font chooser dialog shows installed fonts.
The dialog is non-modal with its owning dialog,
which is usually a plugin procedure's dialog.
When a user selects a font,
the dialog calls back but the dialog remains open.
The chosen font is only a choice for the owning widget
and does not select the font for the context.
The user can close but not cancel the dialog.
The owning dialog can close the font chooser dialog
when the user closes or cancels the owning dialog.</doc>
    </docsection>
    <docsection name="gimpgimprc">
      <doc xml:space="preserve"
           filename="libgimp/gimpgimprc_pdb.c"
           line="30">Interactions with settings from gimprc.</doc>
    </docsection>
    <docsection name="gimpgradients">
      <doc xml:space="preserve"
           filename="libgimp/gimpgradients_pdb.c"
           line="30">Operations related to gradients.</doc>
    </docsection>
    <docsection name="gimpgradientselect">
      <doc xml:space="preserve"
           filename="libgimp/gimpgradientselect_pdb.c"
           line="30">A dialog letting a user choose a gradient.  Read more at
gimpfontselect.</doc>
    </docsection>
    <docsection name="gimphelp">
      <doc xml:space="preserve"
           filename="libgimp/gimphelp_pdb.c"
           line="30">Loading help pages using gimp_help.</doc>
    </docsection>
    <docsection name="gimpimagecolorprofile">
      <doc xml:space="preserve"
           filename="libgimp/gimpimagecolorprofile_pdb.c"
           line="30">Operations on an image's color profile.</doc>
    </docsection>
    <docsection name="gimpimageconvert">
      <doc xml:space="preserve"
           filename="libgimp/gimpimageconvert_pdb.c"
           line="30">Conversions between RGB, indexed, and grayscale modes.</doc>
    </docsection>
    <docsection name="gimpimagegrid">
      <doc xml:space="preserve"
           filename="libgimp/gimpimagegrid_pdb.c"
           line="30">Functions manuipulating an image's grid.</doc>
    </docsection>
    <docsection name="gimpimageguides">
      <doc xml:space="preserve"
           filename="libgimp/gimpimageguides_pdb.c"
           line="30">Functions for manipulating an image's guides.</doc>
    </docsection>
    <docsection name="gimpimagesamplepoints">
      <doc xml:space="preserve"
           filename="libgimp/gimpimagesamplepoints_pdb.c"
           line="30">Functions for manipulating an image's sample points.</doc>
    </docsection>
    <docsection name="gimpimageselect">
      <doc xml:space="preserve"
           filename="libgimp/gimpimageselect_pdb.c"
           line="30">Functions to modify the image's selection.</doc>
    </docsection>
    <docsection name="gimpimagetransform">
      <doc xml:space="preserve"
           filename="libgimp/gimpimagetransform_pdb.c"
           line="30">Operations to scale, resize, crop, flip and rotate images.</doc>
    </docsection>
    <docsection name="gimpimageundo">
      <doc xml:space="preserve"
           filename="libgimp/gimpimageundo_pdb.c"
           line="30">Control of image undo/redo.</doc>
    </docsection>
    <docsection name="gimpitemtransform">
      <doc xml:space="preserve"
           filename="libgimp/gimpitemtransform_pdb.c"
           line="30">Functions to perform transformations on items.</doc>
    </docsection>
    <docsection name="gimplimits">
      <doc xml:space="preserve"
           filename="libgimpbase/gimplimits.h"
           line="32">Boundaries of some GIMP data types and some global constants.</doc>
    </docsection>
    <docsection name="gimpmatrix">
      <doc xml:space="preserve"
           filename="libgimpmath/gimpmatrix.c"
           line="29">When doing image manipulation you will often need 3x3
transformation matrices that define translation, rotation, scaling,
shearing and arbitrary perspective transformations using a 3x3
matrix. Here you'll find a set of utility functions to set up those
matrices and to perform basic matrix manipulations and tests.

Each matrix class has a 2 dimensional gdouble coeff member. The
element for row r and column c of the matrix is coeff[r][c].</doc>
    </docsection>
    <docsection name="gimpmessage">
      <doc xml:space="preserve"
           filename="libgimp/gimpmessage_pdb.c"
           line="30">Display a dialog box with a message.</doc>
    </docsection>
    <docsection name="gimppainttools">
      <doc xml:space="preserve"
           filename="libgimp/gimppainttools_pdb.c"
           line="30">Functions giving access to toolbox paint tools.</doc>
    </docsection>
    <docsection name="gimppalettes">
      <doc xml:space="preserve"
           filename="libgimp/gimppalettes_pdb.c"
           line="30">Operations related to palettes.</doc>
    </docsection>
    <docsection name="gimppaletteselect">
      <doc xml:space="preserve"
           filename="libgimp/gimppaletteselect_pdb.c"
           line="30">A dialog letting a user choose a palette.  Read more at
gimpfontselect.</doc>
    </docsection>
    <docsection name="gimpparasiteio">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparasiteio.c"
           line="38">Utility functions to (de)serialize certain C structures to/from*
#GimpParasite's.</doc>
    </docsection>
    <docsection name="gimppatterns">
      <doc xml:space="preserve"
           filename="libgimp/gimppatterns_pdb.c"
           line="30">Functions relating to patterns.</doc>
    </docsection>
    <docsection name="gimppatternselect">
      <doc xml:space="preserve"
           filename="libgimp/gimppatternselect_pdb.c"
           line="30">A dialog letting a user choose a pattern.  Read more at
gimpfontselect.</doc>
    </docsection>
    <docsection name="gimppixbuf">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimppixbuf.c"
           line="32">Definitions and Functions relating to GdkPixbuf.</doc>
    </docsection>
    <docsection name="gimpprocedure-params">
      <doc xml:space="preserve"
           filename="libgimp/gimpprocedure-params.h"
           line="34">Macros and defines to add procedure arguments and return values.</doc>
    </docsection>
    <docsection name="gimpprogress">
      <doc xml:space="preserve"
           filename="libgimp/gimpprogress_pdb.c"
           line="30">Functions for embedding the progress bar into a plug-in's GUI.</doc>
    </docsection>
    <function name="gimprc_query" c:identifier="gimp_gimprc_query">
      <doc xml:space="preserve"
           filename="libgimp/gimpgimprc_pdb.c"
           line="39">Queries the gimprc file parser for information on a specified token.

This procedure is used to locate additional information contained in
the gimprc file considered extraneous to the operation of GIMP.
Plug-ins that need configuration information can expect it will be
stored in the user gimprc file and can use this procedure to
retrieve it. This query procedure will return the value associated
with the specified token. This corresponds _only_ to entries with
the format: (&amp;lt;token&amp;gt; &amp;lt;value&amp;gt;). The value must be a
string. Entries not corresponding to this format will cause warnings
to be issued on gimprc parsing and will not be queryable.</doc>
      <source-position filename="libgimp/gimpgimprc_pdb.h" line="35"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimpgimprc_pdb.c"
             line="55">The value associated with the queried token.
         The returned value must be freed with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="token" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgimprc_pdb.c"
               line="41">The token to query for.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gimprc_set" c:identifier="gimp_gimprc_set">
      <doc xml:space="preserve"
           filename="libgimp/gimpgimprc_pdb.c"
           line="82">Sets a gimprc token to a value and saves it in the gimprc.

This procedure is used to add or change additional information in
the gimprc file that is considered extraneous to the operation of
GIMP. Plug-ins that need configuration information can use this
function to store it, and gimp_gimprc_query() to retrieve it. This
will accept _only_ string values in UTF-8 encoding.</doc>
      <source-position filename="libgimp/gimpgimprc_pdb.h" line="36"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpgimprc_pdb.c"
             line="95">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="token" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgimprc_pdb.c"
               line="84">The token to add or modify.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgimprc_pdb.c"
               line="85">The value to set the token to.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="gimprectangle">
      <doc xml:space="preserve"
           filename="libgimpbase/gimprectangle.c"
           line="28">Utility functions dealing with rectangle extents.</doc>
    </docsection>
    <docsection name="gimpresourceselect">
      <doc xml:space="preserve"
           filename="libgimp/gimpresourceselect.c"
           line="50">A resource selection dialog.

An adapter and proxy between libgimp and core.
(see Adapter and Proxy patterns in programming literature.)

Proxy: to a remote dialog in core.
Is a dialog, but the dialog is remote (another process.)
Remote dialog is a chooser dialog of subclass of GimpResource,
e.g. GimpBrush, GimpFont, etc.

Adapter: gets a callback via PDB procedure from remote dialog
and shuffles parameters to call a owner's callback on libgimp side.

Generic on type of GimpResource subclass.
That is, the type of GimpResource subclass is passed.

Responsibilities:

   - implement a proxy  to a chooser widget in core

Collaborations:

    - called by GimpResourceSelectButton to popup as a sibling widget
    - PDB procedures to/from core, which implements the remote dialog
      (from via PDB temp callback, to via PDB procs such as gimp_fonts_popup)
    - plugins implementing their own GUI</doc>
    </docsection>
    <docsection name="gimpsignal">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpsignal.c"
           line="30">Portable signal handling.</doc>
    </docsection>
    <docsection name="gimptexttool">
      <doc xml:space="preserve"
           filename="libgimp/gimptexttool_pdb.c"
           line="30">Functions for controlling the text tool.</doc>
    </docsection>
    <docsection name="gimputils">
      <doc xml:space="preserve"
           filename="libgimpbase/gimputils.c"
           line="72">Utilities of general interest</doc>
    </docsection>
    <docsection name="gimpvector">
      <doc xml:space="preserve"
           filename="libgimpmath/gimpvector.c"
           line="36">Utilities to set up and manipulate vectors.</doc>
    </docsection>
    <docsection name="gimpversion">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpversion.h"
           line="14">Macros and constants useful for determining GIMP's version number and
capabilities.</doc>
    </docsection>
    <function name="gradients_close_popup"
              c:identifier="gimp_gradients_close_popup">
      <doc xml:space="preserve"
           filename="libgimp/gimpgradientselect_pdb.c"
           line="82">Close the gradient selection dialog.

Closes an open gradient selection dialog.</doc>
      <source-position filename="libgimp/gimpgradientselect_pdb.h" line="39"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradientselect_pdb.c"
             line="90">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="gradient_callback" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradientselect_pdb.c"
               line="84">The name of the callback registered for this pop-up.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gradients_get_list" c:identifier="gimp_gradients_get_list">
      <doc xml:space="preserve"
           filename="libgimp/gimpgradients_pdb.c"
           line="71">Retrieve the list of loaded gradients.

This procedure returns a list of the gradients that are currently
loaded. You can later use the gimp_context_set_gradient() function
to set the active gradient.</doc>
      <source-position filename="libgimp/gimpgradients_pdb.h" line="36"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradients_pdb.c"
             line="81">
         The list of gradient names.
         The returned value must be freed with g_strfreev().</doc>
        <array c:type="gchar**">
          <type name="utf8"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="filter" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradients_pdb.c"
               line="73">An optional regular expression used to filter the list.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gradients_popup" c:identifier="gimp_gradients_popup">
      <doc xml:space="preserve"
           filename="libgimp/gimpgradientselect_pdb.c"
           line="40">Invokes the Gimp gradients selection dialog.

Opens a dialog letting a user choose a gradient.</doc>
      <source-position filename="libgimp/gimpgradientselect_pdb.h" line="35"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradientselect_pdb.c"
             line="51">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="gradient_callback" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradientselect_pdb.c"
               line="42">The callback PDB proc to call when user chooses a gradient.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="popup_title" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradientselect_pdb.c"
               line="43">Title of the gradient selection dialog.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="initial_gradient" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradientselect_pdb.c"
               line="44">The initial gradient choice.</doc>
          <type name="Gradient" c:type="GimpGradient*"/>
        </parameter>
        <parameter name="parent_window" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradientselect_pdb.c"
               line="45">An optional parent window handle for the popup to be set transient to.</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gradients_refresh" c:identifier="gimp_gradients_refresh">
      <doc xml:space="preserve"
           filename="libgimp/gimpgradients_pdb.c"
           line="39">Refresh current gradients. This function always succeeds.

This procedure retrieves all gradients currently in the user's
gradient path and updates the gradient dialogs accordingly.</doc>
      <source-position filename="libgimp/gimpgradients_pdb.h" line="35"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradients_pdb.c"
             line="47">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="gradients_set_popup"
              c:identifier="gimp_gradients_set_popup">
      <doc xml:space="preserve"
           filename="libgimp/gimpgradientselect_pdb.c"
           line="115">Sets the current gradient in a gradient selection dialog.

Sets the current gradient in a gradient selection dialog.</doc>
      <source-position filename="libgimp/gimpgradientselect_pdb.h" line="40"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpgradientselect_pdb.c"
             line="124">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="gradient_callback" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradientselect_pdb.c"
               line="117">The name of the callback registered for this pop-up.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="gradient" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpgradientselect_pdb.c"
               line="118">The gradient to set as selected.</doc>
          <type name="Gradient" c:type="GimpGradient*"/>
        </parameter>
      </parameters>
    </function>
    <function name="heal" c:identifier="gimp_heal" version="2.4">
      <doc xml:space="preserve"
           filename="libgimp/gimppainttools_pdb.c"
           line="517">Heal from the source to the dest drawable using the current brush

This tool heals the source drawable starting at the specified source
coordinates to the dest drawable. For image healing, if the sum of
the src coordinates and subsequent stroke offsets exceeds the
extents of the src drawable, then no paint is transferred. The
healing tool is capable of transforming between any image types
except RGB-&amp;gt;Indexed.</doc>
      <source-position filename="libgimp/gimppainttools_pdb.h" line="77"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimppainttools_pdb.c"
             line="535">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="drawable" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="519">The affected drawable.</doc>
          <type name="Drawable" c:type="GimpDrawable*"/>
        </parameter>
        <parameter name="src_drawable" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="520">The source drawable.</doc>
          <type name="Drawable" c:type="GimpDrawable*"/>
        </parameter>
        <parameter name="src_x" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="521">The x coordinate in the source image.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="src_y" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="522">The y coordinate in the source image.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="num_strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="523">Number of stroke control points (count each coordinate as 2 points).</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="524">Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y, ..., sn.x, sn.y }.</doc>
          <array length="4" zero-terminated="0" c:type="const gdouble*">
            <type name="gdouble"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="heal_default"
              c:identifier="gimp_heal_default"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimp/gimppainttools_pdb.c"
           line="573">Heal from the source to the dest drawable using the current brush

This tool heals from the source drawable starting at the specified
source coordinates to the dest drawable. This function performs
exactly the same as the gimp_heal() function except that the tools
arguments are obtained from the healing option dialog. It this
dialog has not been activated then the dialogs default values will
be used.</doc>
      <source-position filename="libgimp/gimppainttools_pdb.h" line="83"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimppainttools_pdb.c"
             line="588">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="drawable" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="575">The affected drawable.</doc>
          <type name="Drawable" c:type="GimpDrawable*"/>
        </parameter>
        <parameter name="num_strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="576">Number of stroke control points (count each coordinate as 2 points).</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="577">Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y, ..., sn.x, sn.y }.</doc>
          <array length="1" zero-terminated="0" c:type="const gdouble*">
            <type name="gdouble"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="help" c:identifier="gimp_help">
      <doc xml:space="preserve"
           filename="libgimp/gimphelp_pdb.c"
           line="39">Load a help page.

This procedure loads the specified help page into the helpbrowser or
what ever is configured as help viewer. The help page is identified
by its domain and ID: if help_domain is NULL, we use the help_domain
which was registered using the gimp_plugin_help_register()
procedure. If help_domain is NULL and no help domain was registered,
the help domain of the main GIMP installation is used.</doc>
      <source-position filename="libgimp/gimphelp_pdb.h" line="35"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimphelp_pdb.c"
             line="53">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="help_domain" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimphelp_pdb.c"
               line="41">The help domain in which help_id is registered.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="help_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimphelp_pdb.c"
               line="42">The help page's ID.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="icon_theme_dir"
              c:identifier="gimp_icon_theme_dir"
              version="2.10.4">
      <doc xml:space="preserve"
           filename="libgimp/gimp.c"
           line="904">Returns the directory of the current icon theme.

This is a constant value given at plug-in configuration time.</doc>
      <source-position filename="libgimp/gimp.h" line="197"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimp.c"
             line="911">the icon theme directory</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="installation_directory"
              c:identifier="gimp_installation_directory"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpenv.c"
           line="335">Returns the top installation directory of GIMP. On Unix the
compile-time defined installation prefix is used. On Windows, the
installation directory as deduced from the executable's full
filename is used. On OSX we ask [NSBundle mainBundle] for the
resource path to check if GIMP is part of a relocatable bundle.

In config files such as gimprc, the string ${gimp_installation_dir}
expands to this directory.

The returned string is owned by GIMP and must not be modified or
freed. The returned string is in the encoding used for filenames by
GLib, which isn't necessarily UTF-8. (On Windows it always is
UTF-8.)</doc>
      <source-position filename="libgimpbase/gimpenv.h" line="50"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpenv.c"
             line="354">The toplevel installation directory of GIMP.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="installation_directory_file"
              c:identifier="gimp_installation_directory_file"
              version="2.10.10"
              introspectable="0">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpenv.c"
           line="759">Returns a #GFile in the installation directory, or the installation
directory itself if @first_element is %NULL.

See also: gimp_installation_directory().</doc>
      <source-position filename="libgimpbase/gimpenv.h" line="60"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpenv.c"
             line="773">
         a new @GFile for the path, Free with g_object_unref().</doc>
        <type name="Gio.File" c:type="GFile*"/>
      </return-value>
      <parameters>
        <parameter name="first_element" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpenv.c"
               line="761">the first element of a path to a file in the
                top installation directory, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpenv.c"
               line="763">a %NULL terminated list of the remaining elements of the path
      to the file.</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="is_canonical_identifier"
              c:identifier="gimp_is_canonical_identifier"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimpbase/gimputils.c"
           line="621">Checks if @identifier is canonical and non-%NULL.

Canonical identifiers are e.g. expected by the PDB for procedure
and parameter names. Every character of the input string must be
either '-', 'a-z', 'A-Z' or '0-9'.</doc>
      <source-position filename="libgimpbase/gimputils.h" line="46"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimputils.c"
             line="631">%TRUE if @identifier is canonical, %FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="identifier" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="623">The identifier string to check.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="list_images"
              c:identifier="gimp_list_images"
              version="3.0"
              introspectable="0">
      <doc xml:space="preserve"
           filename="libgimp/gimpimage.c"
           line="186">Returns the list of images currently open.

This procedure returns the list of images currently open in GIMP.</doc>
      <source-position filename="libgimp/gimpimage.h" line="43"/>
      <return-value transfer-ownership="container">
        <doc xml:space="preserve"
             filename="libgimp/gimpimage.c"
             line="193">
         The list of images currently open.
         The returned list must be freed with g_list_free(). Image
         elements belong to libgimp and must not be freed.</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="Image"/>
        </type>
      </return-value>
    </function>
    <function name="locale_directory" c:identifier="gimp_locale_directory">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpenv.c"
           line="507">Returns the top directory for GIMP locale files. If the environment
variable GIMP3_LOCALEDIR exists, that is used.  It should be an
absolute pathname.  Otherwise, on Unix the compile-time defined
directory is used. On Windows, the installation directory as deduced
from the executable's full filename is used.

The returned string is owned by GIMP and must not be modified or
freed. The returned string encoding depends on the system where GIMP
is running: on UNIX it's in the encoding used for filenames by
the C library (which isn't necessarily UTF-8); on Windows it's UTF-8.

On UNIX the returned string can be passed directly to the bindtextdomain()
function from libintl; on Windows the returned string can be converted to
UTF-16 and passed to the wbindtextdomain() function from libintl.</doc>
      <source-position filename="libgimpbase/gimpenv.h" line="52"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpenv.c"
             line="525">The top directory for GIMP locale files.</doc>
        <type name="filename" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="locale_directory_file"
              c:identifier="gimp_locale_directory_file"
              version="2.10"
              introspectable="0">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpenv.c"
           line="821">Returns a #GFile in the locale directory, or the locale directory
itself if @first_element is %NULL.

See also: gimp_locale_directory().</doc>
      <source-position filename="libgimpbase/gimpenv.h" line="64"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpenv.c"
             line="835">
         a new @GFile for the path, Free with g_object_unref().</doc>
        <type name="Gio.File" c:type="GFile*"/>
      </return-value>
      <parameters>
        <parameter name="first_element" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpenv.c"
               line="823">the first element of a path to a file in the
                locale directory, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpenv.c"
               line="825">a %NULL terminated list of the remaining elements of the path
      to the file.</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="main" c:identifier="gimp_main" version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimp.c"
           line="148">The main plug-in function that must be called with the plug-in's
#GimpPlugIn subclass #GType and the 'argc' and 'argv' that are passed
to the platform's main().

See also: GIMP_MAIN(), #GimpPlugIn.</doc>
      <source-position filename="libgimp/gimp.h" line="159"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimp.c"
             line="160">an exit status as defined by the C library,
         on success EXIT_SUCCESS.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="plug_in_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimp.c"
               line="150">the type of the #GimpPlugIn subclass of the plug-in</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="argc" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimp.c"
               line="151">the number of arguments</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="argv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimp.c"
               line="152">the arguments</doc>
          <array length="1" zero-terminated="0" c:type="gchar**">
            <type name="utf8" c:type="gchar*"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="message" c:identifier="gimp_message">
      <doc xml:space="preserve"
           filename="libgimp/gimpmessage_pdb.c"
           line="39">Displays a dialog box with a message.

Displays a dialog box with a message. Useful for status or error
reporting. The message must be in UTF-8 encoding.</doc>
      <source-position filename="libgimp/gimpmessage_pdb.h" line="35"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpmessage_pdb.c"
             line="48">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpmessage_pdb.c"
               line="41">Message to display in the dialog.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="message_get_handler"
              c:identifier="gimp_message_get_handler">
      <doc xml:space="preserve"
           filename="libgimp/gimpmessage_pdb.c"
           line="73">Returns the current state of where warning messages are displayed.

This procedure returns the way g_message warnings are displayed.
They can be shown in a dialog box or printed on the console where
gimp was started.</doc>
      <source-position filename="libgimp/gimpmessage_pdb.h" line="36"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpmessage_pdb.c"
             line="82">The current handler type.</doc>
        <type name="MessageHandlerType" c:type="GimpMessageHandlerType"/>
      </return-value>
    </function>
    <function name="message_set_handler"
              c:identifier="gimp_message_set_handler">
      <doc xml:space="preserve"
           filename="libgimp/gimpmessage_pdb.c"
           line="107">Controls where warning messages are displayed.

This procedure controls how g_message warnings are displayed. They
can be shown in a dialog box or printed on the console where gimp
was started.</doc>
      <source-position filename="libgimp/gimpmessage_pdb.h" line="37"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpmessage_pdb.c"
             line="117">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="handler" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpmessage_pdb.c"
               line="109">The new handler type.</doc>
          <type name="MessageHandlerType" c:type="GimpMessageHandlerType"/>
        </parameter>
      </parameters>
    </function>
    <function name="monitor_number" c:identifier="gimp_monitor_number">
      <doc xml:space="preserve"
           filename="libgimp/gimp.c"
           line="870">Returns the monitor number to be used for plug-in windows.

This is a constant value given at plug-in configuration time.</doc>
      <source-position filename="libgimp/gimp.h" line="195"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimp.c"
             line="877">the monitor number</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
    </function>
    <function name="paintbrush" c:identifier="gimp_paintbrush">
      <doc xml:space="preserve"
           filename="libgimp/gimppainttools_pdb.c"
           line="620">Paint in the current brush with optional fade out parameter and pull
colors from a gradient.

This tool is the standard paintbrush. It draws linearly interpolated
lines through the specified stroke coordinates. It operates on the
specified drawable in the foreground color with the active brush.
The 'fade-out' parameter is measured in pixels and allows the brush
stroke to linearly fall off. The pressure is set to the maximum at
the beginning of the stroke. As the distance of the stroke nears the
fade-out value, the pressure will approach zero. The gradient-length
is the distance to spread the gradient over. It is measured in
pixels. If the gradient-length is 0, no gradient is used.</doc>
      <source-position filename="libgimp/gimppainttools_pdb.h" line="86"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimppainttools_pdb.c"
             line="642">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="drawable" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="622">The affected drawable.</doc>
          <type name="Drawable" c:type="GimpDrawable*"/>
        </parameter>
        <parameter name="fade_out" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="623">Fade out parameter.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="num_strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="624">Number of stroke control points (count each coordinate as 2 points).</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="625">Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y, ..., sn.x, sn.y }.</doc>
          <array length="2" zero-terminated="0" c:type="const gdouble*">
            <type name="gdouble"/>
          </array>
        </parameter>
        <parameter name="method" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="626">The paint method to use.</doc>
          <type name="PaintApplicationMode" c:type="GimpPaintApplicationMode"/>
        </parameter>
        <parameter name="gradient_length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="627">Length of gradient to draw.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="paintbrush_default" c:identifier="gimp_paintbrush_default">
      <doc xml:space="preserve"
           filename="libgimp/gimppainttools_pdb.c"
           line="678">Paint in the current brush. The fade out parameter and pull colors
from a gradient parameter are set from the paintbrush options
dialog. If this dialog has not been activated then the dialog
defaults will be used.

This tool is similar to the standard paintbrush. It draws linearly
interpolated lines through the specified stroke coordinates. It
operates on the specified drawable in the foreground color with the
active brush. The 'fade-out' parameter is measured in pixels and
allows the brush stroke to linearly fall off (value obtained from
the option dialog). The pressure is set to the maximum at the
beginning of the stroke. As the distance of the stroke nears the
fade-out value, the pressure will approach zero. The gradient-length
(value obtained from the option dialog) is the distance to spread
the gradient over. It is measured in pixels. If the gradient-length
is 0, no gradient is used.</doc>
      <source-position filename="libgimp/gimppainttools_pdb.h" line="92"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimppainttools_pdb.c"
             line="701">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="drawable" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="680">The affected drawable.</doc>
          <type name="Drawable" c:type="GimpDrawable*"/>
        </parameter>
        <parameter name="num_strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="681">Number of stroke control points (count each coordinate as 2 points).</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="682">Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y, ..., sn.x, sn.y }.</doc>
          <array length="1" zero-terminated="0" c:type="const gdouble*">
            <type name="gdouble"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="palettes_close_popup"
              c:identifier="gimp_palettes_close_popup">
      <doc xml:space="preserve"
           filename="libgimp/gimppaletteselect_pdb.c"
           line="82">Close the palette selection dialog.

Closes an open palette selection dialog.</doc>
      <source-position filename="libgimp/gimppaletteselect_pdb.h" line="39"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimppaletteselect_pdb.c"
             line="90">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="palette_callback" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppaletteselect_pdb.c"
               line="84">The name of the callback registered for this pop-up.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="palettes_get_list" c:identifier="gimp_palettes_get_list">
      <doc xml:space="preserve"
           filename="libgimp/gimppalettes_pdb.c"
           line="71">Retrieves a list of all of the available palettes

This procedure returns a complete listing of available palettes.
Each name returned can be used as input to the command
gimp_context_set_palette().</doc>
      <source-position filename="libgimp/gimppalettes_pdb.h" line="36"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimppalettes_pdb.c"
             line="81">
         The list of palette names.
         The returned value must be freed with g_strfreev().</doc>
        <array c:type="gchar**">
          <type name="utf8"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="filter" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppalettes_pdb.c"
               line="73">An optional regular expression used to filter the list.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="palettes_popup" c:identifier="gimp_palettes_popup">
      <doc xml:space="preserve"
           filename="libgimp/gimppaletteselect_pdb.c"
           line="40">Invokes the Gimp palette selection dialog.

Opens a dialog letting a user choose a palette.</doc>
      <source-position filename="libgimp/gimppaletteselect_pdb.h" line="35"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimppaletteselect_pdb.c"
             line="51">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="palette_callback" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppaletteselect_pdb.c"
               line="42">The callback PDB proc to call when user chooses a palette.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="popup_title" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppaletteselect_pdb.c"
               line="43">Title of the palette selection dialog.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="initial_palette" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppaletteselect_pdb.c"
               line="44">The palette to set as the initial choice.</doc>
          <type name="Palette" c:type="GimpPalette*"/>
        </parameter>
        <parameter name="parent_window" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppaletteselect_pdb.c"
               line="45">An optional parent window handle for the popup to be set transient to.</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </parameter>
      </parameters>
    </function>
    <function name="palettes_refresh" c:identifier="gimp_palettes_refresh">
      <doc xml:space="preserve"
           filename="libgimp/gimppalettes_pdb.c"
           line="39">Refreshes current palettes. This function always succeeds.

This procedure retrieves all palettes currently in the user's
palette path and updates the palette dialogs accordingly.</doc>
      <source-position filename="libgimp/gimppalettes_pdb.h" line="35"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimppalettes_pdb.c"
             line="47">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="palettes_set_popup" c:identifier="gimp_palettes_set_popup">
      <doc xml:space="preserve"
           filename="libgimp/gimppaletteselect_pdb.c"
           line="115">Sets the current palette in a palette selection dialog.

Sets the current palette in a palette selection dialog.</doc>
      <source-position filename="libgimp/gimppaletteselect_pdb.h" line="40"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimppaletteselect_pdb.c"
             line="124">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="palette_callback" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppaletteselect_pdb.c"
               line="117">The name of the callback registered for this pop-up.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="palette" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppaletteselect_pdb.c"
               line="118">The palette to set as selected.</doc>
          <type name="Palette" c:type="GimpPalette*"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_array"
              c:identifier="gimp_param_spec_array"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparamspecs.c"
           line="529">Creates a new #GimpParamSpecArray specifying a
[type@Array] property.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="libgimpbase/gimpparamspecs.h" line="232"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparamspecs.c"
             line="541">The newly created #GimpParamSpecArray.</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="531">Canonical name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="532">Nick name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="533">Description of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="534">Flags for the property specified.</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_brush"
              c:identifier="gimp_param_spec_brush"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimpparamspecs-body.c"
           line="1260">Creates a new #GimpParamSpecBrush specifying a
[type@Brush] property. See also [func@Gimp.param_spec_resource].</doc>
      <source-position filename="libgimp/gimpparamspecs.h" line="388"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpparamspecs-body.c"
             line="1273">The newly created #GimpParamSpecBrush.</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1262">Canonical name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1263">Nick name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1264">Description of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="none_ok" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1265">Whether %NULL is a valid value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="default_value"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1266">Default brush.</doc>
          <type name="Brush" c:type="GimpBrush*"/>
        </parameter>
        <parameter name="default_to_context" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1267">Whether the context is the context's brush.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1268">Flags for the property specified.</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_channel"
              c:identifier="gimp_param_spec_channel"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimpparamspecs-body.c"
           line="604">Creates a new #GimpParamSpecChannel specifying a
[type@Channel] property.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="libgimp/gimpparamspecs.h" line="219"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpparamspecs-body.c"
             line="617">The newly created #GimpParamSpecChannel.</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="606">Canonical name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="607">Nick name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="608">Description of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="none_ok" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="609">Whether no  is a valid value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="610">Flags for the property specified.</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_choice"
              c:identifier="gimp_param_spec_choice"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparamspecs.c"
           line="154">Creates a new #GimpParamSpecChoice specifying a
#G_TYPE_STRING property.
This %GimpParamSpecChoice takes ownership of the reference on @choice.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="libgimpbase/gimpparamspecs.h" line="113"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparamspecs.c"
             line="168">The newly created #GimpParamSpecChoice.</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="156">Canonical name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="157">Nick name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="158">Description of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="choice" transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="159">the %GimpChoice describing allowed choices.</doc>
          <type name="Choice" c:type="GimpChoice*"/>
        </parameter>
        <parameter name="default_value" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="160">Flags for the property specified.</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_color" c:identifier="gimp_param_spec_color">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimpcolor.c"
           line="499">Creates a new #GParamSpec instance specifying a #GeglColor property.
Note that the @default_color is duplicated, so reusing object will
not change the default color of the returned
[struct@Gimp.ParamSpecColor].</doc>
      <source-position filename="libgimpcolor/gimpcolor.h" line="82"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolor.c"
             line="513">a newly created parameter specification</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolor.c"
               line="501">canonical name of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolor.c"
               line="502">nick name for the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolor.c"
               line="503">description of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="has_alpha" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolor.c"
               line="504">%TRUE if the alpha channel has relevance.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="default_color" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolor.c"
               line="505">the default value for the property specified</doc>
          <type name="Gegl.Color" c:type="GeglColor*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolor.c"
               line="506">flags for the property specified</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_color_from_string"
              c:identifier="gimp_param_spec_color_from_string"
              moved-to="ParamSpecColor.from_string">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimpcolor.c"
           line="539">Creates a new #GParamSpec instance specifying a #GeglColor property.</doc>
      <source-position filename="libgimpcolor/gimpcolor.h" line="89"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolor.c"
             line="550">a newly created parameter specification</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolor.c"
               line="541">canonical name of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolor.c"
               line="542">nick name for the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolor.c"
               line="543">description of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="has_alpha" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolor.c"
               line="544">%TRUE if the alpha channel has relevance.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="default_color_string" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolor.c"
               line="545">the default value for the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolor.c"
               line="546">flags for the property specified</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_color_has_alpha"
              c:identifier="gimp_param_spec_color_has_alpha"
              moved-to="ParamSpecColor.has_alpha"
              version="2.4">
      <source-position filename="libgimpcolor/gimpcolor.h" line="96"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimpcolor.c"
             line="581">%TRUE if the alpha channel is relevant.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pspec" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimpcolor.c"
               line="579">a #GParamSpec to hold an #GeglColor value.</doc>
          <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_config_path"
              c:identifier="gimp_param_spec_config_path"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-path.c"
           line="129">Creates a param spec to hold a filename, dir name,
or list of file or dir names.
See g_param_spec_internal() for more information.</doc>
      <source-position filename="libgimpconfig/gimpconfig-path.h" line="72"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-path.c"
             line="142">a newly allocated #GParamSpec instance</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-path.c"
               line="131">Canonical name of the param</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-path.c"
               line="132">Nickname of the param</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-path.c"
               line="133">Brief description of param.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-path.c"
               line="134">a #GimpConfigPathType value.</doc>
          <type name="ConfigPathType" c:type="GimpConfigPathType"/>
        </parameter>
        <parameter name="default_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-path.c"
               line="135">Value to use if none is assigned.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-path.c"
               line="136">a combination of #GParamFlags</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_config_path_type"
              c:identifier="gimp_param_spec_config_path_type"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimpconfig/gimpconfig-path.c"
           line="166">Tells whether the path param encodes a filename,
dir name, or list of file or dir names.</doc>
      <source-position filename="libgimpconfig/gimpconfig-path.h" line="79"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpconfig/gimpconfig-path.c"
             line="173">a #GimpConfigPathType value</doc>
        <type name="ConfigPathType" c:type="GimpConfigPathType"/>
      </return-value>
      <parameters>
        <parameter name="pspec" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpconfig/gimpconfig-path.c"
               line="168">A #GParamSpec for a path param</doc>
          <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_display"
              c:identifier="gimp_param_spec_display"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimpparamspecs-body.c"
           line="951">Creates a new #GimpParamSpecDisplay specifying a
[type@Display] property.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="libgimp/gimpparamspecs.h" line="329"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpparamspecs-body.c"
             line="964">The newly created #GimpParamSpecDisplay.</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="953">Canonical name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="954">Nick name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="955">Description of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="none_ok" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="956">Whether no  is a valid value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="957">Flags for the property specified.</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_drawable"
              c:identifier="gimp_param_spec_drawable"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimpparamspecs-body.c"
           line="284">Creates a new #GimpParamSpecDrawable specifying a
[type@Drawable] property.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="libgimp/gimpparamspecs.h" line="111"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpparamspecs-body.c"
             line="297">The newly created #GimpParamSpecDrawable.</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="286">Canonical name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="287">Nick name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="288">Description of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="none_ok" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="289">Whether no  is a valid value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="290">Flags for the property specified.</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_export_options"
              c:identifier="gimp_param_spec_export_options"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparamspecs.c"
           line="1454">Creates a new #GimpParamSpecExportOptions specifying a
#G_TYPE_INT property.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="libgimpbase/gimpparamspecs.h" line="470"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparamspecs.c"
             line="1467">The newly created #GimpParamSpecExportOptions.</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="1456">Canonical name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="1457">Nick name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="1458">Description of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="capabilities" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="1459">Int representing the image export capabilities</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="1460">Flags for the property specified.</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_float_array"
              c:identifier="gimp_param_spec_float_array"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparamspecs.c"
           line="834">Creates a new #GimpParamSpecFloatArray specifying a
%GIMP_TYPE_FLOAT_ARRAY property.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="libgimpbase/gimpparamspecs.h" line="310"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparamspecs.c"
             line="846">The newly created #GimpParamSpecFloatArray.</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="836">Canonical name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="837">Nick name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="838">Description of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="839">Flags for the property specified.</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_font"
              c:identifier="gimp_param_spec_font"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimpparamspecs-body.c"
           line="1560">Creates a new #GimpParamSpecFont specifying a
[type@Font] property. See also [func@Gimp.param_spec_resource].</doc>
      <source-position filename="libgimp/gimpparamspecs.h" line="504"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpparamspecs-body.c"
             line="1573">The newly created #GimpParamSpecFont.</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1562">Canonical name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1563">Nick name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1564">Description of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="none_ok" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1565">Whether %NULL is a valid value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="default_value"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1566">Default font.</doc>
          <type name="Font" c:type="GimpFont*"/>
        </parameter>
        <parameter name="default_to_context" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1567">Whether the context is the context's font.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1568">Flags for the property specified.</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_gradient"
              c:identifier="gimp_param_spec_gradient"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimpparamspecs-body.c"
           line="1410">Creates a new #GimpParamSpecGradient specifying a
[type@Gradient] property. See also [func@Gimp.param_spec_resource].</doc>
      <source-position filename="libgimp/gimpparamspecs.h" line="446"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpparamspecs-body.c"
             line="1423">The newly created #GimpParamSpecGradient.</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1412">Canonical name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1413">Nick name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1414">Description of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="none_ok" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1415">Whether %NULL is a valid value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="default_value"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1416">Default gradient.</doc>
          <type name="Gradient" c:type="GimpGradient*"/>
        </parameter>
        <parameter name="default_to_context" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1417">Whether the context is the context's gradient.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1418">Flags for the property specified.</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_group_layer"
              c:identifier="gimp_param_spec_group_layer"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimpparamspecs-body.c"
           line="524">Creates a new #GimpParamSpecGroupLayer specifying a
[type@GroupLayer] property.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="libgimp/gimpparamspecs.h" line="192"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpparamspecs-body.c"
             line="537">The newly created #GimpParamSpecGroupLayer.</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="526">Canonical name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="527">Nick name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="528">Description of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="none_ok" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="529">Whether %NULL is a valid value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="530">Flags for the property specified.</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_image"
              c:identifier="gimp_param_spec_image"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimpparamspecs-body.c"
           line="97">Creates a new #GimpParamSpecImage specifying a
[type@Image] property.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="libgimp/gimpparamspecs.h" line="55"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpparamspecs-body.c"
             line="110">The newly created #GimpParamSpecImage.</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="99">Canonical name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="100">Nick name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="101">Description of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="none_ok" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="102">Whether no  is a valid value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="103">Flags for the property specified.</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_int32_array"
              c:identifier="gimp_param_spec_int32_array"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparamspecs.c"
           line="664">Creates a new #GimpParamSpecInt32Array specifying a
%GIMP_TYPE_INT32_ARRAY property.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="libgimpbase/gimpparamspecs.h" line="265"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparamspecs.c"
             line="676">The newly created #GimpParamSpecInt32Array.</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="666">Canonical name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="667">Nick name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="668">Description of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="669">Flags for the property specified.</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_item"
              c:identifier="gimp_param_spec_item"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimpparamspecs-body.c"
           line="204">Creates a new #GimpParamSpecItem specifying a
[type@Item] property.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="libgimp/gimpparamspecs.h" line="84"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpparamspecs-body.c"
             line="217">The newly created #GimpParamSpecItem.</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="206">Canonical name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="207">Nick name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="208">Description of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="none_ok" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="209">Whether no  is a valid value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="210">Flags for the property specified.</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_layer"
              c:identifier="gimp_param_spec_layer"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimpparamspecs-body.c"
           line="364">Creates a new #GimpParamSpecLayer specifying a
[type@Layer] property.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="libgimp/gimpparamspecs.h" line="138"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpparamspecs-body.c"
             line="377">The newly created #GimpParamSpecLayer.</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="366">Canonical name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="367">Nick name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="368">Description of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="none_ok" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="369">Whether no  is a valid value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="370">Flags for the property specified.</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_layer_mask"
              c:identifier="gimp_param_spec_layer_mask"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimpparamspecs-body.c"
           line="684">Creates a new #GimpParamSpecLayerMask specifying a
[type@LayerMask] property.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="libgimp/gimpparamspecs.h" line="246"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpparamspecs-body.c"
             line="697">The newly created #GimpParamSpecLayerMask.</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="686">Canonical name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="687">Nick name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="688">Description of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="none_ok" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="689">Whether no  is a valid value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="690">Flags for the property specified.</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_matrix2"
              c:identifier="gimp_param_spec_matrix2"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimpmath/gimpmatrix.c"
           line="165">Creates a param spec to hold a #GimpMatrix2 value.
See g_param_spec_internal() for more information.</doc>
      <source-position filename="libgimpmath/gimpmatrix.h" line="49"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmatrix.c"
             line="176">a newly allocated #GParamSpec instance</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpmatrix.c"
               line="167">Canonical name of the param</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpmatrix.c"
               line="168">Nickname of the param</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpmatrix.c"
               line="169">Brief description of param.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="default_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpmatrix.c"
               line="170">Value to use if none is assigned.</doc>
          <type name="Matrix2" c:type="const GimpMatrix2*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpmatrix.c"
               line="171">a combination of #GParamFlags</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_matrix3"
              c:identifier="gimp_param_spec_matrix3"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimpmath/gimpmatrix.c"
           line="428">Creates a param spec to hold a #GimpMatrix3 value.
See g_param_spec_internal() for more information.</doc>
      <source-position filename="libgimpmath/gimpmatrix.h" line="85"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpmatrix.c"
             line="439">a newly allocated #GParamSpec instance</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpmatrix.c"
               line="430">Canonical name of the param</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpmatrix.c"
               line="431">Nickname of the param</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpmatrix.c"
               line="432">Brief description of param.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="default_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpmatrix.c"
               line="433">Value to use if none is assigned.</doc>
          <type name="Matrix3" c:type="const GimpMatrix3*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpmatrix.c"
               line="434">a combination of #GParamFlags</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_memsize"
              c:identifier="gimp_param_spec_memsize"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpmemsize.c"
           line="236">Creates a param spec to hold a memory size value.
See g_param_spec_internal() for more information.</doc>
      <source-position filename="libgimpbase/gimpmemsize.h" line="54"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpmemsize.c"
             line="249">a newly allocated #GParamSpec instance</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpmemsize.c"
               line="238">Canonical name of the param</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpmemsize.c"
               line="239">Nickname of the param</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpmemsize.c"
               line="240">Brief description of param.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="minimum" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpmemsize.c"
               line="241">Smallest allowed value of the parameter.</doc>
          <type name="guint64" c:type="guint64"/>
        </parameter>
        <parameter name="maximum" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpmemsize.c"
               line="242">Largest allowed value of the parameter.</doc>
          <type name="guint64" c:type="guint64"/>
        </parameter>
        <parameter name="default_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpmemsize.c"
               line="243">Value to use if none is assigned.</doc>
          <type name="guint64" c:type="guint64"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpmemsize.c"
               line="244">a combination of #GParamFlags</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_object_array"
              c:identifier="gimp_param_spec_object_array"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparamspecs.c"
           line="1244">Creates a new #GimpParamSpecObjectArray specifying a
[type@ObjectArray] property.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="libgimpbase/gimpparamspecs.h" line="429"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparamspecs.c"
             line="1257">The newly created #GimpParamSpecObjectArray.</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="1246">Canonical name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="1247">Nick name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="1248">Description of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="object_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="1249">GType of the array's elements.</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="1250">Flags for the property specified.</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_object_duplicate"
              c:identifier="gimp_param_spec_object_duplicate"
              moved-to="ParamSpecObject.duplicate">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparamspecs.c"
           line="367">This function duplicates @pspec appropriately, depending on the
accurate spec type.</doc>
      <source-position filename="libgimpbase/gimpparamspecs.h" line="180"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparamspecs.c"
             line="374">a newly created param spec.</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="pspec" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="369">a [struct@Gimp.ParamSpecObject].</doc>
          <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_object_get_default"
              c:identifier="gimp_param_spec_object_get_default"
              moved-to="ParamSpecObject.get_default">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparamspecs.c"
           line="305">Get the default object value of the param spec.

If the @pspec has been registered with a specific default (which can
be verified with [func@Gimp.ParamSpecObject.has_default]), it will be
returned, though some specific subtypes may support returning dynamic
default (e.g. based on context).</doc>
      <source-position filename="libgimpbase/gimpparamspecs.h" line="175"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparamspecs.c"
             line="316">the default value.</doc>
        <type name="GObject.Object" c:type="GObject*"/>
      </return-value>
      <parameters>
        <parameter name="pspec" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="307">a #GObject #GParamSpec</doc>
          <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_object_has_default"
              c:identifier="gimp_param_spec_object_has_default"
              moved-to="ParamSpecObject.has_default">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparamspecs.c"
           line="348">This function tells whether a default was set, typically with
[func@Gimp.ParamSpecObject.set_default] or any other way. It
does not guarantee that the default is an actual object (it may be
%NULL if valid as a default).</doc>
      <source-position filename="libgimpbase/gimpparamspecs.h" line="178"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparamspecs.c"
             line="357">whether a default value was set.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pspec" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="350">a #GObject #GParamSpec</doc>
          <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_object_set_default"
              c:identifier="gimp_param_spec_object_set_default"
              moved-to="ParamSpecObject.set_default">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparamspecs.c"
           line="326">Set the default object value of the param spec. This will switch the
`has_default` flag so that [func@Gimp.ParamSpecObject.has_default]
will now return %TRUE.

A %NULL @default_value still counts as a default (unless the specific
@pspec does not allow %NULL as a default).</doc>
      <source-position filename="libgimpbase/gimpparamspecs.h" line="176"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pspec" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="328">a #GObject #GParamSpec</doc>
          <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
        </parameter>
        <parameter name="default_value"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="329">a default value.</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_palette"
              c:identifier="gimp_param_spec_palette"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimpparamspecs-body.c"
           line="1485">Creates a new #GimpParamSpecPalette specifying a
[type@Palette] property. See also [func@Gimp.param_spec_resource].</doc>
      <source-position filename="libgimp/gimpparamspecs.h" line="475"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpparamspecs-body.c"
             line="1498">The newly created #GimpParamSpecPalette.</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1487">Canonical name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1488">Nick name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1489">Description of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="none_ok" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1490">Whether %NULL is a valid value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="default_value"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1491">Default palette.</doc>
          <type name="Palette" c:type="GimpPalette*"/>
        </parameter>
        <parameter name="default_to_context" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1492">Whether the context is the context's palette.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1493">Flags for the property specified.</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_parasite"
              c:identifier="gimp_param_spec_parasite"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparasite.c"
           line="158">Creates a new #GimpParamSpecParasite specifying a
[type@Parasite] property.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="libgimpbase/gimpparasite.h" line="55"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparasite.c"
             line="170">The newly created #GimpParamSpecParasite.</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparasite.c"
               line="160">Canonical name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparasite.c"
               line="161">Nick name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparasite.c"
               line="162">Description of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparasite.c"
               line="163">Flags for the property specified.</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_path"
              c:identifier="gimp_param_spec_path"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimpparamspecs-body.c"
           line="844">Creates a new #GimpParamSpecPath specifying a
[type@Path] property.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="libgimp/gimpparamspecs.h" line="300"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpparamspecs-body.c"
             line="857">The newly created #GimpParamSpecPath.</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="846">Canonical name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="847">Nick name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="848">Description of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="none_ok" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="849">Whether no is a valid value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="850">Flags for the property specified.</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_pattern"
              c:identifier="gimp_param_spec_pattern"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimpparamspecs-body.c"
           line="1335">Creates a new #GimpParamSpecPattern specifying a
[type@Pattern] property. See also [func@Gimp.param_spec_resource].</doc>
      <source-position filename="libgimp/gimpparamspecs.h" line="417"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpparamspecs-body.c"
             line="1348">The newly created #GimpParamSpecPattern.</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1337">Canonical name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1338">Nick name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1339">Description of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="none_ok" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1340">Whether %NULL is a valid value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="default_value"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1341">Default pattern.</doc>
          <type name="Pattern" c:type="GimpPattern*"/>
        </parameter>
        <parameter name="default_to_context" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1342">Whether the context is the context's pattern.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1343">Flags for the property specified.</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_resource"
              c:identifier="gimp_param_spec_resource"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimpparamspecs-body.c"
           line="1138">Creates a new #GimpParamSpecResource specifying a [type@Resource] property.
See [func@GObject.ParamSpec.internal] for details on property names.

@default_to_context cannot be %TRUE for a @resource_type of value
[class@Gimp.Resource], but only for specific subtypes. If it is
%TRUE, @default_value must be %NULL. Instead of a fixed default,
whatever is the context's resource for the given type at run time
will be used as dynamic default.</doc>
      <source-position filename="libgimp/gimpparamspecs.h" line="358"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpparamspecs-body.c"
             line="1159">The newly created #GimpParamSpecResource.</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1140">Canonical name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1141">Nick name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1142">Description of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="resource_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1143">a %GType, subtype of [class@Gimp.Resource].</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="none_ok" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1144">Whether %NULL is a valid value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="default_value"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1145">Default resource.</doc>
          <type name="Resource" c:type="GimpResource*"/>
        </parameter>
        <parameter name="default_to_context" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1146">Whether the context is the context's resource
                     for the given @resource_type.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="1148">Flags for the property specified.</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_selection"
              c:identifier="gimp_param_spec_selection"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimpparamspecs-body.c"
           line="764">Creates a new #GimpParamSpecSelection specifying a
[type@Selection] property.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="libgimp/gimpparamspecs.h" line="273"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpparamspecs-body.c"
             line="777">The newly created #GimpParamSpecSelection.</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="766">Canonical name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="767">Nick name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="768">Description of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="none_ok" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="769">Whether no  is a valid value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="770">Flags for the property specified.</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_text_layer"
              c:identifier="gimp_param_spec_text_layer"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimp/gimpparamspecs-body.c"
           line="444">Creates a new #GimpParamSpecTextLayer specifying a
[type@TextLayer] property.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="libgimp/gimpparamspecs.h" line="165"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpparamspecs-body.c"
             line="457">The newly created #GimpParamSpecTextLayer.</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="446">Canonical name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="447">Nick name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="448">Description of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="none_ok" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="449">Whether no  is a valid value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpparamspecs-body.c"
               line="450">Flags for the property specified.</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_unit"
              c:identifier="gimp_param_spec_unit"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpunit.c"
           line="1044">Creates a param spec to hold a units param.
See g_param_spec_internal() for more information.</doc>
      <source-position filename="libgimpbase/gimpunit.h" line="106"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpunit.c"
             line="1057">a newly allocated #GParamSpec instance</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="1046">Canonical name of the param</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="1047">Nickname of the param</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="1048">Brief description of param.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="allow_pixel" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="1049">Whether "pixels" is an allowed unit.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="allow_percent" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="1050">Whether "percent" is an allowed unit.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="default_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="1051">Unit to use if none is assigned.</doc>
          <type name="Unit" c:type="GimpUnit*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="1052">a combination of #GParamFlags</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="param_spec_value_array"
              c:identifier="gimp_param_spec_value_array"
              version="3.0">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpvaluearray.c"
           line="762">Creates a new #GimpParamSpecValueArray specifying a
[type@GObject.ValueArray] property.

See g_param_spec_internal() for details on property names.</doc>
      <source-position filename="libgimpbase/gimpvaluearray.h" line="107"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpvaluearray.c"
             line="776">The newly created #GimpParamSpecValueArray.</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpvaluearray.c"
               line="764">Canonical name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpvaluearray.c"
               line="765">Nick name of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpvaluearray.c"
               line="766">Description of the property specified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="element_spec"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpvaluearray.c"
               line="767">#GParamSpec the contained array's elements
               have comply to, or %NULL.</doc>
          <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpvaluearray.c"
               line="769">Flags for the property specified.</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="patterns_close_popup"
              c:identifier="gimp_patterns_close_popup">
      <doc xml:space="preserve"
           filename="libgimp/gimppatternselect_pdb.c"
           line="82">Close the pattern selection dialog.

Closes an open pattern selection dialog.</doc>
      <source-position filename="libgimp/gimppatternselect_pdb.h" line="39"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimppatternselect_pdb.c"
             line="90">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pattern_callback" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppatternselect_pdb.c"
               line="84">The name of the callback registered for this pop-up.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="patterns_get_list" c:identifier="gimp_patterns_get_list">
      <doc xml:space="preserve"
           filename="libgimp/gimppatterns_pdb.c"
           line="71">Retrieve a complete listing of the available patterns.

This procedure returns a complete listing of available GIMP
patterns. Each name returned can be used as input to the
gimp_context_set_pattern().</doc>
      <source-position filename="libgimp/gimppatterns_pdb.h" line="36"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimppatterns_pdb.c"
             line="81">
         The list of pattern names.
         The returned value must be freed with g_strfreev().</doc>
        <array c:type="gchar**">
          <type name="utf8"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="filter" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppatterns_pdb.c"
               line="73">An optional regular expression used to filter the list.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="patterns_popup" c:identifier="gimp_patterns_popup">
      <doc xml:space="preserve"
           filename="libgimp/gimppatternselect_pdb.c"
           line="40">Invokes the Gimp pattern selection.

Opens the pattern selection dialog.</doc>
      <source-position filename="libgimp/gimppatternselect_pdb.h" line="35"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimppatternselect_pdb.c"
             line="51">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pattern_callback" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppatternselect_pdb.c"
               line="42">The callback PDB proc to call when the user chooses a pattern.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="popup_title" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppatternselect_pdb.c"
               line="43">Title of the pattern selection dialog.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="initial_pattern" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppatternselect_pdb.c"
               line="44">The pattern to set as the initial choice.</doc>
          <type name="Pattern" c:type="GimpPattern*"/>
        </parameter>
        <parameter name="parent_window" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppatternselect_pdb.c"
               line="45">An optional parent window handle for the popup to be set transient to.</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </parameter>
      </parameters>
    </function>
    <function name="patterns_refresh" c:identifier="gimp_patterns_refresh">
      <doc xml:space="preserve"
           filename="libgimp/gimppatterns_pdb.c"
           line="39">Refresh current patterns. This function always succeeds.

This procedure retrieves all patterns currently in the user's
pattern path and updates all pattern dialogs accordingly.</doc>
      <source-position filename="libgimp/gimppatterns_pdb.h" line="35"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimppatterns_pdb.c"
             line="47">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="patterns_set_popup" c:identifier="gimp_patterns_set_popup">
      <doc xml:space="preserve"
           filename="libgimp/gimppatternselect_pdb.c"
           line="115">Sets the current pattern in a pattern selection dialog.

Sets the current pattern in a pattern selection dialog.</doc>
      <source-position filename="libgimp/gimppatternselect_pdb.h" line="40"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimppatternselect_pdb.c"
             line="124">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pattern_callback" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppatternselect_pdb.c"
               line="117">The name of the callback registered for this pop-up.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="pattern" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppatternselect_pdb.c"
               line="118">The pattern to set as selected.</doc>
          <type name="Pattern" c:type="GimpPattern*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pencil" c:identifier="gimp_pencil">
      <doc xml:space="preserve"
           filename="libgimp/gimppainttools_pdb.c"
           line="731">Paint in the current brush without sub-pixel sampling.

This tool is the standard pencil. It draws linearly interpolated
lines through the specified stroke coordinates. It operates on the
specified drawable in the foreground color with the active brush.
The brush mask is treated as though it contains only black and white
values. Any value below half is treated as black; any above half, as
white.</doc>
      <source-position filename="libgimp/gimppainttools_pdb.h" line="95"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimppainttools_pdb.c"
             line="746">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="drawable" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="733">The affected drawable.</doc>
          <type name="Drawable" c:type="GimpDrawable*"/>
        </parameter>
        <parameter name="num_strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="734">Number of stroke control points (count each coordinate as 2 points).</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="735">Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y, ..., sn.x, sn.y }.</doc>
          <array length="1" zero-terminated="0" c:type="const gdouble*">
            <type name="gdouble"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="pixbuf_create_buffer"
              c:identifier="gimp_pixbuf_create_buffer"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimppixbuf.c"
           line="64">Returns a #GeglBuffer that's either backed by the @pixbuf's pixels,
or a copy of them. This function tries to not copy the @pixbuf's
pixels. If the pixbuf's rowstride is a multiple of its bpp, a
simple reference to the @pixbuf's pixels is made and @pixbuf will
be kept around for as long as the buffer exists; otherwise the
pixels are copied.</doc>
      <source-position filename="libgimpcolor/gimppixbuf.h" line="35"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimppixbuf.c"
             line="75">a new #GeglBuffer.</doc>
        <type name="Gegl.Buffer" c:type="GeglBuffer*"/>
      </return-value>
      <parameters>
        <parameter name="pixbuf" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimppixbuf.c"
               line="66">a #GdkPixbuf</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pixbuf_get_format"
              c:identifier="gimp_pixbuf_get_format"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimppixbuf.c"
           line="40">Returns the Babl format that corresponds to the @pixbuf's pixel format.</doc>
      <source-position filename="libgimpcolor/gimppixbuf.h" line="34"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimppixbuf.c"
             line="46">the @pixbuf's pixel format</doc>
        <type name="Babl.Object" c:type="const Babl*"/>
      </return-value>
      <parameters>
        <parameter name="pixbuf" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimppixbuf.c"
               line="42">a #GdkPixbuf</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pixbuf_get_icc_profile"
              c:identifier="gimp_pixbuf_get_icc_profile"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimppixbuf.c"
           line="118">Returns the ICC profile attached to the @pixbuf, or %NULL if there
is none.</doc>
      <source-position filename="libgimpcolor/gimppixbuf.h" line="37"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="libgimpcolor/gimppixbuf.c"
             line="126">The ICC profile data, or %NULL.
         The value should be freed with g_free().</doc>
        <array length="1" zero-terminated="0" c:type="guint8*">
          <type name="guint8" c:type="guint8"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="pixbuf" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimppixbuf.c"
               line="120">a #GdkPixbuf</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
        <parameter name="length"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimppixbuf.c"
               line="121">return location for the ICC profile's length</doc>
          <type name="gsize" c:type="gsize*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pixels_to_units"
              c:identifier="gimp_pixels_to_units"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpunit.c"
           line="847">Converts a @value specified in pixels to @unit.</doc>
      <source-position filename="libgimpbase/gimpunit.h" line="73"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpunit.c"
             line="855">@pixels converted to units.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="pixels" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="849">value in pixels</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="unit" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="850">unit to convert to</doc>
          <type name="Unit" c:type="GimpUnit*"/>
        </parameter>
        <parameter name="resolution" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="851">resolution in DPI</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="pixpipe_params_build"
              c:identifier="gimp_pixpipe_params_build">
      <source-position filename="libgimpbase/gimpparasiteio.h" line="80"/>
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="params" transfer-ownership="none">
          <type name="PixPipeParams" c:type="GimpPixPipeParams*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pixpipe_params_free"
              c:identifier="gimp_pixpipe_params_free">
      <source-position filename="libgimpbase/gimpparasiteio.h" line="83"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="params" transfer-ownership="none">
          <type name="PixPipeParams" c:type="GimpPixPipeParams*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pixpipe_params_init"
              c:identifier="gimp_pixpipe_params_init">
      <source-position filename="libgimpbase/gimpparasiteio.h" line="73"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="params" transfer-ownership="none">
          <type name="PixPipeParams" c:type="GimpPixPipeParams*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pixpipe_params_parse"
              c:identifier="gimp_pixpipe_params_parse">
      <source-position filename="libgimpbase/gimpparasiteio.h" line="76"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="parameters" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="params" transfer-ownership="none">
          <type name="PixPipeParams" c:type="GimpPixPipeParams*"/>
        </parameter>
      </parameters>
    </function>
    <function name="progress_cancel"
              c:identifier="gimp_progress_cancel"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimp/gimpprogress_pdb.c"
           line="334">Cancels a running progress.

This function cancels the currently running progress.</doc>
      <source-position filename="libgimp/gimpprogress_pdb.h" line="44"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpprogress_pdb.c"
             line="342">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="progress_callback" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprogress_pdb.c"
               line="336">The name of the callback registered for this progress.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="progress_end"
              c:identifier="gimp_progress_end"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimp/gimpprogress_pdb.c"
           line="184">Ends the progress bar for the current plug-in.

Ends the progress display for the current plug-in. Most plug-ins
don't need to call this, they just exit when the work is done. It is
only valid to call this procedure from a plug-in.</doc>
      <source-position filename="libgimp/gimpprogress_pdb.h" line="40"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpprogress_pdb.c"
             line="193">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="progress_get_window_handle"
              c:identifier="gimp_progress_get_window_handle"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimp/gimpprogress_pdb.c"
           line="219">Returns the native handle of the toplevel window this plug-in's
progress is or would be displayed in.

This function returns the native handle allowing to identify the
toplevel window this plug-in's progress is displayed in. It should
still work even if the progress bar has not been initialized yet,
unless the plug-in wasn't called from a GUI.
This handle can be of various types (integer, string, etc.)
depending on the platform you are running on which is why it returns
a GBytes. There are usually no reasons to call this directly.</doc>
      <source-position filename="libgimp/gimpprogress_pdb.h" line="41"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimpprogress_pdb.c"
             line="233">The progress bar's toplevel window's handle.</doc>
        <type name="GLib.Bytes" c:type="GBytes*"/>
      </return-value>
    </function>
    <function name="progress_init" c:identifier="gimp_progress_init">
      <doc xml:space="preserve"
           filename="libgimp/gimpprogress.c"
           line="171">Initializes the progress bar for the current plug-in.

Initializes the progress bar for the current plug-in. It is only
valid to call this procedure from a plug-in.</doc>
      <source-position filename="libgimp/gimpprogress.h" line="132"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpprogress.c"
             line="180">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprogress.c"
               line="173">Message to use in the progress dialog.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="progress_init_printf"
              c:identifier="gimp_progress_init_printf"
              version="2.4"
              introspectable="0">
      <doc xml:space="preserve"
           filename="libgimp/gimpprogress.c"
           line="195">Initializes the progress bar for the current plug-in.

Initializes the progress bar for the current plug-in. It is only
valid to call this procedure from a plug-in.</doc>
      <source-position filename="libgimp/gimpprogress.h" line="133"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpprogress.c"
             line="205">%TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprogress.c"
               line="197">a standard printf() format string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprogress.c"
               line="198">arguments for @format</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="progress_install_vtable"
              c:identifier="gimp_progress_install_vtable"
              version="2.4">
      <source-position filename="libgimp/gimpprogress.h" line="127"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpprogress.c"
             line="66">the name of the temporary procedure that's been installed</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="vtable" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprogress.c"
               line="61">a pointer to a @GimpProgressVtable.</doc>
          <type name="ProgressVtable" c:type="const GimpProgressVtable*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimp/gimpprogress.c"
               line="62">a pointer that is passed as user_data to all vtable
                    functions.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="user_data_destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async">
          <doc xml:space="preserve"
               filename="libgimp/gimpprogress.c"
               line="64">destroy function for @user_data, or %NULL.</doc>
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
      </parameters>
    </function>
    <function name="progress_pulse"
              c:identifier="gimp_progress_pulse"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimp/gimpprogress_pdb.c"
           line="110">Pulses the progress bar for the current plug-in.

Updates the progress bar for the current plug-in. It is only valid
to call this procedure from a plug-in. Use this function instead of
gimp_progress_update() if you cannot tell how much progress has been
made. This usually causes the the progress bar to enter \"activity
mode\", where a block bounces back and forth.</doc>
      <source-position filename="libgimp/gimpprogress_pdb.h" line="38"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpprogress_pdb.c"
             line="121">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="progress_set_text"
              c:identifier="gimp_progress_set_text"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimp/gimpprogress_pdb.c"
           line="147">Changes the text in the progress bar for the current plug-in.

This function changes the text in the progress bar for the current
plug-in. Unlike gimp_progress_init() it does not change the
displayed value.</doc>
      <source-position filename="libgimp/gimpprogress_pdb.h" line="39"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpprogress_pdb.c"
             line="157">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprogress_pdb.c"
               line="149">Message to use in the progress dialog.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="progress_set_text_printf"
              c:identifier="gimp_progress_set_text_printf"
              version="2.4"
              introspectable="0">
      <doc xml:space="preserve"
           filename="libgimp/gimpprogress.c"
           line="230">Changes the text in the progress bar for the current plug-in.

This function changes the text in the progress bar for the current
plug-in. Unlike gimp_progress_init() it does not change the
displayed value.</doc>
      <source-position filename="libgimp/gimpprogress.h" line="136"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpprogress.c"
             line="241">%TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprogress.c"
               line="232">a standard printf() format string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprogress.c"
               line="233">arguments for @format</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="progress_uninstall"
              c:identifier="gimp_progress_uninstall"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimp/gimpprogress.c"
           line="151">Uninstalls a temporary progress procedure that was installed using
gimp_progress_install().</doc>
      <source-position filename="libgimp/gimpprogress.h" line="130"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="progress_callback" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprogress.c"
               line="153">the name of the temporary procedure to uninstall</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="progress_update" c:identifier="gimp_progress_update">
      <doc xml:space="preserve"
           filename="libgimp/gimpprogress.c"
           line="266">Updates the progress bar for the current plug-in.

The library will handle over-updating by possibly dropping silently
some updates when they happen too close next to each other (either
time-wise or step-wise).
The caller does not have to take care of this aspect of progression
and can focus on computing relevant progression steps.</doc>
      <source-position filename="libgimp/gimpprogress.h" line="139"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimpprogress.c"
             line="279">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="percentage" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimpprogress.c"
               line="268">Percentage of progress completed (in the range from 0.0
             to 1.0).</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="quit" c:identifier="gimp_quit">
      <doc xml:space="preserve"
           filename="libgimp/gimp.c"
           line="568">Forcefully causes the GIMP library to exit and close down its
connection to main gimp application. This function never returns.</doc>
      <source-position filename="libgimp/gimp.h" line="174"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="range_estimate_settings"
              c:identifier="gimp_range_estimate_settings">
      <doc xml:space="preserve"
           filename="libgimpbase/gimputils.c"
           line="1566">This function proposes reasonable settings for increments and display
digits. These can be used for instance on #GtkRange or other widgets
using a #GtkAdjustment typically.
Note that it will never return @digits with value 0. If you know that
your input needs to display integer values, there is no need to set
@digits.

There is no universal answer to the best increments and number of
decimal places. It often depends on context of what the value is
meant to represent. This function only tries to provide sensible
generic values which can be used when it doesn't matter too much or
for generated GUI for instance. If you know exactly how you want to
show and interact with a given range, you don't have to use this
function.</doc>
      <source-position filename="libgimpbase/gimputils.h" line="85"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="lower" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="1568">the lower value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="upper" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="1569">the higher value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="step"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="1570">the proposed step increment.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="page"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="1571">the proposed page increment.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="digits"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="1572">the proposed decimal places precision.</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rectangle_intersect"
              c:identifier="gimp_rectangle_intersect"
              version="2.4">
      <doc xml:space="preserve"
           filename="libgimpbase/gimprectangle.c"
           line="37">Calculates the intersection of two rectangles.</doc>
      <source-position filename="libgimpbase/gimprectangle.h" line="31"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimprectangle.c"
             line="58">%TRUE if the intersection is non-empty, %FALSE otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="x1" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimprectangle.c"
               line="39">origin of first rectangle</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y1" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimprectangle.c"
               line="40">origin of first rectangle</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="width1" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimprectangle.c"
               line="41">width of first rectangle</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="height1" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimprectangle.c"
               line="42">height of first rectangle</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="x2" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimprectangle.c"
               line="43">origin of second rectangle</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y2" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimprectangle.c"
               line="44">origin of second rectangle</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="width2" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimprectangle.c"
               line="45">width of second rectangle</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="height2" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimprectangle.c"
               line="46">height of second rectangle</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="dest_x"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpbase/gimprectangle.c"
               line="47">return location for origin of intersection,
                           or %NULL</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="dest_y"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpbase/gimprectangle.c"
               line="49">return location for origin of intersection,
                           or %NULL</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="dest_width"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpbase/gimprectangle.c"
               line="51">return location for width of intersection,
                               or %NULL</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="dest_height"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpbase/gimprectangle.c"
               line="53">return location for height of intersection,
                                or %NULL</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rectangle_union"
              c:identifier="gimp_rectangle_union"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimpbase/gimprectangle.c"
           line="92">Calculates the union of two rectangles.</doc>
      <source-position filename="libgimpbase/gimprectangle.h" line="44"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="x1" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimprectangle.c"
               line="94">origin of first rectangle</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y1" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimprectangle.c"
               line="95">origin of first rectangle</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="width1" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimprectangle.c"
               line="96">width of first rectangle</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="height1" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimprectangle.c"
               line="97">height of first rectangle</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="x2" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimprectangle.c"
               line="98">origin of second rectangle</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y2" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimprectangle.c"
               line="99">origin of second rectangle</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="width2" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimprectangle.c"
               line="100">width of second rectangle</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="height2" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimprectangle.c"
               line="101">height of second rectangle</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="dest_x"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpbase/gimprectangle.c"
               line="102">return location for origin of union, or %NULL</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="dest_y"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpbase/gimprectangle.c"
               line="103">return location for origin of union, or %NULL</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="dest_width"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpbase/gimprectangle.c"
               line="104">return location for width of union, or %NULL</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="dest_height"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpbase/gimprectangle.c"
               line="105">return location for height of union, or %NULL</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rgba_distance" c:identifier="gimp_rgba_distance">
      <source-position filename="libgimpcolor/gimprgb.h" line="102"/>
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="rgba1" transfer-ownership="none">
          <type name="RGB" c:type="const GimpRGB*"/>
        </parameter>
        <parameter name="rgba2" transfer-ownership="none">
          <type name="RGB" c:type="const GimpRGB*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rgba_get_uchar" c:identifier="gimp_rgba_get_uchar">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimprgb.c"
           line="300">Gets the 8bit red, green, blue and alpha components of @rgba.</doc>
      <source-position filename="libgimpcolor/gimprgb.h" line="96"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="rgba" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimprgb.c"
               line="302">a #GimpRGB struct</doc>
          <type name="RGB" c:type="const GimpRGB*"/>
        </parameter>
        <parameter name="red"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimprgb.c"
               line="303">Location for the red component</doc>
          <type name="guint8" c:type="guchar*"/>
        </parameter>
        <parameter name="green"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimprgb.c"
               line="304">Location for the green component</doc>
          <type name="guint8" c:type="guchar*"/>
        </parameter>
        <parameter name="blue"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimprgb.c"
               line="305">Location for the blue component</doc>
          <type name="guint8" c:type="guchar*"/>
        </parameter>
        <parameter name="alpha"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimprgb.c"
               line="306">Location for the alpha component</doc>
          <type name="guint8" c:type="guchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rgba_set" c:identifier="gimp_rgba_set">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimprgb.c"
           line="247">Sets the red, green, blue and alpha components of @rgb. The values
should be between 0.0 and 1.0 but there is no check to enforce this
and the values are set exactly as they are passed in.</doc>
      <source-position filename="libgimpcolor/gimprgb.h" line="85"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="rgba" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimprgb.c"
               line="249">a #GimpRGB struct</doc>
          <type name="RGB" c:type="GimpRGB*"/>
        </parameter>
        <parameter name="red" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimprgb.c"
               line="250">the red component</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="green" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimprgb.c"
               line="251">the green component</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="blue" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimprgb.c"
               line="252">the blue component</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="alpha" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimprgb.c"
               line="253">the alpha component</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="rgba_set_uchar" c:identifier="gimp_rgba_set_uchar">
      <doc xml:space="preserve"
           filename="libgimpcolor/gimprgb.c"
           line="274">Sets the red, green, blue and alpha components of @rgba from 8bit
values (0 to 255).</doc>
      <source-position filename="libgimpcolor/gimprgb.h" line="91"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="rgba" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimprgb.c"
               line="276">a #GimpRGB struct</doc>
          <type name="RGB" c:type="GimpRGB*"/>
        </parameter>
        <parameter name="red" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimprgb.c"
               line="277">the red component</doc>
          <type name="guint8" c:type="guchar"/>
        </parameter>
        <parameter name="green" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimprgb.c"
               line="278">the green component</doc>
          <type name="guint8" c:type="guchar"/>
        </parameter>
        <parameter name="blue" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimprgb.c"
               line="279">the blue component</doc>
          <type name="guint8" c:type="guchar"/>
        </parameter>
        <parameter name="alpha" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpcolor/gimprgb.c"
               line="280">the alpha component</doc>
          <type name="guint8" c:type="guchar"/>
        </parameter>
      </parameters>
    </function>
    <function name="show_help_button"
              c:identifier="gimp_show_help_button"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimp/gimp.c"
           line="617">Returns whether or not GimpDialog should automatically add a help
button if help_func and help_id are given.

This is a constant value given at plug-in configuration time.</doc>
      <source-position filename="libgimp/gimp.h" line="180"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimp.c"
             line="625">the show_help_button boolean</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="signal_private"
              c:identifier="gimp_signal_private"
              introspectable="0">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpsignal.c"
           line="42">This function furnishes a workalike for signal(2) but
which internally invokes sigaction(2) after certain
sa_flags are set; these primarily to ensure restarting
of interrupted system calls. See sigaction(2)  It is a
aid to transition and not new development: that effort
should employ sigaction directly. [gosgood 18.04.2000]

Cause @handler to be run when @signum is delivered.  We
use sigaction(2) rather than signal(2) so that we can control the
signal handler's environment completely via @flags: some signal(2)
implementations differ in their semantics, so we need to nail down
exactly what we want. [austin 06.04.2000]</doc>
      <source-position filename="libgimpbase/gimpsignal.h" line="41"/>
      <return-value>
        <doc xml:space="preserve"
             filename="libgimpbase/gimpsignal.c"
             line="64">A reference to the signal handling function which was
         active before the call to gimp_signal_private().</doc>
        <type name="SignalHandlerFunc" c:type="GimpSignalHandlerFunc"/>
      </return-value>
      <parameters>
        <parameter name="signum" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpsignal.c"
               line="44">Selects signal to be handled see man 5 signal (or man 7 signal)</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="handler" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpsignal.c"
               line="45">Handler that maps to signum. Invoked by O/S.
          Handler gets signal that caused invocation. Corresponds
          to the @sa_handler field of the @sigaction struct.</doc>
          <type name="SignalHandlerFunc" c:type="GimpSignalHandlerFunc"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpsignal.c"
               line="48">Preferences. OR'ed SA_&amp;lt;xxx&amp;gt;. See man sigaction. Corresponds
        to the @sa_flags field of the @sigaction struct.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="smudge" c:identifier="gimp_smudge">
      <doc xml:space="preserve"
           filename="libgimp/gimppainttools_pdb.c"
           line="776">Smudge image with varying pressure.

This tool simulates a smudge using the current brush. High pressure
results in a greater smudge of paint while low pressure results in a
lesser smudge.</doc>
      <source-position filename="libgimp/gimppainttools_pdb.h" line="98"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimppainttools_pdb.c"
             line="789">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="drawable" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="778">The affected drawable.</doc>
          <type name="Drawable" c:type="GimpDrawable*"/>
        </parameter>
        <parameter name="pressure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="779">The pressure of the smudge strokes.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="num_strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="780">Number of stroke control points (count each coordinate as 2 points).</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="781">Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y, ..., sn.x, sn.y }.</doc>
          <array length="2" zero-terminated="0" c:type="const gdouble*">
            <type name="gdouble"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="smudge_default" c:identifier="gimp_smudge_default">
      <doc xml:space="preserve"
           filename="libgimp/gimppainttools_pdb.c"
           line="821">Smudge image with varying pressure.

This tool simulates a smudge using the current brush. It behaves
exactly the same as gimp_smudge() except that the pressure value is
taken from the smudge tool options or the options default if the
tools option dialog has not been activated.</doc>
      <source-position filename="libgimp/gimppainttools_pdb.h" line="102"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimppainttools_pdb.c"
             line="834">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="drawable" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="823">The affected drawable.</doc>
          <type name="Drawable" c:type="GimpDrawable*"/>
        </parameter>
        <parameter name="num_strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="824">Number of stroke control points (count each coordinate as 2 points).</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="strokes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimppainttools_pdb.c"
               line="825">Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y, ..., sn.x, sn.y }.</doc>
          <array length="1" zero-terminated="0" c:type="const gdouble*">
            <type name="gdouble"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="stack_trace_available"
              c:identifier="gimp_stack_trace_available"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimpbase/gimputils.c"
           line="1133">Returns %TRUE if we have dependencies to generate backtraces. If
@optimal is %TRUE, the function will return %TRUE only when we
are able to generate optimal traces (i.e. with GDB or LLDB);
otherwise we return %TRUE even if only backtrace() API is available.

On Win32, we return TRUE if Dr. Mingw is built-in, FALSE otherwise.

Note: this function is not crash-safe, i.e. you should not try to use
it in a callback when the program is already crashing. In such a
case, call gimp_stack_trace_print() or gimp_stack_trace_query()
directly.</doc>
      <source-position filename="libgimpbase/gimputils.h" line="79"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="optimal" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="1135">whether we get optimal traces.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="stack_trace_print"
              c:identifier="gimp_stack_trace_print"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimpbase/gimputils.c"
           line="1188">Attempts to generate a stack trace at current code position in
@prog_name. @prog_name is mostly a helper and can be set to NULL.
Nevertheless if set, it has to be the current program name (argv[0]).
This function is not meant to generate stack trace for third-party
programs, and will attach the current process id only.
Internally, this function uses `gdb` or `lldb` if they are available,
or the stacktrace() API on platforms where it is available. It always
fails on Win32.

The stack trace, once generated, will either be printed to @stream or
returned as a newly allocated string in @trace, if not %NULL.

In some error cases (e.g. segmentation fault), trying to allocate
more memory will trigger more segmentation faults and therefore loop
our error handling (which is just wrong). Therefore printing to a
file description is an implementation without any memory allocation.</doc>
      <source-position filename="libgimpbase/gimputils.h" line="80"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimputils.c"
             line="1212">%TRUE if a stack trace could be generated, %FALSE
otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="prog_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="1190">the program to attach to.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="stream"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="1191">a FILE* stream.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="trace"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="1192">location to store a newly allocated string of
                          the trace.</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
      </parameters>
    </function>
    <function name="stack_trace_query"
              c:identifier="gimp_stack_trace_query"
              version="2.10">
      <doc xml:space="preserve"
           filename="libgimpbase/gimputils.c"
           line="1517">This is mostly the same as g_on_error_query() except that we use our
own backtrace function, much more complete.
@prog_name must be the current program name (argv[0]).
It does nothing on Win32.</doc>
      <source-position filename="libgimpbase/gimputils.h" line="83"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="prog_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="1519">the program to attach to.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="strip_uline" c:identifier="gimp_strip_uline">
      <doc xml:space="preserve"
           filename="libgimpbase/gimputils.c"
           line="514">This function returns a copy of @str stripped of underline
characters. This comes in handy when needing to strip mnemonics
from menu paths etc.

In some languages, mnemonics are handled by adding the mnemonic
character in brackets (like "File (_F)"). This function recognizes
this construct and removes the whole bracket construction to get
rid of the mnemonic (see bug 157561).</doc>
      <source-position filename="libgimpbase/gimputils.h" line="43"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpbase/gimputils.c"
             line="527">A (possibly stripped) copy of @str which should be
              freed using g_free() when it is not needed any longer.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="str"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="516">underline infested string (or %NULL)</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sysconf_directory" c:identifier="gimp_sysconf_directory">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpenv.c"
           line="545">Returns the top directory for GIMP config files. If the environment
variable GIMP3_SYSCONFDIR exists, that is used.  It should be an
absolute pathname.  Otherwise, on Unix the compile-time defined
directory is used. On Windows, the installation directory as deduced
from the executable's full filename is used.

In config files such as gimprc, the string ${gimp_sysconf_dir}
expands to this directory.

The returned string is owned by GIMP and must not be modified or
freed. The returned string is in the encoding used for filenames by
GLib, which isn't necessarily UTF-8. (On Windows it always is
UTF-8.).</doc>
      <source-position filename="libgimpbase/gimpenv.h" line="53"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpenv.c"
             line="562">The top directory for GIMP config files.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="sysconf_directory_file"
              c:identifier="gimp_sysconf_directory_file"
              version="2.10"
              introspectable="0">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpenv.c"
           line="852">Returns a #GFile in the sysconf directory, or the sysconf directory
itself if @first_element is %NULL.

See also: gimp_sysconf_directory().</doc>
      <source-position filename="libgimpbase/gimpenv.h" line="66"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpenv.c"
             line="866">
         a new @GFile for the path, Free with g_object_unref().</doc>
        <type name="Gio.File" c:type="GFile*"/>
      </return-value>
      <parameters>
        <parameter name="first_element" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpenv.c"
               line="854">the first element of a path to a file in the
                sysconf directory, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpenv.c"
               line="856">a %NULL terminated list of the remaining elements of the path
      to the file.</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="temp_directory"
              c:identifier="gimp_temp_directory"
              version="2.10.10">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpenv.c"
           line="666">Returns the default top directory for GIMP temporary files. If the
environment variable GIMP3_TEMPDIR exists, that is used.  It
should be an absolute pathname.  Otherwise, a subdirectory of the
directory returned by g_get_tmp_dir() is used.

In config files such as gimprc, the string ${gimp_temp_dir} expands
to this directory.

Note that the actual directories used for GIMP temporary files can
be overridden by the user in the preferences dialog.

The returned string is owned by GIMP and must not be modified or
freed. The returned string is in the encoding used for filenames by
GLib, which isn't necessarily UTF-8. (On Windows it always is
UTF-8.).</doc>
      <source-position filename="libgimpbase/gimpenv.h" line="56"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpenv.c"
             line="687">The default top directory for GIMP temporary files.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="temp_file" c:identifier="gimp_temp_file">
      <doc xml:space="preserve"
           filename="libgimp/gimp_pdb.c"
           line="254">Generates a unique temporary file.

Generates a unique file using the temp path supplied in the user's
gimprc.</doc>
      <source-position filename="libgimp/gimp_pdb.h" line="41"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimp_pdb.c"
             line="263">The new temp file.</doc>
        <type name="Gio.File" c:type="GFile*"/>
      </return-value>
      <parameters>
        <parameter name="extension" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimp_pdb.c"
               line="256">The extension the file will have.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="text_font" c:identifier="gimp_text_font">
      <doc xml:space="preserve"
           filename="libgimp/gimptexttool_pdb.c"
           line="39">Add text at the specified location as a floating selection or a new
layer.

The x and y parameters together control the placement of the new
text by specifying the upper left corner of the text bounding box.
If the specified drawable parameter is valid, the text will be
created as a floating selection attached to the drawable. If the
drawable parameter is not valid (%NULL), the text will appear as a
new layer. Finally, a border can be specified around the final
rendered text. The border is measured in pixels.
The size is always in pixels. If you need to display a font in
points, divide the size in points by 72.0 and multiply it by the
image's vertical resolution.</doc>
      <source-position filename="libgimp/gimptexttool_pdb.h" line="35"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="libgimp/gimptexttool_pdb.c"
             line="65">
         The new text layer or %NULL if no layer was created.</doc>
        <type name="Layer" c:type="GimpLayer*"/>
      </return-value>
      <parameters>
        <parameter name="image" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptexttool_pdb.c"
               line="41">The image.</doc>
          <type name="Image" c:type="GimpImage*"/>
        </parameter>
        <parameter name="drawable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimp/gimptexttool_pdb.c"
               line="42">The affected drawable: (%NULL for a new text layer).</doc>
          <type name="Drawable" c:type="GimpDrawable*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptexttool_pdb.c"
               line="43">The x coordinate for the left of the text bounding box.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptexttool_pdb.c"
               line="44">The y coordinate for the top of the text bounding box.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptexttool_pdb.c"
               line="45">The text to generate (in UTF-8 encoding).</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="border" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptexttool_pdb.c"
               line="46">The size of the border.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="antialias" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptexttool_pdb.c"
               line="47">Antialiasing.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="size" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptexttool_pdb.c"
               line="48">The size of text in pixels.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="font" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptexttool_pdb.c"
               line="49">The font.</doc>
          <type name="Font" c:type="GimpFont*"/>
        </parameter>
      </parameters>
    </function>
    <function name="text_get_extents_font"
              c:identifier="gimp_text_get_extents_font">
      <doc xml:space="preserve"
           filename="libgimp/gimptexttool_pdb.c"
           line="108">Get extents of the bounding box for the specified text.

This tool returns the width and height of a bounding box for the
specified text rendered with the specified font information. Ascent
and descent of the glyph extents are returned as well.
The ascent is the distance from the baseline to the highest point of
the character. This is positive if the glyph ascends above the
baseline. The descent is the distance from the baseline to the
lowest point of the character. This is positive if the glyph
descends below the baseline.
The size is always in pixels. If you need to set a font in points,
divide the size in points by 72.0 and multiply it by the vertical
resolution of the image you are taking into account.</doc>
      <source-position filename="libgimp/gimptexttool_pdb.h" line="44"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimptexttool_pdb.c"
             line="132">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptexttool_pdb.c"
               line="110">The text to generate (in UTF-8 encoding).</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="size" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptexttool_pdb.c"
               line="111">The size of text in either pixels or points.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="font" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimp/gimptexttool_pdb.c"
               line="112">The name of the font.</doc>
          <type name="Font" c:type="GimpFont*"/>
        </parameter>
        <parameter name="width"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimptexttool_pdb.c"
               line="113">The width of the glyph extents.</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="height"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimptexttool_pdb.c"
               line="114">The height of the glyph extents.</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="ascent"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimptexttool_pdb.c"
               line="115">The ascent of the glyph extents.</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="descent"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimp/gimptexttool_pdb.c"
               line="116">The descent of the glyph extents.</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="tile_height" c:identifier="gimp_tile_height">
      <doc xml:space="preserve"
           filename="libgimp/gimp.c"
           line="602">Returns the tile height GIMP is using.

This is a constant value given at plug-in configuration time.</doc>
      <source-position filename="libgimp/gimp.h" line="179"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimp.c"
             line="609">the tile_height</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
    </function>
    <function name="tile_width" c:identifier="gimp_tile_width">
      <doc xml:space="preserve"
           filename="libgimp/gimp.c"
           line="587">Returns the tile width GIMP is using.

This is a constant value given at plug-in configuration time.</doc>
      <source-position filename="libgimp/gimp.h" line="178"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimp.c"
             line="594">the tile_width</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
    </function>
    <function name="type_get_translation_context"
              c:identifier="gimp_type_get_translation_context"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbasetypes.c"
           line="105">Retrieves the translation context that has been previously set
using gimp_type_set_translation_context(). You should not need to
use this function directly, use gimp_enum_get_value() or
gimp_enum_value_get_desc() instead.</doc>
      <source-position filename="libgimpbase/gimpbasetypes.h" line="97"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbasetypes.c"
             line="114">the translation context associated with @type
              or %NULL if no context was set</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpbasetypes.c"
               line="107">a #GType</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_get_translation_domain"
              c:identifier="gimp_type_get_translation_domain"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbasetypes.c"
           line="65">Retrieves the gettext translation domain identifier that has been
previously set using gimp_type_set_translation_domain(). You should
not need to use this function directly, use gimp_enum_get_value()
or gimp_enum_value_get_desc() instead.</doc>
      <source-position filename="libgimpbase/gimpbasetypes.h" line="93"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpbasetypes.c"
             line="74">the translation domain associated with @type
              or %NULL if no domain was set</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpbasetypes.c"
               line="67">a #GType</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_set_translation_context"
              c:identifier="gimp_type_set_translation_context"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbasetypes.c"
           line="86">This function attaches a constant string as a translation context
to a #GType. The only purpose of this function is to use it when
registering a #G_TYPE_ENUM with translatable value names.</doc>
      <source-position filename="libgimpbase/gimpbasetypes.h" line="95"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpbasetypes.c"
               line="88">a #GType</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpbasetypes.c"
               line="89">a constant string that identifies a translation context or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_set_translation_domain"
              c:identifier="gimp_type_set_translation_domain"
              version="2.2">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpbasetypes.c"
           line="45">This function attaches a constant string as a gettext translation
domain identifier to a #GType. The only purpose of this function is
to use it when registering a #G_TYPE_ENUM with translatable value
names.</doc>
      <source-position filename="libgimpbase/gimpbasetypes.h" line="91"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpbasetypes.c"
               line="47">a #GType</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="domain" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpbasetypes.c"
               line="48">a constant string that identifies a translation domain or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="units_to_pixels"
              c:identifier="gimp_units_to_pixels"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpunit.c"
           line="872">Converts a @value specified in @unit to pixels.</doc>
      <source-position filename="libgimpbase/gimpunit.h" line="76"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpunit.c"
             line="880">@value converted to pixels.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="874">value in units</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="unit" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="875">unit of @value</doc>
          <type name="Unit" c:type="GimpUnit*"/>
        </parameter>
        <parameter name="resolution" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="876">resloution in DPI</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="units_to_points"
              c:identifier="gimp_units_to_points"
              version="2.8">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpunit.c"
           line="897">Converts a @value specified in @unit to points.</doc>
      <source-position filename="libgimpbase/gimpunit.h" line="79"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpunit.c"
             line="905">@value converted to points.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="899">value in units</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="unit" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="900">unit of @value</doc>
          <type name="Unit" c:type="GimpUnit*"/>
        </parameter>
        <parameter name="resolution" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpunit.c"
               line="901">resloution in DPI</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="user_time" c:identifier="gimp_user_time" version="2.6">
      <doc xml:space="preserve"
           filename="libgimp/gimp.c"
           line="885">Returns the timestamp of the user interaction that should be set on
the plug-in window. This is handled transparently, plug-in authors
do not have to care about it.

This is a constant value given at plug-in configuration time.</doc>
      <source-position filename="libgimp/gimp.h" line="196"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimp.c"
             line="894">timestamp for plug-in window</doc>
        <type name="guint32" c:type="guint32"/>
      </return-value>
    </function>
    <function name="utf8_strtrim" c:identifier="gimp_utf8_strtrim">
      <doc xml:space="preserve"
           filename="libgimpbase/gimputils.c"
           line="86">Creates a (possibly trimmed) copy of @str. The string is cut if it
exceeds @max_chars characters or on the first newline. The fact
that the string was trimmed is indicated by appending an ellipsis.</doc>
      <source-position filename="libgimpbase/gimputils.h" line="29"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpbase/gimputils.c"
             line="96">A (possibly trimmed) copy of @str which should be freed
using g_free() when it is not needed any longer.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="str"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="88">an UTF-8 encoded string (or %NULL)</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="max_chars" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimputils.c"
               line="89">the maximum number of characters before the string get
trimmed</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_dup_float_array"
              c:identifier="gimp_value_dup_float_array">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparamspecs.c"
           line="880">Gets the contents of a %GIMP_TYPE_FLOAT_ARRAY #GValue</doc>
      <source-position filename="libgimpbase/gimpparamspecs.h" line="316"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparamspecs.c"
             line="886">The contents of @value</doc>
        <array zero-terminated="0" c:type="gdouble*">
          <type name="gdouble" c:type="gdouble"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="882">A valid value of type %GIMP_TYPE_FLOAT_ARRAY</doc>
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_dup_int32_array"
              c:identifier="gimp_value_dup_int32_array">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparamspecs.c"
           line="710">Gets the contents of a %GIMP_TYPE_INT32_ARRAY #GValue</doc>
      <source-position filename="libgimpbase/gimpparamspecs.h" line="271"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparamspecs.c"
             line="716">The contents of @value</doc>
        <array zero-terminated="0" c:type="gint32*">
          <type name="gint32" c:type="gint32"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="712">A valid value of type %GIMP_TYPE_INT32_ARRAY</doc>
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_dup_object_array"
              c:identifier="gimp_value_dup_object_array">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="436"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparamspecs.c"
             line="1307">a deep copy of the array of objects.</doc>
        <type name="GObject.Object" c:type="GObject**"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="1305">a #GValue holding a object #GimpObjectArray.</doc>
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_get_float_array"
              c:identifier="gimp_value_get_float_array">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparamspecs.c"
           line="864">Gets the contents of a %GIMP_TYPE_FLOAT_ARRAY #GValue</doc>
      <source-position filename="libgimpbase/gimpparamspecs.h" line="315"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparamspecs.c"
             line="870">The contents of @value</doc>
        <array zero-terminated="0" c:type="const gdouble*">
          <type name="gdouble" c:type="gdouble"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="866">A valid value of type %GIMP_TYPE_FLOAT_ARRAY</doc>
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_get_int32_array"
              c:identifier="gimp_value_get_int32_array">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparamspecs.c"
           line="694">Gets the contents of a %GIMP_TYPE_INT32_ARRAY #GValue</doc>
      <source-position filename="libgimpbase/gimpparamspecs.h" line="270"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparamspecs.c"
             line="700">The contents of @value</doc>
        <array zero-terminated="0" c:type="const gint32*">
          <type name="gint32" c:type="gint32"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="696">A valid value of type %GIMP_TYPE_INT32_ARRAY</doc>
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_get_object_array"
              c:identifier="gimp_value_get_object_array">
      <source-position filename="libgimpbase/gimpparamspecs.h" line="435"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimpbase/gimpparamspecs.c"
             line="1286">the internal array of objects.</doc>
        <type name="GObject.Object" c:type="GObject**"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="1284">a #GValue holding a object #GimpObjectArray.</doc>
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_set_float_array"
              c:identifier="gimp_value_set_float_array">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparamspecs.c"
           line="896">Sets the contents of @value to @data.</doc>
      <source-position filename="libgimpbase/gimpparamspecs.h" line="317"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="898">A valid value of type %GIMP_TYPE_FLOAT_ARRAY</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="899">A #gfloat array</doc>
          <array length="2" zero-terminated="0" c:type="const gdouble*">
            <type name="gdouble" c:type="gdouble"/>
          </array>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="900">The number of elements in @data</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_set_int32_array"
              c:identifier="gimp_value_set_int32_array">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparamspecs.c"
           line="726">Sets the contents of @value to @data.</doc>
      <source-position filename="libgimpbase/gimpparamspecs.h" line="272"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="728">A valid value of type %GIMP_TYPE_INT32_ARRAY</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="729">A #gint32 array</doc>
          <array length="2" zero-terminated="0" c:type="const gint32*">
            <type name="gint32" c:type="gint32"/>
          </array>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="730">The number of elements in @data</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_set_object_array"
              c:identifier="gimp_value_set_object_array">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparamspecs.c"
           line="1332">Sets the contents of @value to @data.</doc>
      <source-position filename="libgimpbase/gimpparamspecs.h" line="437"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="1334">A valid value of type %GIMP_TYPE_OBJECT_ARRAY</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="object_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="1335">The #GType of the object elements</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="1336">A #GObject array</doc>
          <array length="3" zero-terminated="0" c:type="GObject**">
            <type name="GObject.Object" c:type="GObject*"/>
          </array>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="1337">The number of elements in @data</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_set_static_float_array"
              c:identifier="gimp_value_set_static_float_array">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparamspecs.c"
           line="915">Sets the contents of @value to @data, without copying the data.</doc>
      <source-position filename="libgimpbase/gimpparamspecs.h" line="320"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="917">A valid value of type %GIMP_TYPE_FLOAT_ARRAY</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="918">A #gfloat array</doc>
          <array length="2" zero-terminated="0" c:type="const gdouble*">
            <type name="gdouble" c:type="gdouble"/>
          </array>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="919">The number of elements in @data</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_set_static_int32_array"
              c:identifier="gimp_value_set_static_int32_array">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparamspecs.c"
           line="745">Sets the contents of @value to @data, without copying the data.</doc>
      <source-position filename="libgimpbase/gimpparamspecs.h" line="275"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="747">A valid value of type %GIMP_TYPE_INT32_ARRAY</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="748">A #gint32 array</doc>
          <array length="2" zero-terminated="0" c:type="const gint32*">
            <type name="gint32" c:type="gint32"/>
          </array>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="749">The number of elements in @data</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_set_static_object_array"
              c:identifier="gimp_value_set_static_object_array">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparamspecs.c"
           line="1357">Sets the contents of @value to @data, without copying the data.</doc>
      <source-position filename="libgimpbase/gimpparamspecs.h" line="441"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="1359">A valid value of type %GIMP_TYPE_OBJECT_ARRAY</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="object_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="1360">The #GType of the object elements</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="1361">A #GObject array</doc>
          <array length="3" zero-terminated="0" c:type="GObject**">
            <type name="GObject.Object" c:type="GObject*"/>
          </array>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="1362">The number of elements in @data</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_take_float_array"
              c:identifier="gimp_value_take_float_array">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparamspecs.c"
           line="934">Sets the contents of @value to @data, and takes ownership of @data.</doc>
      <source-position filename="libgimpbase/gimpparamspecs.h" line="323"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="936">A valid value of type %GIMP_TYPE_FLOAT_ARRAY</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="data" transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="937">A #gfloat array</doc>
          <array length="2" zero-terminated="0" c:type="gdouble*">
            <type name="gdouble" c:type="gdouble"/>
          </array>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="938">The number of elements in @data</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_take_int32_array"
              c:identifier="gimp_value_take_int32_array">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparamspecs.c"
           line="764">Sets the contents of @value to @data, and takes ownership of @data.</doc>
      <source-position filename="libgimpbase/gimpparamspecs.h" line="278"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="766">A valid value of type %GIMP_TYPE_int32_ARRAY</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="data" transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="767">A #gint32 array</doc>
          <array length="2" zero-terminated="0" c:type="gint32*">
            <type name="gint32" c:type="gint32"/>
          </array>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="768">The number of elements in @data</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_take_object_array"
              c:identifier="gimp_value_take_object_array">
      <doc xml:space="preserve"
           filename="libgimpbase/gimpparamspecs.c"
           line="1382">Sets the contents of @value to @data, and takes ownership of @data.</doc>
      <source-position filename="libgimpbase/gimpparamspecs.h" line="445"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="1384">A valid value of type %GIMP_TYPE_OBJECT_ARRAY</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="object_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="1385">The #GType of the object elements</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="data" transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="1386">A #GObject array</doc>
          <array length="3" zero-terminated="0" c:type="GObject**">
            <type name="GObject.Object" c:type="GObject*"/>
          </array>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpbase/gimpparamspecs.c"
               line="1387">The number of elements in @data</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="vector2_add"
              c:identifier="gimp_vector2_add"
              moved-to="Vector2.add">
      <doc xml:space="preserve"
           filename="libgimpmath/gimpvector.c"
           line="269">Computes the sum of two 2D vectors. The resulting #GimpVector2 is
stored in @result.</doc>
      <source-position filename="libgimpmath/gimpvector.h" line="55"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="result"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="271">destination for the resulting #GimpVector2.</doc>
          <type name="Vector2" c:type="GimpVector2*"/>
        </parameter>
        <parameter name="vector1" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="272">a pointer to the first #GimpVector2.</doc>
          <type name="Vector2" c:type="const GimpVector2*"/>
        </parameter>
        <parameter name="vector2" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="273">a pointer to the second #GimpVector2.</doc>
          <type name="Vector2" c:type="const GimpVector2*"/>
        </parameter>
      </parameters>
    </function>
    <function name="vector2_sub"
              c:identifier="gimp_vector2_sub"
              moved-to="Vector2.sub">
      <doc xml:space="preserve"
           filename="libgimpmath/gimpvector.c"
           line="309">Computes the difference of two 2D vectors (@vector1 minus @vector2).
The resulting #GimpVector2 is stored in @result.</doc>
      <source-position filename="libgimpmath/gimpvector.h" line="60"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="result"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="311">the destination for the resulting #GimpVector2.</doc>
          <type name="Vector2" c:type="GimpVector2*"/>
        </parameter>
        <parameter name="vector1" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="312">a pointer to the first #GimpVector2.</doc>
          <type name="Vector2" c:type="const GimpVector2*"/>
        </parameter>
        <parameter name="vector2" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="313">a pointer to the second #GimpVector2.</doc>
          <type name="Vector2" c:type="const GimpVector2*"/>
        </parameter>
      </parameters>
    </function>
    <function name="vector3_add"
              c:identifier="gimp_vector3_add"
              moved-to="Vector3.add">
      <doc xml:space="preserve"
           filename="libgimpmath/gimpvector.c"
           line="735">Computes the sum of two 3D vectors. The resulting #GimpVector3 is
stored in @result.</doc>
      <source-position filename="libgimpmath/gimpvector.h" line="100"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="result"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="737">destination for the resulting #GimpVector3.</doc>
          <type name="Vector3" c:type="GimpVector3*"/>
        </parameter>
        <parameter name="vector1" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="738">a pointer to the first #GimpVector3.</doc>
          <type name="Vector3" c:type="const GimpVector3*"/>
        </parameter>
        <parameter name="vector2" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="739">a pointer to the second #GimpVector3.</doc>
          <type name="Vector3" c:type="const GimpVector3*"/>
        </parameter>
      </parameters>
    </function>
    <function name="vector3_sub"
              c:identifier="gimp_vector3_sub"
              moved-to="Vector3.sub">
      <doc xml:space="preserve"
           filename="libgimpmath/gimpvector.c"
           line="777">Computes the difference of two 3D vectors (@vector1 minus @vector2).
The resulting #GimpVector3 is stored in @result.</doc>
      <source-position filename="libgimpmath/gimpvector.h" line="105"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="result"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="779">the destination for the resulting #GimpVector3.</doc>
          <type name="Vector3" c:type="GimpVector3*"/>
        </parameter>
        <parameter name="vector1" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="780">a pointer to the first #GimpVector3.</doc>
          <type name="Vector3" c:type="const GimpVector3*"/>
        </parameter>
        <parameter name="vector2" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="781">a pointer to the second #GimpVector3.</doc>
          <type name="Vector3" c:type="const GimpVector3*"/>
        </parameter>
      </parameters>
    </function>
    <function name="vector_2d_to_3d" c:identifier="gimp_vector_2d_to_3d">
      <doc xml:space="preserve"
           filename="libgimpmath/gimpvector.c"
           line="995">\"Compute screen (sx, sy) - (sx + w, sy + h) to 3D unit square
mapping. The plane to map to is given in the z field of p. The
observer is located at position vp (vp-&gt;z != 0.0).\"

In other words, this computes the projection of the point (@x, @y)
to the plane z = @p-&gt;z (parallel to XY), from the @vp point of view
through the screen (@sx, @sy)-&gt;(@sx + @w, @sy + @h)</doc>
      <source-position filename="libgimpmath/gimpvector.h" line="130"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="sx" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="997">the abscissa of the upper-left screen rectangle.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="sy" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="998">the ordinate of the upper-left screen rectangle.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="w" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="999">the width of the screen rectangle.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="h" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="1000">the height of the screen rectangle.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="1001">the abscissa of the point in the screen rectangle to map.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="1002">the ordinate of the point in the screen rectangle to map.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="vp" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="1003">the position of the observer.</doc>
          <type name="Vector3" c:type="const GimpVector3*"/>
        </parameter>
        <parameter name="p" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="1004">the resulting point.</doc>
          <type name="Vector3" c:type="GimpVector3*"/>
        </parameter>
      </parameters>
    </function>
    <function name="vector_2d_to_3d_val"
              c:identifier="gimp_vector_2d_to_3d_val">
      <doc xml:space="preserve"
           filename="libgimpmath/gimpvector.c"
           line="1041">This function is identical to gimp_vector_2d_to_3d() but the
position of the @observer and the resulting point @p are passed by
value rather than by reference.</doc>
      <source-position filename="libgimpmath/gimpvector.h" line="139"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimpmath/gimpvector.c"
             line="1056">the computed #GimpVector3 point.</doc>
        <type name="Vector3" c:type="GimpVector3"/>
      </return-value>
      <parameters>
        <parameter name="sx" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="1043">the abscissa of the upper-left screen rectangle.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="sy" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="1044">the ordinate of the upper-left screen rectangle.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="w" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="1045">the width of the screen rectangle.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="h" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="1046">the height of the screen rectangle.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="1047">the abscissa of the point in the screen rectangle to map.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="1048">the ordinate of the point in the screen rectangle to map.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="vp" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="1049">position of the observer.</doc>
          <type name="Vector3" c:type="GimpVector3"/>
        </parameter>
        <parameter name="p" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="1050">the resulting point.</doc>
          <type name="Vector3" c:type="GimpVector3"/>
        </parameter>
      </parameters>
    </function>
    <function name="vector_3d_to_2d" c:identifier="gimp_vector_3d_to_2d">
      <doc xml:space="preserve"
           filename="libgimpmath/gimpvector.c"
           line="1089">Convert the given 3D point to 2D (project it onto the viewing
plane, (sx, sy, 0) - (sx + w, sy + h, 0). The input is assumed to
be in the unit square (0, 0, z) - (1, 1, z). The viewpoint of the
observer is passed in vp.

This is basically the opposite of gimp_vector_2d_to_3d().</doc>
      <source-position filename="libgimpmath/gimpvector.h" line="148"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="sx" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="1091">the abscissa of the upper-left screen rectangle.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="sy" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="1092">the ordinate of the upper-left screen rectangle.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="w" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="1093">the width of the screen rectangle.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="h" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="1094">the height of the screen rectangle.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="x"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="1095">the abscissa of the point in the screen rectangle to map.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="y"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="1096">the ordinate of the point in the screen rectangle to map.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="vp" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="1097">position of the observer.</doc>
          <type name="Vector3" c:type="const GimpVector3*"/>
        </parameter>
        <parameter name="p" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgimpmath/gimpvector.c"
               line="1098">the 3D point to project to the plane.</doc>
          <type name="Vector3" c:type="const GimpVector3*"/>
        </parameter>
      </parameters>
    </function>
    <function name="version" c:identifier="gimp_version">
      <doc xml:space="preserve"
           filename="libgimp/gimp_pdb.c"
           line="43">Returns the host GIMP version.

This procedure returns the version number of the currently running
GIMP.</doc>
      <source-position filename="libgimp/gimp_pdb.h" line="35"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgimp/gimp_pdb.c"
             line="51">GIMP version number.
         The returned value must be freed with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="wm_class" c:identifier="gimp_wm_class">
      <doc xml:space="preserve"
           filename="libgimp/gimp.c"
           line="838">Returns the window manager class to be used for plug-in windows.

This is a constant value given at plug-in configuration time.</doc>
      <source-position filename="libgimp/gimp.h" line="193"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgimp/gimp.c"
             line="845">the window manager class</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
  </namespace>
</repository>
