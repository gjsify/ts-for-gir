<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="libxml2" version="2.0"/>
  <package name="camel-1.2"/>
  <c:include name="camel/camel.h"/>
  <namespace name="Camel"
             version="1.2"
             shared-library="libcamel-1.2.so.64"
             c:identifier-prefixes="Camel,camel"
             c:symbol-prefixes="camel,camel">
    <alias name="_block_t" c:type="camel_block_t">
      <source-position filename="src/camel/camel-block-file.h" line="70"/>
      <type name="guint32" c:type="guint32"/>
    </alias>
    <alias name="_hash_t" c:type="camel_hash_t">
      <source-position filename="src/camel/camel-partition-table.h" line="71"/>
      <type name="guint32" c:type="guint32"/>
    </alias>
    <alias name="_key_t" c:type="camel_key_t">
      <source-position filename="src/camel/camel-block-file.h" line="71"/>
      <type name="guint32" c:type="guint32"/>
    </alias>
    <function-macro name="ADDRESS"
                    c:identifier="CAMEL_ADDRESS"
                    introspectable="0">
      <source-position filename="src/camel/camel-address.h" line="31"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ADDRESS_CLASS"
                    c:identifier="CAMEL_ADDRESS_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-address.h" line="34"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ADDRESS_GET_CLASS"
                    c:identifier="CAMEL_ADDRESS_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-address.h" line="43"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="AI_CANONNAME" value="2" c:type="AI_CANONNAME">
      <source-position filename="src/camel/camel-net-utils.h" line="67"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="AI_NUMERICHOST" value="4" c:type="AI_NUMERICHOST">
      <source-position filename="src/camel/camel-net-utils.h" line="68"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="Address"
           c:symbol-prefix="address"
           c:type="CamelAddress"
           parent="GObject.Object"
           glib:type-name="CamelAddress"
           glib:get-type="camel_address_get_type"
           glib:type-struct="AddressClass">
      <source-position filename="src/camel/camel-address.h" line="77"/>
      <constructor name="new" c:identifier="camel_address_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-address.c"
             line="38">Create a new #CamelAddress object.</doc>
        <source-position filename="src/camel/camel-address.h" line="80"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-address.c"
               line="43">a new #CamelAddress object</doc>
          <type name="Address" c:type="CamelAddress*"/>
        </return-value>
      </constructor>
      <virtual-method name="cat" invoker="cat">
        <doc xml:space="preserve"
             filename="src/camel/camel-address.c"
             line="185">Concatenate one address onto another. The addresses must
be of the same type.</doc>
        <source-position filename="src/camel/camel-address.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-address.c"
               line="193">the number of addresses concatenated</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-address.c"
                 line="187">destination #CamelAddress object</doc>
            <type name="Address" c:type="CamelAddress*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-address.c"
                 line="188">source #CamelAddress object</doc>
            <type name="Address" c:type="CamelAddress*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="decode" invoker="decode">
        <doc xml:space="preserve"
             filename="src/camel/camel-address.c"
             line="92">Construct a new address from a raw address field.</doc>
        <source-position filename="src/camel/camel-address.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-address.c"
               line="99">the number of addresses parsed or -1 on fail</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-address.c"
                 line="94">a #CamelAddress object</doc>
            <type name="Address" c:type="CamelAddress*"/>
          </instance-parameter>
          <parameter name="raw" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-address.c"
                 line="95">raw address description</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="encode" invoker="encode">
        <doc xml:space="preserve"
             filename="src/camel/camel-address.c"
             line="116">Encode an address in a format suitable for a raw header.</doc>
        <source-position filename="src/camel/camel-address.h" line="66"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-address.c"
               line="122">the encoded address</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-address.c"
                 line="118">a #CamelAddress object</doc>
            <type name="Address" c:type="CamelAddress*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="format" invoker="format">
        <doc xml:space="preserve"
             filename="src/camel/camel-address.c"
             line="163">Format an address in a format suitable for display.</doc>
        <source-position filename="src/camel/camel-address.h" line="69"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-address.c"
               line="169">a newly allocated string containing the formatted addresses</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-address.c"
                 line="165">a #CamelAddress object</doc>
            <type name="Address" c:type="CamelAddress*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="length" invoker="length">
        <doc xml:space="preserve"
             filename="src/camel/camel-address.c"
             line="70">Get the number of addresses stored in the address @addr.</doc>
        <source-position filename="src/camel/camel-address.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-address.c"
               line="76">the number of addresses contained in @addr</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-address.c"
                 line="72">a #CamelAddress object</doc>
            <type name="Address" c:type="CamelAddress*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove" invoker="remove">
        <doc xml:space="preserve"
             filename="src/camel/camel-address.c"
             line="231">Remove an address by index, or all addresses.</doc>
        <source-position filename="src/camel/camel-address.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-address.c"
                 line="233">a #CamelAddress object</doc>
            <type name="Address" c:type="CamelAddress*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-address.c"
                 line="234">The address to remove, use -1 to remove all address.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unformat" invoker="unformat">
        <doc xml:space="preserve"
             filename="src/camel/camel-address.c"
             line="138">Attempt to convert a previously formatted and/or edited
address back into internal form.</doc>
        <source-position filename="src/camel/camel-address.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-address.c"
               line="146">the number of addresses parsed or -1 on fail</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-address.c"
                 line="140">a #CamelAddress object</doc>
            <type name="Address" c:type="CamelAddress*"/>
          </instance-parameter>
          <parameter name="raw" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-address.c"
                 line="141">raw address description</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="cat" c:identifier="camel_address_cat">
        <doc xml:space="preserve"
             filename="src/camel/camel-address.c"
             line="185">Concatenate one address onto another. The addresses must
be of the same type.</doc>
        <source-position filename="src/camel/camel-address.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-address.c"
               line="193">the number of addresses concatenated</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-address.c"
                 line="187">destination #CamelAddress object</doc>
            <type name="Address" c:type="CamelAddress*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-address.c"
                 line="188">source #CamelAddress object</doc>
            <type name="Address" c:type="CamelAddress*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="camel_address_copy">
        <doc xml:space="preserve"
             filename="src/camel/camel-address.c"
             line="211">Copy the contents of one address into another.</doc>
        <source-position filename="src/camel/camel-address.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-address.c"
               line="218">the number of addresses copied</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-address.c"
                 line="213">destination #CamelAddress object</doc>
            <type name="Address" c:type="CamelAddress*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-address.c"
                 line="214">source #CamelAddress object</doc>
            <type name="Address" c:type="CamelAddress*"/>
          </parameter>
        </parameters>
      </method>
      <method name="decode" c:identifier="camel_address_decode">
        <doc xml:space="preserve"
             filename="src/camel/camel-address.c"
             line="92">Construct a new address from a raw address field.</doc>
        <source-position filename="src/camel/camel-address.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-address.c"
               line="99">the number of addresses parsed or -1 on fail</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-address.c"
                 line="94">a #CamelAddress object</doc>
            <type name="Address" c:type="CamelAddress*"/>
          </instance-parameter>
          <parameter name="raw" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-address.c"
                 line="95">raw address description</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="encode" c:identifier="camel_address_encode">
        <doc xml:space="preserve"
             filename="src/camel/camel-address.c"
             line="116">Encode an address in a format suitable for a raw header.</doc>
        <source-position filename="src/camel/camel-address.h" line="85"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-address.c"
               line="122">the encoded address</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-address.c"
                 line="118">a #CamelAddress object</doc>
            <type name="Address" c:type="CamelAddress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="format" c:identifier="camel_address_format">
        <doc xml:space="preserve"
             filename="src/camel/camel-address.c"
             line="163">Format an address in a format suitable for display.</doc>
        <source-position filename="src/camel/camel-address.h" line="88"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-address.c"
               line="169">a newly allocated string containing the formatted addresses</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-address.c"
                 line="165">a #CamelAddress object</doc>
            <type name="Address" c:type="CamelAddress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="length" c:identifier="camel_address_length">
        <doc xml:space="preserve"
             filename="src/camel/camel-address.c"
             line="70">Get the number of addresses stored in the address @addr.</doc>
        <source-position filename="src/camel/camel-address.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-address.c"
               line="76">the number of addresses contained in @addr</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-address.c"
                 line="72">a #CamelAddress object</doc>
            <type name="Address" c:type="CamelAddress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="new_clone" c:identifier="camel_address_new_clone">
        <doc xml:space="preserve"
             filename="src/camel/camel-address.c"
             line="51">Clone an existing address type.</doc>
        <source-position filename="src/camel/camel-address.h" line="81"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-address.c"
               line="57">the cloned address</doc>
          <type name="Address" c:type="CamelAddress*"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-address.c"
                 line="53">a #CamelAddress object</doc>
            <type name="Address" c:type="CamelAddress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="camel_address_remove">
        <doc xml:space="preserve"
             filename="src/camel/camel-address.c"
             line="231">Remove an address by index, or all addresses.</doc>
        <source-position filename="src/camel/camel-address.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-address.c"
                 line="233">a #CamelAddress object</doc>
            <type name="Address" c:type="CamelAddress*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-address.c"
                 line="234">The address to remove, use -1 to remove all address.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="unformat" c:identifier="camel_address_unformat">
        <doc xml:space="preserve"
             filename="src/camel/camel-address.c"
             line="138">Attempt to convert a previously formatted and/or edited
address back into internal form.</doc>
        <source-position filename="src/camel/camel-address.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-address.c"
               line="146">the number of addresses parsed or -1 on fail</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-address.c"
                 line="140">a #CamelAddress object</doc>
            <type name="Address" c:type="CamelAddress*"/>
          </instance-parameter>
          <parameter name="raw" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-address.c"
                 line="141">raw address description</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="AddressPrivate" c:type="CamelAddressPrivate*"/>
      </field>
    </class>
    <record name="AddressClass"
            c:type="CamelAddressClass"
            glib:is-gtype-struct-for="Address">
      <source-position filename="src/camel/camel-address.h" line="77"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="length">
        <callback name="length">
          <source-position filename="src/camel/camel-address.h" line="63"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-address.c"
                 line="76">the number of addresses contained in @addr</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="addr" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-address.c"
                   line="72">a #CamelAddress object</doc>
              <type name="Address" c:type="CamelAddress*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="decode">
        <callback name="decode">
          <source-position filename="src/camel/camel-address.h" line="64"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-address.c"
                 line="99">the number of addresses parsed or -1 on fail</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="addr" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-address.c"
                   line="94">a #CamelAddress object</doc>
              <type name="Address" c:type="CamelAddress*"/>
            </parameter>
            <parameter name="raw" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-address.c"
                   line="95">raw address description</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="encode">
        <callback name="encode">
          <source-position filename="src/camel/camel-address.h" line="66"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-address.c"
                 line="122">the encoded address</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="addr" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-address.c"
                   line="118">a #CamelAddress object</doc>
              <type name="Address" c:type="CamelAddress*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unformat">
        <callback name="unformat">
          <source-position filename="src/camel/camel-address.h" line="67"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-address.c"
                 line="146">the number of addresses parsed or -1 on fail</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="addr" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-address.c"
                   line="140">a #CamelAddress object</doc>
              <type name="Address" c:type="CamelAddress*"/>
            </parameter>
            <parameter name="raw" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-address.c"
                   line="141">raw address description</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="format">
        <callback name="format">
          <source-position filename="src/camel/camel-address.h" line="69"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-address.c"
                 line="169">a newly allocated string containing the formatted addresses</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="addr" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-address.c"
                   line="165">a #CamelAddress object</doc>
              <type name="Address" c:type="CamelAddress*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cat">
        <callback name="cat">
          <source-position filename="src/camel/camel-address.h" line="70"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-address.c"
                 line="193">the number of addresses concatenated</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="dest" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-address.c"
                   line="187">destination #CamelAddress object</doc>
              <type name="Address" c:type="CamelAddress*"/>
            </parameter>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-address.c"
                   line="188">source #CamelAddress object</doc>
              <type name="Address" c:type="CamelAddress*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove">
        <callback name="remove">
          <source-position filename="src/camel/camel-address.h" line="72"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="addr" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-address.c"
                   line="233">a #CamelAddress object</doc>
              <type name="Address" c:type="CamelAddress*"/>
            </parameter>
            <parameter name="index" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-address.c"
                   line="234">The address to remove, use -1 to remove all address.</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="AddressPrivate"
            c:type="CamelAddressPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-address.h" line="52"/>
    </record>
    <record name="AsyncClosure"
            c:type="CamelAsyncClosure"
            disguised="1"
            opaque="1"
            version="3.12">
      <doc xml:space="preserve"
           filename="src/camel/camel-async-closure.c"
           line="45">Contains only private data that should be read and manipulated using the
functions below.</doc>
      <source-position filename="src/camel/camel-async-closure.h" line="27"/>
      <method name="free"
              c:identifier="camel_async_closure_free"
              version="3.12"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-async-closure.c"
             line="138">Frees the @closure and the resources it holds.</doc>
        <source-position filename="src/camel/camel-async-closure.h" line="32"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-async-closure.c"
                 line="140">a #CamelAsyncClosure</doc>
            <type name="AsyncClosure" c:type="CamelAsyncClosure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="wait"
              c:identifier="camel_async_closure_wait"
              version="3.12"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-async-closure.c"
             line="98">Call this function immediately after starting an asynchronous operation.
The function waits for the asynchronous operation to complete and returns
its #GAsyncResult to be passed to the operation's "finish" function.

This function can be called repeatedly on the same #CamelAsyncClosure to
easily string together multiple asynchronous operations.</doc>
        <source-position filename="src/camel/camel-async-closure.h" line="31"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-async-closure.c"
               line="109">a #GAsyncResult which is owned by the closure</doc>
          <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
        </return-value>
        <parameters>
          <instance-parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-async-closure.c"
                 line="100">a #CamelAsyncClosure</doc>
            <type name="AsyncClosure" c:type="CamelAsyncClosure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="callback"
                c:identifier="camel_async_closure_callback"
                version="3.12"
                introspectable="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-async-closure.c"
             line="164">Pass this function as the #GAsyncReadyCallback argument of an asynchronous
function, and the #CamelAsyncClosure as the data argument.

This causes camel_async_closure_wait() to terminate and return @result.</doc>
        <source-position filename="src/camel/camel-async-closure.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="source_object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-async-closure.c"
                 line="166">a #GObject or %NULL</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-async-closure.c"
                 line="167">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="closure"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-async-closure.c"
                 line="168">a #CamelAsyncClosure</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new"
                c:identifier="camel_async_closure_new"
                version="3.12"
                introspectable="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-async-closure.c"
             line="61">Creates a new #CamelAsyncClosure for use with asynchronous functions.</doc>
        <source-position filename="src/camel/camel-async-closure.h" line="30"/>
        <return-value>
          <doc xml:space="preserve"
               filename="src/camel/camel-async-closure.c"
               line="66">a new #CamelAsyncClosure</doc>
          <type name="AsyncClosure" c:type="CamelAsyncClosure*"/>
        </return-value>
      </function>
    </record>
    <enumeration name="AuthenticationResult"
                 version="3.4"
                 glib:type-name="CamelAuthenticationResult"
                 glib:get-type="camel_authentication_result_get_type"
                 c:type="CamelAuthenticationResult">
      <doc xml:space="preserve"
           filename="src/camel/camel-enums.h"
           line="25">Authentication result codes used by #CamelService.</doc>
      <member name="error"
              value="0"
              c:identifier="CAMEL_AUTHENTICATION_ERROR"
              glib:nick="error"
              glib:name="CAMEL_AUTHENTICATION_ERROR">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="27">An error occurred while authenticating.</doc>
      </member>
      <member name="accepted"
              value="1"
              c:identifier="CAMEL_AUTHENTICATION_ACCEPTED"
              glib:nick="accepted"
              glib:name="CAMEL_AUTHENTICATION_ACCEPTED">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="29">Server accepted our authentication attempt.</doc>
      </member>
      <member name="rejected"
              value="2"
              c:identifier="CAMEL_AUTHENTICATION_REJECTED"
              glib:nick="rejected"
              glib:name="CAMEL_AUTHENTICATION_REJECTED">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="31">Server rejected our authentication attempt.</doc>
      </member>
    </enumeration>
    <function-macro name="BLOCK_FILE"
                    c:identifier="CAMEL_BLOCK_FILE"
                    introspectable="0">
      <source-position filename="src/camel/camel-block-file.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_FILE_CLASS"
                    c:identifier="CAMEL_BLOCK_FILE_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-block-file.h" line="36"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_FILE_GET_CLASS"
                    c:identifier="CAMEL_BLOCK_FILE_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-block-file.h" line="45"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="BLOCK_SIZE" value="1024" c:type="CAMEL_BLOCK_SIZE">
      <source-position filename="src/camel/camel-block-file.h" line="81"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="BLOCK_SIZE_BITS" value="10" c:type="CAMEL_BLOCK_SIZE_BITS">
      <source-position filename="src/camel/camel-block-file.h" line="82"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <bitfield name="BestencEncoding" c:type="CamelBestencEncoding">
      <source-position filename="src/camel/camel-mime-filter-bestenc.h"
                       line="73"/>
      <member name="7bit" value="0" c:identifier="CAMEL_BESTENC_7BIT">
      </member>
      <member name="8bit" value="1" c:identifier="CAMEL_BESTENC_8BIT">
      </member>
      <member name="binary" value="2" c:identifier="CAMEL_BESTENC_BINARY">
      </member>
      <member name="text" value="256" c:identifier="CAMEL_BESTENC_TEXT">
      </member>
    </bitfield>
    <bitfield name="BestencRequired" c:type="CamelBestencRequired">
      <source-position filename="src/camel/camel-mime-filter-bestenc.h"
                       line="64"/>
      <member name="get_encoding"
              value="1"
              c:identifier="CAMEL_BESTENC_GET_ENCODING">
      </member>
      <member name="get_charset"
              value="2"
              c:identifier="CAMEL_BESTENC_GET_CHARSET">
      </member>
      <member name="lf_is_crlf"
              value="256"
              c:identifier="CAMEL_BESTENC_LF_IS_CRLF">
      </member>
      <member name="no_from" value="512" c:identifier="CAMEL_BESTENC_NO_FROM">
      </member>
    </bitfield>
    <record name="Block" c:type="CamelBlock">
      <source-position filename="src/camel/camel-block-file.h" line="110"/>
      <field name="id" writable="1">
        <type name="_block_t" c:type="camel_block_t"/>
      </field>
      <field name="flags" writable="1">
        <type name="BlockFlags" c:type="CamelBlockFlags"/>
      </field>
      <field name="refcount" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="align00" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="data" writable="1">
        <array zero-terminated="0" fixed-size="1024">
          <type name="guint8" c:type="guchar"/>
        </array>
      </field>
    </record>
    <class name="BlockFile"
           c:symbol-prefix="block_file"
           c:type="CamelBlockFile"
           parent="GObject.Object"
           glib:type-name="CamelBlockFile"
           glib:get-type="camel_block_file_get_type"
           glib:type-struct="BlockFileClass">
      <source-position filename="src/camel/camel-block-file.h" line="125"/>
      <constructor name="new" c:identifier="camel_block_file_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-block-file.c"
             line="342">Allocate a new block file, stored at @path.  @version contains an 8 character
version string which must match the head of the file, or the file will be
intitialised.

@block_size is currently ignored and is set to CAMEL_BLOCK_SIZE.</doc>
        <source-position filename="src/camel/camel-block-file.h" line="128"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-block-file.c"
               line="355">The new block file, or %NULL if it could not be created.</doc>
          <type name="BlockFile" c:type="CamelBlockFile*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="344">a path with file name of the new #CamelBlockFile</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="345">file open flags to use</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="version" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="346">a version string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="block_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="347">block size, currently ignored</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="init_root">
        <source-position filename="src/camel/camel-block-file.h" line="121"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="bs" transfer-ownership="none">
            <type name="BlockFile" c:type="CamelBlockFile*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="validate_root">
        <source-position filename="src/camel/camel-block-file.h" line="120"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="bs" transfer-ownership="none">
            <type name="BlockFile" c:type="CamelBlockFile*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="attach_block" c:identifier="camel_block_file_attach_block">
        <doc xml:space="preserve"
             filename="src/camel/camel-block-file.c"
             line="742">Reattach a block that has been detached.</doc>
        <source-position filename="src/camel/camel-block-file.h" line="147"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="744">a #CamelBlockFile</doc>
            <type name="BlockFile" c:type="CamelBlockFile*"/>
          </instance-parameter>
          <parameter name="bl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="745">a #CamelBlock</doc>
            <type name="Block" c:type="CamelBlock*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete" c:identifier="camel_block_file_delete">
        <doc xml:space="preserve"
             filename="src/camel/camel-block-file.c"
             line="515">Deletes existing block file.</doc>
        <source-position filename="src/camel/camel-block-file.h" line="139"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-block-file.c"
               line="521">0 on success, -1 on error.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="bs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="517">a #CamelBlockFile</doc>
            <type name="BlockFile" c:type="CamelBlockFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="detach_block" c:identifier="camel_block_file_detach_block">
        <doc xml:space="preserve"
             filename="src/camel/camel-block-file.c"
             line="716">Detatch a block from the block file's cache.  The block should
be unref'd or attached when finished with.  The block file will
perform no writes of this block or flushing of it if the cache
fills.</doc>
        <source-position filename="src/camel/camel-block-file.h" line="145"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="718">a #CamelBlockFile</doc>
            <type name="BlockFile" c:type="CamelBlockFile*"/>
          </instance-parameter>
          <parameter name="bl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="719">a #CamelBlock</doc>
            <type name="Block" c:type="CamelBlock*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free_block" c:identifier="camel_block_file_free_block">
        <source-position filename="src/camel/camel-block-file.h" line="141"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="bs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="591">a #CamelBlockFile</doc>
            <type name="BlockFile" c:type="CamelBlockFile*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="592">a #camel_block_t</doc>
            <type name="_block_t" c:type="camel_block_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_block"
              c:identifier="camel_block_file_get_block"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-block-file.c"
             line="621">Retreive a block @id.</doc>
        <source-position filename="src/camel/camel-block-file.h" line="143"/>
        <return-value nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-block-file.c"
               line="628">The block, or %NULL if blockid is invalid or a file
   error occurred.</doc>
          <type name="Block" c:type="CamelBlock*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="623">a #CamelBlockFile</doc>
            <type name="BlockFile" c:type="CamelBlockFile*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="624">a #camel_block_t</doc>
            <type name="_block_t" c:type="camel_block_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cache_limit"
              c:identifier="camel_block_file_get_cache_limit"
              version="3.24">
        <source-position filename="src/camel/camel-block-file.h" line="134"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-block-file.c"
               line="442">Current block cache limit of @bs.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="bs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="440">a #CamelBlockFile</doc>
            <type name="BlockFile" c:type="CamelBlockFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_root"
              c:identifier="camel_block_file_get_root"
              version="3.24">
        <source-position filename="src/camel/camel-block-file.h" line="132"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-block-file.c"
               line="410">A #CamelBlockRoot of @bs.</doc>
          <type name="BlockRoot" c:type="CamelBlockRoot*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="408">a #CamelBlockFile</doc>
            <type name="BlockFile" c:type="CamelBlockFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_root_block"
              c:identifier="camel_block_file_get_root_block"
              version="3.24">
        <source-position filename="src/camel/camel-block-file.h" line="133"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-block-file.c"
               line="426">A root #CamelBlock of @bs.</doc>
          <type name="Block" c:type="CamelBlock*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="424">a #CamelBlockFile</doc>
            <type name="BlockFile" c:type="CamelBlockFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="new_block"
              c:identifier="camel_block_file_new_block"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-block-file.c"
             line="549">Allocate a new block, return a pointer to it.  Old blocks
may be flushed to disk during this call.</doc>
        <source-position filename="src/camel/camel-block-file.h" line="140"/>
        <return-value nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-block-file.c"
               line="556">The block, or %NULL if an error occurred.</doc>
          <type name="Block" c:type="CamelBlock*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="551">a #CamelBlockFile</doc>
            <type name="BlockFile" c:type="CamelBlockFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="rename" c:identifier="camel_block_file_rename">
        <doc xml:space="preserve"
             filename="src/camel/camel-block-file.c"
             line="472">Renames existing block file to a new @path.</doc>
        <source-position filename="src/camel/camel-block-file.h" line="137"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-block-file.c"
               line="479">0 on success, -1 on error; errno is set on failure</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="bs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="474">a #CamelBlockFile</doc>
            <type name="BlockFile" c:type="CamelBlockFile*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="475">path with filename to rename to</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cache_limit"
              c:identifier="camel_block_file_set_cache_limit"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-block-file.c"
             line="454">Sets a new block cache limit for @bs.</doc>
        <source-position filename="src/camel/camel-block-file.h" line="135"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="456">a #CamelBlockFile</doc>
            <type name="BlockFile" c:type="CamelBlockFile*"/>
          </instance-parameter>
          <parameter name="block_cache_limit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="457">a new block cache limit to set</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="sync" c:identifier="camel_block_file_sync">
        <doc xml:space="preserve"
             filename="src/camel/camel-block-file.c"
             line="902">Sync all dirty blocks to disk, including the root block.</doc>
        <source-position filename="src/camel/camel-block-file.h" line="155"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-block-file.c"
               line="908">-1 on io error.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="bs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="904">a #CamelBlockFile</doc>
            <type name="BlockFile" c:type="CamelBlockFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="sync_block" c:identifier="camel_block_file_sync_block">
        <doc xml:space="preserve"
             filename="src/camel/camel-block-file.c"
             line="872">Flush a block to disk immediately.  The block will only
be flushed to disk if it is marked as dirty (touched).</doc>
        <source-position filename="src/camel/camel-block-file.h" line="153"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-block-file.c"
               line="880">-1 on io error.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="bs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="874">a #CamelBlockFile</doc>
            <type name="BlockFile" c:type="CamelBlockFile*"/>
          </instance-parameter>
          <parameter name="bl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="875">a #CamelBlock</doc>
            <type name="Block" c:type="CamelBlock*"/>
          </parameter>
        </parameters>
      </method>
      <method name="touch_block" c:identifier="camel_block_file_touch_block">
        <doc xml:space="preserve"
             filename="src/camel/camel-block-file.c"
             line="765">Mark a block as dirty.  The block will be written to disk if
it ever expires from the cache.</doc>
        <source-position filename="src/camel/camel-block-file.h" line="149"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="767">a #CamelBlockFile</doc>
            <type name="BlockFile" c:type="CamelBlockFile*"/>
          </instance-parameter>
          <parameter name="bl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="768">a #CamelBlock</doc>
            <type name="Block" c:type="CamelBlock*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref_block" c:identifier="camel_block_file_unref_block">
        <doc xml:space="preserve"
             filename="src/camel/camel-block-file.c"
             line="796">Mark a block as unused.  If a block is used it will not be
written to disk, or flushed from memory.

If a block is detatched and this is the last reference, the
block will be freed.</doc>
        <source-position filename="src/camel/camel-block-file.h" line="151"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="798">a #CamelBlockFile</doc>
            <type name="BlockFile" c:type="CamelBlockFile*"/>
          </instance-parameter>
          <parameter name="bl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="799">a #CamelBlock</doc>
            <type name="Block" c:type="CamelBlock*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="BlockFilePrivate" c:type="CamelBlockFilePrivate*"/>
      </field>
    </class>
    <record name="BlockFileClass"
            c:type="CamelBlockFileClass"
            glib:is-gtype-struct-for="BlockFile">
      <source-position filename="src/camel/camel-block-file.h" line="125"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="validate_root">
        <callback name="validate_root">
          <source-position filename="src/camel/camel-block-file.h" line="120"/>
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="bs" transfer-ownership="none">
              <type name="BlockFile" c:type="CamelBlockFile*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="init_root">
        <callback name="init_root">
          <source-position filename="src/camel/camel-block-file.h" line="121"/>
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="bs" transfer-ownership="none">
              <type name="BlockFile" c:type="CamelBlockFile*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <bitfield name="BlockFileFlags" c:type="CamelBlockFileFlags">
      <source-position filename="src/camel/camel-block-file.h" line="81"/>
      <member name="block_file_sync"
              value="1"
              c:identifier="CAMEL_BLOCK_FILE_SYNC">
      </member>
    </bitfield>
    <record name="BlockFilePrivate"
            c:type="CamelBlockFilePrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-block-file.h" line="77"/>
    </record>
    <bitfield name="BlockFlags" c:type="CamelBlockFlags">
      <source-position filename="src/camel/camel-block-file.h" line="89"/>
      <member name="dirty" value="1" c:identifier="CAMEL_BLOCK_DIRTY">
      </member>
      <member name="detached" value="2" c:identifier="CAMEL_BLOCK_DETACHED">
      </member>
    </bitfield>
    <record name="BlockRoot" c:type="CamelBlockRoot">
      <source-position filename="src/camel/camel-block-file.h" line="100"/>
      <field name="version" writable="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gchar" c:type="gchar"/>
        </array>
      </field>
      <field name="flags" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="block_size" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="free" writable="1">
        <type name="_block_t" c:type="camel_block_t"/>
      </field>
      <field name="last" writable="1">
        <type name="_block_t" c:type="camel_block_t"/>
      </field>
    </record>
    <function-macro name="CERTDB"
                    c:identifier="CAMEL_CERTDB"
                    introspectable="0">
      <source-position filename="src/camel/camel-certdb.h" line="32"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CERTDB_CLASS"
                    c:identifier="CAMEL_CERTDB_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-certdb.h" line="35"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CERTDB_GET_CLASS"
                    c:identifier="CAMEL_CERTDB_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-certdb.h" line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHECK_GERROR"
                    c:identifier="CAMEL_CHECK_GERROR"
                    version="2.32"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="src/camel/camel-debug.h"
           line="41">This sanity checks return values and #GError.  If returning
failure, make sure the #GError is set.  If returning success,
make sure the #GError is NOT set.

Example:

    success = class-&gt;foo (object, some_data, error);
    CAMEL_CHECK_GERROR (object, foo, success, error);
    return success;</doc>
      <source-position filename="src/camel/camel-debug.h" line="60"/>
      <parameters>
        <parameter name="object">
          <doc xml:space="preserve"
               filename="src/camel/camel-debug.h"
               line="43">a #GObject descendant</doc>
        </parameter>
        <parameter name="method">
          <doc xml:space="preserve"
               filename="src/camel/camel-debug.h"
               line="44">a method which was run</doc>
        </parameter>
        <parameter name="expr">
          <doc xml:space="preserve"
               filename="src/camel/camel-debug.h"
               line="45">an expression to test, which evaluates to %TRUE or %FALSE</doc>
        </parameter>
        <parameter name="error">
          <doc xml:space="preserve"
               filename="src/camel/camel-debug.h"
               line="46">a pointer to a pointer of a #GError, set by the @method</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHECK_LOCAL_GERROR"
                    c:identifier="CAMEL_CHECK_LOCAL_GERROR"
                    version="3.12"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="src/camel/camel-debug.h"
           line="84">Same as CAMEL_CHECK_GERROR, but for direct #GError pointers.

Example:

    success = class-&gt;foo (object, some_data, &amp;local_error);
    CAMEL_CHECK_LOCAL_GERROR (object, foo, success, local_error);
    return success;</doc>
      <source-position filename="src/camel/camel-debug.h" line="101"/>
      <parameters>
        <parameter name="object">
          <doc xml:space="preserve"
               filename="src/camel/camel-debug.h"
               line="86">a #GObject descendant</doc>
        </parameter>
        <parameter name="method">
          <doc xml:space="preserve"
               filename="src/camel/camel-debug.h"
               line="87">a method which was run</doc>
        </parameter>
        <parameter name="expr">
          <doc xml:space="preserve"
               filename="src/camel/camel-debug.h"
               line="88">an expression to test, which evaluates to %TRUE or %FALSE</doc>
        </parameter>
        <parameter name="error">
          <doc xml:space="preserve"
               filename="src/camel/camel-debug.h"
               line="89">a pointer to a #GError, set by the @method</doc>
        </parameter>
      </parameters>
    </function-macro>
    <constant name="CIPHER_CERT_INFO_PROPERTY_PHOTO_FILENAME"
              value="photo-filename"
              c:type="CAMEL_CIPHER_CERT_INFO_PROPERTY_PHOTO_FILENAME"
              version="3.22">
      <doc xml:space="preserve"
           filename="src/camel/camel-cipher-context.h"
           line="49">Name of the photo-filename property which can be stored
on a #CamelCipherCertInfo.</doc>
      <source-position filename="src/camel/camel-cipher-context.h" line="56"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CIPHER_CERT_INFO_PROPERTY_SIGNERS_ALT_EMAILS"
              value="signers-alt-emails"
              c:type="CAMEL_CIPHER_CERT_INFO_PROPERTY_SIGNERS_ALT_EMAILS"
              version="3.28">
      <doc xml:space="preserve"
           filename="src/camel/camel-cipher-context.h"
           line="59">A string containing a list of email addresses of all signers
including their alternative emails. Use camel_address_unformat()
to break them back into separate addresses. This can be set
only on the first signer of the first validity, even the addresses
can belong to a different signer.</doc>
      <source-position filename="src/camel/camel-cipher-context.h" line="69"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="CIPHER_CONTEXT"
                    c:identifier="CAMEL_CIPHER_CONTEXT"
                    introspectable="0">
      <source-position filename="src/camel/camel-cipher-context.h" line="32"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CIPHER_CONTEXT_CLASS"
                    c:identifier="CAMEL_CIPHER_CONTEXT_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-cipher-context.h" line="35"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CIPHER_CONTEXT_GET_CLASS"
                    c:identifier="CAMEL_CIPHER_CONTEXT_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-cipher-context.h" line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <record name="Cert"
            c:type="CamelCert"
            glib:type-name="CamelCert"
            glib:get-type="camel_cert_get_type"
            c:symbol-prefix="cert">
      <source-position filename="src/camel/camel-certdb.h" line="74"/>
      <field name="refcount" writable="1">
        <type name="gint" c:type="volatile gint"/>
      </field>
      <field name="issuer" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="subject" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="hostname" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="fingerprint" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="trust" writable="1">
        <type name="CertTrust" c:type="CamelCertTrust"/>
      </field>
      <field name="rawcert" writable="1">
        <type name="GLib.Bytes" c:type="GBytes*"/>
      </field>
      <constructor name="new" c:identifier="camel_cert_new">
        <source-position filename="src/camel/camel-certdb.h" line="100"/>
        <return-value transfer-ownership="full">
          <type name="Cert" c:type="CamelCert*"/>
        </return-value>
      </constructor>
      <method name="load_cert_file"
              c:identifier="camel_cert_load_cert_file"
              throws="1">
        <source-position filename="src/camel/camel-certdb.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="cert" transfer-ownership="none">
            <type name="Cert" c:type="CamelCert*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="camel_cert_ref">
        <source-position filename="src/camel/camel-certdb.h" line="101"/>
        <return-value transfer-ownership="full">
          <type name="Cert" c:type="CamelCert*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cert" transfer-ownership="none">
            <type name="Cert" c:type="CamelCert*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="save_cert_file"
              c:identifier="camel_cert_save_cert_file"
              throws="1">
        <source-position filename="src/camel/camel-certdb.h" line="105"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="cert" transfer-ownership="none">
            <type name="Cert" c:type="CamelCert*"/>
          </instance-parameter>
          <parameter name="der_data" transfer-ownership="none">
            <array name="GLib.ByteArray" c:type="const GByteArray*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="camel_cert_unref">
        <source-position filename="src/camel/camel-certdb.h" line="102"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cert" transfer-ownership="none">
            <type name="Cert" c:type="CamelCert*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <class name="CertDB"
           c:symbol-prefix="certdb"
           c:type="CamelCertDB"
           parent="GObject.Object"
           glib:type-name="CamelCertDB"
           glib:get-type="camel_certdb_get_type"
           glib:type-struct="CertDBClass">
      <source-position filename="src/camel/camel-certdb.h" line="97"/>
      <constructor name="new" c:identifier="camel_certdb_new">
        <source-position filename="src/camel/camel-certdb.h" line="110"/>
        <return-value transfer-ownership="full">
          <type name="CertDB" c:type="CamelCertDB*"/>
        </return-value>
      </constructor>
      <function name="get_default" c:identifier="camel_certdb_get_default">
        <doc xml:space="preserve"
             filename="src/camel/camel-certdb.c"
             line="436">FIXME Document me!</doc>
        <source-position filename="src/camel/camel-certdb.h" line="112"/>
        <return-value transfer-ownership="full">
          <type name="CertDB" c:type="CamelCertDB*"/>
        </return-value>
      </function>
      <virtual-method name="cert_load">
        <source-position filename="src/camel/camel-certdb.h" line="89"/>
        <return-value transfer-ownership="full">
          <type name="Cert" c:type="CamelCert*"/>
        </return-value>
        <parameters>
          <instance-parameter name="certdb" transfer-ownership="none">
            <type name="CertDB" c:type="CamelCertDB*"/>
          </instance-parameter>
          <parameter name="istream"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="FILE*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="cert_save">
        <source-position filename="src/camel/camel-certdb.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="certdb" transfer-ownership="none">
            <type name="CertDB" c:type="CamelCertDB*"/>
          </instance-parameter>
          <parameter name="cert" transfer-ownership="none">
            <type name="Cert" c:type="CamelCert*"/>
          </parameter>
          <parameter name="ostream"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="FILE*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="header_load">
        <source-position filename="src/camel/camel-certdb.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="certdb" transfer-ownership="none">
            <type name="CertDB" c:type="CamelCertDB*"/>
          </instance-parameter>
          <parameter name="istream"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="FILE*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="header_save">
        <source-position filename="src/camel/camel-certdb.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="certdb" transfer-ownership="none">
            <type name="CertDB" c:type="CamelCertDB*"/>
          </instance-parameter>
          <parameter name="ostream"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="FILE*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="clear" c:identifier="camel_certdb_clear">
        <source-position filename="src/camel/camel-certdb.h" line="136"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="certdb" transfer-ownership="none">
            <type name="CertDB" c:type="CamelCertDB*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_host"
              c:identifier="camel_certdb_get_host"
              version="3.6">
        <source-position filename="src/camel/camel-certdb.h" line="122"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-certdb.c"
               line="650">a #CamelCert corresponding to the pair of @hostname
  and @fingerprint, or %NULL, if no such certificate is stored in the @certdb.</doc>
          <type name="Cert" c:type="CamelCert*"/>
        </return-value>
        <parameters>
          <instance-parameter name="certdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-certdb.c"
                 line="646">a #CamelCertDB</doc>
            <type name="CertDB" c:type="CamelCertDB*"/>
          </instance-parameter>
          <parameter name="hostname" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-certdb.c"
                 line="647">a host name of a certificate</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="fingerprint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-certdb.c"
                 line="648">a fingerprint of a certificate</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_certs"
              c:identifier="camel_certdb_list_certs"
              version="3.16">
        <doc xml:space="preserve"
             filename="src/camel/camel-certdb.c"
             line="790">Gathers a list of known certificates. Each certificate in the returned #GSList
is referenced, thus unref it with camel_cert_unref() when done with it, the same
as free the list itself.</doc>
        <source-position filename="src/camel/camel-certdb.h" line="138"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-certdb.c"
               line="798">Newly allocated list of
  referenced CamelCert-s, which are stored in the @certdb.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Cert"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="certdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-certdb.c"
                 line="792">a #CamelCertDB</doc>
            <type name="CertDB" c:type="CamelCertDB*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load" c:identifier="camel_certdb_load">
        <source-position filename="src/camel/camel-certdb.h" line="115"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="certdb" transfer-ownership="none">
            <type name="CertDB" c:type="CamelCertDB*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="put" c:identifier="camel_certdb_put" version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-certdb.c"
             line="680">Puts a certificate to the database. In case there exists a certificate
with the same hostname and fingerprint, then it is replaced. This adds
its own reference on the @cert.</doc>
        <source-position filename="src/camel/camel-certdb.h" line="128"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="certdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-certdb.c"
                 line="682">a #CamelCertDB</doc>
            <type name="CertDB" c:type="CamelCertDB*"/>
          </instance-parameter>
          <parameter name="cert" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-certdb.c"
                 line="683">a #CamelCert</doc>
            <type name="Cert" c:type="CamelCert*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_host"
              c:identifier="camel_certdb_remove_host"
              version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-certdb.c"
             line="722">Removes a certificate identified by the @hostname and @fingerprint.</doc>
        <source-position filename="src/camel/camel-certdb.h" line="132"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="certdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-certdb.c"
                 line="724">a #CamelCertDB</doc>
            <type name="CertDB" c:type="CamelCertDB*"/>
          </instance-parameter>
          <parameter name="hostname" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-certdb.c"
                 line="725">a host name of a certificate</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="fingerprint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-certdb.c"
                 line="726">a fingerprint of a certificate</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save" c:identifier="camel_certdb_save">
        <source-position filename="src/camel/camel-certdb.h" line="116"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="certdb" transfer-ownership="none">
            <type name="CertDB" c:type="CamelCertDB*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_default" c:identifier="camel_certdb_set_default">
        <source-position filename="src/camel/camel-certdb.h" line="111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="certdb" transfer-ownership="none">
            <type name="CertDB" c:type="CamelCertDB*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_filename" c:identifier="camel_certdb_set_filename">
        <source-position filename="src/camel/camel-certdb.h" line="113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="certdb" transfer-ownership="none">
            <type name="CertDB" c:type="CamelCertDB*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="touch" c:identifier="camel_certdb_touch">
        <source-position filename="src/camel/camel-certdb.h" line="117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="certdb" transfer-ownership="none">
            <type name="CertDB" c:type="CamelCertDB*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="CertDBPrivate" c:type="CamelCertDBPrivate*"/>
      </field>
    </class>
    <record name="CertDBClass"
            c:type="CamelCertDBClass"
            glib:is-gtype-struct-for="CertDB">
      <source-position filename="src/camel/camel-certdb.h" line="97"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="header_load">
        <callback name="header_load">
          <source-position filename="src/camel/camel-certdb.h" line="84"/>
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="certdb" transfer-ownership="none">
              <type name="CertDB" c:type="CamelCertDB*"/>
            </parameter>
            <parameter name="istream"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="gpointer" c:type="FILE*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="header_save">
        <callback name="header_save">
          <source-position filename="src/camel/camel-certdb.h" line="86"/>
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="certdb" transfer-ownership="none">
              <type name="CertDB" c:type="CamelCertDB*"/>
            </parameter>
            <parameter name="ostream"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="gpointer" c:type="FILE*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cert_load">
        <callback name="cert_load">
          <source-position filename="src/camel/camel-certdb.h" line="89"/>
          <return-value transfer-ownership="full">
            <type name="Cert" c:type="CamelCert*"/>
          </return-value>
          <parameters>
            <parameter name="certdb" transfer-ownership="none">
              <type name="CertDB" c:type="CamelCertDB*"/>
            </parameter>
            <parameter name="istream"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="gpointer" c:type="FILE*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cert_save">
        <callback name="cert_save">
          <source-position filename="src/camel/camel-certdb.h" line="91"/>
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="certdb" transfer-ownership="none">
              <type name="CertDB" c:type="CamelCertDB*"/>
            </parameter>
            <parameter name="cert" transfer-ownership="none">
              <type name="Cert" c:type="CamelCert*"/>
            </parameter>
            <parameter name="ostream"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="gpointer" c:type="FILE*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="CertDBPrivate"
            c:type="CamelCertDBPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-certdb.h" line="53"/>
    </record>
    <enumeration name="CertTrust" c:type="CamelCertTrust">
      <source-position filename="src/camel/camel-certdb.h" line="62"/>
      <member name="unknown" value="0" c:identifier="CAMEL_CERT_TRUST_UNKNOWN">
      </member>
      <member name="never" value="1" c:identifier="CAMEL_CERT_TRUST_NEVER">
      </member>
      <member name="marginal"
              value="2"
              c:identifier="CAMEL_CERT_TRUST_MARGINAL">
      </member>
      <member name="fully" value="3" c:identifier="CAMEL_CERT_TRUST_FULLY">
      </member>
      <member name="ultimate"
              value="4"
              c:identifier="CAMEL_CERT_TRUST_ULTIMATE">
      </member>
      <member name="temporary"
              value="5"
              c:identifier="CAMEL_CERT_TRUST_TEMPORARY">
      </member>
    </enumeration>
    <record name="Charset" c:type="CamelCharset">
      <source-position filename="src/camel/camel-charset-map.h" line="36"/>
      <field name="mask" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="level" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <method name="best_name" c:identifier="camel_charset_best_name">
        <source-position filename="src/camel/camel-charset-map.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="charset" transfer-ownership="none">
            <type name="Charset" c:type="CamelCharset*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="init" c:identifier="camel_charset_init">
        <source-position filename="src/camel/camel-charset-map.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="c" transfer-ownership="none">
            <type name="Charset" c:type="CamelCharset*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="step" c:identifier="camel_charset_step">
        <doc xml:space="preserve"
             filename="src/camel/camel-charset-map.c"
             line="319">Processes more input text with the @cc.</doc>
        <source-position filename="src/camel/camel-charset-map.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-charset-map.c"
                 line="321">a #CamelCharset</doc>
            <type name="Charset" c:type="CamelCharset*"/>
          </instance-parameter>
          <parameter name="in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-charset-map.c"
                 line="322">input text</doc>
            <array length="1" zero-terminated="0" c:type="const gchar*">
              <type name="gchar" c:type="gchar"/>
            </array>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-charset-map.c"
                 line="323">length of the input text</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <function name="best" c:identifier="camel_charset_best">
        <doc xml:space="preserve"
             filename="src/camel/camel-charset-map.c"
             line="392">Finds the minimum charset for this string NULL means US-ASCII.</doc>
        <source-position filename="src/camel/camel-charset-map.h" line="44"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-charset-map.c"
               line="399">the minimum charset or NULL for US_ASCII.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-charset-map.c"
                 line="394">input text</doc>
            <array length="1" zero-terminated="0" c:type="const gchar*">
              <type name="gchar" c:type="gchar"/>
            </array>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-charset-map.c"
                 line="395">length of the input text</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="iso_to_windows"
                c:identifier="camel_charset_iso_to_windows">
        <source-position filename="src/camel/camel-charset-map.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-charset-map.c"
               line="416">the equivalent Windows charset.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="isocharset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-charset-map.c"
                 line="414">a canonicalised ISO charset</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="CipherCertInfo" c:type="CamelCipherCertInfo">
      <source-position filename="src/camel/camel-cipher-context.h" line="153"/>
      <field name="name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="email" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="cert_data" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="cert_data_free" writable="1">
        <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
      </field>
      <field name="cert_data_clone" writable="1">
        <type name="CipherCloneFunc" c:type="CamelCipherCloneFunc"/>
      </field>
      <field name="properties" writable="1">
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
    </record>
    <record name="CipherCertInfoProperty" c:type="CamelCipherCertInfoProperty">
      <source-position filename="src/camel/camel-cipher-context.h" line="142"/>
      <field name="name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="value" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="value_free" writable="1">
        <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
      </field>
      <field name="value_clone" writable="1">
        <type name="CipherCloneFunc" c:type="CamelCipherCloneFunc"/>
      </field>
    </record>
    <callback name="CipherCloneFunc" c:type="CamelCipherCloneFunc">
      <source-position filename="src/camel/camel-cipher-context.h" line="93"/>
      <return-value transfer-ownership="none" nullable="1">
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="value"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="CipherContext"
           c:symbol-prefix="cipher_context"
           c:type="CamelCipherContext"
           parent="GObject.Object"
           glib:type-name="CamelCipherContext"
           glib:get-type="camel_cipher_context_get_type"
           glib:type-struct="CipherContextClass">
      <source-position filename="src/camel/camel-cipher-context.h" line="219"/>
      <constructor name="new" c:identifier="camel_cipher_context_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-cipher-context.c"
             line="1498">This creates a new CamelCipherContext object which is used to sign,
verify, encrypt and decrypt streams.</doc>
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="223"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-cipher-context.c"
               line="1505">the new CamelCipherContext</doc>
          <type name="CipherContext" c:type="CamelCipherContext*"/>
        </return-value>
        <parameters>
          <parameter name="session"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="1500">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="error_quark"
                c:identifier="camel_cipher_context_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <virtual-method name="decrypt_sync"
                      invoker="decrypt_sync"
                      version="3.0"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-cipher-context.c"
             line="782">Decrypts @ipart into @opart.</doc>
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="211"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-cipher-context.c"
               line="792">a validity/encryption status, or %NULL on error</doc>
          <type name="CipherValidity" c:type="CamelCipherValidity*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="784">a #CamelCipherContext</doc>
            <type name="CipherContext" c:type="CamelCipherContext*"/>
          </instance-parameter>
          <parameter name="ipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="785">cipher-text #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </parameter>
          <parameter name="opart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="786">clear-text #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="787">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="encrypt_sync"
                      invoker="encrypt_sync"
                      version="3.0"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-cipher-context.c"
             line="601">Encrypts the clear-text @ipart and writes the resulting cipher-text to @opart.

Note: The @userid is unused, %NULL should be passed for it.</doc>
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="203"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-cipher-context.c"
               line="615">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="603">a #CamelCipherContext</doc>
            <type name="CipherContext" c:type="CamelCipherContext*"/>
          </instance-parameter>
          <parameter name="userid"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="604">unused</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="recipients" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="605">an array of recipient key IDs and/or email addresses</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="ipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="606">clear-text #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </parameter>
          <parameter name="opart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="607">cipher-text #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="608">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="hash_to_id" invoker="hash_to_id">
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="187"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <type name="CipherContext" c:type="CamelCipherContext*"/>
          </instance-parameter>
          <parameter name="hash" transfer-ownership="none">
            <type name="CipherHash" c:type="CamelCipherHash"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="id_to_hash" invoker="id_to_hash">
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="185"/>
        <return-value transfer-ownership="none">
          <type name="CipherHash" c:type="CamelCipherHash"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <type name="CipherContext" c:type="CamelCipherContext*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="sign_sync"
                      invoker="sign_sync"
                      version="3.0"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-cipher-context.c"
             line="310">Converts the (unsigned) part @ipart into a new self-contained MIME
part @opart.  This may be a multipart/signed part, or a simple part
for enveloped types.</doc>
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="191"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-cipher-context.c"
               line="324">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="312">a #CamelCipherContext</doc>
            <type name="CipherContext" c:type="CamelCipherContext*"/>
          </instance-parameter>
          <parameter name="userid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="313">a private key to use to sign the stream</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="hash" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="314">preferred Message-Integrity-Check hash algorithm</doc>
            <type name="CipherHash" c:type="CamelCipherHash"/>
          </parameter>
          <parameter name="ipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="315">input #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </parameter>
          <parameter name="opart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="316">output #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="317">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="verify_sync" invoker="verify_sync" throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-cipher-context.c"
             line="452">Verifies the signature.</doc>
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="199"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-cipher-context.c"
               line="461">a #CamelCipherValidity structure containing information
about the integrity of the input stream, or %NULL on failure to
execute at all</doc>
          <type name="CipherValidity" c:type="CamelCipherValidity*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="454">a #CamelCipherContext</doc>
            <type name="CipherContext" c:type="CamelCipherContext*"/>
          </instance-parameter>
          <parameter name="ipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="455">the #CamelMimePart to verify</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="456">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="decrypt"
              c:identifier="camel_cipher_context_decrypt"
              version="3.0">
        <doc xml:space="preserve"
             filename="src/camel/camel-cipher-context.c"
             line="864">Asynchronously decrypts @ipart into @opart.

When the operation is finished, @callback will be called.  You can
then call camel_cipher_context_decrypt_finish() to get the result of
the operation.</doc>
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="304"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="866">a #CamelCipherContext</doc>
            <type name="CipherContext" c:type="CamelCipherContext*"/>
          </instance-parameter>
          <parameter name="ipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="867">cipher-text #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </parameter>
          <parameter name="opart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="868">clear-text #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="869">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="870">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="871">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="872">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="decrypt_finish"
              c:identifier="camel_cipher_context_decrypt_finish"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-cipher-context.c"
             line="915">Finishes the operation started with camel_cipher_context_decrypt().</doc>
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="312"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-cipher-context.c"
               line="923">a validity/encryption status, or %NULL on error</doc>
          <type name="CipherValidity" c:type="CamelCipherValidity*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="917">a #CamelCipherContext</doc>
            <type name="CipherContext" c:type="CamelCipherContext*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="918">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="decrypt_sync"
              c:identifier="camel_cipher_context_decrypt_sync"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-cipher-context.c"
             line="782">Decrypts @ipart into @opart.</doc>
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="298"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-cipher-context.c"
               line="792">a validity/encryption status, or %NULL on error</doc>
          <type name="CipherValidity" c:type="CamelCipherValidity*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="784">a #CamelCipherContext</doc>
            <type name="CipherContext" c:type="CamelCipherContext*"/>
          </instance-parameter>
          <parameter name="ipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="785">cipher-text #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </parameter>
          <parameter name="opart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="786">clear-text #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="787">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="encrypt"
              c:identifier="camel_cipher_context_encrypt"
              version="3.0">
        <doc xml:space="preserve"
             filename="src/camel/camel-cipher-context.c"
             line="689">Asynchronously encrypts the clear-text @ipart and
writes the resulting cipher-text to @opart.

When the operation is finished, @callback will be called.  You can
then call camel_cipher_context_encrypt_finish() to get the result of
the operation.

Note: The @userid is unused, %NULL should be passed for it.</doc>
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="284"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="691">a #CamelCipherContext</doc>
            <type name="CipherContext" c:type="CamelCipherContext*"/>
          </instance-parameter>
          <parameter name="userid"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="692">unused</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="recipients" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="693">an array of recipient key IDs and/or email addresses</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="ipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="694">clear-text #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </parameter>
          <parameter name="opart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="695">cipher-text #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="696">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="697">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="698">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="699">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="encrypt_finish"
              c:identifier="camel_cipher_context_encrypt_finish"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-cipher-context.c"
             line="755">Finishes the operation started with camel_cipher_context_encrypt().</doc>
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="293"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-cipher-context.c"
               line="763">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="757">a #CamelCipherContext</doc>
            <type name="CipherContext" c:type="CamelCipherContext*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="758">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="encrypt_sync"
              c:identifier="camel_cipher_context_encrypt_sync"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-cipher-context.c"
             line="601">Encrypts the clear-text @ipart and writes the resulting cipher-text to @opart.

Note: The @userid is unused, %NULL should be passed for it.</doc>
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="276"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-cipher-context.c"
               line="615">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="603">a #CamelCipherContext</doc>
            <type name="CipherContext" c:type="CamelCipherContext*"/>
          </instance-parameter>
          <parameter name="userid"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="604">unused</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="recipients" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="605">an array of recipient key IDs and/or email addresses</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="ipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="606">clear-text #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </parameter>
          <parameter name="opart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="607">cipher-text #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="608">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_session"
              c:identifier="camel_cipher_context_get_session"
              glib:get-property="session"
              version="2.32">
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="224"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-cipher-context.c"
               line="1522">a #CamelSession the @context had been created with</doc>
          <type name="Session" c:type="CamelSession*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="1520">a #CamelCipherContext</doc>
            <type name="CipherContext" c:type="CamelCipherContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hash_to_id" c:identifier="camel_cipher_context_hash_to_id">
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="230"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <type name="CipherContext" c:type="CamelCipherContext*"/>
          </instance-parameter>
          <parameter name="hash" transfer-ownership="none">
            <type name="CipherHash" c:type="CamelCipherHash"/>
          </parameter>
        </parameters>
      </method>
      <method name="id_to_hash" c:identifier="camel_cipher_context_id_to_hash">
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="228"/>
        <return-value transfer-ownership="none">
          <type name="CipherHash" c:type="CamelCipherHash"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <type name="CipherContext" c:type="CamelCipherContext*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sign"
              c:identifier="camel_cipher_context_sign"
              version="3.0">
        <doc xml:space="preserve"
             filename="src/camel/camel-cipher-context.c"
             line="367">Asynchronously converts the (unsigned) part @ipart into a new
self-contained MIME part @opart.  This may be a multipart/signed part,
or a simple part for enveloped types.

When the operation is finished, @callback will be called.  You can then
call camel_cipher_context_sign_finish() to get the result of the operation.</doc>
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="246"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="369">a #CamelCipherContext</doc>
            <type name="CipherContext" c:type="CamelCipherContext*"/>
          </instance-parameter>
          <parameter name="userid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="370">a private key to use to sign the stream</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="hash" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="371">preferred Message-Integrity-Check hash algorithm</doc>
            <type name="CipherHash" c:type="CamelCipherHash"/>
          </parameter>
          <parameter name="ipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="372">input #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </parameter>
          <parameter name="opart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="373">output #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="374">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="375">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="376">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="377">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="sign_finish"
              c:identifier="camel_cipher_context_sign_finish"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-cipher-context.c"
             line="425">Finishes the operation started with camel_cipher_context_sign().</doc>
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="255"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-cipher-context.c"
               line="433">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="427">a #CamelCipherContext</doc>
            <type name="CipherContext" c:type="CamelCipherContext*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="428">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sign_sync"
              c:identifier="camel_cipher_context_sign_sync"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-cipher-context.c"
             line="310">Converts the (unsigned) part @ipart into a new self-contained MIME
part @opart.  This may be a multipart/signed part, or a simple part
for enveloped types.</doc>
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="239"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-cipher-context.c"
               line="324">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="312">a #CamelCipherContext</doc>
            <type name="CipherContext" c:type="CamelCipherContext*"/>
          </instance-parameter>
          <parameter name="userid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="313">a private key to use to sign the stream</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="hash" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="314">preferred Message-Integrity-Check hash algorithm</doc>
            <type name="CipherHash" c:type="CamelCipherHash"/>
          </parameter>
          <parameter name="ipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="315">input #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </parameter>
          <parameter name="opart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="316">output #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="317">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="verify"
              c:identifier="camel_cipher_context_verify"
              version="3.0">
        <doc xml:space="preserve"
             filename="src/camel/camel-cipher-context.c"
             line="525">Asynchronously verifies the signature.

When the operation is finished, @callback will be called.  You can
then call camel_cipher_context_verify_finish() to get the result of
the operation.</doc>
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="265"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="527">a #CamelCipherContext</doc>
            <type name="CipherContext" c:type="CamelCipherContext*"/>
          </instance-parameter>
          <parameter name="ipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="528">the #CamelMimePart to verify</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="529">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="530">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="531">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="532">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="verify_finish"
              c:identifier="camel_cipher_context_verify_finish"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-cipher-context.c"
             line="572">Finishes the operation started with camel_cipher_context_verify().</doc>
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="272"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-cipher-context.c"
               line="580">a #CamelCipherValidity structure containing information
about the integrity of the input stream, or %NULL on failure to
execute at all</doc>
          <type name="CipherValidity" c:type="CamelCipherValidity*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="574">a #CamelCipherContext</doc>
            <type name="CipherContext" c:type="CamelCipherContext*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="575">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="verify_sync"
              c:identifier="camel_cipher_context_verify_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-cipher-context.c"
             line="452">Verifies the signature.</doc>
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="260"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-cipher-context.c"
               line="461">a #CamelCipherValidity structure containing information
about the integrity of the input stream, or %NULL on failure to
execute at all</doc>
          <type name="CipherValidity" c:type="CamelCipherValidity*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="454">a #CamelCipherContext</doc>
            <type name="CipherContext" c:type="CamelCipherContext*"/>
          </instance-parameter>
          <parameter name="ipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="455">the #CamelMimePart to verify</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="456">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <property name="session"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_session">
        <type name="Session"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="CipherContextPrivate" c:type="CamelCipherContextPrivate*"/>
      </field>
    </class>
    <record name="CipherContextClass"
            c:type="CamelCipherContextClass"
            glib:is-gtype-struct-for="CipherContext">
      <source-position filename="src/camel/camel-cipher-context.h" line="219"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="sign_protocol">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="encrypt_protocol">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="key_protocol">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="id_to_hash">
        <callback name="id_to_hash">
          <source-position filename="src/camel/camel-cipher-context.h"
                           line="185"/>
          <return-value transfer-ownership="none">
            <type name="CipherHash" c:type="CamelCipherHash"/>
          </return-value>
          <parameters>
            <parameter name="context" transfer-ownership="none">
              <type name="CipherContext" c:type="CamelCipherContext*"/>
            </parameter>
            <parameter name="id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="hash_to_id">
        <callback name="hash_to_id">
          <source-position filename="src/camel/camel-cipher-context.h"
                           line="187"/>
          <return-value transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="context" transfer-ownership="none">
              <type name="CipherContext" c:type="CamelCipherContext*"/>
            </parameter>
            <parameter name="hash" transfer-ownership="none">
              <type name="CipherHash" c:type="CamelCipherHash"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="sign_sync">
        <callback name="sign_sync" throws="1">
          <source-position filename="src/camel/camel-cipher-context.h"
                           line="191"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="324">%TRUE on success, %FALSE on error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="context" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-cipher-context.c"
                   line="312">a #CamelCipherContext</doc>
              <type name="CipherContext" c:type="CamelCipherContext*"/>
            </parameter>
            <parameter name="userid" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-cipher-context.c"
                   line="313">a private key to use to sign the stream</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="hash" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-cipher-context.c"
                   line="314">preferred Message-Integrity-Check hash algorithm</doc>
              <type name="CipherHash" c:type="CamelCipherHash"/>
            </parameter>
            <parameter name="ipart" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-cipher-context.c"
                   line="315">input #CamelMimePart</doc>
              <type name="MimePart" c:type="CamelMimePart*"/>
            </parameter>
            <parameter name="opart" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-cipher-context.c"
                   line="316">output #CamelMimePart</doc>
              <type name="MimePart" c:type="CamelMimePart*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-cipher-context.c"
                   line="317">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="verify_sync">
        <callback name="verify_sync" throws="1">
          <source-position filename="src/camel/camel-cipher-context.h"
                           line="199"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="461">a #CamelCipherValidity structure containing information
about the integrity of the input stream, or %NULL on failure to
execute at all</doc>
            <type name="CipherValidity" c:type="CamelCipherValidity*"/>
          </return-value>
          <parameters>
            <parameter name="context" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-cipher-context.c"
                   line="454">a #CamelCipherContext</doc>
              <type name="CipherContext" c:type="CamelCipherContext*"/>
            </parameter>
            <parameter name="ipart" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-cipher-context.c"
                   line="455">the #CamelMimePart to verify</doc>
              <type name="MimePart" c:type="CamelMimePart*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-cipher-context.c"
                   line="456">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="encrypt_sync">
        <callback name="encrypt_sync" throws="1">
          <source-position filename="src/camel/camel-cipher-context.h"
                           line="203"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="615">%TRUE on success, %FALSE on error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="context" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-cipher-context.c"
                   line="603">a #CamelCipherContext</doc>
              <type name="CipherContext" c:type="CamelCipherContext*"/>
            </parameter>
            <parameter name="userid"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-cipher-context.c"
                   line="604">unused</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="recipients" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-cipher-context.c"
                   line="605">an array of recipient key IDs and/or email addresses</doc>
              <array name="GLib.PtrArray" c:type="GPtrArray*">
                <type name="utf8"/>
              </array>
            </parameter>
            <parameter name="ipart" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-cipher-context.c"
                   line="606">clear-text #CamelMimePart</doc>
              <type name="MimePart" c:type="CamelMimePart*"/>
            </parameter>
            <parameter name="opart" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-cipher-context.c"
                   line="607">cipher-text #CamelMimePart</doc>
              <type name="MimePart" c:type="CamelMimePart*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-cipher-context.c"
                   line="608">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="decrypt_sync">
        <callback name="decrypt_sync" throws="1">
          <source-position filename="src/camel/camel-cipher-context.h"
                           line="211"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="792">a validity/encryption status, or %NULL on error</doc>
            <type name="CipherValidity" c:type="CamelCipherValidity*"/>
          </return-value>
          <parameters>
            <parameter name="context" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-cipher-context.c"
                   line="784">a #CamelCipherContext</doc>
              <type name="CipherContext" c:type="CamelCipherContext*"/>
            </parameter>
            <parameter name="ipart" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-cipher-context.c"
                   line="785">cipher-text #CamelMimePart</doc>
              <type name="MimePart" c:type="CamelMimePart*"/>
            </parameter>
            <parameter name="opart" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-cipher-context.c"
                   line="786">clear-text #CamelMimePart</doc>
              <type name="MimePart" c:type="CamelMimePart*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-cipher-context.c"
                   line="787">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="CipherContextError"
                 version="3.50"
                 c:type="CamelCipherContextError">
      <source-position filename="src/camel/camel-cipher-context.h" line="91"/>
      <member name="cipher_context_error_key_not_found"
              value="0"
              c:identifier="CAMEL_CIPHER_CONTEXT_ERROR_KEY_NOT_FOUND">
        <doc xml:space="preserve"
             filename="src/camel/camel-cipher-context.h"
             line="85">one or more recipient's public key was not found</doc>
      </member>
    </enumeration>
    <record name="CipherContextPrivate"
            c:type="CamelCipherContextPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-cipher-context.h" line="101"/>
    </record>
    <enumeration name="CipherHash" c:type="CamelCipherHash">
      <source-position filename="src/camel/camel-cipher-context.h" line="114"/>
      <member name="default"
              value="0"
              c:identifier="CAMEL_CIPHER_HASH_DEFAULT">
      </member>
      <member name="md2" value="1" c:identifier="CAMEL_CIPHER_HASH_MD2">
      </member>
      <member name="md5" value="2" c:identifier="CAMEL_CIPHER_HASH_MD5">
      </member>
      <member name="sha1" value="3" c:identifier="CAMEL_CIPHER_HASH_SHA1">
      </member>
      <member name="sha256" value="4" c:identifier="CAMEL_CIPHER_HASH_SHA256">
      </member>
      <member name="sha384" value="5" c:identifier="CAMEL_CIPHER_HASH_SHA384">
      </member>
      <member name="sha512" value="6" c:identifier="CAMEL_CIPHER_HASH_SHA512">
      </member>
      <member name="ripemd160"
              value="7"
              c:identifier="CAMEL_CIPHER_HASH_RIPEMD160">
      </member>
      <member name="tiger192"
              value="8"
              c:identifier="CAMEL_CIPHER_HASH_TIGER192">
      </member>
      <member name="haval5160"
              value="9"
              c:identifier="CAMEL_CIPHER_HASH_HAVAL5160">
      </member>
    </enumeration>
    <record name="CipherValidity"
            c:type="CamelCipherValidity"
            glib:type-name="CamelCipherValidity"
            glib:get-type="camel_cipher_validity_get_type"
            c:symbol-prefix="cipher_validity">
      <source-position filename="src/camel/camel-cipher-context.h" line="169"/>
      <field name="children" writable="1">
        <type name="GLib.Queue" c:type="GQueue"/>
      </field>
      <field name="sign" writable="1">
        <type name="gpointer" c:type="_sign"/>
      </field>
      <field name="encrypt" writable="1">
        <type name="gpointer" c:type="_encrypt"/>
      </field>
      <constructor name="new" c:identifier="camel_cipher_validity_new">
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="320"/>
        <return-value transfer-ownership="full">
          <type name="CipherValidity" c:type="CamelCipherValidity*"/>
        </return-value>
      </constructor>
      <method name="add_certinfo"
              c:identifier="camel_cipher_validity_add_certinfo">
        <doc xml:space="preserve"
             filename="src/camel/camel-cipher-context.c"
             line="1160">Add a cert info to the signer or encrypter info.</doc>
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="333"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-cipher-context.c"
               line="1169">Index of the added certinfo; -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="vin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="1162">a #CamelCipherValidity</doc>
            <type name="CipherValidity" c:type="CamelCipherValidity*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="1163">a #CamelCipherValidityMode, where to add the additional certificate information</doc>
            <type name="CipherValidityMode" c:type="CamelCipherValidityMode"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="1164">a name to add</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="email" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="1165">an e-mail address to add</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_certinfo_ex"
              c:identifier="camel_cipher_validity_add_certinfo_ex"
              version="2.30">
        <doc xml:space="preserve"
             filename="src/camel/camel-cipher-context.c"
             line="1180">Add a cert info to the signer or encrypter info, with extended data set.</doc>
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="338"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-cipher-context.c"
               line="1192">Index of the added certinfo; -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="vin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="1182">a #CamelCipherValidity</doc>
            <type name="CipherValidity" c:type="CamelCipherValidity*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="1183">a #CamelCipherValidityMode, where to add the additional certificate information</doc>
            <type name="CipherValidityMode" c:type="CamelCipherValidityMode"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="1184">a name to add</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="email" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="1185">an e-mail address to add</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cert_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     destroy="4">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="1186">a certificate data, or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cert_data_free"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="1187">a destroy function for @cert_data; required, when @cert_data is not %NULL</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
          <parameter name="cert_data_clone"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="1188">a copy function for @cert_data, to copy the data; required, when @cert_data is not %NULL</doc>
            <type name="CipherCloneFunc" c:type="CamelCipherCloneFunc"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear" c:identifier="camel_cipher_validity_clear">
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="330"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="validity" transfer-ownership="none">
            <type name="CipherValidity" c:type="CamelCipherValidity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="clone" c:identifier="camel_cipher_validity_clone">
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="332"/>
        <return-value transfer-ownership="full">
          <type name="CipherValidity" c:type="CamelCipherValidity*"/>
        </return-value>
        <parameters>
          <instance-parameter name="vin" transfer-ownership="none">
            <type name="CipherValidity" c:type="CamelCipherValidity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="envelope" c:identifier="camel_cipher_validity_envelope">
        <doc xml:space="preserve"
             filename="src/camel/camel-cipher-context.c"
             line="1320">Calculate a conglomerate validity based on wrapping one secure part inside
another one.</doc>
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="359"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="parent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="1322">a #CamelCipherValidity</doc>
            <type name="CipherValidity" c:type="CamelCipherValidity*"/>
          </instance-parameter>
          <parameter name="valid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="1323">a new #CamelCipherValidity to conglomerate the @parent with</doc>
            <type name="CipherValidity" c:type="CamelCipherValidity*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="camel_cipher_validity_free">
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="361"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="validity" transfer-ownership="none">
            <type name="CipherValidity" c:type="CamelCipherValidity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_certinfo_property"
              c:identifier="camel_cipher_validity_get_certinfo_property"
              version="3.22">
        <doc xml:space="preserve"
             filename="src/camel/camel-cipher-context.c"
             line="1233">Gets a named property @name value for the given @info_index of the @mode validity part.</doc>
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="346"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-cipher-context.c"
               line="1242">Value of a named property of a #CamelCipherCertInfo, or %NULL when no such
   property exists. The returned value is owned by the associated #CamelCipherCertInfo
   and is valid until the cert info is freed.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="vin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="1235">a #CamelCipherValidity</doc>
            <type name="CipherValidity" c:type="CamelCipherValidity*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="1236">which cipher validity part to use</doc>
            <type name="CipherValidityMode" c:type="CamelCipherValidityMode"/>
          </parameter>
          <parameter name="info_index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="1237">a 0-based index of the requested #CamelCipherCertInfo</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="1238">a property name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="camel_cipher_validity_get_description">
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="325"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="validity" transfer-ownership="none">
            <type name="CipherValidity" c:type="CamelCipherValidity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_valid" c:identifier="camel_cipher_validity_get_valid">
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="322"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="validity" transfer-ownership="none">
            <type name="CipherValidity" c:type="CamelCipherValidity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="init" c:identifier="camel_cipher_validity_init">
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="321"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="validity" transfer-ownership="none">
            <type name="CipherValidity" c:type="CamelCipherValidity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_certinfo_property"
              c:identifier="camel_cipher_validity_set_certinfo_property"
              version="3.22">
        <doc xml:space="preserve"
             filename="src/camel/camel-cipher-context.c"
             line="1274">Sets a named property @name value @value for the given @info_index
of the @mode validity part. If the @value is %NULL, then the property
is removed. With a non-%NULL @value also @value_free and @value_clone
functions cannot be %NULL.</doc>
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="351"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="1276">a #CamelCipherValidity</doc>
            <type name="CipherValidity" c:type="CamelCipherValidity*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="1277">which cipher validity part to use</doc>
            <type name="CipherValidityMode" c:type="CamelCipherValidityMode"/>
          </parameter>
          <parameter name="info_index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="1278">a 0-based index of the requested #CamelCipherCertInfo</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="1279">a property name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     destroy="4">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="1280">a property value, or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="value_free"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="1281">a free function for the @value</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
          <parameter name="value_clone"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call">
            <doc xml:space="preserve"
                 filename="src/camel/camel-cipher-context.c"
                 line="1282">a clone function for the @value</doc>
            <type name="CipherCloneFunc" c:type="CamelCipherCloneFunc"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_description"
              c:identifier="camel_cipher_validity_set_description">
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="327"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="validity" transfer-ownership="none">
            <type name="CipherValidity" c:type="CamelCipherValidity*"/>
          </instance-parameter>
          <parameter name="description" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_valid" c:identifier="camel_cipher_validity_set_valid">
        <source-position filename="src/camel/camel-cipher-context.h"
                         line="323"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="validity" transfer-ownership="none">
            <type name="CipherValidity" c:type="CamelCipherValidity*"/>
          </instance-parameter>
          <parameter name="valid" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="CipherValidityEncrypt"
                 c:type="CamelCipherValidityEncrypt">
      <source-position filename="src/camel/camel-cipher-context.h" line="129"/>
      <member name="none"
              value="0"
              c:identifier="CAMEL_CIPHER_VALIDITY_ENCRYPT_NONE">
      </member>
      <member name="weak"
              value="1"
              c:identifier="CAMEL_CIPHER_VALIDITY_ENCRYPT_WEAK">
      </member>
      <member name="encrypted"
              value="2"
              c:identifier="CAMEL_CIPHER_VALIDITY_ENCRYPT_ENCRYPTED">
      </member>
      <member name="strong"
              value="3"
              c:identifier="CAMEL_CIPHER_VALIDITY_ENCRYPT_STRONG">
      </member>
    </enumeration>
    <enumeration name="CipherValidityMode" c:type="CamelCipherValidityMode">
      <source-position filename="src/camel/camel-cipher-context.h" line="134"/>
      <member name="sign" value="0" c:identifier="CAMEL_CIPHER_VALIDITY_SIGN">
      </member>
      <member name="encrypt"
              value="1"
              c:identifier="CAMEL_CIPHER_VALIDITY_ENCRYPT">
      </member>
    </enumeration>
    <enumeration name="CipherValiditySign" c:type="CamelCipherValiditySign">
      <source-position filename="src/camel/camel-cipher-context.h" line="122"/>
      <member name="none"
              value="0"
              c:identifier="CAMEL_CIPHER_VALIDITY_SIGN_NONE">
      </member>
      <member name="good"
              value="1"
              c:identifier="CAMEL_CIPHER_VALIDITY_SIGN_GOOD">
      </member>
      <member name="bad"
              value="2"
              c:identifier="CAMEL_CIPHER_VALIDITY_SIGN_BAD">
      </member>
      <member name="unknown"
              value="3"
              c:identifier="CAMEL_CIPHER_VALIDITY_SIGN_UNKNOWN">
      </member>
      <member name="need_public_key"
              value="4"
              c:identifier="CAMEL_CIPHER_VALIDITY_SIGN_NEED_PUBLIC_KEY">
      </member>
    </enumeration>
    <enumeration name="CompareType"
                 version="3.24"
                 glib:type-name="CamelCompareType"
                 glib:get-type="camel_compare_type_get_type"
                 c:type="CamelCompareType">
      <doc xml:space="preserve"
           filename="src/camel/camel-enums.h"
           line="564">Declares the compare type to use.</doc>
      <member name="insensitive"
              value="0"
              c:identifier="CAMEL_COMPARE_CASE_INSENSITIVE"
              glib:nick="insensitive"
              glib:name="CAMEL_COMPARE_CASE_INSENSITIVE">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="566">compare case insensitively</doc>
      </member>
      <member name="sensitive"
              value="1"
              c:identifier="CAMEL_COMPARE_CASE_SENSITIVE"
              glib:nick="sensitive"
              glib:name="CAMEL_COMPARE_CASE_SENSITIVE">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="567">compare case sensitively</doc>
      </member>
    </enumeration>
    <record name="ContentDisposition"
            c:type="CamelContentDisposition"
            glib:type-name="CamelContentDisposition"
            glib:get-type="camel_content_disposition_get_type"
            c:symbol-prefix="content_disposition">
      <source-position filename="src/camel/camel-mime-utils.h" line="68"/>
      <field name="disposition" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="params" writable="1">
        <type name="gpointer" c:type="_camel_header_param*"/>
      </field>
      <field name="refcount" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <constructor name="new" c:identifier="camel_content_disposition_new">
        <source-position filename="src/camel/camel-mime-utils.h" line="141"/>
        <return-value transfer-ownership="full">
          <type name="ContentDisposition" c:type="CamelContentDisposition*"/>
        </return-value>
      </constructor>
      <method name="format" c:identifier="camel_content_disposition_format">
        <source-position filename="src/camel/camel-mime-utils.h" line="145"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="disposition" transfer-ownership="none">
            <type name="ContentDisposition" c:type="CamelContentDisposition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_attachment"
              c:identifier="camel_content_disposition_is_attachment">
        <source-position filename="src/camel/camel-mime-utils.h" line="146"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="disposition" transfer-ownership="none">
            <type name="ContentDisposition"
                  c:type="const CamelContentDisposition*"/>
          </instance-parameter>
          <parameter name="content_type" transfer-ownership="none">
            <type name="ContentType" c:type="const CamelContentType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_attachment_ex"
              c:identifier="camel_content_disposition_is_attachment_ex">
        <source-position filename="src/camel/camel-mime-utils.h" line="147"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="disposition" transfer-ownership="none">
            <type name="ContentDisposition"
                  c:type="const CamelContentDisposition*"/>
          </instance-parameter>
          <parameter name="content_type" transfer-ownership="none">
            <type name="ContentType" c:type="const CamelContentType*"/>
          </parameter>
          <parameter name="parent_content_type" transfer-ownership="none">
            <type name="ContentType" c:type="const CamelContentType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="camel_content_disposition_ref">
        <source-position filename="src/camel/camel-mime-utils.h" line="143"/>
        <return-value transfer-ownership="full">
          <type name="ContentDisposition" c:type="CamelContentDisposition*"/>
        </return-value>
        <parameters>
          <instance-parameter name="disposition" transfer-ownership="none">
            <type name="ContentDisposition" c:type="CamelContentDisposition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="camel_content_disposition_unref">
        <source-position filename="src/camel/camel-mime-utils.h" line="144"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="disposition" transfer-ownership="none">
            <type name="ContentDisposition" c:type="CamelContentDisposition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="decode" c:identifier="camel_content_disposition_decode">
        <source-position filename="src/camel/camel-mime-utils.h" line="142"/>
        <return-value transfer-ownership="full">
          <type name="ContentDisposition" c:type="CamelContentDisposition*"/>
        </return-value>
        <parameters>
          <parameter name="in" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="ContentType"
            c:type="CamelContentType"
            glib:type-name="CamelContentType"
            glib:get-type="camel_content_type_get_type"
            c:symbol-prefix="content_type">
      <source-position filename="src/camel/camel-mime-utils.h" line="62"/>
      <field name="type" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="subtype" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="params" writable="1">
        <type name="gpointer" c:type="_camel_header_param*"/>
      </field>
      <field name="refcount" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <constructor name="new" c:identifier="camel_content_type_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="2570">Create a new #CamelContentType.</doc>
        <source-position filename="src/camel/camel-mime-utils.h" line="126"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="2577">the new #CamelContentType</doc>
          <type name="ContentType" c:type="CamelContentType*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-utils.c"
                 line="2572">the major type of the new content-type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="subtype" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-utils.c"
                 line="2573">the subtype</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="dump" c:identifier="camel_content_type_dump">
        <source-position filename="src/camel/camel-mime-utils.h" line="137"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="content_type" transfer-ownership="none">
            <type name="ContentType" c:type="CamelContentType*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="format" c:identifier="camel_content_type_format">
        <source-position filename="src/camel/camel-mime-utils.h" line="133"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="content_type" transfer-ownership="none">
            <type name="ContentType" c:type="CamelContentType*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is" c:identifier="camel_content_type_is">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="2519">The subtype of "*" will match any subtype.  If @ct is %NULL, then
it will match the type "text/plain".</doc>
        <source-position filename="src/camel/camel-mime-utils.h" line="132"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="2528">%TRUE if the content type @ct is of type @type/@subtype or
%FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="content_type"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-utils.c"
                 line="2521">A content type specifier, or %NULL.</doc>
            <type name="ContentType" c:type="const CamelContentType*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-utils.c"
                 line="2522">A type to check against.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="subtype" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-utils.c"
                 line="2523">A subtype to check against, or "*" to match any subtype.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="param" c:identifier="camel_content_type_param">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="2482">Searches the params on s #CamelContentType for a param named @name
and gets the value.</doc>
        <source-position filename="src/camel/camel-mime-utils.h" line="130"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="2490">the value of the @name param</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="content_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-utils.c"
                 line="2484">a #CamelContentType</doc>
            <type name="ContentType" c:type="CamelContentType*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-utils.c"
                 line="2485">name of param to find</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="camel_content_type_ref">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="2594">Refs the content type.</doc>
        <source-position filename="src/camel/camel-mime-utils.h" line="129"/>
        <return-value transfer-ownership="full">
          <type name="ContentType" c:type="CamelContentType*"/>
        </return-value>
        <parameters>
          <instance-parameter name="content_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-utils.c"
                 line="2596">a #CamelContentType</doc>
            <type name="ContentType" c:type="CamelContentType*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_param" c:identifier="camel_content_type_set_param">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="2501">Set a parameter on @content_type.</doc>
        <source-position filename="src/camel/camel-mime-utils.h" line="131"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="content_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-utils.c"
                 line="2503">a #CamelContentType</doc>
            <type name="ContentType" c:type="CamelContentType*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-utils.c"
                 line="2504">name of param to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-utils.c"
                 line="2505">value of param to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="simple" c:identifier="camel_content_type_simple">
        <source-position filename="src/camel/camel-mime-utils.h" line="134"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="content_type" transfer-ownership="none">
            <type name="ContentType" c:type="CamelContentType*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="camel_content_type_unref">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="2609">Unrefs, and potentially frees, the content type.</doc>
        <source-position filename="src/camel/camel-mime-utils.h" line="128"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="content_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-utils.c"
                 line="2611">a #CamelContentType</doc>
            <type name="ContentType" c:type="CamelContentType*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="decode" c:identifier="camel_content_type_decode">
        <source-position filename="src/camel/camel-mime-utils.h" line="127"/>
        <return-value transfer-ownership="full">
          <type name="ContentType" c:type="CamelContentType*"/>
        </return-value>
        <parameters>
          <parameter name="in" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <callback name="CopyFunc" c:type="CamelCopyFunc">
      <source-position filename="src/camel/camel-object-bag.h" line="33"/>
      <return-value transfer-ownership="none" nullable="1">
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="object"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
      </parameters>
    </callback>
    <function-macro name="DATA_CACHE"
                    c:identifier="CAMEL_DATA_CACHE"
                    introspectable="0">
      <source-position filename="src/camel/camel-data-cache.h" line="32"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DATA_CACHE_CLASS"
                    c:identifier="CAMEL_DATA_CACHE_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-data-cache.h" line="35"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DATA_CACHE_GET_CLASS"
                    c:identifier="CAMEL_DATA_CACHE_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-data-cache.h" line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DATA_WRAPPER"
                    c:identifier="CAMEL_DATA_WRAPPER"
                    introspectable="0">
      <source-position filename="src/camel/camel-data-wrapper.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DATA_WRAPPER_CLASS"
                    c:identifier="CAMEL_DATA_WRAPPER_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-data-wrapper.h" line="39"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DATA_WRAPPER_GET_CLASS"
                    c:identifier="CAMEL_DATA_WRAPPER_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-data-wrapper.h" line="48"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="DB"
           c:symbol-prefix="db"
           c:type="CamelDB"
           version="2.24"
           parent="GObject.Object"
           glib:type-name="CamelDB"
           glib:get-type="camel_db_get_type"
           glib:type-struct="DBClass">
      <source-position filename="src/camel/camel-db.h" line="90"/>
      <constructor name="new"
                   c:identifier="camel_db_new"
                   version="3.24"
                   throws="1">
        <source-position filename="src/camel/camel-db.h" line="360"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="805">A new #CamelDB with @filename as its database file.
  Free it with g_object_unref() when no longer needed.</doc>
          <type name="DB" c:type="CamelDB*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="802">A filename with the database to open/create</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="camel_mir_free"
                c:identifier="camel_db_camel_mir_free"
                version="2.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="2642">Frees the @record and all of its associated data.</doc>
        <source-position filename="src/camel/camel-db.h" line="509"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="record"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2644">a #CamelMIRecord</doc>
            <type name="MIRecord" c:type="CamelMIRecord*"/>
          </parameter>
        </parameters>
      </function>
      <function name="error_quark" c:identifier="camel_db_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="free_sqlized_string"
                c:identifier="camel_db_free_sqlized_string"
                version="2.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="2692">Frees a string previosuly returned by camel_db_sqlize_string().</doc>
        <source-position filename="src/camel/camel-db.h" line="507"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="string"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2694">a string to free</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_column_ident"
                c:identifier="camel_db_get_column_ident"
                version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="2907">Traverses column name from index @index into an enum
#CamelDBKnownColumnNames value.  The @col_names contains @ncols columns.
First time this is called is created the @hash from col_names indexes into
the enum, and this is reused for every other call.  The function expects
that column names are returned always in the same order.  When all rows
are read the @hash table can be freed with g_hash_table_destroy().</doc>
        <source-position filename="src/camel/camel-db.h" line="339"/>
        <return-value transfer-ownership="none">
          <type name="DBKnownColumnNames" c:type="CamelDBKnownColumnNames"/>
        </return-value>
        <parameters>
          <parameter name="hash"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2909">a #GHashTable</doc>
            <type name="GLib.HashTable" c:type="GHashTable**">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2910">an index to start with, between 0 and @ncols</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="ncols" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2911">number of @col_names</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="col_names" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2912">column names to traverse</doc>
            <array length="2" zero-terminated="0" c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="get_column_name"
                c:identifier="camel_db_get_column_name"
                version="2.24">
        <source-position filename="src/camel/camel-db.h" line="508"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="2725">A corresponding column name in the message info table
  for the @raw_name, or %NULL, when there is no corresponding column in the summary.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="raw_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2723">raw name to find the column name for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="release_cache_memory"
                c:identifier="camel_db_release_cache_memory"
                version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="3033">Instructs sqlite to release its memory, if possible. This can be avoided
when CAMEL_SQLITE_FREE_CACHE environment variable is set.</doc>
        <source-position filename="src/camel/camel-db.h" line="504"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="sqlize_string"
                c:identifier="camel_db_sqlize_string"
                version="2.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="2675">Converts the @string to be usable in the SQLite statements.</doc>
        <source-position filename="src/camel/camel-db.h" line="506"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="2681">A newly allocated sqlized @string. The returned
   value should be freed with camel_db_sqlize_string(), when no longer needed.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2677">a string to "sqlize"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <method name="abort_transaction"
              c:identifier="camel_db_abort_transaction"
              version="2.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="1057">Ends an ongoing transaction by ignoring the changes.</doc>
        <source-position filename="src/camel/camel-db.h" line="376"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="1064">0 on success, -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1059">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="add_to_transaction"
              c:identifier="camel_db_add_to_transaction"
              version="2.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="1092">Adds a statement to an ongoing transaction.</doc>
        <source-position filename="src/camel/camel-db.h" line="371"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="1100">0 on success, -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1094">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
          <parameter name="query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1095">an SQL (SQLite) statement</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="begin_transaction"
              c:identifier="camel_db_begin_transaction"
              version="2.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="988">Begins transaction. End it with camel_db_end_transaction() or camel_db_abort_transaction().</doc>
        <source-position filename="src/camel/camel-db.h" line="369"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="995">0 on success, -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="990">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="clear_folder_summary"
              c:identifier="camel_db_clear_folder_summary"
              version="2.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="2499">Deletes the given folder from the 'folders' table and empties
its message info table.</doc>
        <source-position filename="src/camel/camel-db.h" line="378"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="2508">0 on success, -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2501">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2502">full name of the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="command"
              c:identifier="camel_db_command"
              version="2.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="968">Executes an SQLite command.</doc>
        <source-position filename="src/camel/camel-db.h" line="363"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="976">0 on success, -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="970">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
          <parameter name="stmt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="971">an SQL (SQLite) statement to execute</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="count_deleted_message_info"
              c:identifier="camel_db_count_deleted_message_info"
              version="2.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="1377">Counts how many deleted messages is stored in the given table.</doc>
        <source-position filename="src/camel/camel-db.h" line="444"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="1386">0 on success, -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1379">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
          <parameter name="table_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1380">name of the table</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="count"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1381">where to store the resulting count</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
        </parameters>
      </method>
      <method name="count_junk_message_info"
              c:identifier="camel_db_count_junk_message_info"
              version="2.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="1212">Counts how many junk messages is stored in the given table.</doc>
        <source-position filename="src/camel/camel-db.h" line="434"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="1221">0 on success, -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1214">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
          <parameter name="table_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1215">name of the table</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="count"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1216">where to store the resulting count</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
        </parameters>
      </method>
      <method name="count_junk_not_deleted_message_info"
              c:identifier="camel_db_count_junk_not_deleted_message_info"
              throws="1">
        <source-position filename="src/camel/camel-db.h" line="464"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
          <parameter name="table_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="count" transfer-ownership="none">
            <type name="guint32" c:type="guint32*"/>
          </parameter>
        </parameters>
      </method>
      <method name="count_message_info"
              c:identifier="camel_db_count_message_info"
              version="2.26"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="1175">Executes a COUNT() query (like "SELECT COUNT(*) FROM table") and provides
the result of it as an unsigned 32-bit integer.</doc>
        <source-position filename="src/camel/camel-db.h" line="469"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="1185">0 on success, -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1177">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
          <parameter name="query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1178">a COUNT() query</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="count"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1179">the result of the query</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
        </parameters>
      </method>
      <method name="count_total_message_info"
              c:identifier="camel_db_count_total_message_info"
              version="2.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="1410">Counts how many messages is stored in the given table.</doc>
        <source-position filename="src/camel/camel-db.h" line="449"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="1419">0 on success, -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1412">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
          <parameter name="table_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1413">name of the table</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="count"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1414">where to store the resulting count</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
        </parameters>
      </method>
      <method name="count_unread_message_info"
              c:identifier="camel_db_count_unread_message_info"
              version="2.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="1245">Counts how many unread messages is stored in the given table.</doc>
        <source-position filename="src/camel/camel-db.h" line="439"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="1254">0 on success, -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1247">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
          <parameter name="table_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1248">name of the table</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="count"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1249">where to store the resulting count</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
        </parameters>
      </method>
      <method name="count_visible_message_info"
              c:identifier="camel_db_count_visible_message_info"
              version="2.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="1311">Counts how many visible (not deleted and not junk) messages is stored in the given table.</doc>
        <source-position filename="src/camel/camel-db.h" line="454"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="1320">0 on success, -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1313">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
          <parameter name="table_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1314">name of the table</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="count"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1315">where to store the resulting count</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
        </parameters>
      </method>
      <method name="count_visible_unread_message_info"
              c:identifier="camel_db_count_visible_unread_message_info"
              version="2.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="1278">Counts how many visible (not deleted and not junk) and unread messages is stored in the given table.</doc>
        <source-position filename="src/camel/camel-db.h" line="459"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="1287">0 on success, -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1280">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
          <parameter name="table_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1281">name of the table</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="count"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1282">where to store the resulting count</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_folders_table"
              c:identifier="camel_db_create_folders_table"
              version="2.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="1627">Creates a 'folders' table, if it doesn't exist yet.</doc>
        <source-position filename="src/camel/camel-db.h" line="396"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="1634">0 on success, -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1629">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="delete_folder"
              c:identifier="camel_db_delete_folder"
              version="2.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="2543">Deletes the given folder from the 'folders' table and also drops
its message info table.</doc>
        <source-position filename="src/camel/camel-db.h" line="385"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="2552">0 on success, -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2545">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2546">full name of the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_uid"
              c:identifier="camel_db_delete_uid"
              version="2.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="2380">Deletes single mesage info in the given folder with
the given UID.</doc>
        <source-position filename="src/camel/camel-db.h" line="388"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="2390">0 on success, -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2382">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2383">full name of the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2384">a message info UID to delete</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_uids"
              c:identifier="camel_db_delete_uids"
              version="2.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="2474">Deletes a list of message UIDs as one transaction.</doc>
        <source-position filename="src/camel/camel-db.h" line="392"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="2483">0 on success, -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2476">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2477">full name of the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="uids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2478">A #GList of uids</doc>
            <type name="GLib.List" c:type="const GList*">
              <type name="utf8"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="end_transaction"
              c:identifier="camel_db_end_transaction"
              version="2.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="1025">Ends an ongoing transaction by committing the changes.</doc>
        <source-position filename="src/camel/camel-db.h" line="374"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="1032">0 on success, -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1027">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="flush_in_memory_transactions"
              c:identifier="camel_db_flush_in_memory_transactions"
              version="2.26"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="2825">A pair function for camel_db_start_in_memory_transactions(),
to commit the changes to @folder_name and free the in-memory table.</doc>
        <source-position filename="src/camel/camel-db.h" line="493"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="2834">0 on success, -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2827">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2828">full name of the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_filename"
              c:identifier="camel_db_get_filename"
              version="3.24">
        <source-position filename="src/camel/camel-db.h" line="362"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="923">A filename associated with @cdb.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="921">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_folder_deleted_uids"
              c:identifier="camel_db_get_folder_deleted_uids"
              version="2.24"
              throws="1">
        <source-position filename="src/camel/camel-db.h" line="482"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="1599">An array
  of the UID-s of the deleted messages in the given folder. Use
  camel_pstring_free() to free the elements.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1595">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1596">full name of the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_folder_junk_uids"
              c:identifier="camel_db_get_folder_junk_uids"
              version="2.24"
              throws="1">
        <source-position filename="src/camel/camel-db.h" line="479"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="1564">An array
  of the UID-s of the junk messages in the given folder. Use
  camel_pstring_free() to free the elements.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1560">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1561">full name of the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_folder_uids"
              c:identifier="camel_db_get_folder_uids"
              version="2.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="1517">Fills hash with uid-&gt;GUINT_TO_POINTER (flag). Use camel_pstring_free()
to free the keys of the @hash.</doc>
        <source-position filename="src/camel/camel-db.h" line="473"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="1529">0 on success, -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1519">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1520">full name of the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="sort_by"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1521">optional ORDER BY clause (without the "ORDER BY" prefix)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="collate"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1522">optional collate function name to use</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="hash" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1523">a hash table to fill</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="guint32"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="maybe_run_maintenance"
              c:identifier="camel_db_maybe_run_maintenance"
              version="3.16"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="2983">Runs a @cdb maintenance, which includes vacuum, if necessary.</doc>
        <source-position filename="src/camel/camel-db.h" line="501"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="2990">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2985">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepare_message_info_table"
              c:identifier="camel_db_prepare_message_info_table"
              version="2.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="2002">Prepares message info table for the given folder.</doc>
        <source-position filename="src/camel/camel-db.h" line="412"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="2010">0 on success, -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2004">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2005">full name of the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="read_folder_info_record"
              c:identifier="camel_db_read_folder_info_record"
              version="2.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="2272">reads folder information for the given folder and stores it into the @record.</doc>
        <source-position filename="src/camel/camel-db.h" line="407"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="2281">0 on success, -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2274">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2275">full name of the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="record"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2276">a #CamelFIRecord</doc>
            <type name="FIRecord" c:type="CamelFIRecord*"/>
          </parameter>
        </parameters>
      </method>
      <method name="read_message_info_record_with_uid"
              c:identifier="camel_db_read_message_info_record_with_uid"
              version="2.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="2308">Selects single message info for the given @uid in folder @folder_name and calls
the @callback for it.</doc>
        <source-position filename="src/camel/camel-db.h" line="427"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="2320">0 on success, -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2310">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2311">full name of the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2312">a message info UID to read the record for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2313">user data of the @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2314">callback to call for the found row</doc>
            <type name="DBSelectCB" c:type="CamelDBSelectCB"/>
          </parameter>
        </parameters>
      </method>
      <method name="read_message_info_records"
              c:identifier="camel_db_read_message_info_records"
              version="2.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="2346">Reads all mesasge info records for the given folder and calls @callback for them.</doc>
        <source-position filename="src/camel/camel-db.h" line="421"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="2356">0 on success, -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2348">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2349">full name of the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2350">user data for the @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2351">callback to call for each found row</doc>
            <type name="DBSelectCB" c:type="CamelDBSelectCB"/>
          </parameter>
        </parameters>
      </method>
      <method name="rename_folder"
              c:identifier="camel_db_rename_folder"
              version="2.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="2586">Renames tables for the @old_folder_name to be used with @new_folder_name.</doc>
        <source-position filename="src/camel/camel-db.h" line="381"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="2595">0 on success, -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2588">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
          <parameter name="old_folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2589">full name of the existing folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="new_folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2590">full name of the folder to rename it to</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reset_folder_version"
              c:identifier="camel_db_reset_folder_version"
              version="2.28"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="1904">Sets a version number for the given folder.</doc>
        <source-position filename="src/camel/camel-db.h" line="497"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="1913">0 on success, -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1906">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1907">full name of the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="reset_version" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1908">version number to set</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="select"
              c:identifier="camel_db_select"
              version="2.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="1444">Executes a SELECT staement and calls the @callback for each selected row.</doc>
        <source-position filename="src/camel/camel-db.h" line="398"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="1454">0 on success, -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1446">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
          <parameter name="stmt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1447">a SELECT statment to execute</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1448">a callback to call for each row</doc>
            <type name="DBSelectCB" c:type="CamelDBSelectCB"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1449">user data for the @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_collate"
              c:identifier="camel_db_set_collate"
              version="2.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="935">Defines a collation @collate, which can be used in SQL (SQLite)
statement as a collation function. The @func is called when
colation is used.</doc>
        <source-position filename="src/camel/camel-db.h" line="486"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="937">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
          <parameter name="col" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="938">a column name; currently unused</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="collate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="939">collation name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="func" transfer-ownership="none" scope="call">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="940">a #CamelDBCollate collation function</doc>
            <type name="DBCollate" c:type="CamelDBCollate"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_in_memory_transactions"
              c:identifier="camel_db_start_in_memory_transactions"
              version="2.26"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="2764">Creates an in-memory table for a batch transactions. Use camel_db_flush_in_memory_transactions()
to commit the changes and free the in-memory table.</doc>
        <source-position filename="src/camel/camel-db.h" line="490"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="2772">0 on success, -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2766">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="transaction_command"
              c:identifier="camel_db_transaction_command"
              version="2.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="1118">Runs the list of commands as a single transaction.</doc>
        <source-position filename="src/camel/camel-db.h" line="366"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="1126">0 on success, -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1120">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
          <parameter name="qry_list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="1121">A #GList of querries</doc>
            <type name="GLib.List" c:type="const GList*">
              <type name="utf8"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="write_folder_info_record"
              c:identifier="camel_db_write_folder_info_record"
              version="2.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="2154">Write the @record to the 'folders' table.</doc>
        <source-position filename="src/camel/camel-db.h" line="403"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="2162">0 on success, -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2156">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
          <parameter name="record" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2157">a #CamelFIRecord</doc>
            <type name="FIRecord" c:type="CamelFIRecord*"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_message_info_record"
              c:identifier="camel_db_write_message_info_record"
              version="2.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.c"
             line="2081">Write the @record to the message info table of the given folder.</doc>
        <source-position filename="src/camel/camel-db.h" line="416"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.c"
               line="2090">0 on success, -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2083">a #CamelDB</doc>
            <type name="DB" c:type="CamelDB*"/>
          </instance-parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2084">full name of the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="record" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-db.c"
                 line="2085">a #CamelMIRecord</doc>
            <type name="MIRecord" c:type="CamelMIRecord*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DBPrivate" c:type="CamelDBPrivate*"/>
      </field>
    </class>
    <record name="DBClass" c:type="CamelDBClass" glib:is-gtype-struct-for="DB">
      <source-position filename="src/camel/camel-db.h" line="90"/>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <callback name="DBCollate" c:type="CamelDBCollate" version="2.24">
      <doc xml:space="preserve"
           filename="src/camel/camel-db.h"
           line="92">A collation callback function.</doc>
      <source-position filename="src/camel/camel-db.h" line="106"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="102">less than zero, zero, or greater than zero value, the same as for example strcmp() does.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="enc"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.h"
               line="94">a used encoding (SQLITE_UTF8)</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="length1" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.h"
               line="95">length of the @data1</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="data1"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.h"
               line="96">the first value, of lenth @length1</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
        <parameter name="length2" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.h"
               line="97">length of the @data2</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="data2"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.h"
               line="98">the second value, of lenth @length2</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="DBError" version="3.44" c:type="CamelDBError">
      <source-position filename="src/camel/camel-db.h" line="67"/>
      <member name="db_error_corrupt"
              value="0"
              c:identifier="CAMEL_DB_ERROR_CORRUPT">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="61">database is corrupt</doc>
      </member>
    </enumeration>
    <enumeration name="DBKnownColumnNames"
                 version="3.4"
                 c:type="CamelDBKnownColumnNames">
      <doc xml:space="preserve"
           filename="src/camel/camel-db.h"
           line="253">An enum of all the known columns, which can be used for a quick column lookups.</doc>
      <source-position filename="src/camel/camel-db.h" line="337"/>
      <member name="unknown" value="-1" c:identifier="CAMEL_DB_COLUMN_UNKNOWN">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="255">unknown column name</doc>
      </member>
      <member name="attachment"
              value="0"
              c:identifier="CAMEL_DB_COLUMN_ATTACHMENT">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="256">attachment</doc>
      </member>
      <member name="bdata" value="1" c:identifier="CAMEL_DB_COLUMN_BDATA">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="257">bdata</doc>
      </member>
      <member name="cinfo" value="2" c:identifier="CAMEL_DB_COLUMN_CINFO">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="258">cinfo</doc>
      </member>
      <member name="deleted" value="3" c:identifier="CAMEL_DB_COLUMN_DELETED">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="259">deleted</doc>
      </member>
      <member name="deleted_count"
              value="4"
              c:identifier="CAMEL_DB_COLUMN_DELETED_COUNT">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="260">deleted_count</doc>
      </member>
      <member name="dreceived"
              value="5"
              c:identifier="CAMEL_DB_COLUMN_DRECEIVED">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="261">dreceived</doc>
      </member>
      <member name="dsent" value="6" c:identifier="CAMEL_DB_COLUMN_DSENT">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="262">dsent</doc>
      </member>
      <member name="flags" value="7" c:identifier="CAMEL_DB_COLUMN_FLAGS">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="263">flags</doc>
      </member>
      <member name="folder_name"
              value="8"
              c:identifier="CAMEL_DB_COLUMN_FOLDER_NAME">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="264">folder_name</doc>
      </member>
      <member name="followup_completed_on"
              value="9"
              c:identifier="CAMEL_DB_COLUMN_FOLLOWUP_COMPLETED_ON">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="265">followup_completed_on</doc>
      </member>
      <member name="followup_due_by"
              value="10"
              c:identifier="CAMEL_DB_COLUMN_FOLLOWUP_DUE_BY">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="266">followup_due_by</doc>
      </member>
      <member name="followup_flag"
              value="11"
              c:identifier="CAMEL_DB_COLUMN_FOLLOWUP_FLAG">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="267">followup_flag</doc>
      </member>
      <member name="important"
              value="12"
              c:identifier="CAMEL_DB_COLUMN_IMPORTANT">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="268">important</doc>
      </member>
      <member name="jnd_count"
              value="13"
              c:identifier="CAMEL_DB_COLUMN_JND_COUNT">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="269">jnd_count</doc>
      </member>
      <member name="junk" value="14" c:identifier="CAMEL_DB_COLUMN_JUNK">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="270">junk</doc>
      </member>
      <member name="junk_count"
              value="15"
              c:identifier="CAMEL_DB_COLUMN_JUNK_COUNT">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="271">junk_count</doc>
      </member>
      <member name="labels" value="16" c:identifier="CAMEL_DB_COLUMN_LABELS">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="272">labels</doc>
      </member>
      <member name="mail_cc" value="17" c:identifier="CAMEL_DB_COLUMN_MAIL_CC">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="273">mail_cc</doc>
      </member>
      <member name="mail_from"
              value="18"
              c:identifier="CAMEL_DB_COLUMN_MAIL_FROM">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="274">mail_from</doc>
      </member>
      <member name="mail_to" value="19" c:identifier="CAMEL_DB_COLUMN_MAIL_TO">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="275">mail_to</doc>
      </member>
      <member name="mlist" value="20" c:identifier="CAMEL_DB_COLUMN_MLIST">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="276">mlist</doc>
      </member>
      <member name="nextuid" value="21" c:identifier="CAMEL_DB_COLUMN_NEXTUID">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="277">nextuid</doc>
      </member>
      <member name="part" value="22" c:identifier="CAMEL_DB_COLUMN_PART">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="278">part</doc>
      </member>
      <member name="preview" value="23" c:identifier="CAMEL_DB_COLUMN_PREVIEW">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="279">preview</doc>
      </member>
      <member name="read" value="24" c:identifier="CAMEL_DB_COLUMN_READ">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="280">read</doc>
      </member>
      <member name="replied" value="25" c:identifier="CAMEL_DB_COLUMN_REPLIED">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="281">replied</doc>
      </member>
      <member name="saved_count"
              value="26"
              c:identifier="CAMEL_DB_COLUMN_SAVED_COUNT">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="282">saved_count</doc>
      </member>
      <member name="size" value="27" c:identifier="CAMEL_DB_COLUMN_SIZE">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="283">size</doc>
      </member>
      <member name="subject" value="28" c:identifier="CAMEL_DB_COLUMN_SUBJECT">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="284">subject</doc>
      </member>
      <member name="time" value="29" c:identifier="CAMEL_DB_COLUMN_TIME">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="285">time</doc>
      </member>
      <member name="uid" value="30" c:identifier="CAMEL_DB_COLUMN_UID">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="286">uid</doc>
      </member>
      <member name="unread_count"
              value="31"
              c:identifier="CAMEL_DB_COLUMN_UNREAD_COUNT">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="287">unread_count</doc>
      </member>
      <member name="userheaders"
              value="32"
              c:identifier="CAMEL_DB_COLUMN_USERHEADERS">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="288">userheaders</doc>
      </member>
      <member name="usertags"
              value="33"
              c:identifier="CAMEL_DB_COLUMN_USERTAGS">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="289">usertags</doc>
      </member>
      <member name="version" value="34" c:identifier="CAMEL_DB_COLUMN_VERSION">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="290">version</doc>
      </member>
      <member name="visible_count"
              value="35"
              c:identifier="CAMEL_DB_COLUMN_VISIBLE_COUNT">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="291">visible_count</doc>
      </member>
      <member name="vuid" value="36" c:identifier="CAMEL_DB_COLUMN_VUID">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="292">vuid</doc>
      </member>
    </enumeration>
    <record name="DBPrivate" c:type="CamelDBPrivate" disguised="1" opaque="1">
      <source-position filename="src/camel/camel-db.h" line="71"/>
    </record>
    <callback name="DBSelectCB" c:type="CamelDBSelectCB" version="2.24">
      <doc xml:space="preserve"
           filename="src/camel/camel-db.h"
           line="341">A callback called for the SELECT statements. The items at the same index of @colvalues
and @colnames correspond to each other.</doc>
      <source-position filename="src/camel/camel-db.h" line="355"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="351">0 to continue the SELECT execution, non-zero to abort the execution.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="0">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.h"
               line="343">a callback user data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="ncol" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.h"
               line="344">how many columns is provided</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="colvalues" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.h"
               line="345">array of column values, as UTF-8 strings</doc>
          <array length="1" zero-terminated="0" c:type="gchar**">
            <type name="utf8" c:type="gchar*"/>
          </array>
        </parameter>
        <parameter name="colnames" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-db.h"
               line="346">array of column names</doc>
          <array length="1" zero-terminated="0" c:type="gchar**">
            <type name="utf8" c:type="gchar*"/>
          </array>
        </parameter>
      </parameters>
    </callback>
    <function-macro name="DB_CLASS"
                    c:identifier="CAMEL_DB_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-db.h" line="35"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="DB_FILE"
              value="folders.db"
              c:type="CAMEL_DB_FILE"
              version="2.24">
      <source-position filename="src/camel/camel-db.h" line="111"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DB_FREE_CACHE_SIZE"
              value="2097152"
              c:type="CAMEL_DB_FREE_CACHE_SIZE"
              version="2.24">
      <source-position filename="src/camel/camel-db.h" line="149"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="DB_GET_CLASS"
                    c:identifier="CAMEL_DB_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-db.h" line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="DB_IN_MEMORY_DB"
              value="EVO_IN_meM_hAnDlE"
              c:type="CAMEL_DB_IN_MEMORY_DB"
              version="2.26">
      <source-position filename="src/camel/camel-db.h" line="127"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DB_IN_MEMORY_TABLE"
              value="EVO_IN_meM_hAnDlE.temp"
              c:type="CAMEL_DB_IN_MEMORY_TABLE"
              version="2.26">
      <source-position filename="src/camel/camel-db.h" line="120"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DB_IN_MEMORY_TABLE_LIMIT"
              value="100000"
              c:type="CAMEL_DB_IN_MEMORY_TABLE_LIMIT"
              version="2.26">
      <source-position filename="src/camel/camel-db.h" line="134"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DB_SLEEP_INTERVAL"
              value="100"
              c:type="CAMEL_DB_SLEEP_INTERVAL"
              version="2.24">
      <source-position filename="src/camel/camel-db.h" line="512"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DEBUG_IMAP" value="imap" c:type="CAMEL_DEBUG_IMAP">
      <source-position filename="src/camel/camel-debug.h" line="30"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEBUG_IMAP_FOLDER"
              value="imap:folder"
              c:type="CAMEL_DEBUG_IMAP_FOLDER">
      <source-position filename="src/camel/camel-debug.h" line="31"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOT_LOCK_REFRESH"
              value="30"
              c:type="CAMEL_DOT_LOCK_REFRESH">
      <source-position filename="src/camel/camel-lock-helper.h" line="62"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="DataCache"
           c:symbol-prefix="data_cache"
           c:type="CamelDataCache"
           parent="GObject.Object"
           glib:type-name="CamelDataCache"
           glib:get-type="camel_data_cache_get_type"
           glib:type-struct="DataCacheClass">
      <source-position filename="src/camel/camel-data-cache.h" line="83"/>
      <constructor name="new" c:identifier="camel_data_cache_new" throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-cache.c"
             line="180">Create a new data cache.</doc>
        <source-position filename="src/camel/camel-data-cache.h" line="86"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-cache.c"
               line="187">A new cache object, or %NULL if the base path cannot
   be written to.</doc>
          <type name="DataCache" c:type="CamelDataCache*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-cache.c"
                 line="182">Base path of cache, subdirectories will be created here.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add" c:identifier="camel_data_cache_add" throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-cache.c"
             line="431">Add a new item to the cache, returning a #GIOStream to the new item.

The key and the path combine to form a unique key used to store the item.

Potentially, expiry processing will be performed while this call is
executing.

The returned #GIOStream is referenced for thread-safety and must be
unreferenced with g_object_unref() when finished with it.</doc>
        <source-position filename="src/camel/camel-data-cache.h" line="101"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-cache.c"
               line="448">a #GIOStream for the new cache item, or %NULL on error</doc>
          <type name="Gio.IOStream" c:type="GIOStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-cache.c"
                 line="433">A #CamelDataCache</doc>
            <type name="DataCache" c:type="CamelDataCache*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-cache.c"
                 line="434">Relative path of item to add.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-cache.c"
                 line="435">Key of item to add.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear" c:identifier="camel_data_cache_clear" version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-cache.c"
             line="617">Clear cache's content in @path.</doc>
        <source-position filename="src/camel/camel-data-cache.h" line="116"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-cache.c"
                 line="619">a #CamelDataCache</doc>
            <type name="DataCache" c:type="CamelDataCache*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-cache.c"
                 line="620">Path to the (sub) cache the item exists in.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="foreach_remove"
              c:identifier="camel_data_cache_foreach_remove"
              version="3.26">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-cache.c"
             line="702">Traverses the @cdc sub-cache identified by @path and calls @func for each found file.
If the @func returns %TRUE, then the file is removed, if %FALSE, it's kept in the cache.</doc>
        <source-position filename="src/camel/camel-data-cache.h" line="118"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-cache.c"
                 line="704">a #CamelDataCache</doc>
            <type name="DataCache" c:type="CamelDataCache*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-cache.c"
                 line="705">Path to the (sub) cache the items exist in</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-cache.c"
                 line="706">a callback to call for each found file in the cache</doc>
            <type name="DataCacheRemoveFunc"
                  c:type="CamelDataCacheRemoveFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-cache.c"
                 line="707">user data passed to @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get" c:identifier="camel_data_cache_get" throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-cache.c"
             line="490">Lookup an item in the cache.  If the item exists, a #GIOStream is returned
for the item.  The stream may be shared by multiple callers, so ensure the
stream is in a valid state through external locking.

The returned #GIOStream is referenced for thread-safety and must be
unreferenced with g_object_unref() when finished with it.</doc>
        <source-position filename="src/camel/camel-data-cache.h" line="105"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-cache.c"
               line="504">a #GIOStream for the requested cache item, or %NULL on error</doc>
          <type name="Gio.IOStream" c:type="GIOStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-cache.c"
                 line="492">A #CamelDataCache</doc>
            <type name="DataCache" c:type="CamelDataCache*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-cache.c"
                 line="493">Path to the (sub) cache the item exists in.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-cache.c"
                 line="494">Key for the cache item.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_expire_enabled"
              c:identifier="camel_data_cache_get_expire_enabled"
              glib:get-property="expire-enabled"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-cache.c"
             line="249">Gets whether expire of cache data is enabled.

This is a complementary property for camel_data_cache_set_expire_age()
and camel_data_cache_set_expire_access(), which allows to disable expiry
without touching the two values. Having expire enabled, but not have set
any of the two times, still behaves like not having expiry enabled.</doc>
        <source-position filename="src/camel/camel-data-cache.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-cache.c"
               line="260">Whether expire is enabled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-cache.c"
                 line="251">a #CamelDataCache</doc>
            <type name="DataCache" c:type="CamelDataCache*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_filename"
              c:identifier="camel_data_cache_get_filename"
              version="2.26">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-cache.c"
             line="548">Lookup the filename for an item in the cache</doc>
        <source-position filename="src/camel/camel-data-cache.h" line="113"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-cache.c"
               line="556">The filename for a cache item</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-cache.c"
                 line="550">A #CamelDataCache</doc>
            <type name="DataCache" c:type="CamelDataCache*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-cache.c"
                 line="551">Path to the (sub) cache the item exists in.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-cache.c"
                 line="552">Key for the cache item.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_path"
              c:identifier="camel_data_cache_get_path"
              glib:get-property="path"
              version="2.32">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-cache.c"
             line="206">Returns the path to the data cache.</doc>
        <source-position filename="src/camel/camel-data-cache.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-cache.c"
               line="212">the path to the data cache</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-cache.c"
                 line="208">a #CamelDataCache</doc>
            <type name="DataCache" c:type="CamelDataCache*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="camel_data_cache_remove" throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-cache.c"
             line="570">Remove/expire a cache item.</doc>
        <source-position filename="src/camel/camel-data-cache.h" line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-cache.c"
               line="579">0 on success, -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-cache.c"
                 line="572">A #CamelDataCache</doc>
            <type name="DataCache" c:type="CamelDataCache*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-cache.c"
                 line="573">Path to the (sub) cache the item exists in.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-cache.c"
                 line="574">Key for the cache item.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_expire_access"
              c:identifier="camel_data_cache_set_expire_access">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-cache.c"
             line="324">Set the cache expiration policy for access times.

Items in the cache which haven't been accessed for @when
seconds may be expired at any time.  Items are expired in a lazy
manner, so it is indeterminate when the items will
physically be removed.

Note you can set both an age and an access limit.  The
age acts as a hard limit on cache entries.</doc>
        <source-position filename="src/camel/camel-data-cache.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-cache.c"
                 line="326">A #CamelDataCache</doc>
            <type name="DataCache" c:type="CamelDataCache*"/>
          </instance-parameter>
          <parameter name="when" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-cache.c"
                 line="327">Timeout for access, or -1 to disable access expiry.</doc>
            <type name="glong" c:type="time_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_expire_age"
              c:identifier="camel_data_cache_set_expire_age">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-cache.c"
             line="300">Set the cache expiration policy for aged entries.

Items in the cache older than @when seconds may be
flushed at any time.  Items are expired in a lazy
manner, so it is indeterminate when the items will
physically be removed.

Note you can set both an age and an access limit.  The
age acts as a hard limit on cache entries.</doc>
        <source-position filename="src/camel/camel-data-cache.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-cache.c"
                 line="302">A #CamelDataCache</doc>
            <type name="DataCache" c:type="CamelDataCache*"/>
          </instance-parameter>
          <parameter name="when" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-cache.c"
                 line="303">Timeout for age expiry, or -1 to disable.</doc>
            <type name="glong" c:type="time_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_expire_enabled"
              c:identifier="camel_data_cache_set_expire_enabled"
              glib:set-property="expire-enabled"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-cache.c"
             line="272">Sets whether expire of cache data is enabled.

This is a complementary property for camel_data_cache_set_expire_age()
and camel_data_cache_set_expire_access(), which allows to disable expiry
without touching the two values. Having expire enabled, but not have set
any of the two times, still behaves like not having expiry enabled.</doc>
        <source-position filename="src/camel/camel-data-cache.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-cache.c"
                 line="274">a #CamelDataCache</doc>
            <type name="DataCache" c:type="CamelDataCache*"/>
          </instance-parameter>
          <parameter name="expire_enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-cache.c"
                 line="275">a value to set</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_path"
              c:identifier="camel_data_cache_set_path"
              glib:set-property="path"
              version="2.32">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-cache.c"
             line="224">Sets the path to the data cache.</doc>
        <source-position filename="src/camel/camel-data-cache.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-cache.c"
                 line="226">a #CamelDataCache</doc>
            <type name="DataCache" c:type="CamelDataCache*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-cache.c"
                 line="227">path to the data cache</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="expire-enabled"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_expire_enabled"
                getter="get_expire_enabled"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="path"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_path"
                getter="get_path"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="DataCachePrivate" c:type="CamelDataCachePrivate*"/>
      </field>
    </class>
    <record name="DataCacheClass"
            c:type="CamelDataCacheClass"
            glib:is-gtype-struct-for="DataCache">
      <source-position filename="src/camel/camel-data-cache.h" line="83"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="DataCachePrivate"
            c:type="CamelDataCachePrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-data-cache.h" line="53"/>
    </record>
    <callback name="DataCacheRemoveFunc"
              c:type="CamelDataCacheRemoveFunc"
              version="3.26">
      <doc xml:space="preserve"
           filename="src/camel/camel-data-cache.h"
           line="55">A callback called for each found file in the cache, used
by camel_data_cache_foreach_remove(). The @filename corresponds
to the result of camel_data_cache_get_filename().</doc>
      <source-position filename="src/camel/camel-data-cache.h" line="69"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-cache.h"
             line="65">%TRUE, to delete the file, %FALSE to keep in in the cache</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="cdc" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-cache.h"
               line="57">a #CamelDataCache</doc>
          <type name="DataCache" c:type="CamelDataCache*"/>
        </parameter>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-cache.h"
               line="58">a file name found in the cache</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-cache.h"
               line="59">user data passed to camel_data_cache_foreach_remove()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="DataWrapper"
           c:symbol-prefix="data_wrapper"
           c:type="CamelDataWrapper"
           parent="GObject.Object"
           glib:type-name="CamelDataWrapper"
           glib:get-type="camel_data_wrapper_get_type"
           glib:type-struct="DataWrapperClass">
      <source-position filename="src/camel/camel-data-wrapper.h" line="109"/>
      <constructor name="new" c:identifier="camel_data_wrapper_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="448">Create a new #CamelDataWrapper object.</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="113"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-wrapper.c"
               line="453">a new #CamelDataWrapper object</doc>
          <type name="DataWrapper" c:type="CamelDataWrapper*"/>
        </return-value>
      </constructor>
      <virtual-method name="construct_from_input_stream_sync"
                      invoker="construct_from_input_stream_sync"
                      version="3.12"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="1413">Constructs the content of @data_wrapper from @input_stream.</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-wrapper.c"
               line="1422">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1415">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="input_stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1416">a #GInputStream</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1417">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="construct_from_stream_sync"
                      invoker="construct_from_stream_sync"
                      version="3.0"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="974">Constructs the content of @data_wrapper from the given @stream.</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-wrapper.c"
               line="983">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="976">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="977">an input #CamelStream</doc>
            <type name="Stream" c:type="CamelStream*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="978">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="decode_to_output_stream_sync"
                      invoker="decode_to_output_stream_sync"
                      version="3.12"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="1266">Writes the decoded data content to @output_stream.

&lt;note&gt;
  &lt;para&gt;
    This function may block even if the given output stream does not.
    For example, the content may have to be fetched across a network
    before it can be written to @output_stream.
  &lt;/para&gt;
&lt;/note&gt;</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-wrapper.c"
               line="1283">the number of bytes written, or -1 on error</doc>
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1268">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="output_stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1269">a #GOutputStream</doc>
            <type name="Gio.OutputStream" c:type="GOutputStream*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1270">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="decode_to_stream_sync"
                      invoker="decode_to_stream_sync"
                      version="3.0"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="829">Writes the decoded data content to @stream.

&lt;note&gt;
  &lt;para&gt;
    This function may block even if the given output stream does not.
    For example, the content may have to be fetched across a network
    before it can be written to @stream.
  &lt;/para&gt;
&lt;/note&gt;</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-wrapper.c"
               line="846">the number of bytes written, or -1 on error</doc>
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="831">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="832">a #CamelStream for decoded data to be written to</doc>
            <type name="Stream" c:type="CamelStream*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="833">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_mime_type" invoker="get_mime_type">
        <source-position filename="src/camel/camel-data-wrapper.h" line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-wrapper.c"
               line="549">the MIME type which must be freed by the caller</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="547">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_mime_type_field" invoker="get_mime_type_field">
        <source-position filename="src/camel/camel-data-wrapper.h" line="72"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-wrapper.c"
               line="569">the parsed form of the data wrapper's MIME type</doc>
          <type name="ContentType" c:type="CamelContentType*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="567">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_offline" invoker="is_offline">
        <source-position filename="src/camel/camel-data-wrapper.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-wrapper.c"
               line="641">whether @data_wrapper is "offline" (data stored
remotely) or not. Some optional code paths may choose to not
operate on offline data.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="639">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_mime_type" invoker="set_mime_type">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="516">This sets the data wrapper's MIME type.

It might fail, but you won't know. It will allow you to set
Content-Type parameters on the data wrapper, which are meaningless.
You should not be allowed to change the MIME type of a data wrapper
that contains data, or at least, if you do, it should invalidate the
data.</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="518">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="mime_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="519">a MIME type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_mime_type_field" invoker="set_mime_type_field">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="585">This sets the data wrapper's MIME type. It adds its own reference
to @mime_type, if not %NULL.

It suffers from the same flaws as camel_data_wrapper_set_mime_type().</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="587">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="mime_type"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="588">a #CamelContentType</doc>
            <type name="ContentType" c:type="CamelContentType*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="write_to_output_stream_sync"
                      invoker="write_to_output_stream_sync"
                      version="3.12"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="1112">Writes the content of @data_wrapper to @output_stream in a
machine-independent format appropriate for the data.

&lt;note&gt;
  &lt;para&gt;
    This function may block even if the given output stream does not.
    For example, the content may have to be fetched across a network
    before it can be written to @output_stream.
  &lt;/para&gt;
&lt;/note&gt;</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-wrapper.c"
               line="1130">the number of bytes written, or -1 on error</doc>
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1114">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="output_stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1115">a #GOutputStream</doc>
            <type name="Gio.OutputStream" c:type="GOutputStream*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1116">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="write_to_stream_sync"
                      invoker="write_to_stream_sync"
                      version="3.0"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="678">Writes the content of @data_wrapper to @stream in a machine-independent
format appropriate for the data.  It should be possible to construct an
equivalent data wrapper object later by passing this stream to
camel_data_wrapper_construct_from_stream_sync().

&lt;note&gt;
  &lt;para&gt;
    This function may block even if the given output stream does not.
    For example, the content may have to be fetched across a network
    before it can be written to @stream.
  &lt;/para&gt;
&lt;/note&gt;</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-wrapper.c"
               line="698">the number of bytes written, or -1 on error</doc>
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="680">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="681">a #CamelStream for output</doc>
            <type name="Stream" c:type="CamelStream*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="682">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="calculate_decoded_size_sync"
              c:identifier="camel_data_wrapper_calculate_decoded_size_sync"
              version="3.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="1621">Calculates decoded size of the @data_wrapper by saving it to a null-stream
and returns how many bytes had been written. It's using
camel_data_wrapper_decode_to_stream_sync() internally.</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="244"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-wrapper.c"
               line="1631">how many bytes the @data_wrapper would use when saved,
  or -1 on error.</doc>
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1623">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1624">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="calculate_size_sync"
              c:identifier="camel_data_wrapper_calculate_size_sync"
              version="3.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="1586">Calculates size of the @data_wrapper by saving it to a null-stream
and returns how many bytes had been written. It's using
camel_data_wrapper_write_to_stream_sync() internally.</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="240"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-wrapper.c"
               line="1596">how many bytes the @data_wrapper would use when saved,
  or -1 on error.</doc>
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1588">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1589">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="construct_from_data_sync"
              c:identifier="camel_data_wrapper_construct_from_data_sync"
              version="3.46"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="1550">Constructs the content of @data_wrapper from @data of length @data_len.</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="234"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-wrapper.c"
               line="1560">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1552">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1553">data to set</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="data_len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1554">length of @data</doc>
            <type name="gssize" c:type="gssize"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1555">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="construct_from_input_stream"
              c:identifier="camel_data_wrapper_construct_from_input_stream"
              version="3.12">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="1475">Asynchronously constructs the content of @data_wrapper from @input_stream.

When the operation is finished, @callback will be called.  You can then
call camel_data_wrapper_construct_from_input_stream_finish() to get the
result of the operation.</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="223"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1477">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="input_stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1478">a #GInputStream</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1479">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1480">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1481">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1482">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="construct_from_input_stream_finish"
              c:identifier="camel_data_wrapper_construct_from_input_stream_finish"
              version="3.12"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="1522">Finishes the operation started with
camel_data_wrapper_construct_from_input_stream().</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="230"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-wrapper.c"
               line="1531">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1524">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1525">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="construct_from_input_stream_sync"
              c:identifier="camel_data_wrapper_construct_from_input_stream_sync"
              version="3.12"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="1413">Constructs the content of @data_wrapper from @input_stream.</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="218"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-wrapper.c"
               line="1422">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1415">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="input_stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1416">a #GInputStream</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1417">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="construct_from_stream"
              c:identifier="camel_data_wrapper_construct_from_stream"
              version="3.0">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="1036">Asynchronously constructs the content of @data_wrapper from the given
@stream.

When the operation is finished, @callback will be called.  You can then
call camel_data_wrapper_construct_from_stream_finish() to get the result
of the operation.</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="175"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1038">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1039">an input #CamelStream</doc>
            <type name="Stream" c:type="CamelStream*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1040">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1041">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1042">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1043">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="construct_from_stream_finish"
              c:identifier="camel_data_wrapper_construct_from_stream_finish"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="1084">Finishes the operation started with
camel_data_wrapper_construct_from_stream().</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="182"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-wrapper.c"
               line="1093">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1086">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1087">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="construct_from_stream_sync"
              c:identifier="camel_data_wrapper_construct_from_stream_sync"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="974">Constructs the content of @data_wrapper from the given @stream.</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="170"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-wrapper.c"
               line="983">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="976">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="977">an input #CamelStream</doc>
            <type name="Stream" c:type="CamelStream*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="978">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="decode_to_output_stream"
              c:identifier="camel_data_wrapper_decode_to_output_stream"
              version="3.12">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="1337">Asynchronously writes the decoded data content to @output_stream.

When the operation is finished, @callback will be called.  You can then
call camel_data_wrapper_decode_to_output_stream_finish() to get the result
of the operation.</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="207"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1339">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="output_stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1340">a #GOutputStream</doc>
            <type name="Gio.OutputStream" c:type="GOutputStream*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1341">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1342">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1343">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1344">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="decode_to_output_stream_finish"
              c:identifier="camel_data_wrapper_decode_to_output_stream_finish"
              version="3.12"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="1385">Finishes the operation started with
camel_data_wrapper_decode_to_output_stream().</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="214"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-wrapper.c"
               line="1394">the number of bytes written, or -1 on error</doc>
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1387">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1388">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="decode_to_output_stream_sync"
              c:identifier="camel_data_wrapper_decode_to_output_stream_sync"
              version="3.12"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="1266">Writes the decoded data content to @output_stream.

&lt;note&gt;
  &lt;para&gt;
    This function may block even if the given output stream does not.
    For example, the content may have to be fetched across a network
    before it can be written to @output_stream.
  &lt;/para&gt;
&lt;/note&gt;</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="202"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-wrapper.c"
               line="1283">the number of bytes written, or -1 on error</doc>
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1268">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="output_stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1269">a #GOutputStream</doc>
            <type name="Gio.OutputStream" c:type="GOutputStream*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1270">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="decode_to_stream"
              c:identifier="camel_data_wrapper_decode_to_stream"
              version="3.0">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="900">Asynchronously writes the decoded data content to @stream.

When the operation is finished, @callback will be called.  You can then
call camel_data_wrapper_decode_to_stream_finish() to get the result of
the operation.</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="159"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="902">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="903">a #CamelStream for decoded data to be written to</doc>
            <type name="Stream" c:type="CamelStream*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="904">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="905">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="906">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="907">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="decode_to_stream_finish"
              c:identifier="camel_data_wrapper_decode_to_stream_finish"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="947">Finishes the operation started with camel_data_wrapper_decode_to_stream().</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="166"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-wrapper.c"
               line="955">the number of bytes written, or -1 on error</doc>
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="949">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="950">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="decode_to_stream_sync"
              c:identifier="camel_data_wrapper_decode_to_stream_sync"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="829">Writes the decoded data content to @stream.

&lt;note&gt;
  &lt;para&gt;
    This function may block even if the given output stream does not.
    For example, the content may have to be fetched across a network
    before it can be written to @stream.
  &lt;/para&gt;
&lt;/note&gt;</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="154"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-wrapper.c"
               line="846">the number of bytes written, or -1 on error</doc>
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="831">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="832">a #CamelStream for decoded data to be written to</doc>
            <type name="Stream" c:type="CamelStream*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="833">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_byte_array"
              c:identifier="camel_data_wrapper_get_byte_array"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="461">Returns the #GByteArray being used to hold the contents of @data_wrapper.

Note, it's up to the caller to use this in a thread-safe manner.</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-wrapper.c"
               line="469">the #GByteArray for @data_wrapper</doc>
          <array name="GLib.ByteArray" c:type="GByteArray*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="463">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_encoding"
              c:identifier="camel_data_wrapper_get_encoding"
              version="3.24">
        <source-position filename="src/camel/camel-data-wrapper.h" line="117"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-wrapper.c"
               line="485">An encoding (#CamelTransferEncoding) of the @data_wrapper</doc>
          <type name="TransferEncoding" c:type="CamelTransferEncoding"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="483">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mime_type"
              c:identifier="camel_data_wrapper_get_mime_type">
        <source-position filename="src/camel/camel-data-wrapper.h" line="123"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-wrapper.c"
               line="549">the MIME type which must be freed by the caller</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="547">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mime_type_field"
              c:identifier="camel_data_wrapper_get_mime_type_field">
        <source-position filename="src/camel/camel-data-wrapper.h" line="126"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-wrapper.c"
               line="569">the parsed form of the data wrapper's MIME type</doc>
          <type name="ContentType" c:type="CamelContentType*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="567">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_offline" c:identifier="camel_data_wrapper_is_offline">
        <source-position filename="src/camel/camel-data-wrapper.h" line="134"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-wrapper.c"
               line="641">whether @data_wrapper is "offline" (data stored
remotely) or not. Some optional code paths may choose to not
operate on offline data.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="639">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_encoding"
              c:identifier="camel_data_wrapper_set_encoding"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="497">Sets encoding (#CamelTransferEncoding) for the @data_wrapper.
It doesn't re-encode the content, if the encoding changes.</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="118"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="499">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="encoding" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="500">an encoding to set</doc>
            <type name="TransferEncoding" c:type="CamelTransferEncoding"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mime_type"
              c:identifier="camel_data_wrapper_set_mime_type">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="516">This sets the data wrapper's MIME type.

It might fail, but you won't know. It will allow you to set
Content-Type parameters on the data wrapper, which are meaningless.
You should not be allowed to change the MIME type of a data wrapper
that contains data, or at least, if you do, it should invalidate the
data.</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="120"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="518">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="mime_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="519">a MIME type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mime_type_field"
              c:identifier="camel_data_wrapper_set_mime_type_field">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="585">This sets the data wrapper's MIME type. It adds its own reference
to @mime_type, if not %NULL.

It suffers from the same flaws as camel_data_wrapper_set_mime_type().</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="128"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="587">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="mime_type"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="588">a #CamelContentType</doc>
            <type name="ContentType" c:type="CamelContentType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_offline"
              c:identifier="camel_data_wrapper_set_offline"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="659">Sets whether the @data_wrapper is "offline". It applies only to this
concrete instance. See camel_data_wrapper_is_offline().</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="135"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="661">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="offline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="662">whether the @data_wrapper is "offline"</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_mime_type_field"
              c:identifier="camel_data_wrapper_take_mime_type_field"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="611">Sets mime-type filed to be @mime_type and consumes it, aka unlike
camel_data_wrapper_set_mime_type_field(), this doesn't add its own
reference to @mime_type.

It suffers from the same flaws as camel_data_wrapper_set_mime_type().</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="131"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="613">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="mime_type"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="614">a #CamelContentType</doc>
            <type name="ContentType" c:type="CamelContentType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_to_output_stream"
              c:identifier="camel_data_wrapper_write_to_output_stream"
              version="3.12">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="1189">Asynchronously writes the content of @data_wrapper to @output_stream in
a machine-independent format appropriate for the data.

When the operation is finished, @callback will be called.  You can then
call camel_data_wrapper_write_to_output_stream_finish() to get the result
of the operation.</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="191"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1191">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="output_stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1192">a #GOutputStream</doc>
            <type name="Gio.OutputStream" c:type="GOutputStream*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1193">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1194">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1195">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1196">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_to_output_stream_finish"
              c:identifier="camel_data_wrapper_write_to_output_stream_finish"
              version="3.12"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="1238">Finishes the operation started with
camel_data_wrapper_write_to_output_stream().</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="198"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-wrapper.c"
               line="1247">the number of bytes written, or -1 on error</doc>
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1240">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1241">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_to_output_stream_sync"
              c:identifier="camel_data_wrapper_write_to_output_stream_sync"
              version="3.12"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="1112">Writes the content of @data_wrapper to @output_stream in a
machine-independent format appropriate for the data.

&lt;note&gt;
  &lt;para&gt;
    This function may block even if the given output stream does not.
    For example, the content may have to be fetched across a network
    before it can be written to @output_stream.
  &lt;/para&gt;
&lt;/note&gt;</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="186"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-wrapper.c"
               line="1130">the number of bytes written, or -1 on error</doc>
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1114">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="output_stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1115">a #GOutputStream</doc>
            <type name="Gio.OutputStream" c:type="GOutputStream*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1116">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_to_stream"
              c:identifier="camel_data_wrapper_write_to_stream"
              version="3.0">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="752">Asynchronously writes the content of @data_wrapper to @stream in a
machine-independent format appropriate for the data.  It should be
possible to construct an equivalent data wrapper object later by
passing this stream to camel_data_wrapper_construct_from_stream().

When the operation is finished, @callback will be called.  You can then
call camel_data_wrapper_write_to_stream_finish() to get the result of
the operation.</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="143"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="754">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="755">a #CamelStream for writed data to be written to</doc>
            <type name="Stream" c:type="CamelStream*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="756">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="757">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="758">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="759">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_to_stream_finish"
              c:identifier="camel_data_wrapper_write_to_stream_finish"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="802">Finishes the operation started with camel_data_wrapper_write_to_stream().</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="150"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-wrapper.c"
               line="810">the number of bytes written, or -1 or error</doc>
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="804">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="805">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_to_stream_sync"
              c:identifier="camel_data_wrapper_write_to_stream_sync"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-data-wrapper.c"
             line="678">Writes the content of @data_wrapper to @stream in a machine-independent
format appropriate for the data.  It should be possible to construct an
equivalent data wrapper object later by passing this stream to
camel_data_wrapper_construct_from_stream_sync().

&lt;note&gt;
  &lt;para&gt;
    This function may block even if the given output stream does not.
    For example, the content may have to be fetched across a network
    before it can be written to @stream.
  &lt;/para&gt;
&lt;/note&gt;</doc>
        <source-position filename="src/camel/camel-data-wrapper.h" line="138"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-data-wrapper.c"
               line="698">the number of bytes written, or -1 on error</doc>
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="680">a #CamelDataWrapper</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="681">a #CamelStream for output</doc>
            <type name="Stream" c:type="CamelStream*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="682">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="DataWrapperPrivate" c:type="CamelDataWrapperPrivate*"/>
      </field>
    </class>
    <record name="DataWrapperClass"
            c:type="CamelDataWrapperClass"
            glib:is-gtype-struct-for="DataWrapper">
      <source-position filename="src/camel/camel-data-wrapper.h" line="109"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="set_mime_type">
        <callback name="set_mime_type">
          <source-position filename="src/camel/camel-data-wrapper.h"
                           line="68"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="data_wrapper" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-data-wrapper.c"
                   line="518">a #CamelDataWrapper</doc>
              <type name="DataWrapper" c:type="CamelDataWrapper*"/>
            </parameter>
            <parameter name="mime_type" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-data-wrapper.c"
                   line="519">a MIME type</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_mime_type">
        <callback name="get_mime_type">
          <source-position filename="src/camel/camel-data-wrapper.h"
                           line="70"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="549">the MIME type which must be freed by the caller</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="data_wrapper" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-data-wrapper.c"
                   line="547">a #CamelDataWrapper</doc>
              <type name="DataWrapper" c:type="CamelDataWrapper*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_mime_type_field">
        <callback name="get_mime_type_field">
          <source-position filename="src/camel/camel-data-wrapper.h"
                           line="72"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="569">the parsed form of the data wrapper's MIME type</doc>
            <type name="ContentType" c:type="CamelContentType*"/>
          </return-value>
          <parameters>
            <parameter name="data_wrapper" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-data-wrapper.c"
                   line="567">a #CamelDataWrapper</doc>
              <type name="DataWrapper" c:type="CamelDataWrapper*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_mime_type_field">
        <callback name="set_mime_type_field">
          <source-position filename="src/camel/camel-data-wrapper.h"
                           line="73"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="data_wrapper" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-data-wrapper.c"
                   line="587">a #CamelDataWrapper</doc>
              <type name="DataWrapper" c:type="CamelDataWrapper*"/>
            </parameter>
            <parameter name="mime_type"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-data-wrapper.c"
                   line="588">a #CamelContentType</doc>
              <type name="ContentType" c:type="CamelContentType*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_offline">
        <callback name="is_offline">
          <source-position filename="src/camel/camel-data-wrapper.h"
                           line="75"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="641">whether @data_wrapper is "offline" (data stored
remotely) or not. Some optional code paths may choose to not
operate on offline data.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="data_wrapper" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-data-wrapper.c"
                   line="639">a #CamelDataWrapper</doc>
              <type name="DataWrapper" c:type="CamelDataWrapper*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="write_to_stream_sync">
        <callback name="write_to_stream_sync" throws="1">
          <source-position filename="src/camel/camel-data-wrapper.h"
                           line="78"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="698">the number of bytes written, or -1 on error</doc>
            <type name="gssize" c:type="gssize"/>
          </return-value>
          <parameters>
            <parameter name="data_wrapper" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-data-wrapper.c"
                   line="680">a #CamelDataWrapper</doc>
              <type name="DataWrapper" c:type="CamelDataWrapper*"/>
            </parameter>
            <parameter name="stream" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-data-wrapper.c"
                   line="681">a #CamelStream for output</doc>
              <type name="Stream" c:type="CamelStream*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-data-wrapper.c"
                   line="682">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="decode_to_stream_sync">
        <callback name="decode_to_stream_sync" throws="1">
          <source-position filename="src/camel/camel-data-wrapper.h"
                           line="82"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="846">the number of bytes written, or -1 on error</doc>
            <type name="gssize" c:type="gssize"/>
          </return-value>
          <parameters>
            <parameter name="data_wrapper" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-data-wrapper.c"
                   line="831">a #CamelDataWrapper</doc>
              <type name="DataWrapper" c:type="CamelDataWrapper*"/>
            </parameter>
            <parameter name="stream" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-data-wrapper.c"
                   line="832">a #CamelStream for decoded data to be written to</doc>
              <type name="Stream" c:type="CamelStream*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-data-wrapper.c"
                   line="833">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="construct_from_stream_sync">
        <callback name="construct_from_stream_sync" throws="1">
          <source-position filename="src/camel/camel-data-wrapper.h"
                           line="86"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="983">%TRUE on success, %FALSE on error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="data_wrapper" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-data-wrapper.c"
                   line="976">a #CamelDataWrapper</doc>
              <type name="DataWrapper" c:type="CamelDataWrapper*"/>
            </parameter>
            <parameter name="stream" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-data-wrapper.c"
                   line="977">an input #CamelStream</doc>
              <type name="Stream" c:type="CamelStream*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-data-wrapper.c"
                   line="978">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="write_to_output_stream_sync">
        <callback name="write_to_output_stream_sync" throws="1">
          <source-position filename="src/camel/camel-data-wrapper.h"
                           line="91"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1130">the number of bytes written, or -1 on error</doc>
            <type name="gssize" c:type="gssize"/>
          </return-value>
          <parameters>
            <parameter name="data_wrapper" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-data-wrapper.c"
                   line="1114">a #CamelDataWrapper</doc>
              <type name="DataWrapper" c:type="CamelDataWrapper*"/>
            </parameter>
            <parameter name="output_stream" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-data-wrapper.c"
                   line="1115">a #GOutputStream</doc>
              <type name="Gio.OutputStream" c:type="GOutputStream*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-data-wrapper.c"
                   line="1116">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="decode_to_output_stream_sync">
        <callback name="decode_to_output_stream_sync" throws="1">
          <source-position filename="src/camel/camel-data-wrapper.h"
                           line="96"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1283">the number of bytes written, or -1 on error</doc>
            <type name="gssize" c:type="gssize"/>
          </return-value>
          <parameters>
            <parameter name="data_wrapper" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-data-wrapper.c"
                   line="1268">a #CamelDataWrapper</doc>
              <type name="DataWrapper" c:type="CamelDataWrapper*"/>
            </parameter>
            <parameter name="output_stream" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-data-wrapper.c"
                   line="1269">a #GOutputStream</doc>
              <type name="Gio.OutputStream" c:type="GOutputStream*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-data-wrapper.c"
                   line="1270">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="construct_from_input_stream_sync">
        <callback name="construct_from_input_stream_sync" throws="1">
          <source-position filename="src/camel/camel-data-wrapper.h"
                           line="101"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-data-wrapper.c"
                 line="1422">%TRUE on success, %FALSE on error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="data_wrapper" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-data-wrapper.c"
                   line="1415">a #CamelDataWrapper</doc>
              <type name="DataWrapper" c:type="CamelDataWrapper*"/>
            </parameter>
            <parameter name="input_stream" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-data-wrapper.c"
                   line="1416">a #GInputStream</doc>
              <type name="Gio.InputStream" c:type="GInputStream*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-data-wrapper.c"
                   line="1417">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="DataWrapperPrivate"
            c:type="CamelDataWrapperPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-data-wrapper.h" line="57"/>
    </record>
    <constant name="EAI_ADDRFAMILY" value="-9" c:type="EAI_ADDRFAMILY">
      <source-position filename="src/camel/camel-net-utils.h" line="79"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="EAI_AGAIN" value="-3" c:type="EAI_AGAIN">
      <source-position filename="src/camel/camel-net-utils.h" line="73"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="EAI_BADFLAGS" value="-1" c:type="EAI_BADFLAGS">
      <source-position filename="src/camel/camel-net-utils.h" line="71"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="EAI_FAIL" value="-4" c:type="EAI_FAIL">
      <source-position filename="src/camel/camel-net-utils.h" line="74"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="EAI_FAMILY" value="-6" c:type="EAI_FAMILY">
      <source-position filename="src/camel/camel-net-utils.h" line="76"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="EAI_MEMORY" value="-10" c:type="EAI_MEMORY">
      <source-position filename="src/camel/camel-net-utils.h" line="80"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="EAI_NODATA" value="-5" c:type="EAI_NODATA">
      <source-position filename="src/camel/camel-net-utils.h" line="75"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="EAI_NONAME" value="-2" c:type="EAI_NONAME">
      <source-position filename="src/camel/camel-net-utils.h" line="72"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="EAI_OVERFLOW" value="-12" c:type="EAI_OVERFLOW">
      <source-position filename="src/camel/camel-net-utils.h" line="82"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="EAI_SERVICE" value="-8" c:type="EAI_SERVICE">
      <source-position filename="src/camel/camel-net-utils.h" line="78"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="EAI_SOCKTYPE" value="-7" c:type="EAI_SOCKTYPE">
      <source-position filename="src/camel/camel-net-utils.h" line="77"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="EAI_SYSTEM" value="-11" c:type="EAI_SYSTEM">
      <source-position filename="src/camel/camel-net-utils.h" line="81"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="EDS_CAMEL_PROVIDER_DIR"
              value="EDS_CAMEL_PROVIDER_DIR"
              c:type="EDS_CAMEL_PROVIDER_DIR">
      <doc xml:space="preserve"
           filename="src/camel/camel-provider.h"
           line="39">This environment variable configures where the camel
provider modules are loaded from.</doc>
      <source-position filename="src/camel/camel-provider.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <enumeration name="Error"
                 version="2.32"
                 c:type="CamelError"
                 glib:error-domain="camel-error-quark">
      <source-position filename="src/camel/camel-object.h" line="91"/>
      <member name="error_generic"
              value="0"
              c:identifier="CAMEL_ERROR_GENERIC">
        <doc xml:space="preserve"
             filename="src/camel/camel-object.h"
             line="85">a generic (fallback) error code</doc>
      </member>
    </enumeration>
    <function-macro name="FILTER_DRIVER"
                    c:identifier="CAMEL_FILTER_DRIVER"
                    introspectable="0">
      <source-position filename="src/camel/camel-filter-driver.h" line="32"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILTER_DRIVER_CLASS"
                    c:identifier="CAMEL_FILTER_DRIVER_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-filter-driver.h" line="35"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILTER_DRIVER_GET_CLASS"
                    c:identifier="CAMEL_FILTER_DRIVER_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-filter-driver.h" line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILTER_INPUT_STREAM"
                    c:identifier="CAMEL_FILTER_INPUT_STREAM"
                    introspectable="0">
      <source-position filename="src/camel/camel-filter-input-stream.h"
                       line="30"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILTER_INPUT_STREAM_CLASS"
                    c:identifier="CAMEL_FILTER_INPUT_STREAM_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-filter-input-stream.h"
                       line="33"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILTER_INPUT_STREAM_GET_CLASS"
                    c:identifier="CAMEL_FILTER_INPUT_STREAM_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-filter-input-stream.h"
                       line="42"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILTER_OUTPUT_STREAM"
                    c:identifier="CAMEL_FILTER_OUTPUT_STREAM"
                    introspectable="0">
      <source-position filename="src/camel/camel-filter-output-stream.h"
                       line="30"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILTER_OUTPUT_STREAM_CLASS"
                    c:identifier="CAMEL_FILTER_OUTPUT_STREAM_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-filter-output-stream.h"
                       line="33"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILTER_OUTPUT_STREAM_GET_CLASS"
                    c:identifier="CAMEL_FILTER_OUTPUT_STREAM_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-filter-output-stream.h"
                       line="42"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <record name="FIRecord" c:type="CamelFIRecord" version="2.24">
      <doc xml:space="preserve"
           filename="src/camel/camel-db.h"
           line="219">Values to store/load for single folder's #CamelFolderSummary structure.</doc>
      <source-position filename="src/camel/camel-db.h" line="251"/>
      <field name="folder_name" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="221">name of the folder</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="version" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="222">version of the saved information</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="flags" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="223">folder flags</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="nextuid" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="224">next free uid</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="timestamp" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="225">timestamp of the summary</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="saved_count" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="226">count of all messages</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="unread_count" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="227">count of unread messages</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="deleted_count" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="228">count of deleted messages</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="junk_count" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="229">count of junk messages</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="visible_count" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="230">count of visible (not deleted and not junk) messages</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="jnd_count" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="231">count of junk and not deleted messages</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="bdata" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="232">custom data of the #CamelFolderSummary descendants</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
    </record>
    <function-macro name="FOLDER"
                    c:identifier="CAMEL_FOLDER"
                    introspectable="0">
      <source-position filename="src/camel/camel-folder.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FOLDER_CLASS"
                    c:identifier="CAMEL_FOLDER_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-folder.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FOLDER_GET_CLASS"
                    c:identifier="CAMEL_FOLDER_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-folder.h" line="47"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FOLDER_INFO"
                    c:identifier="CAMEL_FOLDER_INFO"
                    introspectable="0">
      <source-position filename="src/camel/camel-store.h" line="54"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FOLDER_SEARCH"
                    c:identifier="CAMEL_FOLDER_SEARCH"
                    introspectable="0">
      <source-position filename="src/camel/camel-folder-search.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FOLDER_SEARCH_CLASS"
                    c:identifier="CAMEL_FOLDER_SEARCH_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-folder-search.h" line="36"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FOLDER_SEARCH_GET_CLASS"
                    c:identifier="CAMEL_FOLDER_SEARCH_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-folder-search.h" line="45"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FOLDER_SUMMARY"
                    c:identifier="CAMEL_FOLDER_SUMMARY"
                    introspectable="0">
      <source-position filename="src/camel/camel-folder-summary.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FOLDER_SUMMARY_CLASS"
                    c:identifier="CAMEL_FOLDER_SUMMARY_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-folder-summary.h" line="40"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FOLDER_SUMMARY_GET_CLASS"
                    c:identifier="CAMEL_FOLDER_SUMMARY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-folder-summary.h" line="49"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="FOLDER_TYPE_BIT" value="10" c:type="CAMEL_FOLDER_TYPE_BIT">
      <doc xml:space="preserve"
           filename="src/camel/camel-enums.h"
           line="53">The folder type bitshift value.</doc>
      <source-position filename="src/camel/camel-enums.h" line="57"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="FOLDER_TYPE_MASK"
              value="64512"
              c:type="CAMEL_FOLDER_TYPE_MASK">
      <doc xml:space="preserve"
           filename="src/camel/camel-enums.h"
           line="159">The folder type mask value.</doc>
      <source-position filename="src/camel/camel-enums.h" line="163"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="FOLD_MAX_SIZE" value="998" c:type="CAMEL_FOLD_MAX_SIZE">
      <source-position filename="src/camel/camel-mime-utils.h" line="40"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="FOLD_SIZE" value="77" c:type="CAMEL_FOLD_SIZE">
      <source-position filename="src/camel/camel-mime-utils.h" line="38"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <enumeration name="FetchHeadersType"
                 version="3.2"
                 glib:type-name="CamelFetchHeadersType"
                 glib:get-type="camel_fetch_headers_type_get_type"
                 c:type="CamelFetchHeadersType">
      <doc xml:space="preserve"
           filename="src/camel/camel-enums.h"
           line="266">Describes what headers to fetch when downloading message summaries.</doc>
      <member name="basic"
              value="0"
              c:identifier="CAMEL_FETCH_HEADERS_BASIC"
              glib:nick="basic"
              glib:name="CAMEL_FETCH_HEADERS_BASIC">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="268">Fetch only basic headers (Date, From, To, Subject, etc.).</doc>
      </member>
      <member name="basic_and_mailing_list"
              value="1"
              c:identifier="CAMEL_FETCH_HEADERS_BASIC_AND_MAILING_LIST"
              glib:nick="basic-and-mailing-list"
              glib:name="CAMEL_FETCH_HEADERS_BASIC_AND_MAILING_LIST">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="270">Fetch all basic headers and mailing list headers.</doc>
      </member>
      <member name="all"
              value="2"
              c:identifier="CAMEL_FETCH_HEADERS_ALL"
              glib:nick="all"
              glib:name="CAMEL_FETCH_HEADERS_ALL">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="272">Fetch all available message headers.</doc>
      </member>
    </enumeration>
    <enumeration name="FetchType"
                 version="3.4"
                 glib:type-name="CamelFetchType"
                 glib:get-type="camel_fetch_type_get_type"
                 c:type="CamelFetchType">
      <member name="old_messages"
              value="0"
              c:identifier="CAMEL_FETCH_OLD_MESSAGES"
              glib:nick="old-messages"
              glib:name="CAMEL_FETCH_OLD_MESSAGES">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.h"
             line="99">fetch old messages</doc>
      </member>
      <member name="new_messages"
              value="1"
              c:identifier="CAMEL_FETCH_NEW_MESSAGES"
              glib:nick="new-messages"
              glib:name="CAMEL_FETCH_NEW_MESSAGES">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.h"
             line="100">fetch new messages</doc>
      </member>
    </enumeration>
    <class name="FilterDriver"
           c:symbol-prefix="filter_driver"
           c:type="CamelFilterDriver"
           parent="GObject.Object"
           glib:type-name="CamelFilterDriver"
           glib:get-type="camel_filter_driver_get_type"
           glib:type-struct="FilterDriverClass">
      <source-position filename="src/camel/camel-filter-driver.h" line="67"/>
      <constructor name="new" c:identifier="camel_filter_driver_new">
        <source-position filename="src/camel/camel-filter-driver.h" line="90"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-filter-driver.c"
               line="441">A new CamelFilterDriver object</doc>
          <type name="FilterDriver" c:type="CamelFilterDriver*"/>
        </return-value>
        <parameters>
          <parameter name="session" transfer-ownership="none">
            <type name="Session" c:type="_CamelSession*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_rule" c:identifier="camel_filter_driver_add_rule">
        <doc xml:space="preserve"
             filename="src/camel/camel-filter-driver.c"
             line="582">Adds a new rule to set of rules to process by the filter driver.</doc>
        <source-position filename="src/camel/camel-filter-driver.h"
                         line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="d" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="584">a #CamelFilterDriver</doc>
            <type name="FilterDriver" c:type="CamelFilterDriver*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="585">name of the rule</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="match" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="586">a code (#CamelSExp) to execute to check whether the rule can be applied</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="587">an action code (#CamelSExp) to execute, when the @match evaluates to %TRUE</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="filter_folder"
              c:identifier="camel_filter_driver_filter_folder"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-filter-driver.c"
             line="1786">Filters a folder based on rules defined in the FilterDriver
object.</doc>
        <source-position filename="src/camel/camel-filter-driver.h"
                         line="126"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-filter-driver.c"
               line="1800">-1 if errors were encountered during filtering,
otherwise returns 0.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="driver" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="1788">CamelFilterDriver</doc>
            <type name="FilterDriver" c:type="CamelFilterDriver*"/>
          </instance-parameter>
          <parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="1789">CamelFolder to be filtered</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
          <parameter name="cache" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="1790">UID cache (needed for POP folders)</doc>
            <type name="UIDCache" c:type="CamelUIDCache*"/>
          </parameter>
          <parameter name="uids"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="1791">message uids to be filtered or
        %NULL (as a shortcut to filter all messages)</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="remove" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="1793">TRUE to mark filtered messages as deleted</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="1794">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="filter_mbox"
              c:identifier="camel_filter_driver_filter_mbox"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-filter-driver.c"
             line="1631">Filters an mbox file based on rules defined in the FilterDriver
object. Is more efficient as it doesn't need to open the folder
through Camel directly.</doc>
        <source-position filename="src/camel/camel-filter-driver.h"
                         line="121"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-filter-driver.c"
               line="1643">-1 if errors were encountered during filtering,
otherwise returns 0.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="driver" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="1633">CamelFilterDriver</doc>
            <type name="FilterDriver" c:type="CamelFilterDriver*"/>
          </instance-parameter>
          <parameter name="mbox" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="1634">mbox filename to be filtered</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="original_source_url"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="1635">URI of the @mbox, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="1636">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="filter_message"
              c:identifier="camel_filter_driver_filter_message"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-filter-driver.c"
             line="2215">Filters a message based on rules defined in the FilterDriver
object. If the source folder (@source) and the uid (@uid) are
provided, the filter will operate on the CamelFolder (which in
certain cases is more efficient than using the default
camel_folder_append_message() function).</doc>
        <source-position filename="src/camel/camel-filter-driver.h"
                         line="111"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-filter-driver.c"
               line="2233">-1 if errors were encountered during filtering,
otherwise returns 0.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="driver" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="2217">CamelFilterDriver</doc>
            <type name="FilterDriver" c:type="CamelFilterDriver*"/>
          </instance-parameter>
          <parameter name="message"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="2218">message to filter or %NULL</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </parameter>
          <parameter name="info"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="2219">message info or %NULL</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </parameter>
          <parameter name="uid"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="2220">message uid or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="source"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="2221">source folder or %NULL</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
          <parameter name="store_uid"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="2222">UID of source store, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="original_store_uid"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="2223">UID of source store (pre-movemail), or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="2224">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="flush" c:identifier="camel_filter_driver_flush" throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-filter-driver.c"
             line="1585">Flush all of the only-once filter actions.</doc>
        <source-position filename="src/camel/camel-filter-driver.h"
                         line="109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="driver" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="1587">a #CamelFilterDriver</doc>
            <type name="FilterDriver" c:type="CamelFilterDriver*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="log_info"
              c:identifier="camel_filter_driver_log_info"
              version="3.24"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-filter-driver.c"
             line="2252">Logs an informational message to a filter log. The function does
nothing when @driver is %NULL or when there is no log file being
set in @driver.</doc>
        <source-position filename="src/camel/camel-filter-driver.h"
                         line="134"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="driver"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="2254">a #CamelFilterDriver, or %NULL</doc>
            <type name="FilterDriver" c:type="CamelFilterDriver*"/>
          </instance-parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="2255">a printf-like format to use for the informational log entry</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="2256">arguments for @format</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_rule_by_name"
              c:identifier="camel_filter_driver_remove_rule_by_name">
        <doc xml:space="preserve"
             filename="src/camel/camel-filter-driver.c"
             line="607">Removes a rule by name, added by camel_filter_driver_add_rule().</doc>
        <source-position filename="src/camel/camel-filter-driver.h"
                         line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-filter-driver.c"
               line="614">Whether the rule had been found and removed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="d" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="609">a #CamelFilterDriver</doc>
            <type name="FilterDriver" c:type="CamelFilterDriver*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="610">rule name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_default_folder"
              c:identifier="camel_filter_driver_set_default_folder">
        <doc xml:space="preserve"
             filename="src/camel/camel-filter-driver.c"
             line="554">Sets a default folder for the driver. The function adds
its own reference for the folder.</doc>
        <source-position filename="src/camel/camel-filter-driver.h"
                         line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="d" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="556">a #CamelFilterDriver</doc>
            <type name="FilterDriver" c:type="CamelFilterDriver*"/>
          </instance-parameter>
          <parameter name="def"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="557">a default #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_folder_func"
              c:identifier="camel_filter_driver_set_folder_func"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-filter-driver.c"
             line="454">Sets a callback (of type #CamelFilterGetFolderFunc) to get a folder.</doc>
        <source-position filename="src/camel/camel-filter-driver.h" line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="d" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="456">a #CamelFilterDriver</doc>
            <type name="FilterDriver" c:type="CamelFilterDriver*"/>
          </instance-parameter>
          <parameter name="get_folder"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="457">a callback to get a folder</doc>
            <type name="FilterGetFolderFunc"
                  c:type="CamelFilterGetFolderFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="458">user data to pass to @get_folder</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_logfile"
              c:identifier="camel_filter_driver_set_logfile">
        <doc xml:space="preserve"
             filename="src/camel/camel-filter-driver.c"
             line="471">Sets a log file to use for logging.</doc>
        <source-position filename="src/camel/camel-filter-driver.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="d" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="473">a #CamelFilterDriver</doc>
            <type name="FilterDriver" c:type="CamelFilterDriver*"/>
          </instance-parameter>
          <parameter name="logfile"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="474">a FILE handle where to write logging</doc>
            <type name="gpointer" c:type="FILE*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_play_sound_func"
              c:identifier="camel_filter_driver_set_play_sound_func">
        <doc xml:space="preserve"
             filename="src/camel/camel-filter-driver.c"
             line="520">Sets a callback to call when a play of a sound is requested.</doc>
        <source-position filename="src/camel/camel-filter-driver.h" line="97"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="d" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="522">a #CamelFilterDriver</doc>
            <type name="FilterDriver" c:type="CamelFilterDriver*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="523">a callback to play a sound</doc>
            <type name="FilterPlaySoundFunc"
                  c:type="CamelFilterPlaySoundFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="524">user data to pass to @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_shell_func"
              c:identifier="camel_filter_driver_set_shell_func">
        <doc xml:space="preserve"
             filename="src/camel/camel-filter-driver.c"
             line="502">Sets a shell command callback, which is called when a shell command
execution is requested.</doc>
        <source-position filename="src/camel/camel-filter-driver.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="d" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="504">a #CamelFilterDriver</doc>
            <type name="FilterDriver" c:type="CamelFilterDriver*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="505">a shell command callback</doc>
            <type name="FilterShellFunc" c:type="CamelFilterShellFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="506">user data to pass to @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_status_func"
              c:identifier="camel_filter_driver_set_status_func">
        <doc xml:space="preserve"
             filename="src/camel/camel-filter-driver.c"
             line="485">Sets a status callback, which is used to report progress/status.</doc>
        <source-position filename="src/camel/camel-filter-driver.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="d" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="487">a #CamelFilterDriver</doc>
            <type name="FilterDriver" c:type="CamelFilterDriver*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="488">a callback to report progress</doc>
            <type name="FilterStatusFunc" c:type="CamelFilterStatusFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="489">user data to pass to @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_system_beep_func"
              c:identifier="camel_filter_driver_set_system_beep_func">
        <doc xml:space="preserve"
             filename="src/camel/camel-filter-driver.c"
             line="537">Sets a callback to use for system beep.</doc>
        <source-position filename="src/camel/camel-filter-driver.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="d" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="539">a #CamelFilterDriver</doc>
            <type name="FilterDriver" c:type="CamelFilterDriver*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="540">a system beep callback</doc>
            <type name="FilterSystemBeepFunc"
                  c:type="CamelFilterSystemBeepFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-driver.c"
                 line="541">user data to pass to @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="FilterDriverPrivate" c:type="CamelFilterDriverPrivate*"/>
      </field>
    </class>
    <record name="FilterDriverClass"
            c:type="CamelFilterDriverClass"
            glib:is-gtype-struct-for="FilterDriver">
      <source-position filename="src/camel/camel-filter-driver.h" line="67"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="FilterDriverPrivate"
            c:type="CamelFilterDriverPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-filter-driver.h" line="55"/>
    </record>
    <callback name="FilterGetFolderFunc"
              c:type="CamelFilterGetFolderFunc"
              introspectable="0"
              throws="1">
      <source-position filename="src/camel/camel-filter-driver.h" line="79"/>
      <return-value>
        <type name="Folder" c:type="CamelFolder*"/>
      </return-value>
      <parameters>
        <parameter name="driver" transfer-ownership="none">
          <type name="FilterDriver" c:type="CamelFilterDriver*"/>
        </parameter>
        <parameter name="uri" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="FilterInputStream"
           c:symbol-prefix="filter_input_stream"
           c:type="CamelFilterInputStream"
           parent="Gio.FilterInputStream"
           glib:type-name="CamelFilterInputStream"
           glib:get-type="camel_filter_input_stream_get_type"
           glib:type-struct="FilterInputStreamClass">
      <source-position filename="src/camel/camel-filter-input-stream.h"
                       line="63"/>
      <constructor name="new"
                   c:identifier="camel_filter_input_stream_new"
                   version="3.12">
        <doc xml:space="preserve"
             filename="src/camel/camel-filter-input-stream.c"
             line="211">Creates a new filtered input stream for the @base_stream.</doc>
        <source-position filename="src/camel/camel-filter-input-stream.h"
                         line="67"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-filter-input-stream.c"
               line="218">a new #GInputStream</doc>
          <type name="Gio.InputStream" c:type="GInputStream*"/>
        </return-value>
        <parameters>
          <parameter name="base_stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-input-stream.c"
                 line="213">a #GInputStream</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-input-stream.c"
                 line="214">a #CamelMimeFilter</doc>
            <type name="MimeFilter" c:type="CamelMimeFilter*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_filter"
              c:identifier="camel_filter_input_stream_get_filter"
              glib:get-property="filter"
              version="3.12">
        <doc xml:space="preserve"
             filename="src/camel/camel-filter-input-stream.c"
             line="235">Gets the #CamelMimeFilter that is used by @filter_stream.</doc>
        <source-position filename="src/camel/camel-filter-input-stream.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-filter-input-stream.c"
               line="241">a #CamelMimeFilter</doc>
          <type name="MimeFilter" c:type="CamelMimeFilter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="filter_stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-input-stream.c"
                 line="237">a #CamelFilterInputStream</doc>
            <type name="FilterInputStream" c:type="CamelFilterInputStream*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="filter"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_filter">
        <type name="MimeFilter"/>
      </property>
      <field name="parent">
        <type name="Gio.FilterInputStream" c:type="GFilterInputStream"/>
      </field>
      <field name="priv">
        <type name="FilterInputStreamPrivate"
              c:type="CamelFilterInputStreamPrivate*"/>
      </field>
    </class>
    <record name="FilterInputStreamClass"
            c:type="CamelFilterInputStreamClass"
            glib:is-gtype-struct-for="FilterInputStream">
      <source-position filename="src/camel/camel-filter-input-stream.h"
                       line="63"/>
      <field name="parent_class">
        <type name="Gio.FilterInputStreamClass"
              c:type="GFilterInputStreamClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="FilterInputStreamPrivate"
            c:type="CamelFilterInputStreamPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-filter-input-stream.h"
                       line="51"/>
    </record>
    <class name="FilterOutputStream"
           c:symbol-prefix="filter_output_stream"
           c:type="CamelFilterOutputStream"
           parent="Gio.FilterOutputStream"
           glib:type-name="CamelFilterOutputStream"
           glib:get-type="camel_filter_output_stream_get_type"
           glib:type-struct="FilterOutputStreamClass">
      <source-position filename="src/camel/camel-filter-output-stream.h"
                       line="63"/>
      <constructor name="new"
                   c:identifier="camel_filter_output_stream_new"
                   version="3.12">
        <doc xml:space="preserve"
             filename="src/camel/camel-filter-output-stream.c"
             line="231">Creates a new filtered output stream for the @base_stream.</doc>
        <source-position filename="src/camel/camel-filter-output-stream.h"
                         line="67"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-filter-output-stream.c"
               line="238">a new #GOutputStream</doc>
          <type name="Gio.OutputStream" c:type="GOutputStream*"/>
        </return-value>
        <parameters>
          <parameter name="base_stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-output-stream.c"
                 line="233">a #GOutputStream</doc>
            <type name="Gio.OutputStream" c:type="GOutputStream*"/>
          </parameter>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-output-stream.c"
                 line="234">a #CamelMimeFilter</doc>
            <type name="MimeFilter" c:type="CamelMimeFilter*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_filter"
              c:identifier="camel_filter_output_stream_get_filter"
              glib:get-property="filter"
              version="3.12">
        <doc xml:space="preserve"
             filename="src/camel/camel-filter-output-stream.c"
             line="255">Gets the #CamelMimeFilter that is used by @filter_stream.</doc>
        <source-position filename="src/camel/camel-filter-output-stream.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-filter-output-stream.c"
               line="261">a #CamelMimeFilter</doc>
          <type name="MimeFilter" c:type="CamelMimeFilter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="filter_stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-filter-output-stream.c"
                 line="257">a #CamelFilterOutputStream</doc>
            <type name="FilterOutputStream" c:type="CamelFilterOutputStream*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="filter"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_filter">
        <type name="MimeFilter"/>
      </property>
      <field name="parent">
        <type name="Gio.FilterOutputStream" c:type="GFilterOutputStream"/>
      </field>
      <field name="priv">
        <type name="FilterOutputStreamPrivate"
              c:type="CamelFilterOutputStreamPrivate*"/>
      </field>
    </class>
    <record name="FilterOutputStreamClass"
            c:type="CamelFilterOutputStreamClass"
            glib:is-gtype-struct-for="FilterOutputStream">
      <source-position filename="src/camel/camel-filter-output-stream.h"
                       line="63"/>
      <field name="parent_class">
        <type name="Gio.FilterOutputStreamClass"
              c:type="GFilterOutputStreamClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="FilterOutputStreamPrivate"
            c:type="CamelFilterOutputStreamPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-filter-output-stream.h"
                       line="51"/>
    </record>
    <callback name="FilterPlaySoundFunc" c:type="CamelFilterPlaySoundFunc">
      <source-position filename="src/camel/camel-filter-driver.h" line="86"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="driver" transfer-ownership="none">
          <type name="FilterDriver" c:type="CamelFilterDriver*"/>
        </parameter>
        <parameter name="filename" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="FilterSearchGetMessageFunc"
              c:type="CamelFilterSearchGetMessageFunc"
              introspectable="0"
              throws="1">
      <source-position filename="src/camel/camel-filter-search.h" line="43"/>
      <return-value>
        <type name="MimeMessage" c:type="CamelMimeMessage*"/>
      </return-value>
      <parameters>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="FilterShellFunc" c:type="CamelFilterShellFunc">
      <source-position filename="src/camel/camel-filter-driver.h" line="85"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="driver" transfer-ownership="none">
          <type name="FilterDriver" c:type="CamelFilterDriver*"/>
        </parameter>
        <parameter name="argc" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="argv" transfer-ownership="none">
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="FilterStatusFunc" c:type="CamelFilterStatusFunc">
      <source-position filename="src/camel/camel-filter-driver.h" line="82"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="driver" transfer-ownership="none">
          <type name="FilterDriver" c:type="CamelFilterDriver*"/>
        </parameter>
        <parameter name="status"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="camel_filter_status_t"/>
        </parameter>
        <parameter name="pc" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="desc" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="4">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="FilterSystemBeepFunc" c:type="CamelFilterSystemBeepFunc">
      <source-position filename="src/camel/camel-filter-driver.h" line="87"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="driver" transfer-ownership="none">
          <type name="FilterDriver" c:type="CamelFilterDriver*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="Folder"
           c:symbol-prefix="folder"
           c:type="CamelFolder"
           parent="Object"
           abstract="1"
           glib:type-name="CamelFolder"
           glib:get-type="camel_folder_get_type"
           glib:type-struct="FolderClass">
      <source-position filename="src/camel/camel-folder.h" line="277"/>
      <function name="threaded_messages_dump"
                c:identifier="camel_folder_threaded_messages_dump">
        <source-position filename="src/camel/camel-folder-thread.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="c" transfer-ownership="none">
            <type name="FolderThreadNode" c:type="CamelFolderThreadNode*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="append_message_sync"
                      invoker="append_message_sync"
                      version="3.0"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="3145">Appends @message to @folder.  Only the flag and tag data from @info
are used.  If @info is %NULL, no flags or tags will be set.</doc>
        <source-position filename="src/camel/camel-folder.h" line="217"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="3160">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3147">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3148">a #CamelMimeMessage</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </parameter>
          <parameter name="info"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3149">a #CamelMessageInfo with additional flags/etc to set
       on the new message, or %NULL</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </parameter>
          <parameter name="appended_uid"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3151">if non-%NULL, the UID
               of the appended message will be returned here, if it
               is known</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3154">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="changed" invoker="changed" version="2.32">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2844">Emits the #CamelFolder::changed signal from an idle source on the
main loop.  The idle source's priority is #G_PRIORITY_LOW.</doc>
        <source-position filename="src/camel/camel-folder.h" line="269"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2846">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="changes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2847">change information for @folder</doc>
            <type name="FolderChangeInfo" c:type="CamelFolderChangeInfo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="cmp_uids" invoker="cmp_uids" version="2.28">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2490">Compares two uids. The return value meaning is the same as in any other compare function.

Note that the default compare function expects a decimal number at the beginning of a uid,
thus if provider uses different uid values, then it should subclass this function.</doc>
        <source-position filename="src/camel/camel-folder.h" line="172"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2492">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="uid1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2493">The first uid.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="uid2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2494">the second uid.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="count_by_expression"
                      invoker="count_by_expression"
                      version="2.26"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2629">Searches the folder for count of messages matching the given search expression.</doc>
        <source-position filename="src/camel/camel-folder.h" line="201"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="2638">an interger</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2631">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="expression" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2632">a search expression</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2633">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="delete_">
        <source-position filename="src/camel/camel-folder.h" line="195"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="deleted">
        <source-position filename="src/camel/camel-folder.h" line="271"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="expunge_sync"
                      invoker="expunge_sync"
                      version="3.0"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="3332">Deletes messages which have been marked as "DELETED".</doc>
        <source-position filename="src/camel/camel-folder.h" line="223"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="3340">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3334">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3335">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="free_summary" invoker="free_summary">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2570">Frees the summary array returned by camel_folder_get_summary().</doc>
        <source-position filename="src/camel/camel-folder.h" line="178"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2572">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2573">the summary array to free</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="MessageInfo"/>
            </array>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="free_uids" invoker="free_uids">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2431">Frees the array of UIDs returned by camel_folder_get_uids().</doc>
        <source-position filename="src/camel/camel-folder.h" line="170"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2433">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2434">the array of uids to free</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="freeze" invoker="freeze">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2914">Freezes the folder so that a series of operation can be performed
without "folder_changed" signals being emitted.  When the folder is
later thawed with camel_folder_thaw(), the suppressed signals will
be emitted.</doc>
        <source-position filename="src/camel/camel-folder.h" line="198"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2916">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_filename"
                      invoker="get_filename"
                      version="2.26"
                      throws="1">
        <source-position filename="src/camel/camel-folder.h" line="208"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="1629">a file name corresponding to a message
  with UID @uid. Free the returned string with g_free(), when
  no longer needed.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="1625">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="1626">a message UID</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_full_display_name"
                      invoker="get_full_display_name"
                      version="3.46">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="1813">Similar to the camel_folder_get_full_name(), only returning
full path to the @folder suitable for the display to a user.</doc>
        <source-position filename="src/camel/camel-folder.h" line="263"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="1820">full path to the @folder suitable for the display to a user</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="1815">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_message_cached"
                      invoker="get_message_cached"
                      version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="3562">Gets the message corresponding to @message_uid from the @folder cache,
if available locally. This should not do any network I/O, only check
if message is already downloaded and return it quickly, not being
blocked by the folder's lock. Returning NULL is not considered as
an error, it just means that the message is still to-be-downloaded.

Note: This function is called automatically within camel_folder_get_message_sync().</doc>
        <source-position filename="src/camel/camel-folder.h" line="212"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="3576">a cached #CamelMimeMessage corresponding
   to the requested UID</doc>
          <type name="MimeMessage" c:type="CamelMimeMessage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3564">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="message_uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3565">the message UID</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3566">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_message_count" invoker="get_message_count">
        <source-position filename="src/camel/camel-folder.h" line="147"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="1980">the number of messages in the folder, or -1 if unknown</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="1978">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_message_flags"
                      invoker="get_message_flags"
                      deprecated="1">
        <doc-deprecated xml:space="preserve">Use camel_folder_get_message_info() instead.</doc-deprecated>
        <source-position filename="src/camel/camel-folder.h" line="149"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="2177">the #CamelMessageFlags that are set on the indicated
message.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2172">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2173">the UID of a message in @folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_message_info" invoker="get_message_info">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2359">Retrieve the #CamelMessageInfo for the specified @uid.</doc>
        <source-position filename="src/camel/camel-folder.h" line="193"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="2366">The summary information for the
  indicated message, or %NULL if the uid does not exist. Free the returned
  object with g_object_unref(), when done with it.</doc>
          <type name="MessageInfo" c:type="CamelMessageInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2361">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2362">the uid of a message</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_message_sync"
                      invoker="get_message_sync"
                      version="3.0"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="3476">Gets the message corresponding to @message_uid from @folder.</doc>
        <source-position filename="src/camel/camel-folder.h" line="227"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="3485">a #CamelMimeMessage corresponding to the requested UID</doc>
          <type name="MimeMessage" c:type="CamelMimeMessage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3478">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="message_uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3479">the message UID</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3480">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_message_user_flag"
                      invoker="get_message_user_flag"
                      deprecated="1">
        <doc-deprecated xml:space="preserve">Use camel_message_info_get_user_flag() on the message
info directly</doc-deprecated>
        <source-position filename="src/camel/camel-folder.h" line="155"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="2242">%TRUE if the given user flag is set on the message or
%FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2235">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2236">the UID of a message in @folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2237">the name of a user flag</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_message_user_tag"
                      invoker="get_message_user_tag"
                      deprecated="1">
        <doc-deprecated xml:space="preserve">Use camel_message_info_get_user_tag() on the
#CamelMessageInfo directly.</doc-deprecated>
        <source-position filename="src/camel/camel-folder.h" line="162"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="2305">the value of the user tag</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2298">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2299">the UID of a message in @folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2300">the name of a user tag</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_permanent_flags" invoker="get_permanent_flags">
        <source-position filename="src/camel/camel-folder.h" line="148"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="2152">the set of #CamelMessageFlags that can be permanently
stored on a message between sessions. If it includes
#CAMEL_MESSAGE_USER, then user-defined flags will be remembered.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2150">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_quota_info_sync"
                      invoker="get_quota_info_sync"
                      version="3.2"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="3701">Gets a list of known quotas for @folder.  Free the returned
#CamelFolderQuotaInfo struct with camel_folder_quota_info_free().

If quotas are not supported for @folder, the function returns %NULL
and sets @error to #G_IO_ERROR_NOT_SUPPORTED.</doc>
        <source-position filename="src/camel/camel-folder.h" line="232"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="3713">a #CamelFolderQuotaInfo, or %NULL on error</doc>
          <type name="FolderQuotaInfo" c:type="CamelFolderQuotaInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3703">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3704">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_summary" invoker="get_summary">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2546">This returns the summary information for the folder. This array
should not be modified, and must be freed with
camel_folder_free_summary().</doc>
        <source-position filename="src/camel/camel-folder.h" line="177"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="2554">an array of UID-s of #CamelMessageInfo</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2548">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_uids" invoker="get_uids">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2405">Get the list of UIDs available in a folder. This routine is useful
for finding what messages are available when the folder does not
support summaries. The returned array should not be modified, and
must be freed by passing it to camel_folder_free_uids().</doc>
        <source-position filename="src/camel/camel-folder.h" line="169"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="2414">a GPtrArray of UIDs
corresponding to the messages available in the folder</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2407">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_uncached_uids"
                      invoker="get_uncached_uids"
                      version="2.26"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2454">Returns the known-uncached uids from a list of uids. It may return uids
which are locally cached but should never filter out a uid which is not
locally cached. Free the result by called camel_folder_free_uids().
Frees the array of UIDs returned by camel_folder_get_uids().</doc>
        <source-position filename="src/camel/camel-folder.h" line="205"/>
        <return-value transfer-ownership="none">
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2456">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="uids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2457">the array of uids to filter down to uncached ones.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="has_search_capability">
        <source-position filename="src/camel/camel-folder.h" line="180"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_frozen" invoker="is_frozen">
        <source-position filename="src/camel/camel-folder.h" line="200"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="2963">whether or not the folder is frozen</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2961">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare_content_refresh"
                      invoker="prepare_content_refresh"
                      version="3.22">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="4784">Lets the @folder know that it should refresh its content
the next time from fresh. This is useful for remote accounts,
to fully re-check the folder content against the server.</doc>
        <source-position filename="src/camel/camel-folder.h" line="261"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4786">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="purge_message_cache_sync"
                      invoker="purge_message_cache_sync"
                      version="3.4"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="3839">Delete the local cache of all messages between these uids.</doc>
        <source-position filename="src/camel/camel-folder.h" line="235"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="3849">%TRUE on success, %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3841">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="start_uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3842">the start message UID</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="end_uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3843">the end message UID</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3844">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="refresh_info_sync"
                      invoker="refresh_info_sync"
                      version="3.0"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="3992">Synchronizes a folder's summary with its backing store.</doc>
        <source-position filename="src/camel/camel-folder.h" line="241"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="4000">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3994">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3995">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="rename" invoker="rename">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2785">Marks @folder as renamed.

This also emits the #CamelFolder::renamed signal from an idle source on
the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.

NOTE: This is an internal function used by camel stores, no locking
is performed on the folder.</doc>
        <source-position filename="src/camel/camel-folder.h" line="196"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2787">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="new_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2788">new name for the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="renamed">
        <source-position filename="src/camel/camel-folder.h" line="272"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="old_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="search_by_expression"
                      invoker="search_by_expression"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2593">Searches the folder for messages matching the given search expression.</doc>
        <source-position filename="src/camel/camel-folder.h" line="181"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="2602">a #GPtrArray of uids of
matching messages. The caller must free the list and each of the elements
when it is done.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2595">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="expression" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2596">a search expression</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2597">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="search_by_uids"
                      invoker="search_by_uids"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2661">Search a subset of uid's for an expression match.</doc>
        <source-position filename="src/camel/camel-folder.h" line="185"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="2671">a #GPtrArray of uids of
matching messages. The caller must free the list and each of the elements
when it is done.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2663">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="expression" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2664">search expression</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="uids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2665">array of uid's to match against.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2666">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="search_free" invoker="search_free">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2699">Free the result of a search as gotten by camel_folder_search_by_expression()
or camel_folder_search_by_uids().</doc>
        <source-position filename="src/camel/camel-folder.h" line="190"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2701">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2702">search results to free</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_message_flags"
                      invoker="set_message_flags"
                      deprecated="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2196">Sets those flags specified by @mask to the values specified by @set
on the indicated message. (This may or may not persist after the
folder or store is closed. See camel_folder_get_permanent_flags())

E.g. to set the deleted flag and clear the draft flag, use
camel_folder_set_message_flags (folder, uid, CAMEL_MESSAGE_DELETED|CAMEL_MESSAGE_DRAFT, CAMEL_MESSAGE_DELETED);</doc>
        <doc-deprecated xml:space="preserve">Use camel_message_info_set_flags() on the message info directly
(when it works)</doc-deprecated>
        <source-position filename="src/camel/camel-folder.h" line="151"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="2213">%TRUE if the flags were changed or %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2198">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2199">the UID of a message in @folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="mask" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2200">a mask of #CamelMessageFlags bit-or values to use</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2201">the flags to ser, also bit-or of #CamelMessageFlags</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_message_user_flag"
                      invoker="set_message_user_flag"
                      deprecated="1">
        <doc-deprecated xml:space="preserve">Use camel_message_info_set_user_flag() on the
#CamelMessageInfo directly (when it works)

Sets the user flag specified by @name to the value specified by @value
on the indicated message. (This may or may not persist after the
folder or store is closed. See camel_folder_get_permanent_flags())</doc-deprecated>
        <source-position filename="src/camel/camel-folder.h" line="158"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2265">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2266">the UID of a message in @folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2267">the name of the user flag to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2268">the value to set it to</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_message_user_tag"
                      invoker="set_message_user_tag"
                      deprecated="1">
        <doc-deprecated xml:space="preserve">Use camel_message_info_set_user_tag() on the
#CamelMessageInfo directly (when it works).

Sets the user tag specified by @name to the value specified by @value
on the indicated message. (This may or may not persist after the
folder or store is closed. See camel_folder_get_permanent_flags())</doc-deprecated>
        <source-position filename="src/camel/camel-folder.h" line="165"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2328">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2329">the UID of a message in @folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2330">the name of the user tag to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2331">the value to set it to</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="sort_uids" invoker="sort_uids" version="2.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2521">Sorts the array of UIDs.</doc>
        <source-position filename="src/camel/camel-folder.h" line="175"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2523">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="uids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2524">array of uids</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="synchronize_message_sync"
                      invoker="synchronize_message_sync"
                      version="3.0"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="4285">Ensure that a message identified by @message_uid has been synchronized in
@folder so that calling camel_folder_get_message() on it later will work
in offline mode.</doc>
        <source-position filename="src/camel/camel-folder.h" line="248"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="4296">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4287">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="message_uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4288">a message UID</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4289">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="synchronize_sync"
                      invoker="synchronize_sync"
                      version="3.0"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="4131">Synchronizes any changes that have been made to @folder to its
backing store, optionally expunging deleted messages as well.</doc>
        <source-position filename="src/camel/camel-folder.h" line="244"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="4141">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4133">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="expunge" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4134">whether to expunge after synchronizing</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4135">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="thaw" invoker="thaw">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2937">Thaws the folder and emits any pending folder_changed
signals.</doc>
        <source-position filename="src/camel/camel-folder.h" line="199"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2939">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="transfer_messages_to_sync"
                      invoker="transfer_messages_to_sync"
                      version="3.0"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="4468">Copies or moves messages from one folder to another.  If the
@source and @destination folders have the same parent_store, this
may be more efficient than using camel_folder_append_message_sync().</doc>
        <source-position filename="src/camel/camel-folder.h" line="253"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="4484">%TRUE on success, %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4470">the source #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="message_uids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4471">message UIDs in @source</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="destination" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4472">the destination #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
          <parameter name="delete_originals" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4473">whether or not to delete the original messages</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="transferred_uids"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4474">if
                   non-%NULL, the UIDs of the resulting messages in
                   @destination will be stored here, if known.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4477">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="append_message"
              c:identifier="camel_folder_append_message"
              version="3.0">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="3231">Appends @message to @folder asynchronously.  Only the flag and tag data
from @info are used.  If @info is %NULL, no flags or tags will be set.

When the operation is finished, @callback will be called.  You can
then call camel_folder_append_message_finish() to get the result of
the operation.</doc>
        <source-position filename="src/camel/camel-folder.h" line="427"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3233">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3234">a #CamelMimeMessage</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </parameter>
          <parameter name="info"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3235">a #CamelMessageInfo with additional flags/etc to set
       on the new message, or %NULL</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3237">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3238">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3239">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3240">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_message_finish"
              c:identifier="camel_folder_append_message_finish"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="3283">Finishes the operation started with camel_folder_append_message_finish().</doc>
        <source-position filename="src/camel/camel-folder.h" line="434"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="3294">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3285">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3286">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="appended_uid"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3287">if non-%NULL, the UID of
               the appended message will be returned here, if it is
               known</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_message_sync"
              c:identifier="camel_folder_append_message_sync"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="3145">Appends @message to @folder.  Only the flag and tag data from @info
are used.  If @info is %NULL, no flags or tags will be set.</doc>
        <source-position filename="src/camel/camel-folder.h" line="420"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="3160">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3147">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3148">a #CamelMimeMessage</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </parameter>
          <parameter name="info"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3149">a #CamelMessageInfo with additional flags/etc to set
       on the new message, or %NULL</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </parameter>
          <parameter name="appended_uid"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3151">if non-%NULL, the UID
               of the appended message will be returned here, if it
               is known</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3154">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="changed"
              c:identifier="camel_folder_changed"
              version="2.32">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2844">Emits the #CamelFolder::changed signal from an idle source on the
main loop.  The idle source's priority is #G_PRIORITY_LOW.</doc>
        <source-position filename="src/camel/camel-folder.h" line="395"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2846">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="changes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2847">change information for @folder</doc>
            <type name="FolderChangeInfo" c:type="CamelFolderChangeInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="cmp_uids"
              c:identifier="camel_folder_cmp_uids"
              version="2.28">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2490">Compares two uids. The return value meaning is the same as in any other compare function.

Note that the default compare function expects a decimal number at the beginning of a uid,
thus if provider uses different uid values, then it should subclass this function.</doc>
        <source-position filename="src/camel/camel-folder.h" line="368"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2492">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="uid1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2493">The first uid.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="uid2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2494">the second uid.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="count_by_expression"
              c:identifier="camel_folder_count_by_expression"
              version="2.26"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2629">Searches the folder for count of messages matching the given search expression.</doc>
        <source-position filename="src/camel/camel-folder.h" line="385"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="2638">an interger</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2631">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="expression" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2632">a search expression</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2633">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete" c:identifier="camel_folder_delete">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2725">Marks @folder as deleted and performs any required cleanup.

This also emits the #CamelFolder::deleted signal from an idle source on
the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.</doc>
        <source-position filename="src/camel/camel-folder.h" line="392"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2727">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_description"
              c:identifier="camel_folder_dup_description"
              version="3.8">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="1860">Thread-safe variation of camel_folder_get_description().
Use this function when accessing @folder from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="src/camel/camel-folder.h" line="301"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="1869">a newly-allocated copy of #CamelFolder:description</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="1862">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_display_name"
              c:identifier="camel_folder_dup_display_name"
              version="3.8">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="1752">Thread-safe variation of camel_folder_get_display_name().
Use this function when accessing @folder from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="src/camel/camel-folder.h" line="295"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="1761">a newly-allocated copy of #CamelFolder:display-name</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="1754">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_full_name"
              c:identifier="camel_folder_dup_full_name"
              version="3.8">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="1672">Thread-safe variation of camel_folder_get_full_name().
Use this function when accessing @folder from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="src/camel/camel-folder.h" line="291"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="1681">a newly-allocated copy of #CamelFolder:full-name</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="1674">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="expunge" c:identifier="camel_folder_expunge" version="3.0">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="3414">Asynchronously deletes messages which have been marked as "DELETED".

When the operation is finished, @callback will be called.  You can then
call camel_folder_expunge_finish() to get the result of the operation.</doc>
        <source-position filename="src/camel/camel-folder.h" line="442"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3416">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3417">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3418">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3419">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3420">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="expunge_finish"
              c:identifier="camel_folder_expunge_finish"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="3449">Finishes the operation started with camel_folder_expunge().</doc>
        <source-position filename="src/camel/camel-folder.h" line="447"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="3457">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3451">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3452">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="expunge_sync"
              c:identifier="camel_folder_expunge_sync"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="3332">Deletes messages which have been marked as "DELETED".</doc>
        <source-position filename="src/camel/camel-folder.h" line="439"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="3340">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3334">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3335">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free_deep" c:identifier="camel_folder_free_deep">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="3089">Frees the provided array and its contents. Used by #CamelFolder
subclasses as an implementation for free_uids when the provided
information was created explicitly by the corresponding get_ call.</doc>
        <source-position filename="src/camel/camel-folder.h" line="412"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3091">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3092">an array of uids</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="free_shallow" c:identifier="camel_folder_free_shallow">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="3072">Frees the provided array but not its contents. Used by #CamelFolder
subclasses as an implementation for free_uids or free_summary when
the returned array needs to be freed but its contents come from
"static" information.</doc>
        <source-position filename="src/camel/camel-folder.h" line="410"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3074">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3075">an array of uids or #CamelMessageInfo</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="free_summary" c:identifier="camel_folder_free_summary">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2570">Frees the summary array returned by camel_folder_get_summary().</doc>
        <source-position filename="src/camel/camel-folder.h" line="353"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2572">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2573">the summary array to free</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="MessageInfo"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="free_uids" c:identifier="camel_folder_free_uids">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2431">Frees the array of UIDs returned by camel_folder_get_uids().</doc>
        <source-position filename="src/camel/camel-folder.h" line="363"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2433">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2434">the array of uids to free</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="freeze" c:identifier="camel_folder_freeze">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2914">Freezes the folder so that a series of operation can be performed
without "folder_changed" signals being emitted.  When the folder is
later thawed with camel_folder_thaw(), the suppressed signals will
be emitted.</doc>
        <source-position filename="src/camel/camel-folder.h" line="397"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2916">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_deleted_message_count"
              c:identifier="camel_folder_get_deleted_message_count">
        <source-position filename="src/camel/camel-folder.h" line="350"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="2018">the number of deleted messages in the folder, or -1 if
unknown</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2016">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="camel_folder_get_description"
              glib:get-property="description"
              version="2.32">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="1838">Returns a description of the folder suitable for displaying to the user.</doc>
        <source-position filename="src/camel/camel-folder.h" line="300"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="1844">a description of the folder</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="1840">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display_name"
              c:identifier="camel_folder_get_display_name"
              glib:get-property="display-name"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="1733">Returns the display name for the folder.  The fully qualified name
can be obtained with camel_folder_get_full_name().</doc>
        <source-position filename="src/camel/camel-folder.h" line="294"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="1740">the display name of the folder</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="1735">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_filename"
              c:identifier="camel_folder_get_filename"
              version="2.26"
              throws="1">
        <source-position filename="src/camel/camel-folder.h" line="414"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="1629">a file name corresponding to a message
  with UID @uid. Free the returned string with g_free(), when
  no longer needed.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="1625">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="1626">a message UID</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_flags"
              c:identifier="camel_folder_get_flags"
              version="3.24">
        <source-position filename="src/camel/camel-folder.h" line="304"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="2034">Folder flags (bit-or of #CamelFolderFlags) of the @folder</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2032">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_folder_summary"
              c:identifier="camel_folder_get_folder_summary"
              version="3.24">
        <source-position filename="src/camel/camel-folder.h" line="286"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="1940">a #CamelFolderSummary of the folder</doc>
          <type name="FolderSummary" c:type="CamelFolderSummary*"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="1938">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_frozen_count"
              c:identifier="camel_folder_get_frozen_count"
              version="2.32">
        <source-position filename="src/camel/camel-folder.h" line="400"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2981">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_full_display_name"
              c:identifier="camel_folder_get_full_display_name"
              version="3.46">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="1813">Similar to the camel_folder_get_full_name(), only returning
full path to the @folder suitable for the display to a user.</doc>
        <source-position filename="src/camel/camel-folder.h" line="298"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="1820">full path to the @folder suitable for the display to a user</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="1815">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_full_name"
              c:identifier="camel_folder_get_full_name"
              glib:get-property="full-name">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="1656">Returns the fully qualified name of the folder.</doc>
        <source-position filename="src/camel/camel-folder.h" line="290"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="1662">the fully qualified name of the folder</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="1658">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mark_seen"
              c:identifier="camel_folder_get_mark_seen"
              glib:get-property="mark-seen"
              version="3.32">
        <source-position filename="src/camel/camel-folder.h" line="307"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="2068">a #CamelThreeState, whether messages in this @folder
   should be marked as seen automatically.</doc>
          <type name="ThreeState" c:type="CamelThreeState"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2066">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mark_seen_timeout"
              c:identifier="camel_folder_get_mark_seen_timeout"
              glib:get-property="mark-seen-timeout"
              version="3.32">
        <source-position filename="src/camel/camel-folder.h" line="310"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="2110">timeout in milliseconds for marking messages
   as seen in this @folder</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2108">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_message"
              c:identifier="camel_folder_get_message"
              version="3.0">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="3628">Asynchronously gets the message corresponding to @message_uid from @folder.

When the operation is finished, @callback will be called.  You can then
call camel_folder_get_message_finish() to get the result of the operation.</doc>
        <source-position filename="src/camel/camel-folder.h" line="455"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3630">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="message_uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3631">the message UID</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3632">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3633">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3634">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3635">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_message_cached"
              c:identifier="camel_folder_get_message_cached"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="3562">Gets the message corresponding to @message_uid from the @folder cache,
if available locally. This should not do any network I/O, only check
if message is already downloaded and return it quickly, not being
blocked by the folder's lock. Returning NULL is not considered as
an error, it just means that the message is still to-be-downloaded.

Note: This function is called automatically within camel_folder_get_message_sync().</doc>
        <source-position filename="src/camel/camel-folder.h" line="466"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="3576">a cached #CamelMimeMessage corresponding
   to the requested UID</doc>
          <type name="MimeMessage" c:type="CamelMimeMessage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3564">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="message_uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3565">the message UID</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3566">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_message_count"
              c:identifier="camel_folder_get_message_count">
        <source-position filename="src/camel/camel-folder.h" line="345"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="1980">the number of messages in the folder, or -1 if unknown</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="1978">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_message_finish"
              c:identifier="camel_folder_get_message_finish"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="3674">Finishes the operation started with camel_folder_get_message().</doc>
        <source-position filename="src/camel/camel-folder.h" line="462"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="3682">a #CamelMimeMessage corresponding to the requested UID</doc>
          <type name="MimeMessage" c:type="CamelMimeMessage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3676">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3677">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_message_flags"
              c:identifier="camel_folder_get_message_flags"
              deprecated="1">
        <doc-deprecated xml:space="preserve">Use camel_folder_get_message_info() instead.</doc-deprecated>
        <source-position filename="src/camel/camel-folder.h" line="318"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="2177">the #CamelMessageFlags that are set on the indicated
message.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2172">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2173">the UID of a message in @folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_message_info"
              c:identifier="camel_folder_get_message_info">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2359">Retrieve the #CamelMessageInfo for the specified @uid.</doc>
        <source-position filename="src/camel/camel-folder.h" line="390"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="2366">The summary information for the
  indicated message, or %NULL if the uid does not exist. Free the returned
  object with g_object_unref(), when done with it.</doc>
          <type name="MessageInfo" c:type="CamelMessageInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2361">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2362">the uid of a message</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_message_sync"
              c:identifier="camel_folder_get_message_sync"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="3476">Gets the message corresponding to @message_uid from @folder.</doc>
        <source-position filename="src/camel/camel-folder.h" line="451"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="3485">a #CamelMimeMessage corresponding to the requested UID</doc>
          <type name="MimeMessage" c:type="CamelMimeMessage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3478">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="message_uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3479">the message UID</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3480">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_message_user_flag"
              c:identifier="camel_folder_get_message_user_flag"
              deprecated="1">
        <doc-deprecated xml:space="preserve">Use camel_message_info_get_user_flag() on the message
info directly</doc-deprecated>
        <source-position filename="src/camel/camel-folder.h" line="324"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="2242">%TRUE if the given user flag is set on the message or
%FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2235">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2236">the UID of a message in @folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2237">the name of a user flag</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_message_user_tag"
              c:identifier="camel_folder_get_message_user_tag"
              deprecated="1">
        <doc-deprecated xml:space="preserve">Use camel_message_info_get_user_tag() on the
#CamelMessageInfo directly.</doc-deprecated>
        <source-position filename="src/camel/camel-folder.h" line="333"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="2305">the value of the user tag</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2298">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2299">the UID of a message in @folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2300">the name of a user tag</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_parent_store"
              c:identifier="camel_folder_get_parent_store"
              glib:get-property="parent-store">
        <source-position filename="src/camel/camel-folder.h" line="284"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="1925">the parent #CamelStore of the folder</doc>
          <type name="gpointer" c:type="_CamelStore*"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="1923">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_permanent_flags"
              c:identifier="camel_folder_get_permanent_flags">
        <source-position filename="src/camel/camel-folder.h" line="315"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="2152">the set of #CamelMessageFlags that can be permanently
stored on a message between sessions. If it includes
#CAMEL_MESSAGE_USER, then user-defined flags will be remembered.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2150">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_quota_info"
              c:identifier="camel_folder_get_quota_info"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="3771">Asynchronously gets a list of known quotas for @folder.

When the operation is finished, @callback will be called.  You can
then call camel_folder_get_quota_info_finish() to get the result of
the operation.</doc>
        <source-position filename="src/camel/camel-folder.h" line="474"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3773">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3774">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3775">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3776">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3777">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_quota_info_finish"
              c:identifier="camel_folder_get_quota_info_finish"
              version="3.2"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="3807">Finishes the operation started with camel_folder_get_quota_info().
Free the returned #CamelFolderQuotaInfo struct with
camel_folder_quota_info_free().

If quotas are not supported for @folder, the function returns %NULL
and sets @error to #G_IO_ERROR_NOT_SUPPORTED.</doc>
        <source-position filename="src/camel/camel-folder.h" line="480"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="3820">a #CamelFolderQuotaInfo, or %NULL on error</doc>
          <type name="FolderQuotaInfo" c:type="CamelFolderQuotaInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3809">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3810">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_quota_info_sync"
              c:identifier="camel_folder_get_quota_info_sync"
              version="3.2"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="3701">Gets a list of known quotas for @folder.  Free the returned
#CamelFolderQuotaInfo struct with camel_folder_quota_info_free().

If quotas are not supported for @folder, the function returns %NULL
and sets @error to #G_IO_ERROR_NOT_SUPPORTED.</doc>
        <source-position filename="src/camel/camel-folder.h" line="470"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="3713">a #CamelFolderQuotaInfo, or %NULL on error</doc>
          <type name="FolderQuotaInfo" c:type="CamelFolderQuotaInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3703">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3704">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_summary" c:identifier="camel_folder_get_summary">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2546">This returns the summary information for the folder. This array
should not be modified, and must be freed with
camel_folder_free_summary().</doc>
        <source-position filename="src/camel/camel-folder.h" line="352"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="2554">an array of UID-s of #CamelMessageInfo</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2548">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uids" c:identifier="camel_folder_get_uids">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2405">Get the list of UIDs available in a folder. This routine is useful
for finding what messages are available when the folder does not
support summaries. The returned array should not be modified, and
must be freed by passing it to camel_folder_free_uids().</doc>
        <source-position filename="src/camel/camel-folder.h" line="362"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="2414">a GPtrArray of UIDs
corresponding to the messages available in the folder</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2407">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uncached_uids"
              c:identifier="camel_folder_get_uncached_uids"
              version="2.26"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2454">Returns the known-uncached uids from a list of uids. It may return uids
which are locally cached but should never filter out a uid which is not
locally cached. Free the result by called camel_folder_free_uids().
Frees the array of UIDs returned by camel_folder_get_uids().</doc>
        <source-position filename="src/camel/camel-folder.h" line="365"/>
        <return-value transfer-ownership="none">
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2456">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="uids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2457">the array of uids to filter down to uncached ones.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_unread_message_count"
              c:identifier="camel_folder_get_unread_message_count"
              deprecated="1">
        <doc-deprecated xml:space="preserve">use camel_folder_summary_get_unread_count() instead.</doc-deprecated>
        <source-position filename="src/camel/camel-folder.h" line="347"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="2002">the number of unread messages in the folder, or -1 if
unknown</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="1998">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_summary_capability"
              c:identifier="camel_folder_has_summary_capability">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2387">Get whether or not the folder has a summary.</doc>
        <source-position filename="src/camel/camel-folder.h" line="343"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="2393">%TRUE if a summary is available or %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2389">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_frozen" c:identifier="camel_folder_is_frozen">
        <source-position filename="src/camel/camel-folder.h" line="399"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="2963">whether or not the folder is frozen</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2961">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="lock" c:identifier="camel_folder_lock" version="2.32">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="3111">Locks @folder. Unlock it with camel_folder_unlock().</doc>
        <source-position filename="src/camel/camel-folder.h" line="417"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3113">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepare_content_refresh"
              c:identifier="camel_folder_prepare_content_refresh"
              version="3.22">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="4784">Lets the @folder know that it should refresh its content
the next time from fresh. This is useful for remote accounts,
to fully re-check the folder content against the server.</doc>
        <source-position filename="src/camel/camel-folder.h" line="565"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4786">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="purge_message_cache"
              c:identifier="camel_folder_purge_message_cache"
              version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="3916">Delete the local cache of all messages between these uids.

When the operation is finished, @callback will be called.  You can then
call camel_folder_purge_message_cache_finish() to get the result of the
operation.</doc>
        <source-position filename="src/camel/camel-folder.h" line="490"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3918">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="start_uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3919">the start message UID</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="end_uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3920">the end message UID</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3921">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3922">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3923">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3924">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="purge_message_cache_finish"
              c:identifier="camel_folder_purge_message_cache_finish"
              version="3.4"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="3965">Finishes the operation started with camel_folder_purge_message_cache().</doc>
        <source-position filename="src/camel/camel-folder.h" line="498"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="3973">%TRUE on success, %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3967">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3968">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="purge_message_cache_sync"
              c:identifier="camel_folder_purge_message_cache_sync"
              version="3.4"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="3839">Delete the local cache of all messages between these uids.</doc>
        <source-position filename="src/camel/camel-folder.h" line="484"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="3849">%TRUE on success, %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3841">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="start_uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3842">the start message UID</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="end_uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3843">the end message UID</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3844">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_info"
              c:identifier="camel_folder_refresh_info"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="4069">Asynchronously synchronizes a folder's summary with its backing store.

When the operation is finished, @callback will be called.  You can then
call camel_folder_refresh_info_finish() to get the result of the operation.</doc>
        <source-position filename="src/camel/camel-folder.h" line="505"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4071">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4072">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4073">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4074">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4075">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_info_finish"
              c:identifier="camel_folder_refresh_info_finish"
              version="3.2"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="4104">Finishes the operation started with camel_folder_refresh_info().</doc>
        <source-position filename="src/camel/camel-folder.h" line="510"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="4112">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4106">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4107">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_info_sync"
              c:identifier="camel_folder_refresh_info_sync"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="3992">Synchronizes a folder's summary with its backing store.</doc>
        <source-position filename="src/camel/camel-folder.h" line="502"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="4000">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3994">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3995">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="rename" c:identifier="camel_folder_rename">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2785">Marks @folder as renamed.

This also emits the #CamelFolder::renamed signal from an idle source on
the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.

NOTE: This is an internal function used by camel stores, no locking
is performed on the folder.</doc>
        <source-position filename="src/camel/camel-folder.h" line="393"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2787">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="new_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2788">new name for the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_by_expression"
              c:identifier="camel_folder_search_by_expression"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2593">Searches the folder for messages matching the given search expression.</doc>
        <source-position filename="src/camel/camel-folder.h" line="373"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="2602">a #GPtrArray of uids of
matching messages. The caller must free the list and each of the elements
when it is done.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2595">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="expression" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2596">a search expression</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2597">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_by_uids"
              c:identifier="camel_folder_search_by_uids"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2661">Search a subset of uid's for an expression match.</doc>
        <source-position filename="src/camel/camel-folder.h" line="378"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="2671">a #GPtrArray of uids of
matching messages. The caller must free the list and each of the elements
when it is done.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2663">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="expression" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2664">search expression</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="uids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2665">array of uid's to match against.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2666">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_free" c:identifier="camel_folder_search_free">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2699">Free the result of a search as gotten by camel_folder_search_by_expression()
or camel_folder_search_by_uids().</doc>
        <source-position filename="src/camel/camel-folder.h" line="383"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2701">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2702">search results to free</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_description"
              c:identifier="camel_folder_set_description"
              glib:set-property="description"
              version="2.32">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="1891">Sets a description of the folder suitable for displaying to the user.</doc>
        <source-position filename="src/camel/camel-folder.h" line="302"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="1893">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="description" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="1894">a description of the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_display_name"
              c:identifier="camel_folder_set_display_name"
              glib:set-property="display-name"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="1783">Sets the display name for the folder.</doc>
        <source-position filename="src/camel/camel-folder.h" line="296"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="1785">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="display_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="1786">a display name for the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_flags"
              c:identifier="camel_folder_set_flags"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2046">Sets folder flags (bit-or of #CamelFolderFlags) for the @folder.</doc>
        <source-position filename="src/camel/camel-folder.h" line="305"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2048">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="folder_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2049">flags (bit-or of #CamelFolderFlags) to set</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_full_name"
              c:identifier="camel_folder_set_full_name"
              glib:set-property="full-name"
              version="2.32">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="1703">Sets the fully qualified name of the folder.</doc>
        <source-position filename="src/camel/camel-folder.h" line="292"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="1705">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="full_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="1706">a fully qualified name for the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_lock_async"
              c:identifier="camel_folder_set_lock_async"
              version="2.30">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="1603">Sets whether folder locking (camel_folder_lock() and camel_folder_unlock())
should be used. When set to %FALSE, the two functions do nothing and simply
return.</doc>
        <source-position filename="src/camel/camel-folder.h" line="281"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="1605">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="skip_folder_lock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="1606">a value to set</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mark_seen"
              c:identifier="camel_folder_set_mark_seen"
              glib:set-property="mark-seen"
              version="3.32">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2081">Sets whether the messages in this @folder should be marked
as seen automatically. An inconsistent state means to use
global option.</doc>
        <source-position filename="src/camel/camel-folder.h" line="308"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2083">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="mark_seen" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2084">a #CamelThreeState as the value to set</doc>
            <type name="ThreeState" c:type="CamelThreeState"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mark_seen_timeout"
              c:identifier="camel_folder_set_mark_seen_timeout"
              glib:set-property="mark-seen-timeout"
              version="3.32">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2123">Sets the @timeout in milliseconds for marking messages
as seen in this @folder. Whether the timeout is used
depends on camel_folder_get_mark_seen().</doc>
        <source-position filename="src/camel/camel-folder.h" line="312"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2125">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="timeout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2126">a timeout in milliseconds</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_message_flags"
              c:identifier="camel_folder_set_message_flags"
              deprecated="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2196">Sets those flags specified by @mask to the values specified by @set
on the indicated message. (This may or may not persist after the
folder or store is closed. See camel_folder_get_permanent_flags())

E.g. to set the deleted flag and clear the draft flag, use
camel_folder_set_message_flags (folder, uid, CAMEL_MESSAGE_DELETED|CAMEL_MESSAGE_DRAFT, CAMEL_MESSAGE_DELETED);</doc>
        <doc-deprecated xml:space="preserve">Use camel_message_info_set_flags() on the message info directly
(when it works)</doc-deprecated>
        <source-position filename="src/camel/camel-folder.h" line="320"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="2213">%TRUE if the flags were changed or %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2198">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2199">the UID of a message in @folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="mask" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2200">a mask of #CamelMessageFlags bit-or values to use</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2201">the flags to ser, also bit-or of #CamelMessageFlags</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_message_user_flag"
              c:identifier="camel_folder_set_message_user_flag"
              deprecated="1">
        <doc-deprecated xml:space="preserve">Use camel_message_info_set_user_flag() on the
#CamelMessageInfo directly (when it works)

Sets the user flag specified by @name to the value specified by @value
on the indicated message. (This may or may not persist after the
folder or store is closed. See camel_folder_get_permanent_flags())</doc-deprecated>
        <source-position filename="src/camel/camel-folder.h" line="328"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2265">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2266">the UID of a message in @folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2267">the name of the user flag to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2268">the value to set it to</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_message_user_tag"
              c:identifier="camel_folder_set_message_user_tag"
              deprecated="1">
        <doc-deprecated xml:space="preserve">Use camel_message_info_set_user_tag() on the
#CamelMessageInfo directly (when it works).

Sets the user tag specified by @name to the value specified by @value
on the indicated message. (This may or may not persist after the
folder or store is closed. See camel_folder_get_permanent_flags())</doc-deprecated>
        <source-position filename="src/camel/camel-folder.h" line="337"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2328">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2329">the UID of a message in @folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2330">the name of the user tag to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2331">the value to set it to</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sort_uids"
              c:identifier="camel_folder_sort_uids"
              version="2.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2521">Sorts the array of UIDs.</doc>
        <source-position filename="src/camel/camel-folder.h" line="371"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2523">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="uids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2524">array of uids</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="synchronize"
              c:identifier="camel_folder_synchronize"
              version="3.0">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="4212">Synchronizes any changes that have been made to @folder to its backing
store asynchronously, optionally expunging deleted messages as well.

When the operation is finished, @callback will be called.  You can then
call camel_folder_synchronize_finish() to get the result of the operation.</doc>
        <source-position filename="src/camel/camel-folder.h" line="518"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4214">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="expunge" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4215">whether to expunge after synchronizing</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4216">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4217">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4218">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4219">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="synchronize_finish"
              c:identifier="camel_folder_synchronize_finish"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="4258">Finishes the operation started with camel_folder_synchronize().</doc>
        <source-position filename="src/camel/camel-folder.h" line="524"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="4266">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4260">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4261">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="synchronize_message"
              c:identifier="camel_folder_synchronize_message"
              version="3.0">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="4374">Asynchronously ensure that a message identified by @message_uid has been
synchronized in @folder so that calling camel_folder_get_message() on it
later will work in offline mode.

When the operation is finished, @callback will be called.  You can then
call camel_folder_synchronize_message_finish() to get the result of the
operation.</doc>
        <source-position filename="src/camel/camel-folder.h" line="532"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4376">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="message_uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4377">a message UID</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4378">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4379">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4380">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4381">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="synchronize_message_finish"
              c:identifier="camel_folder_synchronize_message_finish"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="4423">Finishes the operation started with camel_folder_synchronize_message().</doc>
        <source-position filename="src/camel/camel-folder.h" line="539"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="4431">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4425">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4426">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="synchronize_message_sync"
              c:identifier="camel_folder_synchronize_message_sync"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="4285">Ensure that a message identified by @message_uid has been synchronized in
@folder so that calling camel_folder_get_message() on it later will work
in offline mode.</doc>
        <source-position filename="src/camel/camel-folder.h" line="527"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="4296">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4287">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="message_uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4288">a message UID</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4289">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="synchronize_sync"
              c:identifier="camel_folder_synchronize_sync"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="4131">Synchronizes any changes that have been made to @folder to its
backing store, optionally expunging deleted messages as well.</doc>
        <source-position filename="src/camel/camel-folder.h" line="514"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="4141">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4133">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="expunge" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4134">whether to expunge after synchronizing</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4135">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_folder_summary"
              c:identifier="camel_folder_take_folder_summary"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="1952">Sets a #CamelFolderSummary of the folder. It consumes the @summary.

This is supposed to be called only by the descendants of
the #CamelFolder and only at the construction time. Calling
this function twice yeilds to an error.</doc>
        <source-position filename="src/camel/camel-folder.h" line="287"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="1954">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="summary" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="1955">a #CamelFolderSummary</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </parameter>
        </parameters>
      </method>
      <method name="thaw" c:identifier="camel_folder_thaw">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="2937">Thaws the folder and emits any pending folder_changed
signals.</doc>
        <source-position filename="src/camel/camel-folder.h" line="398"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2939">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="transfer_messages_to"
              c:identifier="camel_folder_transfer_messages_to"
              version="3.0">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="4680">Asynchronously copies or moves messages from one folder to another.
If the @source or @destination folders have the same parent store,
this may be more efficient than using camel_folder_append_message().

When the operation is finished, @callback will be called.  You can then
call camel_folder_transfer_messages_to_finish() to get the result of the
operation.</doc>
        <source-position filename="src/camel/camel-folder.h" line="551"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4682">the source #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="message_uids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4683">message UIDs in @source</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="destination" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4684">the destination #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
          <parameter name="delete_originals" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4685">whether or not to delete the original messages</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4686">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4687">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4688">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4689">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="transfer_messages_to_finish"
              c:identifier="camel_folder_transfer_messages_to_finish"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="4742">Finishes the operation started with camel_folder_transfer_messages_to().</doc>
        <source-position filename="src/camel/camel-folder.h" line="560"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="4753">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4744">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4745">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="transferred_uids"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4746">if
                   non-%NULL, the UIDs of the resulting messages in
                   @destination will be stored here, if known.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="transfer_messages_to_sync"
              c:identifier="camel_folder_transfer_messages_to_sync"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="4468">Copies or moves messages from one folder to another.  If the
@source and @destination folders have the same parent_store, this
may be more efficient than using camel_folder_append_message_sync().</doc>
        <source-position filename="src/camel/camel-folder.h" line="543"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="4484">%TRUE on success, %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4470">the source #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
          <parameter name="message_uids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4471">message UIDs in @source</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="destination" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4472">the destination #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
          <parameter name="delete_originals" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4473">whether or not to delete the original messages</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="transferred_uids"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4474">if
                   non-%NULL, the UIDs of the resulting messages in
                   @destination will be stored here, if known.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4477">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unlock" c:identifier="camel_folder_unlock" version="2.32">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="3128">Unlocks @folder, previously locked with camel_folder_lock().</doc>
        <source-position filename="src/camel/camel-folder.h" line="418"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3130">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="description"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_description"
                getter="get_description"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="1435">The folder's description.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="display-name"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_display_name"
                getter="get_display_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="1452">The folder's display name.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="full-name"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_full_name"
                getter="get_full_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="1469">The folder's fully qualified name.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mark-seen"
                version="3.32"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_mark_seen"
                getter="get_mark_seen"
                default-value="CAMEL_THREE_STATE_INCONSISTENT">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="1502">A #CamelThreeState persistent option of the folder,
which can override global option to mark messages
as seen after certain interval.</doc>
        <type name="ThreeState"/>
      </property>
      <property name="mark-seen-timeout"
                version="3.32"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_mark_seen_timeout"
                getter="get_mark_seen_timeout"
                default-value="1500">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="1525">Timeout in milliseconds for marking messages as seen.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="parent-store"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_parent_store">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="1486">The #CamelStore to which the folder belongs.</doc>
        <type name="Store"/>
      </property>
      <field name="parent">
        <type name="Object" c:type="CamelObject"/>
      </field>
      <field name="priv">
        <type name="FolderPrivate" c:type="CamelFolderPrivate*"/>
      </field>
      <glib:signal name="changed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="changes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="1549">the #CamelFolderChangeInfo with the list of changes</doc>
            <type name="FolderChangeInfo"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="deleted" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="renamed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="old_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="1575">the previous folder name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="FolderChangeInfo"
            c:type="CamelFolderChangeInfo"
            glib:type-name="CamelFolderChangeInfo"
            glib:get-type="camel_folder_change_info_get_type"
            c:symbol-prefix="folder_change_info">
      <source-position filename="src/camel/camel-folder.h" line="117"/>
      <field name="uid_added" writable="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="uid_removed" writable="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="uid_changed" writable="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="uid_recent" writable="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="FolderChangeInfoPrivate"
              c:type="CamelFolderChangeInfoPrivate*"/>
      </field>
      <constructor name="new" c:identifier="camel_folder_change_info_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="4810">Create a new folder change info structure.

Change info structures are not MT-SAFE and must be
locked for exclusive access externally.</doc>
        <source-position filename="src/camel/camel-folder.h" line="572"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="4818">a new #CamelFolderChangeInfo</doc>
          <type name="FolderChangeInfo" c:type="CamelFolderChangeInfo*"/>
        </return-value>
      </constructor>
      <method name="add_source"
              c:identifier="camel_folder_change_info_add_source">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="4863">Add a source uid for generating a changeset.</doc>
        <source-position filename="src/camel/camel-folder.h" line="588"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4865">a #CamelFolderChangeInfo</doc>
            <type name="FolderChangeInfo" c:type="CamelFolderChangeInfo*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4866">a uid</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_source_list"
              c:identifier="camel_folder_change_info_add_source_list">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="4888">Add a list of source uid's for generating a changeset.</doc>
        <source-position filename="src/camel/camel-folder.h" line="591"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4890">a #CamelFolderChangeInfo</doc>
            <type name="FolderChangeInfo" c:type="CamelFolderChangeInfo*"/>
          </instance-parameter>
          <parameter name="list" transfer-ownership="container">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4891">a list of uids</doc>
            <array name="GLib.PtrArray" c:type="const GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="add_uid" c:identifier="camel_folder_change_info_add_uid">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="5085">Add a new uid to the changeinfo.</doc>
        <source-position filename="src/camel/camel-folder.h" line="606"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="5087">a #CamelFolderChangeInfo</doc>
            <type name="FolderChangeInfo" c:type="CamelFolderChangeInfo*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="5088">a uid</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_update"
              c:identifier="camel_folder_change_info_add_update">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="4918">Add a uid from the updated list, used to generate a changeset diff.</doc>
        <source-position filename="src/camel/camel-folder.h" line="594"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4920">a #CamelFolderChangeInfo</doc>
            <type name="FolderChangeInfo" c:type="CamelFolderChangeInfo*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4921">a uid</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_update_list"
              c:identifier="camel_folder_change_info_add_update_list">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="4950">Add a list of uid's from the updated list.</doc>
        <source-position filename="src/camel/camel-folder.h" line="597"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4952">a #CamelFolderChangeInfo</doc>
            <type name="FolderChangeInfo" c:type="CamelFolderChangeInfo*"/>
          </instance-parameter>
          <parameter name="list" transfer-ownership="container">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4953">a list of uids</doc>
            <array name="GLib.PtrArray" c:type="const GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="build_diff"
              c:identifier="camel_folder_change_info_build_diff">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="4994">Compare the source uid set to the updated uid set and generate the
differences into the added and removed lists.</doc>
        <source-position filename="src/camel/camel-folder.h" line="600"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4996">a #CamelFolderChangeInfo</doc>
            <type name="FolderChangeInfo" c:type="CamelFolderChangeInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="cat" c:identifier="camel_folder_change_info_cat">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="5063">Concatenate one change info onto antoher. Can be used to copy them
too.</doc>
        <source-position filename="src/camel/camel-folder.h" line="604"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="5065">a #CamelFolderChangeInfo to append to</doc>
            <type name="FolderChangeInfo" c:type="CamelFolderChangeInfo*"/>
          </instance-parameter>
          <parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="5066">a #CamelFolderChangeInfo to append from</doc>
            <type name="FolderChangeInfo" c:type="CamelFolderChangeInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="change_uid"
              c:identifier="camel_folder_change_info_change_uid">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="5160">Add a uid to the changed uid list.</doc>
        <source-position filename="src/camel/camel-folder.h" line="611"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="5162">a #CamelFolderChangeInfo</doc>
            <type name="FolderChangeInfo" c:type="CamelFolderChangeInfo*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="5163">a uid</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="changed" c:identifier="camel_folder_change_info_changed">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="5210">Gets whether or not there have been any changes.</doc>
        <source-position filename="src/camel/camel-folder.h" line="577"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="5216">%TRUE if the changeset contains any changes or %FALSE
otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="5212">a #CamelFolderChangeInfo</doc>
            <type name="FolderChangeInfo" c:type="CamelFolderChangeInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="clear" c:identifier="camel_folder_change_info_clear">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="5303">Empty out the change info; called after changes have been
processed.</doc>
        <source-position filename="src/camel/camel-folder.h" line="575"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="5305">a #CamelFolderChangeInfo</doc>
            <type name="FolderChangeInfo" c:type="CamelFolderChangeInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="copy"
              c:identifier="camel_folder_change_info_copy"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="4839">Creates a copy of the @src.</doc>
        <source-position filename="src/camel/camel-folder.h" line="574"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="4845">Copy of the @src.</doc>
          <type name="FolderChangeInfo" c:type="CamelFolderChangeInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4841">a #CamelFolderChangeInfo to make copy of</doc>
            <type name="FolderChangeInfo" c:type="CamelFolderChangeInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="camel_folder_change_info_free">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="5330">Free memory associated with the folder change info lists.</doc>
        <source-position filename="src/camel/camel-folder.h" line="576"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="5332">a #CamelFolderChangeInfo</doc>
            <type name="FolderChangeInfo" c:type="CamelFolderChangeInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_added_uids"
              c:identifier="camel_folder_change_info_get_added_uids"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="5227">Returns an array of added messages UIDs. The returned array, the same as its content,
is owned by the @info.</doc>
        <source-position filename="src/camel/camel-folder.h" line="578"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="5234">An array of added UIDs.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="5229">a #CamelFolderChangeInfo</doc>
            <type name="FolderChangeInfo" c:type="CamelFolderChangeInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_changed_uids"
              c:identifier="camel_folder_change_info_get_changed_uids"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="5265">Returns an array of changed messages UIDs. The returned array, the same as its content,
is owned by the @info.</doc>
        <source-position filename="src/camel/camel-folder.h" line="582"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="5272">An array of changed UIDs.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="5267">a #CamelFolderChangeInfo</doc>
            <type name="FolderChangeInfo" c:type="CamelFolderChangeInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_recent_uids"
              c:identifier="camel_folder_change_info_get_recent_uids"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="5284">Returns an array of recent messages UIDs. The returned array, the same as its content,
is owned by the @info.</doc>
        <source-position filename="src/camel/camel-folder.h" line="584"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="5291">An array of recent UIDs.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="5286">a #CamelFolderChangeInfo</doc>
            <type name="FolderChangeInfo" c:type="CamelFolderChangeInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_removed_uids"
              c:identifier="camel_folder_change_info_get_removed_uids"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="5246">Returns an array of removed messages UIDs. The returned array, the same as its content,
is owned by the @info.</doc>
        <source-position filename="src/camel/camel-folder.h" line="580"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="5253">An array of removed UIDs.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="5248">a #CamelFolderChangeInfo</doc>
            <type name="FolderChangeInfo" c:type="CamelFolderChangeInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="recent_uid"
              c:identifier="camel_folder_change_info_recent_uid">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="5190">Add a recent uid to the changedinfo.
This will also add the uid to the uid_filter array for potential
filtering</doc>
        <source-position filename="src/camel/camel-folder.h" line="614"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="5192">a #CamelFolderChangeInfo</doc>
            <type name="FolderChangeInfo" c:type="CamelFolderChangeInfo*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="5193">a uid</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_uid"
              c:identifier="camel_folder_change_info_remove_uid">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="5125">Add a uid to the removed uid list.</doc>
        <source-position filename="src/camel/camel-folder.h" line="608"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="5127">a #CamelFolderChangeInfo</doc>
            <type name="FolderChangeInfo" c:type="CamelFolderChangeInfo*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="5128">a uid</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="FolderChangeInfoPrivate"
            c:type="CamelFolderChangeInfoPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-folder.h" line="67"/>
    </record>
    <record name="FolderClass"
            c:type="CamelFolderClass"
            glib:is-gtype-struct-for="Folder">
      <source-position filename="src/camel/camel-folder.h" line="277"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="CamelObjectClass"/>
      </field>
      <field name="get_message_count">
        <callback name="get_message_count">
          <source-position filename="src/camel/camel-folder.h" line="147"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="1980">the number of messages in the folder, or -1 if unknown</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="1978">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_permanent_flags">
        <callback name="get_permanent_flags">
          <source-position filename="src/camel/camel-folder.h" line="148"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2152">the set of #CamelMessageFlags that can be permanently
stored on a message between sessions. If it includes
#CAMEL_MESSAGE_USER, then user-defined flags will be remembered.</doc>
            <type name="guint32" c:type="guint32"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2150">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_message_flags">
        <callback name="get_message_flags">
          <source-position filename="src/camel/camel-folder.h" line="149"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2177">the #CamelMessageFlags that are set on the indicated
message.</doc>
            <type name="guint32" c:type="guint32"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2172">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="uid" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2173">the UID of a message in @folder</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_message_flags">
        <callback name="set_message_flags">
          <source-position filename="src/camel/camel-folder.h" line="151"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2213">%TRUE if the flags were changed or %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2198">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="uid" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2199">the UID of a message in @folder</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="mask" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2200">a mask of #CamelMessageFlags bit-or values to use</doc>
              <type name="guint32" c:type="guint32"/>
            </parameter>
            <parameter name="set" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2201">the flags to ser, also bit-or of #CamelMessageFlags</doc>
              <type name="guint32" c:type="guint32"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_message_user_flag">
        <callback name="get_message_user_flag">
          <source-position filename="src/camel/camel-folder.h" line="155"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2242">%TRUE if the given user flag is set on the message or
%FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2235">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="uid" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2236">the UID of a message in @folder</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2237">the name of a user flag</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_message_user_flag">
        <callback name="set_message_user_flag">
          <source-position filename="src/camel/camel-folder.h" line="158"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2265">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="uid" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2266">the UID of a message in @folder</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2267">the name of the user flag to set</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2268">the value to set it to</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_message_user_tag">
        <callback name="get_message_user_tag">
          <source-position filename="src/camel/camel-folder.h" line="162"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2305">the value of the user tag</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2298">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="uid" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2299">the UID of a message in @folder</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2300">the name of a user tag</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_message_user_tag">
        <callback name="set_message_user_tag">
          <source-position filename="src/camel/camel-folder.h" line="165"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2328">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="uid" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2329">the UID of a message in @folder</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2330">the name of the user tag to set</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2331">the value to set it to</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_uids">
        <callback name="get_uids">
          <source-position filename="src/camel/camel-folder.h" line="169"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2414">a GPtrArray of UIDs
corresponding to the messages available in the folder</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2407">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="free_uids">
        <callback name="free_uids">
          <source-position filename="src/camel/camel-folder.h" line="170"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2433">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="array" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2434">the array of uids to free</doc>
              <array name="GLib.PtrArray" c:type="GPtrArray*">
                <type name="utf8"/>
              </array>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cmp_uids">
        <callback name="cmp_uids">
          <source-position filename="src/camel/camel-folder.h" line="172"/>
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2492">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="uid1" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2493">The first uid.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="uid2" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2494">the second uid.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="sort_uids">
        <callback name="sort_uids">
          <source-position filename="src/camel/camel-folder.h" line="175"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2523">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="uids" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2524">array of uids</doc>
              <array name="GLib.PtrArray" c:type="GPtrArray*">
                <type name="utf8"/>
              </array>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_summary">
        <callback name="get_summary">
          <source-position filename="src/camel/camel-folder.h" line="177"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2554">an array of UID-s of #CamelMessageInfo</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2548">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="free_summary">
        <callback name="free_summary">
          <source-position filename="src/camel/camel-folder.h" line="178"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2572">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="array" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2573">the summary array to free</doc>
              <array name="GLib.PtrArray" c:type="GPtrArray*">
                <type name="MessageInfo"/>
              </array>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="has_search_capability">
        <callback name="has_search_capability">
          <source-position filename="src/camel/camel-folder.h" line="180"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="search_by_expression">
        <callback name="search_by_expression" throws="1">
          <source-position filename="src/camel/camel-folder.h" line="181"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2602">a #GPtrArray of uids of
matching messages. The caller must free the list and each of the elements
when it is done.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2595">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="expression" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2596">a search expression</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2597">a #GCancellable</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="search_by_uids">
        <callback name="search_by_uids" throws="1">
          <source-position filename="src/camel/camel-folder.h" line="185"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2671">a #GPtrArray of uids of
matching messages. The caller must free the list and each of the elements
when it is done.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2663">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="expression" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2664">search expression</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="uids" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2665">array of uid's to match against.</doc>
              <array name="GLib.PtrArray" c:type="GPtrArray*">
                <type name="utf8"/>
              </array>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2666">a #GCancellable</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="search_free">
        <callback name="search_free">
          <source-position filename="src/camel/camel-folder.h" line="190"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2701">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2702">search results to free</doc>
              <array name="GLib.PtrArray" c:type="GPtrArray*">
                <type name="utf8"/>
              </array>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_message_info">
        <callback name="get_message_info">
          <source-position filename="src/camel/camel-folder.h" line="193"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2366">The summary information for the
  indicated message, or %NULL if the uid does not exist. Free the returned
  object with g_object_unref(), when done with it.</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2361">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="uid" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2362">the uid of a message</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="delete_">
        <callback name="delete_">
          <source-position filename="src/camel/camel-folder.h" line="195"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="rename">
        <callback name="rename">
          <source-position filename="src/camel/camel-folder.h" line="196"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2787">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="new_name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2788">new name for the folder</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="freeze">
        <callback name="freeze">
          <source-position filename="src/camel/camel-folder.h" line="198"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2916">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="thaw">
        <callback name="thaw">
          <source-position filename="src/camel/camel-folder.h" line="199"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2939">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_frozen">
        <callback name="is_frozen">
          <source-position filename="src/camel/camel-folder.h" line="200"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2963">whether or not the folder is frozen</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2961">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="count_by_expression">
        <callback name="count_by_expression" throws="1">
          <source-position filename="src/camel/camel-folder.h" line="201"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2638">an interger</doc>
            <type name="guint32" c:type="guint32"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2631">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="expression" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2632">a search expression</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2633">a #GCancellable</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_uncached_uids">
        <callback name="get_uncached_uids" throws="1">
          <source-position filename="src/camel/camel-folder.h" line="205"/>
          <return-value transfer-ownership="none">
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2456">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="uids" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2457">the array of uids to filter down to uncached ones.</doc>
              <array name="GLib.PtrArray" c:type="GPtrArray*">
                <type name="utf8"/>
              </array>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_filename">
        <callback name="get_filename" throws="1">
          <source-position filename="src/camel/camel-folder.h" line="208"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="1629">a file name corresponding to a message
  with UID @uid. Free the returned string with g_free(), when
  no longer needed.</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="1625">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="uid" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="1626">a message UID</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_message_cached">
        <callback name="get_message_cached">
          <source-position filename="src/camel/camel-folder.h" line="212"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3576">a cached #CamelMimeMessage corresponding
   to the requested UID</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="3564">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="message_uid" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="3565">the message UID</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="3566">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="append_message_sync">
        <callback name="append_message_sync" throws="1">
          <source-position filename="src/camel/camel-folder.h" line="217"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3160">%TRUE on success, %FALSE on error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="3147">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="3148">a #CamelMimeMessage</doc>
              <type name="MimeMessage" c:type="CamelMimeMessage*"/>
            </parameter>
            <parameter name="info"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="3149">a #CamelMessageInfo with additional flags/etc to set
       on the new message, or %NULL</doc>
              <type name="MessageInfo" c:type="CamelMessageInfo*"/>
            </parameter>
            <parameter name="appended_uid"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       nullable="1"
                       optional="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="3151">if non-%NULL, the UID
               of the appended message will be returned here, if it
               is known</doc>
              <type name="utf8" c:type="gchar**"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="3154">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="expunge_sync">
        <callback name="expunge_sync" throws="1">
          <source-position filename="src/camel/camel-folder.h" line="223"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3340">%TRUE on success, %FALSE on error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="3334">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="3335">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_message_sync">
        <callback name="get_message_sync" throws="1">
          <source-position filename="src/camel/camel-folder.h" line="227"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3485">a #CamelMimeMessage corresponding to the requested UID</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="3478">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="message_uid" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="3479">the message UID</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="3480">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_quota_info_sync">
        <callback name="get_quota_info_sync" throws="1">
          <source-position filename="src/camel/camel-folder.h" line="232"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3713">a #CamelFolderQuotaInfo, or %NULL on error</doc>
            <type name="FolderQuotaInfo" c:type="CamelFolderQuotaInfo*"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="3703">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="3704">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="purge_message_cache_sync">
        <callback name="purge_message_cache_sync" throws="1">
          <source-position filename="src/camel/camel-folder.h" line="235"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3849">%TRUE on success, %FALSE on failure</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="3841">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="start_uid" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="3842">the start message UID</doc>
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="end_uid" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="3843">the end message UID</doc>
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="3844">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="refresh_info_sync">
        <callback name="refresh_info_sync" throws="1">
          <source-position filename="src/camel/camel-folder.h" line="241"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4000">%TRUE on success, %FALSE on error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="3994">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="3995">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="synchronize_sync">
        <callback name="synchronize_sync" throws="1">
          <source-position filename="src/camel/camel-folder.h" line="244"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4141">%TRUE on success, %FALSE on error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="4133">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="expunge" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="4134">whether to expunge after synchronizing</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="4135">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="synchronize_message_sync">
        <callback name="synchronize_message_sync" throws="1">
          <source-position filename="src/camel/camel-folder.h" line="248"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4296">%TRUE on success, %FALSE on error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="4287">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="message_uid" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="4288">a message UID</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="4289">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="transfer_messages_to_sync">
        <callback name="transfer_messages_to_sync" throws="1">
          <source-position filename="src/camel/camel-folder.h" line="253"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="4484">%TRUE on success, %FALSE on failure</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="4470">the source #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="message_uids" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="4471">message UIDs in @source</doc>
              <array name="GLib.PtrArray" c:type="GPtrArray*">
                <type name="utf8"/>
              </array>
            </parameter>
            <parameter name="destination" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="4472">the destination #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="delete_originals" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="4473">whether or not to delete the original messages</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="transferred_uids"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       nullable="1"
                       optional="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="4474">if
                   non-%NULL, the UIDs of the resulting messages in
                   @destination will be stored here, if known.</doc>
              <array name="GLib.PtrArray" c:type="GPtrArray**">
                <type name="utf8"/>
              </array>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="4477">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prepare_content_refresh">
        <callback name="prepare_content_refresh">
          <source-position filename="src/camel/camel-folder.h" line="261"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="4786">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_full_display_name">
        <callback name="get_full_display_name">
          <source-position filename="src/camel/camel-folder.h" line="263"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="1820">full path to the @folder suitable for the display to a user</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="1815">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved_methods">
        <array zero-terminated="0" fixed-size="19">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="changed">
        <callback name="changed">
          <source-position filename="src/camel/camel-folder.h" line="269"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2846">a #CamelFolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="changes" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder.c"
                   line="2847">change information for @folder</doc>
              <type name="FolderChangeInfo" c:type="CamelFolderChangeInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="deleted">
        <callback name="deleted">
          <source-position filename="src/camel/camel-folder.h" line="271"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="renamed">
        <callback name="renamed">
          <source-position filename="src/camel/camel-folder.h" line="272"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="old_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved_signals">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="FolderError"
                 version="2.32"
                 glib:type-name="CamelFolderError"
                 glib:get-type="camel_folder_error_get_type"
                 c:type="CamelFolderError"
                 glib:error-domain="camel-folder-error-quark">
      <member name="invalid"
              value="0"
              c:identifier="CAMEL_FOLDER_ERROR_INVALID"
              glib:nick="invalid"
              glib:name="CAMEL_FOLDER_ERROR_INVALID">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.h"
             line="75">a generic error about invalid operation with the folder</doc>
      </member>
      <member name="invalid_state"
              value="1"
              c:identifier="CAMEL_FOLDER_ERROR_INVALID_STATE"
              glib:nick="invalid-state"
              glib:name="CAMEL_FOLDER_ERROR_INVALID_STATE">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.h"
             line="76">the folder is in an invalid state</doc>
      </member>
      <member name="non_empty"
              value="2"
              c:identifier="CAMEL_FOLDER_ERROR_NON_EMPTY"
              glib:nick="non-empty"
              glib:name="CAMEL_FOLDER_ERROR_NON_EMPTY">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.h"
             line="77">the folder is not empty</doc>
      </member>
      <member name="non_uid"
              value="3"
              c:identifier="CAMEL_FOLDER_ERROR_NON_UID"
              glib:nick="non-uid"
              glib:name="CAMEL_FOLDER_ERROR_NON_UID">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.h"
             line="78">requested UID is not a UID</doc>
      </member>
      <member name="insufficient_permission"
              value="4"
              c:identifier="CAMEL_FOLDER_ERROR_INSUFFICIENT_PERMISSION"
              glib:nick="insufficient-permission"
              glib:name="CAMEL_FOLDER_ERROR_INSUFFICIENT_PERMISSION">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.h"
             line="79">insufficient permissions for the requested operation</doc>
      </member>
      <member name="invalid_path"
              value="5"
              c:identifier="CAMEL_FOLDER_ERROR_INVALID_PATH"
              glib:nick="invalid-path"
              glib:name="CAMEL_FOLDER_ERROR_INVALID_PATH">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.h"
             line="80">the folder path is invalid</doc>
      </member>
      <member name="invalid_uid"
              value="6"
              c:identifier="CAMEL_FOLDER_ERROR_INVALID_UID"
              glib:nick="invalid-uid"
              glib:name="CAMEL_FOLDER_ERROR_INVALID_UID">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.h"
             line="81">requested UID is invalid/cannot be found</doc>
      </member>
      <member name="summary_invalid"
              value="7"
              c:identifier="CAMEL_FOLDER_ERROR_SUMMARY_INVALID"
              glib:nick="summary-invalid"
              glib:name="CAMEL_FOLDER_ERROR_SUMMARY_INVALID">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.h"
             line="82">the folder's summary is invalid/broken</doc>
      </member>
      <function name="quark" c:identifier="camel_folder_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <bitfield name="FolderFlags"
              glib:type-name="CamelFolderFlags"
              glib:get-type="camel_folder_flags_get_type"
              c:type="CamelFolderFlags">
      <member name="has_summary_capability"
              value="1"
              c:identifier="CAMEL_FOLDER_HAS_SUMMARY_CAPABILITY"
              glib:nick="has-summary-capability"
              glib:name="CAMEL_FOLDER_HAS_SUMMARY_CAPABILITY">
      </member>
      <member name="filter_recent"
              value="4"
              c:identifier="CAMEL_FOLDER_FILTER_RECENT"
              glib:nick="filter-recent"
              glib:name="CAMEL_FOLDER_FILTER_RECENT">
      </member>
      <member name="has_been_deleted"
              value="8"
              c:identifier="CAMEL_FOLDER_HAS_BEEN_DELETED"
              glib:nick="has-been-deleted"
              glib:name="CAMEL_FOLDER_HAS_BEEN_DELETED">
      </member>
      <member name="is_trash"
              value="16"
              c:identifier="CAMEL_FOLDER_IS_TRASH"
              glib:nick="is-trash"
              glib:name="CAMEL_FOLDER_IS_TRASH">
      </member>
      <member name="is_junk"
              value="32"
              c:identifier="CAMEL_FOLDER_IS_JUNK"
              glib:nick="is-junk"
              glib:name="CAMEL_FOLDER_IS_JUNK">
      </member>
      <member name="filter_junk"
              value="64"
              c:identifier="CAMEL_FOLDER_FILTER_JUNK"
              glib:nick="filter-junk"
              glib:name="CAMEL_FOLDER_FILTER_JUNK">
      </member>
    </bitfield>
    <record name="FolderInfo"
            c:type="CamelFolderInfo"
            glib:type-name="CamelFolderInfo"
            glib:get-type="camel_folder_info_get_type"
            c:symbol-prefix="folder_info">
      <source-position filename="src/camel/camel-store.h" line="122"/>
      <field name="next" writable="1">
        <type name="gpointer" c:type="_CamelFolderInfo*"/>
      </field>
      <field name="parent" writable="1">
        <type name="gpointer" c:type="_CamelFolderInfo*"/>
      </field>
      <field name="child" writable="1">
        <type name="gpointer" c:type="_CamelFolderInfo*"/>
      </field>
      <field name="full_name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="display_name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="flags" writable="1">
        <type name="FolderInfoFlags" c:type="CamelFolderInfoFlags"/>
      </field>
      <field name="unread" writable="1">
        <type name="gint32" c:type="gint32"/>
      </field>
      <field name="total" writable="1">
        <type name="gint32" c:type="gint32"/>
      </field>
      <constructor name="new"
                   c:identifier="camel_folder_info_new"
                   version="2.22">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="1112">Allocates a new #CamelFolderInfo instance.  Free it with
camel_folder_info_free().</doc>
        <source-position filename="src/camel/camel-store.h" line="254"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="1118">a new #CamelFolderInfo instance</doc>
          <type name="FolderInfo" c:type="CamelFolderInfo*"/>
        </return-value>
      </constructor>
      <method name="clone" c:identifier="camel_folder_info_clone">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="1281">Clones @fi recursively.</doc>
        <source-position filename="src/camel/camel-store.h" line="262"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="1287">the cloned #CamelFolderInfo tree.</doc>
          <type name="FolderInfo" c:type="CamelFolderInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1283">a #CamelFolderInfo</doc>
            <type name="FolderInfo" c:type="CamelFolderInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="camel_folder_info_free">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="1094">Frees @fi.</doc>
        <source-position filename="src/camel/camel-store.h" line="255"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1096">a #CamelFolderInfo</doc>
            <type name="FolderInfo" c:type="CamelFolderInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="build" c:identifier="camel_folder_info_build">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="1138">This takes an array of folders and attaches them together according
to the hierarchy described by their full_names and @separator. If
@namespace_ is non-%NULL, then it will be ignored as a full_name
prefix, for purposes of comparison. If necessary,
camel_folder_info_build() will create additional #CamelFolderInfo with
%NULL urls to fill in gaps in the tree. The value of @short_names
is used in constructing the names of these intermediate folders.</doc>
        <source-position filename="src/camel/camel-store.h" line="257"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="1154">the top level of the tree of linked folder info.</doc>
          <type name="FolderInfo" c:type="CamelFolderInfo*"/>
        </return-value>
        <parameters>
          <parameter name="folders" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1140">an array of #CamelFolderInfo</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="FolderInfo"/>
            </array>
          </parameter>
          <parameter name="namespace_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1141">an ignorable prefix on the folder names</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="separator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1142">the hieararchy separator character</doc>
            <type name="gchar" c:type="gchar"/>
          </parameter>
          <parameter name="short_names" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1143">%TRUE if the (short) name of a folder is the part after
the last @separator in the full name. %FALSE if it is the full name.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <bitfield name="FolderInfoFlags"
              glib:type-name="CamelFolderInfoFlags"
              glib:get-type="camel_folder_info_flags_get_type"
              c:type="CamelFolderInfoFlags">
      <doc xml:space="preserve"
           filename="src/camel/camel-enums.h"
           line="59">These flags are abstractions.  It's up to the CamelProvider to give
them suitable interpretations.  Use #CAMEL_FOLDER_TYPE_MASK to isolate
the folder's type.</doc>
      <member name="noselect"
              value="1"
              c:identifier="CAMEL_FOLDER_NOSELECT"
              glib:nick="noselect"
              glib:name="CAMEL_FOLDER_NOSELECT">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="61">The folder cannot contain messages.</doc>
      </member>
      <member name="noinferiors"
              value="2"
              c:identifier="CAMEL_FOLDER_NOINFERIORS"
              glib:nick="noinferiors"
              glib:name="CAMEL_FOLDER_NOINFERIORS">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="63">The folder cannot have child folders.</doc>
      </member>
      <member name="children"
              value="4"
              c:identifier="CAMEL_FOLDER_CHILDREN"
              glib:nick="children"
              glib:name="CAMEL_FOLDER_CHILDREN">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="65">The folder has children (not yet fully implemented).</doc>
      </member>
      <member name="nochildren"
              value="8"
              c:identifier="CAMEL_FOLDER_NOCHILDREN"
              glib:nick="nochildren"
              glib:name="CAMEL_FOLDER_NOCHILDREN">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="67">The folder does not have children (not yet fully implemented).</doc>
      </member>
      <member name="subscribed"
              value="16"
              c:identifier="CAMEL_FOLDER_SUBSCRIBED"
              glib:nick="subscribed"
              glib:name="CAMEL_FOLDER_SUBSCRIBED">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="69">The folder is subscribed.</doc>
      </member>
      <member name="virtual"
              value="32"
              c:identifier="CAMEL_FOLDER_VIRTUAL"
              glib:nick="virtual"
              glib:name="CAMEL_FOLDER_VIRTUAL">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="71">The folder is virtual.  Messages cannot be copied or moved to
   virtual folders since they are only queries of other folders.</doc>
      </member>
      <member name="system"
              value="64"
              c:identifier="CAMEL_FOLDER_SYSTEM"
              glib:nick="system"
              glib:name="CAMEL_FOLDER_SYSTEM">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="74">The folder is a built-in "system" folder.  System folders
   cannot be renamed or deleted.</doc>
      </member>
      <member name="vtrash"
              value="128"
              c:identifier="CAMEL_FOLDER_VTRASH"
              glib:nick="vtrash"
              glib:name="CAMEL_FOLDER_VTRASH">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="77">The folder is a virtual trash folder.  It cannot be copied to,
   and can only be moved to if in an existing folder.</doc>
      </member>
      <member name="shared_to_me"
              value="256"
              c:identifier="CAMEL_FOLDER_SHARED_TO_ME"
              glib:nick="shared-to-me"
              glib:name="CAMEL_FOLDER_SHARED_TO_ME">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="80">A folder being shared by someone else.</doc>
      </member>
      <member name="shared_by_me"
              value="512"
              c:identifier="CAMEL_FOLDER_SHARED_BY_ME"
              glib:nick="shared-by-me"
              glib:name="CAMEL_FOLDER_SHARED_BY_ME">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="82">A folder being shared by the user.</doc>
      </member>
      <member name="type_normal"
              value="0"
              c:identifier="CAMEL_FOLDER_TYPE_NORMAL"
              glib:nick="type-normal"
              glib:name="CAMEL_FOLDER_TYPE_NORMAL">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="84">The folder is a normal folder.</doc>
      </member>
      <member name="type_inbox"
              value="1024"
              c:identifier="CAMEL_FOLDER_TYPE_INBOX"
              glib:nick="type-inbox"
              glib:name="CAMEL_FOLDER_TYPE_INBOX">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="86">The folder is an inbox folder.</doc>
      </member>
      <member name="type_outbox"
              value="2048"
              c:identifier="CAMEL_FOLDER_TYPE_OUTBOX"
              glib:nick="type-outbox"
              glib:name="CAMEL_FOLDER_TYPE_OUTBOX">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="88">The folder is an outbox folder.</doc>
      </member>
      <member name="type_trash"
              value="3072"
              c:identifier="CAMEL_FOLDER_TYPE_TRASH"
              glib:nick="type-trash"
              glib:name="CAMEL_FOLDER_TYPE_TRASH">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="90">The folder shows deleted messages.</doc>
      </member>
      <member name="type_junk"
              value="4096"
              c:identifier="CAMEL_FOLDER_TYPE_JUNK"
              glib:nick="type-junk"
              glib:name="CAMEL_FOLDER_TYPE_JUNK">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="92">The folder shows junk messages.</doc>
      </member>
      <member name="type_sent"
              value="5120"
              c:identifier="CAMEL_FOLDER_TYPE_SENT"
              glib:nick="type-sent"
              glib:name="CAMEL_FOLDER_TYPE_SENT">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="94">The folder shows sent messages.</doc>
      </member>
      <member name="type_contacts"
              value="6144"
              c:identifier="CAMEL_FOLDER_TYPE_CONTACTS"
              glib:nick="type-contacts"
              glib:name="CAMEL_FOLDER_TYPE_CONTACTS">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="96">The folder contains contacts, instead of mail messages.</doc>
      </member>
      <member name="type_events"
              value="7168"
              c:identifier="CAMEL_FOLDER_TYPE_EVENTS"
              glib:nick="type-events"
              glib:name="CAMEL_FOLDER_TYPE_EVENTS">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="98">The folder contains calendar events, instead of mail messages.</doc>
      </member>
      <member name="type_memos"
              value="8192"
              c:identifier="CAMEL_FOLDER_TYPE_MEMOS"
              glib:nick="type-memos"
              glib:name="CAMEL_FOLDER_TYPE_MEMOS">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="100">The folder contains memos, instead of mail messages.</doc>
      </member>
      <member name="type_tasks"
              value="9216"
              c:identifier="CAMEL_FOLDER_TYPE_TASKS"
              glib:nick="type-tasks"
              glib:name="CAMEL_FOLDER_TYPE_TASKS">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="102">The folder contains tasks, instead of mail messages.</doc>
      </member>
      <member name="type_all"
              value="10240"
              c:identifier="CAMEL_FOLDER_TYPE_ALL"
              glib:nick="type-all"
              glib:name="CAMEL_FOLDER_TYPE_ALL">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="104">This folder contains all the messages. Used by RFC 6154.</doc>
      </member>
      <member name="type_archive"
              value="11264"
              c:identifier="CAMEL_FOLDER_TYPE_ARCHIVE"
              glib:nick="type-archive"
              glib:name="CAMEL_FOLDER_TYPE_ARCHIVE">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="106">This folder contains archived messages. Used by RFC 6154.</doc>
      </member>
      <member name="type_drafts"
              value="12288"
              c:identifier="CAMEL_FOLDER_TYPE_DRAFTS"
              glib:nick="type-drafts"
              glib:name="CAMEL_FOLDER_TYPE_DRAFTS">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="108">This folder contains drafts. Used by RFC 6154.</doc>
      </member>
      <member name="readonly"
              value="65536"
              c:identifier="CAMEL_FOLDER_READONLY"
              glib:nick="readonly"
              glib:name="CAMEL_FOLDER_READONLY">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="110">The folder is read only.</doc>
      </member>
      <member name="writeonly"
              value="131072"
              c:identifier="CAMEL_FOLDER_WRITEONLY"
              glib:nick="writeonly"
              glib:name="CAMEL_FOLDER_WRITEONLY">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="112">The folder is write only.</doc>
      </member>
      <member name="flagged"
              value="262144"
              c:identifier="CAMEL_FOLDER_FLAGGED"
              glib:nick="flagged"
              glib:name="CAMEL_FOLDER_FLAGGED">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="114">This folder contains flagged messages. Some clients call this "starred". Used by RFC 6154.</doc>
      </member>
      <member name="flags_last"
              value="16777216"
              c:identifier="CAMEL_FOLDER_FLAGS_LAST"
              glib:nick="flags-last"
              glib:name="CAMEL_FOLDER_FLAGS_LAST">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="116">The last define bit of the flags. The #CamelProvider can use this and
   upper bits to store its own flags.</doc>
      </member>
    </bitfield>
    <record name="FolderPrivate"
            c:type="CamelFolderPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-folder.h" line="71"/>
    </record>
    <record name="FolderQuotaInfo"
            c:type="CamelFolderQuotaInfo"
            version="2.24"
            glib:type-name="CamelFolderQuotaInfo"
            glib:get-type="camel_folder_quota_info_get_type"
            c:symbol-prefix="folder_quota_info">
      <source-position filename="src/camel/camel-folder.h" line="136"/>
      <field name="name" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.h"
             line="123">name, aka identification, of the quota type</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="used" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.h"
             line="124">how many bytes is currently in use</doc>
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="total" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.h"
             line="125">what is the maximum quota to use</doc>
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="next" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.h"
             line="126">a reference to a follwing #CamelFolderQuotaInfo</doc>
        <type name="gpointer" c:type="_CamelFolderQuotaInfo*"/>
      </field>
      <constructor name="new"
                   c:identifier="camel_folder_quota_info_new"
                   version="2.24">
        <source-position filename="src/camel/camel-folder.h" line="404"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder.c"
               line="3001">newly allocated #CamelFolderQuotaInfo structure with
initialized values based on the parameters, with next member set to NULL.</doc>
          <type name="FolderQuotaInfo" c:type="CamelFolderQuotaInfo*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2997">Name of the quota.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="used" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2998">Current usage of the quota.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="total" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="2999">Total available size of the quota.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="clone"
              c:identifier="camel_folder_quota_info_clone"
              version="2.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="3022">Makes a copy of the given info and all next-s.</doc>
        <source-position filename="src/camel/camel-folder.h" line="408"/>
        <return-value transfer-ownership="full">
          <type name="FolderQuotaInfo" c:type="CamelFolderQuotaInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3024">a #CamelFolderQuotaInfo object to clone.</doc>
            <type name="FolderQuotaInfo" c:type="const CamelFolderQuotaInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free"
              c:identifier="camel_folder_quota_info_free"
              version="2.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder.c"
             line="3050">Frees this and all next objects.</doc>
        <source-position filename="src/camel/camel-folder.h" line="409"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder.c"
                 line="3052">a #CamelFolderQuotaInfo object to free.</doc>
            <type name="FolderQuotaInfo" c:type="CamelFolderQuotaInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <class name="FolderSearch"
           c:symbol-prefix="folder_search"
           c:type="CamelFolderSearch"
           parent="GObject.Object"
           glib:type-name="CamelFolderSearch"
           glib:get-type="camel_folder_search_get_type"
           glib:type-struct="FolderSearchClass">
      <source-position filename="src/camel/camel-folder-search.h" line="285"/>
      <constructor name="new" c:identifier="camel_folder_search_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-search.c"
             line="1914">Create a new CamelFolderSearch object.

A CamelFolderSearch is a subclassable, extensible s-exp
evaluator which enforces a particular set of s-expressions.
Particular methods may be overriden by an implementation to
implement a search for any sort of backend.</doc>
        <source-position filename="src/camel/camel-folder-search.h"
                         line="289"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-search.c"
               line="1924">A new CamelFolderSearch intstance.</doc>
          <type name="FolderSearch" c:type="CamelFolderSearch*"/>
        </return-value>
      </constructor>
      <function name="util_add_months"
                c:identifier="camel_folder_search_util_add_months"
                version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-search.c"
             line="2582">Increases time @t by the given number of months (or decreases, if
@months is negative).</doc>
        <source-position filename="src/camel/camel-folder-search.h"
                         line="334"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-search.c"
               line="2590">a new #time_t value</doc>
          <type name="glong" c:type="time_t"/>
        </return-value>
        <parameters>
          <parameter name="t" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="2584">Initial time</doc>
            <type name="glong" c:type="time_t"/>
          </parameter>
          <parameter name="months" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="2585">number of months to add or subtract</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="util_compare_date"
                c:identifier="camel_folder_search_util_compare_date"
                version="3.30">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-search.c"
             line="2681">Compares date portion of the two date-time values, first converted
into the local time zone. The returned value is like with strcmp().</doc>
        <source-position filename="src/camel/camel-folder-search.h"
                         line="340"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-search.c"
               line="2689">0 when the dates are equal, &lt; 0 when first is before second and
   &gt; 0 when the first is after the second date</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="datetime1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="2683">a time_t-like value of the first date-time</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="datetime2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="2684">a time_t-like value of the second date-time</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </function>
      <function name="util_hash_message_id"
                c:identifier="camel_folder_search_util_hash_message_id"
                version="3.40">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-search.c"
             line="2713">Calculates a hash of the Message-ID header value @message_id.</doc>
        <source-position filename="src/camel/camel-folder-search.h"
                         line="343"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-search.c"
               line="2720">hash of the @message_id, or 0 on any error.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <parameter name="message_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="2715">a raw Message-ID header value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="needs_decode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="2716">whether the @message_id requires camel_header_msgid_decode() first</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="util_make_time"
                c:identifier="camel_folder_search_util_make_time"
                version="3.30">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-search.c"
             line="2639">Implementation of 'make-time' function, which expects one argument,
a string or an integer, to be converted into time_t.</doc>
        <source-position filename="src/camel/camel-folder-search.h"
                         line="337"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-search.c"
               line="2647">time_t equivalent of the passed in argument, or (time_t) -1 on error.</doc>
          <type name="glong" c:type="time_t"/>
        </return-value>
        <parameters>
          <parameter name="argc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="2641">number of arguments in @argv</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="argv" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="2642">array or arguments</doc>
            <type name="SExpResult" c:type="CamelSExpResult**"/>
          </parameter>
        </parameters>
      </function>
      <method name="count"
              c:identifier="camel_folder_search_count"
              version="2.26"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-search.c"
             line="2220">Run a search.  Search must have had Folder already set on it, and
it must implement summaries.</doc>
        <source-position filename="src/camel/camel-folder-search.h"
                         line="326"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-search.c"
               line="2230">Number of messages that match the query.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="search" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="2222">a #CamelFolderSearch</doc>
            <type name="FolderSearch" c:type="CamelFolderSearch*"/>
          </instance-parameter>
          <parameter name="expr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="2223">a search expression to run</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="2224">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free_result"
              c:identifier="camel_folder_search_free_result">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-search.c"
             line="2567">Frees result of camel_folder_search_search() call.</doc>
        <source-position filename="src/camel/camel-folder-search.h"
                         line="330"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="search" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="2569">a #CamelFolderSearch</doc>
            <type name="FolderSearch" c:type="CamelFolderSearch*"/>
          </instance-parameter>
          <parameter name="result"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="2570">a result to free</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_current_message_info"
              c:identifier="camel_folder_search_get_current_message_info"
              version="3.24">
        <source-position filename="src/camel/camel-folder-search.h"
                         line="302"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-search.c"
               line="2028">the currently processing #CamelMessageInfo</doc>
          <type name="MessageInfo" c:type="CamelMessageInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="search" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="2026">a #CamelFolderSearch</doc>
            <type name="FolderSearch" c:type="CamelFolderSearch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_current_summary"
              c:identifier="camel_folder_search_get_current_summary"
              version="3.24">
        <source-position filename="src/camel/camel-folder-search.h"
                         line="304"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-search.c"
               line="2044">the current summary, and array
  of message info UID-s to use.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="search" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="2042">a #CamelFolderSearch</doc>
            <type name="FolderSearch" c:type="CamelFolderSearch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_folder"
              c:identifier="camel_folder_search_get_folder"
              version="3.24">
        <source-position filename="src/camel/camel-folder-search.h"
                         line="311"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-search.c"
               line="2079">a #CamelFolder for which the @search is currently running.</doc>
          <type name="Folder" c:type="CamelFolder*"/>
        </return-value>
        <parameters>
          <instance-parameter name="search" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="2077">a #CamelFolderSearch</doc>
            <type name="FolderSearch" c:type="CamelFolderSearch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_only_cached_messages"
              c:identifier="camel_folder_search_get_only_cached_messages"
              version="3.24">
        <source-position filename="src/camel/camel-folder-search.h"
                         line="293"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-search.c"
               line="1956">Whether only cached messages can be searched. See
   camel_folder_search_set_only_cached_messages() for more
   information what it means.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="search" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="1954">a #CamelFolderSearch</doc>
            <type name="FolderSearch" c:type="CamelFolderSearch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_summary"
              c:identifier="camel_folder_search_get_summary"
              version="3.24">
        <source-position filename="src/camel/camel-folder-search.h"
                         line="314"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-search.c"
               line="2114">A summary of UID-s of #CamelMessageInfo
  previously set by camel_folder_search_set_summary().</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="search" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="2112">a #CamelFolderSearch</doc>
            <type name="FolderSearch" c:type="CamelFolderSearch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_summary_empty"
              c:identifier="camel_folder_search_get_summary_empty">
        <source-position filename="src/camel/camel-folder-search.h"
                         line="315"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-search.c"
               line="2131">Whether the summary (as returned by camel_folder_search_get_summary()) is empty.
  It returns %FALSE when the summary is set and contains at least one item.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="search" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="2129">a #CamelFolderSearch</doc>
            <type name="FolderSearch" c:type="CamelFolderSearch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="search"
              c:identifier="camel_folder_search_search"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-search.c"
             line="2382">Run a search.  Search must have had Folder already set on it, and
it must implement summaries.</doc>
        <source-position filename="src/camel/camel-folder-search.h"
                         line="321"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-search.c"
               line="2393">a #GPtrArray with matching UIDs,
   or %NULL on error. Use camel_folder_search_free_result() to free it when
   no longer needed.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="search" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="2384">a #CamelFolderSearch</doc>
            <type name="FolderSearch" c:type="CamelFolderSearch*"/>
          </instance-parameter>
          <parameter name="expr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="2385">a search expression to run</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="uids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="2386">to search against, NULL for all uid's.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="2387">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_body_index"
              c:identifier="camel_folder_search_set_body_index">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-search.c"
             line="2142">Set the index representing the contents of all messages
in this folder.  If this is not set, then the folder implementation
should sub-class the CamelFolderSearch and provide its own
body-contains function.</doc>
        <source-position filename="src/camel/camel-folder-search.h"
                         line="317"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="search" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="2144">a #CamelFolderSearch</doc>
            <type name="FolderSearch" c:type="CamelFolderSearch*"/>
          </instance-parameter>
          <parameter name="body_index"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="2145">a #CamelIndex</doc>
            <type name="Index" c:type="CamelIndex*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_current_message_info"
              c:identifier="camel_folder_search_set_current_message_info"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-search.c"
             line="1970">Sets, or unsets, the @info as the currently processing #CamelMessageInfo.
The function adds its own reference to @info, if not %NULL.</doc>
        <source-position filename="src/camel/camel-folder-search.h"
                         line="295"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="search" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="1972">a #CamelFolderSearch</doc>
            <type name="FolderSearch" c:type="CamelFolderSearch*"/>
          </instance-parameter>
          <parameter name="info"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="1973">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_folder" c:identifier="camel_folder_search_set_folder">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-search.c"
             line="2057">Set the folder attribute of the search. This can be used to perform a slow-search
when indexes and so forth are not available. Or for use by subclasses.</doc>
        <source-position filename="src/camel/camel-folder-search.h"
                         line="309"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="search" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="2059">a #CamelFolderSearch</doc>
            <type name="FolderSearch" c:type="CamelFolderSearch*"/>
          </instance-parameter>
          <parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="2060">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_only_cached_messages"
              c:identifier="camel_folder_search_set_only_cached_messages"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-search.c"
             line="1932">Sets whether only locally cached messages can be searched. The default
value is %FALSE, which means that when a message is required and it is
not available locally, then it is downloaded from the server, if possible.</doc>
        <source-position filename="src/camel/camel-folder-search.h"
                         line="290"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="search" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="1934">a #CamelFolderSearch</doc>
            <type name="FolderSearch" c:type="CamelFolderSearch*"/>
          </instance-parameter>
          <parameter name="only_cached_messages" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="1935">a value to set</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_summary"
              c:identifier="camel_folder_search_set_summary">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-search.c"
             line="2091">Set the array of summary objects representing the span of the search.

If this is not set, then a subclass must provide the functions
for searching headers and for the match-all operator.</doc>
        <source-position filename="src/camel/camel-folder-search.h"
                         line="312"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="search" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="2093">a #CamelFolderSearch</doc>
            <type name="FolderSearch" c:type="CamelFolderSearch*"/>
          </instance-parameter>
          <parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="2094">An array of UID-s of #CamelMessageInfo.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="take_current_message_info"
              c:identifier="camel_folder_search_take_current_message_info"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-search.c"
             line="1999">Sets, or unsets, the @info as the currently processing #CamelMessageInfo.
Unlike camel_folder_search_set_current_message_info(), this function
assumes ownership of the @info, if not %NULL.</doc>
        <source-position filename="src/camel/camel-folder-search.h"
                         line="298"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="search" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="2001">a #CamelFolderSearch</doc>
            <type name="FolderSearch" c:type="CamelFolderSearch*"/>
          </instance-parameter>
          <parameter name="info"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-search.c"
                 line="2002">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="FolderSearchPrivate" c:type="CamelFolderSearchPrivate*"/>
      </field>
    </class>
    <record name="FolderSearchClass"
            c:type="CamelFolderSearchClass"
            glib:is-gtype-struct-for="FolderSearch">
      <source-position filename="src/camel/camel-folder-search.h" line="285"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="and_" introspectable="0">
        <callback name="and_" introspectable="0">
          <source-position filename="src/camel/camel-folder-search.h"
                           line="66"/>
          <return-value>
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </return-value>
          <parameters>
            <parameter name="sexp" transfer-ownership="none">
              <type name="SExp" c:type="CamelSExp*"/>
            </parameter>
            <parameter name="argc" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="argv" transfer-ownership="none">
              <type name="SExpTerm" c:type="CamelSExpTerm**"/>
            </parameter>
            <parameter name="search" transfer-ownership="none">
              <type name="FolderSearch" c:type="CamelFolderSearch*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="or_" introspectable="0">
        <callback name="or_" introspectable="0">
          <source-position filename="src/camel/camel-folder-search.h"
                           line="70"/>
          <return-value>
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </return-value>
          <parameters>
            <parameter name="sexp" transfer-ownership="none">
              <type name="SExp" c:type="CamelSExp*"/>
            </parameter>
            <parameter name="argc" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="argv" transfer-ownership="none">
              <type name="SExpTerm" c:type="CamelSExpTerm**"/>
            </parameter>
            <parameter name="search" transfer-ownership="none">
              <type name="FolderSearch" c:type="CamelFolderSearch*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="not_" introspectable="0">
        <callback name="not_" introspectable="0">
          <source-position filename="src/camel/camel-folder-search.h"
                           line="74"/>
          <return-value>
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </return-value>
          <parameters>
            <parameter name="sexp" transfer-ownership="none">
              <type name="SExp" c:type="CamelSExp*"/>
            </parameter>
            <parameter name="argc" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="argv" transfer-ownership="none">
              <type name="SExpResult" c:type="CamelSExpResult**"/>
            </parameter>
            <parameter name="search" transfer-ownership="none">
              <type name="FolderSearch" c:type="CamelFolderSearch*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="lt" introspectable="0">
        <callback name="lt" introspectable="0">
          <source-position filename="src/camel/camel-folder-search.h"
                           line="78"/>
          <return-value>
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </return-value>
          <parameters>
            <parameter name="sexp" transfer-ownership="none">
              <type name="SExp" c:type="CamelSExp*"/>
            </parameter>
            <parameter name="argc" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="argv" transfer-ownership="none">
              <type name="SExpTerm" c:type="CamelSExpTerm**"/>
            </parameter>
            <parameter name="search" transfer-ownership="none">
              <type name="FolderSearch" c:type="CamelFolderSearch*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="gt" introspectable="0">
        <callback name="gt" introspectable="0">
          <source-position filename="src/camel/camel-folder-search.h"
                           line="82"/>
          <return-value>
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </return-value>
          <parameters>
            <parameter name="sexp" transfer-ownership="none">
              <type name="SExp" c:type="CamelSExp*"/>
            </parameter>
            <parameter name="argc" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="argv" transfer-ownership="none">
              <type name="SExpTerm" c:type="CamelSExpTerm**"/>
            </parameter>
            <parameter name="search" transfer-ownership="none">
              <type name="FolderSearch" c:type="CamelFolderSearch*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eq" introspectable="0">
        <callback name="eq" introspectable="0">
          <source-position filename="src/camel/camel-folder-search.h"
                           line="86"/>
          <return-value>
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </return-value>
          <parameters>
            <parameter name="sexp" transfer-ownership="none">
              <type name="SExp" c:type="CamelSExp*"/>
            </parameter>
            <parameter name="argc" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="argv" transfer-ownership="none">
              <type name="SExpTerm" c:type="CamelSExpTerm**"/>
            </parameter>
            <parameter name="search" transfer-ownership="none">
              <type name="FolderSearch" c:type="CamelFolderSearch*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="match_all" introspectable="0">
        <callback name="match_all" introspectable="0">
          <source-position filename="src/camel/camel-folder-search.h"
                           line="95"/>
          <return-value>
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </return-value>
          <parameters>
            <parameter name="sexp" transfer-ownership="none">
              <type name="SExp" c:type="CamelSExp*"/>
            </parameter>
            <parameter name="argc" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="argv" transfer-ownership="none">
              <type name="SExpTerm" c:type="CamelSExpTerm**"/>
            </parameter>
            <parameter name="search" transfer-ownership="none">
              <type name="FolderSearch" c:type="CamelFolderSearch*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="match_threads" introspectable="0">
        <callback name="match_threads" introspectable="0">
          <source-position filename="src/camel/camel-folder-search.h"
                           line="102"/>
          <return-value>
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </return-value>
          <parameters>
            <parameter name="sexp" transfer-ownership="none">
              <type name="SExp" c:type="CamelSExp*"/>
            </parameter>
            <parameter name="argc" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="argv" transfer-ownership="none">
              <type name="SExpTerm" c:type="CamelSExpTerm**"/>
            </parameter>
            <parameter name="search" transfer-ownership="none">
              <type name="FolderSearch" c:type="CamelFolderSearch*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="body_contains" introspectable="0">
        <callback name="body_contains" introspectable="0">
          <source-position filename="src/camel/camel-folder-search.h"
                           line="110"/>
          <return-value>
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </return-value>
          <parameters>
            <parameter name="sexp" transfer-ownership="none">
              <type name="SExp" c:type="CamelSExp*"/>
            </parameter>
            <parameter name="argc" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="argv" transfer-ownership="none">
              <type name="SExpResult" c:type="CamelSExpResult**"/>
            </parameter>
            <parameter name="search" transfer-ownership="none">
              <type name="FolderSearch" c:type="CamelFolderSearch*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="body_regex" introspectable="0">
        <callback name="body_regex" introspectable="0">
          <source-position filename="src/camel/camel-folder-search.h"
                           line="118"/>
          <return-value>
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </return-value>
          <parameters>
            <parameter name="sexp" transfer-ownership="none">
              <type name="SExp" c:type="CamelSExp*"/>
            </parameter>
            <parameter name="argc" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="argv" transfer-ownership="none">
              <type name="SExpResult" c:type="CamelSExpResult**"/>
            </parameter>
            <parameter name="search" transfer-ownership="none">
              <type name="FolderSearch" c:type="CamelFolderSearch*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="header_contains" introspectable="0">
        <callback name="header_contains" introspectable="0">
          <source-position filename="src/camel/camel-folder-search.h"
                           line="125"/>
          <return-value>
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </return-value>
          <parameters>
            <parameter name="sexp" transfer-ownership="none">
              <type name="SExp" c:type="CamelSExp*"/>
            </parameter>
            <parameter name="argc" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="argv" transfer-ownership="none">
              <type name="SExpResult" c:type="CamelSExpResult**"/>
            </parameter>
            <parameter name="search" transfer-ownership="none">
              <type name="FolderSearch" c:type="CamelFolderSearch*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="header_matches" introspectable="0">
        <callback name="header_matches" introspectable="0">
          <source-position filename="src/camel/camel-folder-search.h"
                           line="132"/>
          <return-value>
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </return-value>
          <parameters>
            <parameter name="sexp" transfer-ownership="none">
              <type name="SExp" c:type="CamelSExp*"/>
            </parameter>
            <parameter name="argc" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="argv" transfer-ownership="none">
              <type name="SExpResult" c:type="CamelSExpResult**"/>
            </parameter>
            <parameter name="search" transfer-ownership="none">
              <type name="FolderSearch" c:type="CamelFolderSearch*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="header_starts_with" introspectable="0">
        <callback name="header_starts_with" introspectable="0">
          <source-position filename="src/camel/camel-folder-search.h"
                           line="139"/>
          <return-value>
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </return-value>
          <parameters>
            <parameter name="sexp" transfer-ownership="none">
              <type name="SExp" c:type="CamelSExp*"/>
            </parameter>
            <parameter name="argc" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="argv" transfer-ownership="none">
              <type name="SExpResult" c:type="CamelSExpResult**"/>
            </parameter>
            <parameter name="search" transfer-ownership="none">
              <type name="FolderSearch" c:type="CamelFolderSearch*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="header_ends_with" introspectable="0">
        <callback name="header_ends_with" introspectable="0">
          <source-position filename="src/camel/camel-folder-search.h"
                           line="146"/>
          <return-value>
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </return-value>
          <parameters>
            <parameter name="sexp" transfer-ownership="none">
              <type name="SExp" c:type="CamelSExp*"/>
            </parameter>
            <parameter name="argc" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="argv" transfer-ownership="none">
              <type name="SExpResult" c:type="CamelSExpResult**"/>
            </parameter>
            <parameter name="search" transfer-ownership="none">
              <type name="FolderSearch" c:type="CamelFolderSearch*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="header_exists" introspectable="0">
        <callback name="header_exists" introspectable="0">
          <source-position filename="src/camel/camel-folder-search.h"
                           line="153"/>
          <return-value>
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </return-value>
          <parameters>
            <parameter name="sexp" transfer-ownership="none">
              <type name="SExp" c:type="CamelSExp*"/>
            </parameter>
            <parameter name="argc" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="argv" transfer-ownership="none">
              <type name="SExpResult" c:type="CamelSExpResult**"/>
            </parameter>
            <parameter name="search" transfer-ownership="none">
              <type name="FolderSearch" c:type="CamelFolderSearch*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="header_soundex" introspectable="0">
        <callback name="header_soundex" introspectable="0">
          <source-position filename="src/camel/camel-folder-search.h"
                           line="160"/>
          <return-value>
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </return-value>
          <parameters>
            <parameter name="sexp" transfer-ownership="none">
              <type name="SExp" c:type="CamelSExp*"/>
            </parameter>
            <parameter name="argc" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="argv" transfer-ownership="none">
              <type name="SExpResult" c:type="CamelSExpResult**"/>
            </parameter>
            <parameter name="search" transfer-ownership="none">
              <type name="FolderSearch" c:type="CamelFolderSearch*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="header_regex" introspectable="0">
        <callback name="header_regex" introspectable="0">
          <source-position filename="src/camel/camel-folder-search.h"
                           line="167"/>
          <return-value>
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </return-value>
          <parameters>
            <parameter name="sexp" transfer-ownership="none">
              <type name="SExp" c:type="CamelSExp*"/>
            </parameter>
            <parameter name="argc" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="argv" transfer-ownership="none">
              <type name="SExpResult" c:type="CamelSExpResult**"/>
            </parameter>
            <parameter name="search" transfer-ownership="none">
              <type name="FolderSearch" c:type="CamelFolderSearch*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="header_full_regex" introspectable="0">
        <callback name="header_full_regex" introspectable="0">
          <source-position filename="src/camel/camel-folder-search.h"
                           line="173"/>
          <return-value>
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </return-value>
          <parameters>
            <parameter name="sexp" transfer-ownership="none">
              <type name="SExp" c:type="CamelSExp*"/>
            </parameter>
            <parameter name="argc" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="argv" transfer-ownership="none">
              <type name="SExpResult" c:type="CamelSExpResult**"/>
            </parameter>
            <parameter name="search" transfer-ownership="none">
              <type name="FolderSearch" c:type="CamelFolderSearch*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="user_flag" introspectable="0">
        <callback name="user_flag" introspectable="0">
          <source-position filename="src/camel/camel-folder-search.h"
                           line="181"/>
          <return-value>
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </return-value>
          <parameters>
            <parameter name="sexp" transfer-ownership="none">
              <type name="SExp" c:type="CamelSExp*"/>
            </parameter>
            <parameter name="argc" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="argv" transfer-ownership="none">
              <type name="SExpResult" c:type="CamelSExpResult**"/>
            </parameter>
            <parameter name="search" transfer-ownership="none">
              <type name="FolderSearch" c:type="CamelFolderSearch*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="user_tag" introspectable="0">
        <callback name="user_tag" introspectable="0">
          <source-position filename="src/camel/camel-folder-search.h"
                           line="188"/>
          <return-value>
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </return-value>
          <parameters>
            <parameter name="sexp" transfer-ownership="none">
              <type name="SExp" c:type="CamelSExp*"/>
            </parameter>
            <parameter name="argc" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="argv" transfer-ownership="none">
              <type name="SExpResult" c:type="CamelSExpResult**"/>
            </parameter>
            <parameter name="search" transfer-ownership="none">
              <type name="FolderSearch" c:type="CamelFolderSearch*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="system_flag" introspectable="0">
        <callback name="system_flag" introspectable="0">
          <source-position filename="src/camel/camel-folder-search.h"
                           line="196"/>
          <return-value>
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </return-value>
          <parameters>
            <parameter name="sexp" transfer-ownership="none">
              <type name="SExp" c:type="CamelSExp*"/>
            </parameter>
            <parameter name="argc" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="argv" transfer-ownership="none">
              <type name="SExpResult" c:type="CamelSExpResult**"/>
            </parameter>
            <parameter name="search" transfer-ownership="none">
              <type name="FolderSearch" c:type="CamelFolderSearch*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sent_date" introspectable="0">
        <callback name="get_sent_date" introspectable="0">
          <source-position filename="src/camel/camel-folder-search.h"
                           line="203"/>
          <return-value>
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </return-value>
          <parameters>
            <parameter name="sexp" transfer-ownership="none">
              <type name="SExp" c:type="CamelSExp*"/>
            </parameter>
            <parameter name="argc" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="argv" transfer-ownership="none">
              <type name="SExpResult" c:type="CamelSExpResult**"/>
            </parameter>
            <parameter name="search" transfer-ownership="none">
              <type name="FolderSearch" c:type="CamelFolderSearch*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_received_date" introspectable="0">
        <callback name="get_received_date" introspectable="0">
          <source-position filename="src/camel/camel-folder-search.h"
                           line="211"/>
          <return-value>
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </return-value>
          <parameters>
            <parameter name="sexp" transfer-ownership="none">
              <type name="SExp" c:type="CamelSExp*"/>
            </parameter>
            <parameter name="argc" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="argv" transfer-ownership="none">
              <type name="SExpResult" c:type="CamelSExpResult**"/>
            </parameter>
            <parameter name="search" transfer-ownership="none">
              <type name="FolderSearch" c:type="CamelFolderSearch*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_current_date" introspectable="0">
        <callback name="get_current_date" introspectable="0">
          <source-position filename="src/camel/camel-folder-search.h"
                           line="219"/>
          <return-value>
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </return-value>
          <parameters>
            <parameter name="sexp" transfer-ownership="none">
              <type name="SExp" c:type="CamelSExp*"/>
            </parameter>
            <parameter name="argc" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="argv" transfer-ownership="none">
              <type name="SExpResult" c:type="CamelSExpResult**"/>
            </parameter>
            <parameter name="search" transfer-ownership="none">
              <type name="FolderSearch" c:type="CamelFolderSearch*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_relative_months" introspectable="0">
        <callback name="get_relative_months" introspectable="0">
          <source-position filename="src/camel/camel-folder-search.h"
                           line="228"/>
          <return-value>
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </return-value>
          <parameters>
            <parameter name="sexp" transfer-ownership="none">
              <type name="SExp" c:type="CamelSExp*"/>
            </parameter>
            <parameter name="argc" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="argv" transfer-ownership="none">
              <type name="SExpResult" c:type="CamelSExpResult**"/>
            </parameter>
            <parameter name="search" transfer-ownership="none">
              <type name="FolderSearch" c:type="CamelFolderSearch*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size" introspectable="0">
        <callback name="get_size" introspectable="0">
          <source-position filename="src/camel/camel-folder-search.h"
                           line="236"/>
          <return-value>
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </return-value>
          <parameters>
            <parameter name="sexp" transfer-ownership="none">
              <type name="SExp" c:type="CamelSExp*"/>
            </parameter>
            <parameter name="argc" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="argv" transfer-ownership="none">
              <type name="SExpResult" c:type="CamelSExpResult**"/>
            </parameter>
            <parameter name="search" transfer-ownership="none">
              <type name="FolderSearch" c:type="CamelFolderSearch*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="uid" introspectable="0">
        <callback name="uid" introspectable="0">
          <source-position filename="src/camel/camel-folder-search.h"
                           line="243"/>
          <return-value>
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </return-value>
          <parameters>
            <parameter name="sexp" transfer-ownership="none">
              <type name="SExp" c:type="CamelSExp*"/>
            </parameter>
            <parameter name="argc" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="argv" transfer-ownership="none">
              <type name="SExpResult" c:type="CamelSExpResult**"/>
            </parameter>
            <parameter name="search" transfer-ownership="none">
              <type name="FolderSearch" c:type="CamelFolderSearch*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="message_location" introspectable="0">
        <callback name="message_location" introspectable="0">
          <source-position filename="src/camel/camel-folder-search.h"
                           line="250"/>
          <return-value>
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </return-value>
          <parameters>
            <parameter name="sexp" transfer-ownership="none">
              <type name="SExp" c:type="CamelSExp*"/>
            </parameter>
            <parameter name="argc" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="argv" transfer-ownership="none">
              <type name="SExpResult" c:type="CamelSExpResult**"/>
            </parameter>
            <parameter name="search" transfer-ownership="none">
              <type name="FolderSearch" c:type="CamelFolderSearch*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="make_time" introspectable="0">
        <callback name="make_time" introspectable="0">
          <source-position filename="src/camel/camel-folder-search.h"
                           line="260"/>
          <return-value>
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </return-value>
          <parameters>
            <parameter name="sexp" transfer-ownership="none">
              <type name="SExp" c:type="CamelSExp*"/>
            </parameter>
            <parameter name="argc" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="argv" transfer-ownership="none">
              <type name="SExpResult" c:type="CamelSExpResult**"/>
            </parameter>
            <parameter name="search" transfer-ownership="none">
              <type name="FolderSearch" c:type="CamelFolderSearch*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="compare_date" introspectable="0">
        <callback name="compare_date" introspectable="0">
          <source-position filename="src/camel/camel-folder-search.h"
                           line="269"/>
          <return-value>
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </return-value>
          <parameters>
            <parameter name="sexp" transfer-ownership="none">
              <type name="SExp" c:type="CamelSExp*"/>
            </parameter>
            <parameter name="argc" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="argv" transfer-ownership="none">
              <type name="SExpResult" c:type="CamelSExpResult**"/>
            </parameter>
            <parameter name="search" transfer-ownership="none">
              <type name="FolderSearch" c:type="CamelFolderSearch*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="addressbook_contains" introspectable="0">
        <callback name="addressbook_contains" introspectable="0">
          <source-position filename="src/camel/camel-folder-search.h"
                           line="277"/>
          <return-value>
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </return-value>
          <parameters>
            <parameter name="sexp" transfer-ownership="none">
              <type name="SExp" c:type="CamelSExp*"/>
            </parameter>
            <parameter name="argc" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="argv" transfer-ownership="none">
              <type name="SExpResult" c:type="CamelSExpResult**"/>
            </parameter>
            <parameter name="search" transfer-ownership="none">
              <type name="FolderSearch" c:type="CamelFolderSearch*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="17">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="FolderSearchPrivate"
            c:type="CamelFolderSearchPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-folder-search.h" line="54"/>
    </record>
    <class name="FolderSummary"
           c:symbol-prefix="folder_summary"
           c:type="CamelFolderSummary"
           parent="GObject.Object"
           glib:type-name="CamelFolderSummary"
           glib:get-type="camel_folder_summary_get_type"
           glib:type-struct="FolderSummaryClass">
      <source-position filename="src/camel/camel-folder-summary.h" line="128"/>
      <constructor name="new" c:identifier="camel_folder_summary_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="797">Create a new #CamelFolderSummary object.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="132"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="803">a new #CamelFolderSummary object</doc>
          <type name="FolderSummary" c:type="CamelFolderSummary*"/>
        </return-value>
        <parameters>
          <parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="799">parent #CamelFolder object</doc>
            <type name="Folder" c:type="_CamelFolder*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="free_array"
                c:identifier="camel_folder_summary_free_array"
                version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="1244">Free's array and its elements returned from camel_folder_summary_get_array().</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="237"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="1246">a #GPtrArray returned from camel_folder_summary_get_array()</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="message_info_from_uid" invoker="get" version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="1407">Retrieve a summary item by uid.

A referenced to the summary item is returned, which may be
ref'd or free'd as appropriate.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="115"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="1417">the summary item, or %NULL if the uid @uid is not available

See camel_folder_summary_get_info_flags().</doc>
          <type name="MessageInfo" c:type="CamelMessageInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="1409">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="1410">a uid</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="message_info_new_from_headers"
                      invoker="info_new_from_headers"
                      version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="2449">Create a new info record from a header.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="102"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="2456">a newly created #CamelMessageInfo. Unref it
  with g_object_unref(), when done with it.</doc>
          <type name="MessageInfo" c:type="CamelMessageInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="2451">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
          <parameter name="headers" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="2452">rfc822 headers as #CamelNameValueArray</doc>
            <type name="NameValueArray" c:type="const CamelNameValueArray*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="message_info_new_from_message"
                      invoker="info_new_from_message">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="2555">Create a summary item from a message.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="110"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="2562">a newly created #CamelMessageInfo. Unref it
  with g_object_unref(), when done with it.</doc>
          <type name="MessageInfo" c:type="CamelMessageInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="2557">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="2558">a #CamelMimeMessage object</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="message_info_new_from_parser"
                      invoker="info_new_from_parser">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="2476">Create a new info record from a parser.  If the parser cannot
determine a uid, then none will be assigned.

If indexing is enabled, and the parser cannot determine a new uid, then
one is automatically assigned.

If indexing is enabled, then the content will be indexed based
on this new uid.  In this case, the message info MUST be
added using :add().

Once complete, the parser will be positioned at the end of
the message.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="106"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="2494">a newly created #CamelMessageInfo. Unref it
  with g_object_unref(), when done with it.</doc>
          <type name="MessageInfo" c:type="CamelMessageInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="2478">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
          <parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="2479">a #CamelMimeParser object</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="next_uid_string" invoker="next_uid_string">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="1136">Retrieve the next uid, but as a formatted string.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="120"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="1142">the next uid as an unsigned integer string.
This string must be freed by the caller.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="1138">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare_fetch_all">
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="123"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="summary_header_load">
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="92"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
          <parameter name="fir"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="_CamelFIRecord*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="summary_header_save" throws="1">
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="96"/>
        <return-value transfer-ownership="none" nullable="1">
          <type name="gpointer" c:type="_CamelFIRecord*"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="add" c:identifier="camel_folder_summary_add">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="2376">Adds a new @info record to the summary. If the @force_keep_uid is %FALSE,
then a new uid is automatically re-assigned by calling
camel_folder_summary_next_uid_string(). It's an error to use
@force_keep_uid when the @info has none set.

The @summary adds its own reference to @info, if needed, and any
previously loaded info is replaced with the new one.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="208"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="2378">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
          <parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="2379">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </parameter>
          <parameter name="force_keep_uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="2380">whether to keep set UID of the @info</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="check_uid"
              c:identifier="camel_folder_summary_check_uid"
              version="2.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="1175">Check if the uid is valid. This isn't very efficient, so it shouldn't be called iteratively.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="228"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="1183">if the uid is present in the summary or not  (%TRUE or %FALSE)</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="1177">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="1178">a uid</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear"
              c:identifier="camel_folder_summary_clear"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="2632">Empty the summary contents.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="222"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="2639">whether succeeded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="2634">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="count" c:identifier="camel_folder_summary_count">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="1159">Get the number of summary items stored in this summary.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="226"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="1165">the number of items in the summary</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="1161">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get" c:identifier="camel_folder_summary_get" version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="1407">Retrieve a summary item by uid.

A referenced to the summary item is returned, which may be
ref'd or free'd as appropriate.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="231"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="1417">the summary item, or %NULL if the uid @uid is not available

See camel_folder_summary_get_info_flags().</doc>
          <type name="MessageInfo" c:type="CamelMessageInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="1409">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="1410">a uid</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_array"
              c:identifier="camel_folder_summary_get_array"
              version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="1213">Obtain a copy of the summary array.  This is done atomically,
so cannot contain empty entries.

Free with camel_folder_summary_free_array()</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="236"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="1222">a #GPtrArray of uids</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="1215">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_changed"
              c:identifier="camel_folder_summary_get_changed"
              version="2.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="1499">Returns an array of changed UID-s. A UID is considered changed
when its corresponding CamelMesageInfo is 'dirty' or when it has
set the #CAMEL_MESSAGE_FOLDER_FLAGGED flag.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="252"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="1507">a #GPtrArray with changed UID-s.
   Free it with camel_folder_summary_free_array() when no longer needed.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="1501">a #CamelFolderSummary</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_deleted_count"
              c:identifier="camel_folder_summary_get_deleted_count"
              glib:get-property="deleted-count"
              version="3.4">
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="153"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="966">Count of deleted infos.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="964">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags"
              c:identifier="camel_folder_summary_get_flags"
              version="3.24">
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="136"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="831">flags of the @summary, a bit-or of #CamelFolderSummaryFlags</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="829">a #CamelFolderSummary</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_folder"
              c:identifier="camel_folder_summary_get_folder"
              glib:get-property="folder"
              version="3.4">
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="135"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="815">a #CamelFolder to which the summary if associated.</doc>
          <type name="gpointer" c:type="_CamelFolder*"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="813">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hash"
              c:identifier="camel_folder_summary_get_hash"
              version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="1273">Returns hash of current stored 'uids' in summary, where key is 'uid'
from the string pool, and value is 1. The returned pointer should
be freed with g_hash_table_destroy().

Note: When searching for values always use uids from the string pool.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="239"/>
        <return-value transfer-ownership="container">
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="gint"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="1275">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_index"
              c:identifier="camel_folder_summary_get_index"
              version="3.4">
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="164"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="1053">a #CamelIndex used to index body content.</doc>
          <type name="Index" c:type="CamelIndex*"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="1051">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_info_flags"
              c:identifier="camel_folder_summary_get_info_flags"
              version="3.12">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="1439">Retrieve CamelMessageInfo::flags for a message info with UID @uid.
This is much quicker than camel_folder_summary_get(), because it
doesn't require reading the message info from a disk.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="233"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="1448">the flags currently stored for message info with UID @uid,
         or (~0) on error</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="1441">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="1442">a uid</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_junk_count"
              c:identifier="camel_folder_summary_get_junk_count"
              glib:get-property="junk-count"
              version="3.4">
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="155"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="982">Count of junk infos.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="980">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_junk_not_deleted_count"
              c:identifier="camel_folder_summary_get_junk_not_deleted_count"
              glib:get-property="junk-not-deleted-count"
              version="3.4">
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="157"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="998">Count of junk and not deleted infos.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="996">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_next_uid"
              c:identifier="camel_folder_summary_get_next_uid"
              version="3.4">
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="169"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="1114">Next uid currently awaiting for assignment. The difference from
   camel_folder_summary_next_uid() is that this function returns actual
   value and doesn't increment it before returning.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="1112">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_saved_count"
              c:identifier="camel_folder_summary_get_saved_count"
              glib:get-property="saved-count"
              version="3.4">
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="149"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="934">Count of saved infos.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="932">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_timestamp"
              c:identifier="camel_folder_summary_get_timestamp"
              version="3.24">
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="139"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="865">timestamp of the @summary, as set by the descendants</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="863">a #CamelFolderSummary</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_unread_count"
              c:identifier="camel_folder_summary_get_unread_count"
              glib:get-property="unread-count"
              version="3.4">
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="151"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="950">Count of unread infos.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="948">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_version"
              c:identifier="camel_folder_summary_get_version"
              version="3.24">
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="144"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="900">version of the @summary</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="898">a #CamelFolderSummary</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_visible_count"
              c:identifier="camel_folder_summary_get_visible_count"
              glib:get-property="visible-count"
              version="3.4">
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="159"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="1014">Count of visible (not junk and not deleted) infos.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="1012">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="header_load"
              c:identifier="camel_folder_summary_header_load"
              version="3.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="2268">Loads a summary header for the @summary, which corresponds to @folder_name
provided by @store.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="181"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="2278">whether succeeded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="2270">a #CamelFolderSummary</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
          <parameter name="store"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="2271">a #CamelStore</doc>
            <type name="gpointer" c:type="_CamelStore*"/>
          </parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="2272">a folder name corresponding to @summary</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="header_save"
              c:identifier="camel_folder_summary_header_save"
              version="3.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="2204">Saves summary header information into the disk. The function does
nothing, if the summary doesn't support save to disk.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="186"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="2212">whether succeeded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="2206">a #CamelFolderSummary</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="info_new_from_headers"
              c:identifier="camel_folder_summary_info_new_from_headers"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="2449">Create a new info record from a header.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="195"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="2456">a newly created #CamelMessageInfo. Unref it
  with g_object_unref(), when done with it.</doc>
          <type name="MessageInfo" c:type="CamelMessageInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="2451">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
          <parameter name="headers" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="2452">rfc822 headers as #CamelNameValueArray</doc>
            <type name="NameValueArray" c:type="const CamelNameValueArray*"/>
          </parameter>
        </parameters>
      </method>
      <method name="info_new_from_message"
              c:identifier="camel_folder_summary_info_new_from_message">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="2555">Create a summary item from a message.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="203"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="2562">a newly created #CamelMessageInfo. Unref it
  with g_object_unref(), when done with it.</doc>
          <type name="MessageInfo" c:type="CamelMessageInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="2557">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="2558">a #CamelMimeMessage object</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="info_new_from_parser"
              c:identifier="camel_folder_summary_info_new_from_parser">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="2476">Create a new info record from a parser.  If the parser cannot
determine a uid, then none will be assigned.

If indexing is enabled, and the parser cannot determine a new uid, then
one is automatically assigned.

If indexing is enabled, then the content will be indexed based
on this new uid.  In this case, the message info MUST be
added using :add().

Once complete, the parser will be positioned at the end of
the message.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="199"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="2494">a newly created #CamelMessageInfo. Unref it
  with g_object_unref(), when done with it.</doc>
          <type name="MessageInfo" c:type="CamelMessageInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="2478">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
          <parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="2479">a #CamelMimeParser object</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load"
              c:identifier="camel_folder_summary_load"
              version="3.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="1796">Loads the summary from the disk. It also saves any pending
changes first.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="177"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="1804">whether succeeded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="1798">a #CamelFolderSummary</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="lock"
              c:identifier="camel_folder_summary_lock"
              version="2.32">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="3438">Locks @summary. Unlock it with camel_folder_summary_unlock().</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="261"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="3440">a #CamelFolderSummary</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="next_uid" c:identifier="camel_folder_summary_next_uid">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="1065">Generate a new unique uid value as an integer.  This
may be used to create a unique sequence of numbers.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="165"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="1072">the next unique uid value</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="1067">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="next_uid_string"
              c:identifier="camel_folder_summary_next_uid_string">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="1136">Retrieve the next uid, but as a formatted string.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="171"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="1142">the next uid as an unsigned integer string.
This string must be freed by the caller.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="1138">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_loaded"
              c:identifier="camel_folder_summary_peek_loaded"
              version="2.26">
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="247"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="1310">a #CamelMessageInfo for the given @uid,
   if it's currently loaded in memory, or %NULL otherwise. Unref the non-NULL
   info with g_object_unref() when done with it.</doc>
          <type name="MessageInfo" c:type="CamelMessageInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="1307">a #CamelFolderSummary</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="1308">a message UID to look for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_fetch_all"
              c:identifier="camel_folder_summary_prepare_fetch_all"
              version="2.32"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="1761">Loads all infos into memory, if they are not yet and ensures
they will not be freed in next couple minutes. Call this function
before any mass operation or when all message infos will be needed,
for better performance.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="256"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="1763">#CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="camel_folder_summary_remove">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="2701">Remove a specific @info record from the summary.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="212"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="2708">Whether the @info was found and removed from the @summary.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="2703">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
          <parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="2704">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_uid" c:identifier="camel_folder_summary_remove_uid">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="2720">Remove a specific info record from the summary, by @uid.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="215"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="2727">Whether the @uid was found and removed from the @summary.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="2722">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="2723">a uid</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_uids"
              c:identifier="camel_folder_summary_remove_uids"
              version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="2780">Remove a specific info record from the summary, by @uid.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="217"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="2787">Whether the @uid was found and removed from the @summary.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="2782">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
          <parameter name="uids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="2783">a GList of uids</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="utf8"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="replace_flags"
              c:identifier="camel_folder_summary_replace_flags"
              version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="534">Updates internal counts based on the flags in @info.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="241"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="541">Whether any count changed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="536">a #CamelFolderSummary</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
          <parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="537">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save"
              c:identifier="camel_folder_summary_save"
              version="3.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="2095">Saves the content of the @summary to disk. It does nothing,
when the summary is not changed or when it doesn't support
permanent save.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="175"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="2104">whether succeeded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="2097">a #CamelFolderSummary</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_flags"
              c:identifier="camel_folder_summary_set_flags"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="843">Sets flags of the @summary, a bit-or of #CamelFolderSummaryFlags.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="137"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="845">a #CamelFolderSummary</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="846">flags to set</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_index" c:identifier="camel_folder_summary_set_index">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="1026">Set the index used to index body content.  If the index is %NULL, or
not set (the default), no indexing of body content will take place.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="162"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="1028">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
          <parameter name="index"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="1029">a #CamelIndex</doc>
            <type name="Index" c:type="CamelIndex*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_next_uid"
              c:identifier="camel_folder_summary_set_next_uid">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="1089">Set the next minimum uid available.  This can be used to
ensure new uid's do not clash with existing uid's.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="166"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="1091">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="1092">The next minimum uid to assign.  To avoid clashing
uid's, set this to the uid of a given messages + 1.</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_timestamp"
              c:identifier="camel_folder_summary_set_timestamp"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="877">Sets timestamp of the @summary, provided by the descendants. This doesn't
change the 'dirty' flag of the @summary.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="141"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="879">a #CamelFolderSummary</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="880">a timestamp to set</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_version"
              c:identifier="camel_folder_summary_set_version"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="912">Sets version of the @summary.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="146"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="914">a #CamelFolderSummary</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
          <parameter name="version" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="915">version to set</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="touch" c:identifier="camel_folder_summary_touch">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="2617">Mark the summary as changed, so that a save will force it to be
written back to disk.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="191"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="2619">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unlock"
              c:identifier="camel_folder_summary_unlock"
              version="2.32">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="3454">Unlocks @summary, previously locked with camel_folder_summary_lock().</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="262"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="3456">a #CamelFolderSummary</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="deleted-count"
                transfer-ownership="none"
                getter="get_deleted_count"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="696">How many deleted infos is saved in a summary.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="folder"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_folder">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="650">The #CamelFolder to which the folder summary belongs.</doc>
        <type name="Folder"/>
      </property>
      <property name="junk-count"
                transfer-ownership="none"
                getter="get_junk_count"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="711">How many junk infos is saved in a summary.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="junk-not-deleted-count"
                transfer-ownership="none"
                getter="get_junk_not_deleted_count"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="726">How many junk and not deleted infos is saved in a summary.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="saved-count"
                transfer-ownership="none"
                getter="get_saved_count"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="666">How many infos is saved in a summary.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="unread-count"
                transfer-ownership="none"
                getter="get_unread_count"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="681">How many unread infos is saved in a summary.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="visible-count"
                transfer-ownership="none"
                getter="get_visible_count"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="741">How many visible (not deleted and not junk) infos is saved in a summary.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="FolderSummaryPrivate" c:type="CamelFolderSummaryPrivate*"/>
      </field>
      <glib:signal name="changed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="FolderSummaryClass"
            c:type="CamelFolderSummaryClass"
            glib:is-gtype-struct-for="FolderSummary">
      <source-position filename="src/camel/camel-folder-summary.h" line="128"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="message_info_type">
        <type name="GType" c:type="GType"/>
      </field>
      <field name="collate">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="sort_by">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="summary_header_load">
        <callback name="summary_header_load">
          <source-position filename="src/camel/camel-folder-summary.h"
                           line="92"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="summary" transfer-ownership="none">
              <type name="FolderSummary" c:type="CamelFolderSummary*"/>
            </parameter>
            <parameter name="fir"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="gpointer" c:type="_CamelFIRecord*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="summary_header_save">
        <callback name="summary_header_save" throws="1">
          <source-position filename="src/camel/camel-folder-summary.h"
                           line="96"/>
          <return-value transfer-ownership="none" nullable="1">
            <type name="gpointer" c:type="_CamelFIRecord*"/>
          </return-value>
          <parameters>
            <parameter name="summary" transfer-ownership="none">
              <type name="FolderSummary" c:type="CamelFolderSummary*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="message_info_new_from_headers">
        <callback name="message_info_new_from_headers">
          <source-position filename="src/camel/camel-folder-summary.h"
                           line="102"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="2456">a newly created #CamelMessageInfo. Unref it
  with g_object_unref(), when done with it.</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </return-value>
          <parameters>
            <parameter name="summary" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder-summary.c"
                   line="2451">a #CamelFolderSummary object</doc>
              <type name="FolderSummary" c:type="CamelFolderSummary*"/>
            </parameter>
            <parameter name="headers" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder-summary.c"
                   line="2452">rfc822 headers as #CamelNameValueArray</doc>
              <type name="NameValueArray" c:type="const CamelNameValueArray*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="message_info_new_from_parser">
        <callback name="message_info_new_from_parser">
          <source-position filename="src/camel/camel-folder-summary.h"
                           line="106"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="2494">a newly created #CamelMessageInfo. Unref it
  with g_object_unref(), when done with it.</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </return-value>
          <parameters>
            <parameter name="summary" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder-summary.c"
                   line="2478">a #CamelFolderSummary object</doc>
              <type name="FolderSummary" c:type="CamelFolderSummary*"/>
            </parameter>
            <parameter name="parser" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder-summary.c"
                   line="2479">a #CamelMimeParser object</doc>
              <type name="MimeParser" c:type="CamelMimeParser*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="message_info_new_from_message">
        <callback name="message_info_new_from_message">
          <source-position filename="src/camel/camel-folder-summary.h"
                           line="110"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="2562">a newly created #CamelMessageInfo. Unref it
  with g_object_unref(), when done with it.</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </return-value>
          <parameters>
            <parameter name="summary" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder-summary.c"
                   line="2557">a #CamelFolderSummary object</doc>
              <type name="FolderSummary" c:type="CamelFolderSummary*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder-summary.c"
                   line="2558">a #CamelMimeMessage object</doc>
              <type name="MimeMessage" c:type="CamelMimeMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="message_info_from_uid">
        <callback name="message_info_from_uid">
          <source-position filename="src/camel/camel-folder-summary.h"
                           line="115"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="1417">the summary item, or %NULL if the uid @uid is not available

See camel_folder_summary_get_info_flags().</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </return-value>
          <parameters>
            <parameter name="summary" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder-summary.c"
                   line="1409">a #CamelFolderSummary object</doc>
              <type name="FolderSummary" c:type="CamelFolderSummary*"/>
            </parameter>
            <parameter name="uid" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder-summary.c"
                   line="1410">a uid</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="next_uid_string">
        <callback name="next_uid_string">
          <source-position filename="src/camel/camel-folder-summary.h"
                           line="120"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="1142">the next uid as an unsigned integer string.
This string must be freed by the caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="summary" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-folder-summary.c"
                   line="1138">a #CamelFolderSummary object</doc>
              <type name="FolderSummary" c:type="CamelFolderSummary*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prepare_fetch_all">
        <callback name="prepare_fetch_all">
          <source-position filename="src/camel/camel-folder-summary.h"
                           line="123"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="summary" transfer-ownership="none">
              <type name="FolderSummary" c:type="CamelFolderSummary*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="19">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <bitfield name="FolderSummaryFlags" c:type="CamelFolderSummaryFlags">
      <source-position filename="src/camel/camel-folder-summary.h" line="74"/>
      <member name="dirty" value="1" c:identifier="CAMEL_FOLDER_SUMMARY_DIRTY">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.h"
             line="65">There are changes in summary, which should be saved.</doc>
      </member>
      <member name="in_memory_only"
              value="2"
              c:identifier="CAMEL_FOLDER_SUMMARY_IN_MEMORY_ONLY">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.h"
             line="67">Summary with this flag doesn't use DB for storing its content,
   it is always created on the fly.</doc>
      </member>
    </bitfield>
    <record name="FolderSummaryPrivate"
            c:type="CamelFolderSummaryPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-folder-summary.h" line="61"/>
    </record>
    <record name="FolderThread"
            c:type="CamelFolderThread"
            glib:type-name="CamelFolderThread"
            glib:get-type="camel_folder_thread_messages_get_type"
            c:symbol-prefix="folder_thread_messages">
      <source-position filename="src/camel/camel-folder-thread.h" line="49"/>
      <field name="refcount" writable="1" bits="31">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="subject" writable="1" bits="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="tree" writable="1">
        <type name="gpointer" c:type="_CamelFolderThreadNode*"/>
      </field>
      <field name="node_chunks" writable="1">
        <type name="MemChunk" c:type="CamelMemChunk*"/>
      </field>
      <field name="folder" writable="1">
        <type name="Folder" c:type="CamelFolder*"/>
      </field>
      <field name="summary" writable="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <constructor name="new" c:identifier="camel_folder_thread_messages_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-thread.c"
             line="695">Thread a (subset) of the messages in a folder.  And sort the result
in summary order.

If @thread_subject is %TRUE, messages with
related subjects will also be threaded. The default behaviour is to
only thread based on message-id.

This function is probably to be removed soon.</doc>
        <source-position filename="src/camel/camel-folder-thread.h" line="53"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-thread.c"
               line="711">A CamelFolderThread contianing a tree of CamelFolderThreadNode's
which represent the threaded structure of the messages.</doc>
          <type name="FolderThread" c:type="CamelFolderThread*"/>
        </return-value>
        <parameters>
          <parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-thread.c"
                 line="697">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
          <parameter name="uids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-thread.c"
                 line="698">The subset of uid's to thread. If %NULL, then thread
   all UID-s in the @folder</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="thread_subject" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-thread.c"
                 line="700">thread based on subject also</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="apply" c:identifier="camel_folder_thread_messages_apply">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-thread.c"
             line="785">Adds new @uids into the threaded tree.</doc>
        <source-position filename="src/camel/camel-folder-thread.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="thread" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-thread.c"
                 line="787">a #CamelFolderThread</doc>
            <type name="FolderThread" c:type="CamelFolderThread*"/>
          </instance-parameter>
          <parameter name="uids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-thread.c"
                 line="788">a #GPtrArray array of UID-s</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="camel_folder_thread_messages_ref">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-thread.c"
             line="824">Increase the reference of @thread</doc>
        <source-position filename="src/camel/camel-folder-thread.h" line="64"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-thread.c"
               line="830">the referenced @thread</doc>
          <type name="FolderThread" c:type="CamelFolderThread*"/>
        </return-value>
        <parameters>
          <instance-parameter name="thread" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-thread.c"
                 line="826">a #CamelFolderThread</doc>
            <type name="FolderThread" c:type="CamelFolderThread*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="camel_folder_thread_messages_unref">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-thread.c"
             line="839">Free all memory associated with the thread descriptor @thread.</doc>
        <source-position filename="src/camel/camel-folder-thread.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="thread" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-thread.c"
                 line="841">a #CamelFolderThread</doc>
            <type name="FolderThread" c:type="CamelFolderThread*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="FolderThreadNode" c:type="CamelFolderThreadNode">
      <source-position filename="src/camel/camel-folder-thread.h" line="39"/>
      <field name="next" writable="1">
        <type name="gpointer" c:type="_CamelFolderThreadNode*"/>
      </field>
      <field name="parent" writable="1">
        <type name="gpointer" c:type="_CamelFolderThreadNode*"/>
      </field>
      <field name="child" writable="1">
        <type name="gpointer" c:type="_CamelFolderThreadNode*"/>
      </field>
      <field name="message" writable="1">
        <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
      </field>
      <field name="root_subject" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="order" writable="1" bits="31">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="re" writable="1" bits="1">
        <type name="guint32" c:type="guint32"/>
      </field>
    </record>
    <callback name="ForeachInfoData" c:type="CamelForeachInfoData">
      <doc xml:space="preserve"
           filename="src/camel/camel-vee-data-cache.h"
           line="98">A callback prototype for camel_vee_data_cache_foreach_message_info_data()</doc>
      <source-position filename="src/camel/camel-vee-data-cache.h" line="106"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="mi_data" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-vee-data-cache.h"
               line="100">a #CamelVeeMessageInfoData</doc>
          <type name="VeeMessageInfoData" c:type="CamelVeeMessageInfoData*"/>
        </parameter>
        <parameter name="subfolder" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-vee-data-cache.h"
               line="101">a #CamelFolder which @mi_data references</doc>
          <type name="Folder" c:type="CamelFolder*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="src/camel/camel-vee-data-cache.h"
               line="102">custom user data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ForeachPartFunc"
              c:type="CamelForeachPartFunc"
              version="3.34">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-message.h"
           line="123">Callback used to traverse parts of the @message using camel_mime_message_foreach_part().</doc>
      <source-position filename="src/camel/camel-mime-message.h" line="137"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-message.h"
             line="132">%TRUE, when the traverse should continue, %FALSE to stop
   traversing parts of the @message</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-message.h"
               line="125">a #CamelMimeMessage</doc>
          <type name="MimeMessage" c:type="CamelMimeMessage*"/>
        </parameter>
        <parameter name="part" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-message.h"
               line="126">a #CamelMimePart, for which the function is called</doc>
          <type name="MimePart" c:type="CamelMimePart*"/>
        </parameter>
        <parameter name="parent_part"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-message.h"
               line="127">a #CamelMimePart, parent of the @part; can be %NULL</doc>
          <type name="MimePart" c:type="CamelMimePart*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-message.h"
               line="128">user data, as passed to camel_mime_message_foreach_part()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <function-macro name="GPG_CONTEXT"
                    c:identifier="CAMEL_GPG_CONTEXT"
                    introspectable="0">
      <source-position filename="src/camel/camel-gpg-context.h" line="32"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GPG_CONTEXT_CLASS"
                    c:identifier="CAMEL_GPG_CONTEXT_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-gpg-context.h" line="35"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GPG_CONTEXT_GET_CLASS"
                    c:identifier="CAMEL_GPG_CONTEXT_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-gpg-context.h" line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="GpgContext"
           c:symbol-prefix="gpg_context"
           c:type="CamelGpgContext"
           parent="CipherContext"
           glib:type-name="CamelGpgContext"
           glib:get-type="camel_gpg_context_get_type"
           glib:type-struct="GpgContextClass">
      <source-position filename="src/camel/camel-gpg-context.h" line="83"/>
      <constructor name="new" c:identifier="camel_gpg_context_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-gpg-context.c"
             line="3342">Creates a new gpg cipher context object.</doc>
        <source-position filename="src/camel/camel-gpg-context.h" line="87"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-gpg-context.c"
               line="3348">a new gpg cipher context object.</doc>
          <type name="CipherContext" c:type="CamelCipherContext*"/>
        </return-value>
        <parameters>
          <parameter name="session"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="3344">session</doc>
            <type name="Session" c:type="CamelSession*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_always_trust"
              c:identifier="camel_gpg_context_get_always_trust"
              glib:get-property="always-trust"
              version="2.32">
        <source-position filename="src/camel/camel-gpg-context.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="3363">a #CamelGpgContext</doc>
            <type name="GpgContext" c:type="CamelGpgContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_key_data_info_sync"
              c:identifier="camel_gpg_context_get_key_data_info_sync"
              version="3.50"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-gpg-context.c"
             line="3960">Receives information about a key stored in @data of size @data_size.

The @flags argument is currently unused and should be set to 0.

Free the returned @out_infos with g_slist_free_full (infos, camel_gpg_key_info_free);
when no longer needed.</doc>
        <source-position filename="src/camel/camel-gpg-context.h" line="123"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-gpg-context.c"
               line="3977">whether succeeded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="3962">a #CamelGpgContext</doc>
            <type name="GpgContext" c:type="CamelGpgContext*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="3963">the public key data</doc>
            <type name="guint8" c:type="const guint8*"/>
          </parameter>
          <parameter name="data_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="3964">the @data size</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="3965">flags for the operation</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="out_infos"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="3966">an out parameter to get #GSList of #CamelGpgKeyInfo structures</doc>
            <type name="GLib.SList" c:type="GSList**">
              <type name="GpgKeyInfo"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="3967">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_locate_keys"
              c:identifier="camel_gpg_context_get_locate_keys"
              glib:get-property="locate-keys"
              version="3.46">
        <doc xml:space="preserve"
             filename="src/camel/camel-gpg-context.c"
             line="3436">Returns, whether gpg can locate keys using Web Key Directory (WKD) lookup
when encrypting messages. The default is %TRUE.</doc>
        <source-position filename="src/camel/camel-gpg-context.h" line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-gpg-context.c"
               line="3443">whether gpg can locate keys using Web Key Directory (WKD) lookup
   when encrypting messages.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="3438">a #CamelGpgContext</doc>
            <type name="GpgContext" c:type="CamelGpgContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_prefer_inline"
              c:identifier="camel_gpg_context_get_prefer_inline"
              glib:get-property="prefer-inline"
              version="3.20">
        <source-position filename="src/camel/camel-gpg-context.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-gpg-context.c"
               line="3401">Whether prefer inline sign/encrypt (%TRUE), or as multiparts (%FALSE)</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="3399">a #CamelGpgContext</doc>
            <type name="GpgContext" c:type="CamelGpgContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_public_key_info_sync"
              c:identifier="camel_gpg_context_get_public_key_info_sync"
              version="3.50"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-gpg-context.c"
             line="3864">Receives information about a key @keyid.

The @keyid can be either key ID or an email address.

The @flags argument is currently unused and should be set to 0.

Free the returned @out_infos with g_slist_free_full (infos, camel_gpg_key_info_free);
when no longer needed.</doc>
        <source-position filename="src/camel/camel-gpg-context.h" line="116"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-gpg-context.c"
               line="3882">whether succeeded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="3866">a #CamelGpgContext</doc>
            <type name="GpgContext" c:type="CamelGpgContext*"/>
          </instance-parameter>
          <parameter name="keyid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="3867">a key ID or an email address</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="3868">flags for the operation</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="out_infos"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="3869">an out parameter to get #GSList of #CamelGpgKeyInfo structures</doc>
            <type name="GLib.SList" c:type="GSList**">
              <type name="GpgKeyInfo"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="3870">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_public_key_sync"
              c:identifier="camel_gpg_context_get_public_key_sync"
              version="3.50"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-gpg-context.c"
             line="3567">Returns a public key with @keyid.

The @keyid can be either key ID or an email address.

The @flags argument is currently unused and should be set to 0.

The @out_data content should be freed with g_free(), when
no longer needed.</doc>
        <source-position filename="src/camel/camel-gpg-context.h" line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-gpg-context.c"
               line="3586">whether succeeded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="3569">a #CamelGpgContext</doc>
            <type name="GpgContext" c:type="CamelGpgContext*"/>
          </instance-parameter>
          <parameter name="keyid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="3570">a key ID or an email address</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="3571">flags for the operation</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="out_data"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="3572">return location for the public key data, in binary form</doc>
            <type name="guint8" c:type="guint8**"/>
          </parameter>
          <parameter name="out_data_size"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="3573">return location to store the @out_data size to</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="3574">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_public_key_sync"
              c:identifier="camel_gpg_context_has_public_key_sync"
              version="3.50"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-gpg-context.c"
             line="3499">Checks whether there exists a public key with @keyid.

The @keyid can be either key ID or an email address.</doc>
        <source-position filename="src/camel/camel-gpg-context.h" line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-gpg-context.c"
               line="3510">whether the key could be found</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="3501">a #CamelGpgContext</doc>
            <type name="GpgContext" c:type="CamelGpgContext*"/>
          </instance-parameter>
          <parameter name="keyid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="3502">a key ID or an email address</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="3503">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="import_key_sync"
              c:identifier="camel_gpg_context_import_key_sync"
              version="3.50"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-gpg-context.c"
             line="4124">Imports a (public) key provided in a binary form stored in the @data
of size @data_size.</doc>
        <source-position filename="src/camel/camel-gpg-context.h" line="137"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-gpg-context.c"
               line="4136">whether succeeded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="4126">a #CamelGpgContext</doc>
            <type name="GpgContext" c:type="CamelGpgContext*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="4127">the public key data</doc>
            <type name="guint8" c:type="const guint8*"/>
          </parameter>
          <parameter name="data_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="4128">the @data size</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="4129">bit-or of CamelPgpImportFlags, flags for the operation</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="4130">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_always_trust"
              c:identifier="camel_gpg_context_set_always_trust"
              glib:set-property="always-trust">
        <doc xml:space="preserve"
             filename="src/camel/camel-gpg-context.c"
             line="3375">Sets the @always_trust flag on the gpg context which is used for
encryption.</doc>
        <source-position filename="src/camel/camel-gpg-context.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="3377">gpg context</doc>
            <type name="GpgContext" c:type="CamelGpgContext*"/>
          </instance-parameter>
          <parameter name="always_trust" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="3378">always trust flag</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_key_trust_sync"
              c:identifier="camel_gpg_context_set_key_trust_sync"
              version="3.50"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-gpg-context.c"
             line="4060">Sets @trust level on the key @keyid.

The @keyid can be either key ID or an email address.</doc>
        <source-position filename="src/camel/camel-gpg-context.h" line="131"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-gpg-context.c"
               line="4072">whether succeeded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="4062">a #CamelGpgContext</doc>
            <type name="GpgContext" c:type="CamelGpgContext*"/>
          </instance-parameter>
          <parameter name="keyid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="4063">a key ID or an email address</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="trust" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="4064">a #CamelGpgTrust to set</doc>
            <type name="GpgTrust" c:type="CamelGpgTrust"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="4065">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_locate_keys"
              c:identifier="camel_gpg_context_set_locate_keys"
              glib:set-property="locate-keys"
              version="3.46">
        <doc xml:space="preserve"
             filename="src/camel/camel-gpg-context.c"
             line="3456">Sets the @locate_keys on the gpg context which is used to instruct
gpg to locate keys using Web Key Directory (WKD) lookup when encrypting
messages.</doc>
        <source-position filename="src/camel/camel-gpg-context.h" line="100"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="3458">gpg context</doc>
            <type name="GpgContext" c:type="CamelGpgContext*"/>
          </instance-parameter>
          <parameter name="locate_keys" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="3459">value to set</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_prefer_inline"
              c:identifier="camel_gpg_context_set_prefer_inline"
              glib:set-property="prefer-inline"
              version="3.20">
        <doc xml:space="preserve"
             filename="src/camel/camel-gpg-context.c"
             line="3413">Sets the @prefer_inline flag on the gpg context.</doc>
        <source-position filename="src/camel/camel-gpg-context.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="3415">gpg context</doc>
            <type name="GpgContext" c:type="CamelGpgContext*"/>
          </instance-parameter>
          <parameter name="prefer_inline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="3416">whether prefer inline sign/encrypt</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="always-trust"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_always_trust"
                getter="get_always_trust"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="locate-keys"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_locate_keys"
                getter="get_locate_keys"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="prefer-inline"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_prefer_inline"
                getter="get_prefer_inline"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="CipherContext" c:type="CamelCipherContext"/>
      </field>
      <field name="priv">
        <type name="GpgContextPrivate" c:type="CamelGpgContextPrivate*"/>
      </field>
    </class>
    <record name="GpgContextClass"
            c:type="CamelGpgContextClass"
            glib:is-gtype-struct-for="GpgContext">
      <source-position filename="src/camel/camel-gpg-context.h" line="83"/>
      <field name="parent_class">
        <type name="CipherContextClass" c:type="CamelCipherContextClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="GpgContextPrivate"
            c:type="CamelGpgContextPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-gpg-context.h" line="71"/>
    </record>
    <record name="GpgKeyInfo"
            c:type="CamelGpgKeyInfo"
            opaque="1"
            version="3.50"
            glib:type-name="CamelGpgKeyInfo"
            glib:get-type="camel_gpg_key_info_get_type"
            c:symbol-prefix="gpg_key_info">
      <doc xml:space="preserve"
           filename="src/camel/camel-gpg-context.c"
           line="97">An opaque structure holding information about a user key.</doc>
      <source-position filename="src/camel/camel-gpg-context.h" line="51"/>
      <method name="copy"
              c:identifier="camel_gpg_key_info_copy"
              version="3.50">
        <doc xml:space="preserve"
             filename="src/camel/camel-gpg-context.c"
             line="114">Copies the @src to a new #CamelGpgKeyInfo structure.</doc>
        <source-position filename="src/camel/camel-gpg-context.h" line="58"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-gpg-context.c"
               line="120">a copy of the @src, or %NULL,
   when the @src is also %NULL</doc>
          <type name="GpgKeyInfo" c:type="CamelGpgKeyInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="116">a source #CamelGpgKeyInfo to make a copy of</doc>
            <type name="GpgKeyInfo" c:type="const CamelGpgKeyInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free"
              c:identifier="camel_gpg_key_info_free"
              version="3.50">
        <doc xml:space="preserve"
             filename="src/camel/camel-gpg-context.c"
             line="143">Frees the @info previously allocated by camel_gpg_context_get_public_key_info_sync(),
camel_gpg_context_get_key_data_info_sync() or camel_gpg_key_info_copy().</doc>
        <source-position filename="src/camel/camel-gpg-context.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="145">a #CamelGpgKeyInfo</doc>
            <type name="GpgKeyInfo" c:type="CamelGpgKeyInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_creation_date"
              c:identifier="camel_gpg_key_info_get_creation_date"
              version="3.50">
        <doc xml:space="preserve"
             filename="src/camel/camel-gpg-context.c"
             line="199">Gets the key creating date, as seconds since the Unix Epoch.</doc>
        <source-position filename="src/camel/camel-gpg-context.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-gpg-context.c"
               line="205">key creation date</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="201">a #CamelGpgKeyInfo</doc>
            <type name="GpgKeyInfo" c:type="const CamelGpgKeyInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fingerprint"
              c:identifier="camel_gpg_key_info_get_fingerprint"
              version="3.50">
        <doc xml:space="preserve"
             filename="src/camel/camel-gpg-context.c"
             line="181">Gets the key fingerprint.</doc>
        <source-position filename="src/camel/camel-gpg-context.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-gpg-context.c"
               line="187">key fingerprint</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="183">a #CamelGpgKeyInfo</doc>
            <type name="GpgKeyInfo" c:type="const CamelGpgKeyInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="camel_gpg_key_info_get_id"
              version="3.50">
        <doc xml:space="preserve"
             filename="src/camel/camel-gpg-context.c"
             line="163">Gets the key ID.</doc>
        <source-position filename="src/camel/camel-gpg-context.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-gpg-context.c"
               line="169">key ID</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="165">a #CamelGpgKeyInfo</doc>
            <type name="GpgKeyInfo" c:type="const CamelGpgKeyInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_trust"
              c:identifier="camel_gpg_key_info_get_trust"
              version="3.50">
        <doc xml:space="preserve"
             filename="src/camel/camel-gpg-context.c"
             line="217">Gets the key trust level, as one of #CamelGpgTrust.</doc>
        <source-position filename="src/camel/camel-gpg-context.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-gpg-context.c"
               line="223">key trust level</doc>
          <type name="GpgTrust" c:type="CamelGpgTrust"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="219">a #CamelGpgKeyInfo</doc>
            <type name="GpgKeyInfo" c:type="const CamelGpgKeyInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user_ids"
              c:identifier="camel_gpg_key_info_get_user_ids"
              version="3.50">
        <doc xml:space="preserve"
             filename="src/camel/camel-gpg-context.c"
             line="235">Gets the user IDs associated with the key.</doc>
        <source-position filename="src/camel/camel-gpg-context.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-gpg-context.c"
               line="241">key user IDs</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-gpg-context.c"
                 line="237">a #CamelGpgKeyInfo</doc>
            <type name="GpgKeyInfo" c:type="const CamelGpgKeyInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="GpgTrust"
                 version="3.50"
                 glib:type-name="CamelGpgTrust"
                 glib:get-type="camel_gpg_trust_get_type"
                 c:type="CamelGpgTrust">
      <doc xml:space="preserve"
           filename="src/camel/camel-enums.h"
           line="597">GPG key trust levels.</doc>
      <member name="none"
              value="0"
              c:identifier="CAMEL_GPG_TRUST_NONE"
              glib:nick="none"
              glib:name="CAMEL_GPG_TRUST_NONE">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="599">no trust set</doc>
      </member>
      <member name="unknown"
              value="1"
              c:identifier="CAMEL_GPG_TRUST_UNKNOWN"
              glib:nick="unknown"
              glib:name="CAMEL_GPG_TRUST_UNKNOWN">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="600">unknown trust level</doc>
      </member>
      <member name="never"
              value="2"
              c:identifier="CAMEL_GPG_TRUST_NEVER"
              glib:nick="never"
              glib:name="CAMEL_GPG_TRUST_NEVER">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="601">never trust the key</doc>
      </member>
      <member name="marginal"
              value="3"
              c:identifier="CAMEL_GPG_TRUST_MARGINAL"
              glib:nick="marginal"
              glib:name="CAMEL_GPG_TRUST_MARGINAL">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="602">marginally trust the key</doc>
      </member>
      <member name="full"
              value="4"
              c:identifier="CAMEL_GPG_TRUST_FULL"
              glib:nick="full"
              glib:name="CAMEL_GPG_TRUST_FULL">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="603">fully trust the key</doc>
      </member>
      <member name="ultimate"
              value="5"
              c:identifier="CAMEL_GPG_TRUST_ULTIMATE"
              glib:nick="ultimate"
              glib:name="CAMEL_GPG_TRUST_ULTIMATE">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="604">ultimately trust the key</doc>
      </member>
    </enumeration>
    <class name="HTMLParser"
           c:symbol-prefix="html_parser"
           c:type="CamelHTMLParser"
           parent="GObject.Object"
           glib:type-name="CamelHTMLParser"
           glib:get-type="camel_html_parser_get_type"
           glib:type-struct="HTMLParserClass">
      <source-position filename="src/camel/camel-html-parser.h" line="88"/>
      <constructor name="new" c:identifier="camel_html_parser_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-html-parser.c"
             line="92">Create a new CamelHTMLParser object.</doc>
        <source-position filename="src/camel/camel-html-parser.h" line="91"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-html-parser.c"
               line="97">A new #CamelHTMLParser object</doc>
          <type name="HTMLParser" c:type="CamelHTMLParser*"/>
        </return-value>
      </constructor>
      <method name="attr" c:identifier="camel_html_parser_attr">
        <source-position filename="src/camel/camel-html-parser.h" line="97"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="hp" transfer-ownership="none">
            <type name="HTMLParser" c:type="CamelHTMLParser*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="attr_list" c:identifier="camel_html_parser_attr_list">
        <doc xml:space="preserve"
             filename="src/camel/camel-html-parser.c"
             line="148">Provides parsed array of values and attributes. Both arrays are
owned by the @hp.</doc>
        <source-position filename="src/camel/camel-html-parser.h" line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-html-parser.c"
               line="156">a #GPtrArray of parsed attributes</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="hp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-html-parser.c"
                 line="150">a #CamelHTMLParser</doc>
            <type name="HTMLParser" c:type="CamelHTMLParser*"/>
          </instance-parameter>
          <parameter name="values"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-html-parser.c"
                 line="151">an output #GPtrArray with values, or %NULL</doc>
            <array name="GLib.PtrArray" c:type="const GPtrArray**">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="left" c:identifier="camel_html_parser_left">
        <source-position filename="src/camel/camel-html-parser.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="hp" transfer-ownership="none">
            <type name="HTMLParser" c:type="CamelHTMLParser*"/>
          </instance-parameter>
          <parameter name="lenp" transfer-ownership="none">
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_data" c:identifier="camel_html_parser_set_data">
        <source-position filename="src/camel/camel-html-parser.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hp" transfer-ownership="none">
            <type name="HTMLParser" c:type="CamelHTMLParser*"/>
          </instance-parameter>
          <parameter name="start" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="last" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="step" c:identifier="camel_html_parser_step">
        <source-position filename="src/camel/camel-html-parser.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="HTMLParserState" c:type="CamelHTMLParserState"/>
        </return-value>
        <parameters>
          <instance-parameter name="hp" transfer-ownership="none">
            <type name="HTMLParser" c:type="CamelHTMLParser*"/>
          </instance-parameter>
          <parameter name="datap" transfer-ownership="none">
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
          <parameter name="lenp" transfer-ownership="none">
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="tag" c:identifier="camel_html_parser_tag">
        <source-position filename="src/camel/camel-html-parser.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="hp" transfer-ownership="none">
            <type name="HTMLParser" c:type="CamelHTMLParser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="HTMLParserPrivate" c:type="CamelHTMLParserPrivate*"/>
      </field>
    </class>
    <record name="HTMLParserClass"
            c:type="CamelHTMLParserClass"
            glib:is-gtype-struct-for="HTMLParser">
      <source-position filename="src/camel/camel-html-parser.h" line="88"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="HTMLParserPrivate"
            c:type="CamelHTMLParserPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-html-parser.h" line="58"/>
    </record>
    <enumeration name="HTMLParserState" c:type="CamelHTMLParserState">
      <source-position filename="src/camel/camel-html-parser.h" line="76"/>
      <member name="data" value="0" c:identifier="CAMEL_HTML_PARSER_DATA">
      </member>
      <member name="ent" value="1" c:identifier="CAMEL_HTML_PARSER_ENT">
      </member>
      <member name="element"
              value="2"
              c:identifier="CAMEL_HTML_PARSER_ELEMENT">
      </member>
      <member name="tag" value="3" c:identifier="CAMEL_HTML_PARSER_TAG">
      </member>
      <member name="dtdent" value="4" c:identifier="CAMEL_HTML_PARSER_DTDENT">
      </member>
      <member name="comment0"
              value="5"
              c:identifier="CAMEL_HTML_PARSER_COMMENT0">
      </member>
      <member name="comment"
              value="6"
              c:identifier="CAMEL_HTML_PARSER_COMMENT">
      </member>
      <member name="attr0" value="7" c:identifier="CAMEL_HTML_PARSER_ATTR0">
      </member>
      <member name="attr" value="8" c:identifier="CAMEL_HTML_PARSER_ATTR">
      </member>
      <member name="val0" value="9" c:identifier="CAMEL_HTML_PARSER_VAL0">
      </member>
      <member name="val" value="10" c:identifier="CAMEL_HTML_PARSER_VAL">
      </member>
      <member name="val_ent"
              value="11"
              c:identifier="CAMEL_HTML_PARSER_VAL_ENT">
      </member>
      <member name="eod" value="12" c:identifier="CAMEL_HTML_PARSER_EOD">
      </member>
      <member name="eof" value="13" c:identifier="CAMEL_HTML_PARSER_EOF">
      </member>
    </enumeration>
    <function-macro name="HTML_PARSER"
                    c:identifier="CAMEL_HTML_PARSER"
                    introspectable="0">
      <source-position filename="src/camel/camel-html-parser.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="HTML_PARSER_CLASS"
                    c:identifier="CAMEL_HTML_PARSER_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-html-parser.h" line="40"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="HTML_PARSER_GET_CLASS"
                    c:identifier="CAMEL_HTML_PARSER_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-html-parser.h" line="49"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <record name="HeaderAddress"
            c:type="CamelHeaderAddress"
            glib:type-name="CamelHeaderAddress"
            glib:get-type="camel_header_address_get_type"
            c:symbol-prefix="header_address">
      <source-position filename="src/camel/camel-mime-utils.h" line="86"/>
      <field name="next" writable="1">
        <type name="gpointer" c:type="_camel_header_address*"/>
      </field>
      <field name="type" writable="1">
        <type name="HeaderAddressType" c:type="CamelHeaderAddressType"/>
      </field>
      <field name="name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <union name="v" c:type="v">
        <source-position filename="src/camel/camel-mime-utils.h" line="84"/>
        <field name="addr" writable="1">
          <type name="utf8" c:type="gchar*"/>
        </field>
        <field name="members" writable="1">
          <type name="gpointer" c:type="_camel_header_address*"/>
        </field>
      </union>
      <field name="refcount" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <constructor name="new" c:identifier="camel_header_address_new">
        <source-position filename="src/camel/camel-mime-utils.h" line="96"/>
        <return-value transfer-ownership="full">
          <type name="HeaderAddress" c:type="CamelHeaderAddress*"/>
        </return-value>
      </constructor>
      <constructor name="new_group"
                   c:identifier="camel_header_address_new_group">
        <source-position filename="src/camel/camel-mime-utils.h" line="98"/>
        <return-value transfer-ownership="full">
          <type name="HeaderAddress" c:type="CamelHeaderAddress*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_name"
                   c:identifier="camel_header_address_new_name">
        <source-position filename="src/camel/camel-mime-utils.h" line="97"/>
        <return-value transfer-ownership="full">
          <type name="HeaderAddress" c:type="CamelHeaderAddress*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="addr" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_member" c:identifier="camel_header_address_add_member">
        <source-position filename="src/camel/camel-mime-utils.h" line="104"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="addrlist" transfer-ownership="none">
            <type name="HeaderAddress" c:type="CamelHeaderAddress*"/>
          </instance-parameter>
          <parameter name="member" transfer-ownership="none">
            <type name="HeaderAddress" c:type="CamelHeaderAddress*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="camel_header_address_ref">
        <source-position filename="src/camel/camel-mime-utils.h" line="99"/>
        <return-value transfer-ownership="full">
          <type name="HeaderAddress" c:type="CamelHeaderAddress*"/>
        </return-value>
        <parameters>
          <instance-parameter name="addrlist" transfer-ownership="none">
            <type name="HeaderAddress" c:type="CamelHeaderAddress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_addr" c:identifier="camel_header_address_set_addr">
        <source-position filename="src/camel/camel-mime-utils.h" line="102"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="addrlist" transfer-ownership="none">
            <type name="HeaderAddress" c:type="CamelHeaderAddress*"/>
          </instance-parameter>
          <parameter name="addr" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_members"
              c:identifier="camel_header_address_set_members">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="4998">TODO: Document me.</doc>
        <source-position filename="src/camel/camel-mime-utils.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="addrlist" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-utils.c"
                 line="5000">a #CamelHeaderAddress object</doc>
            <type name="HeaderAddress" c:type="CamelHeaderAddress*"/>
          </instance-parameter>
          <parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-utils.c"
                 line="5001">a NULL-terminated list of #CamelHeaderAddress</doc>
            <array c:type="CamelHeaderAddress*">
              <type name="HeaderAddress" c:type="CamelHeaderAddress"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_name" c:identifier="camel_header_address_set_name">
        <source-position filename="src/camel/camel-mime-utils.h" line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="addrlist" transfer-ownership="none">
            <type name="HeaderAddress" c:type="CamelHeaderAddress*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="camel_header_address_unref">
        <source-position filename="src/camel/camel-mime-utils.h" line="100"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="addrlist" transfer-ownership="none">
            <type name="HeaderAddress" c:type="CamelHeaderAddress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="decode" c:identifier="camel_header_address_decode">
        <source-position filename="src/camel/camel-mime-utils.h" line="109"/>
        <return-value transfer-ownership="full">
          <type name="HeaderAddress" c:type="CamelHeaderAddress*"/>
        </return-value>
        <parameters>
          <parameter name="in" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="charset" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="fold" c:identifier="camel_header_address_fold">
        <source-position filename="src/camel/camel-mime-utils.h" line="153"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="in" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="headerlen" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </function>
      <function name="list_append"
                c:identifier="camel_header_address_list_append">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="5057">TODO: Document me.</doc>
        <source-position filename="src/camel/camel-mime-utils.h" line="106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="addrlistp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-utils.c"
                 line="5059">a NULL-terminated list of #CamelHeaderAddress objects</doc>
            <array c:type="CamelHeaderAddress**">
              <type name="HeaderAddress" c:type="CamelHeaderAddress*"/>
            </array>
          </parameter>
          <parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-utils.c"
                 line="5060">the #CamelHeaderAddress to add</doc>
            <type name="HeaderAddress" c:type="CamelHeaderAddress*"/>
          </parameter>
        </parameters>
      </function>
      <function name="list_append_list"
                c:identifier="camel_header_address_list_append_list">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="5036">TODO: Document me.</doc>
        <source-position filename="src/camel/camel-mime-utils.h" line="105"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="addrlistp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-utils.c"
                 line="5038">a NULL-terminated list of #CamelHeaderAddress objects</doc>
            <array c:type="CamelHeaderAddress**">
              <type name="HeaderAddress" c:type="CamelHeaderAddress*"/>
            </array>
          </parameter>
          <parameter name="addrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-utils.c"
                 line="5039">a NULL-terminated list of #CamelHeaderAddress to add</doc>
            <array c:type="CamelHeaderAddress**">
              <type name="HeaderAddress" c:type="CamelHeaderAddress*"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="list_clear"
                c:identifier="camel_header_address_list_clear">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="5075">TODO: Document me.</doc>
        <source-position filename="src/camel/camel-mime-utils.h" line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="addrlistp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-utils.c"
                 line="5077">a NULL-terminated list of #CamelHeaderAddress objects</doc>
            <array c:type="CamelHeaderAddress**">
              <type name="HeaderAddress" c:type="CamelHeaderAddress*"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="list_encode"
                c:identifier="camel_header_address_list_encode">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="5174">TODO: Document me.</doc>
        <source-position filename="src/camel/camel-mime-utils.h" line="112"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="addrlist" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-utils.c"
                 line="5176">a NULL-terminated list of #CamelHeaderAddress objects</doc>
            <array c:type="CamelHeaderAddress*">
              <type name="HeaderAddress" c:type="CamelHeaderAddress"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="list_format"
                c:identifier="camel_header_address_list_format">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="5194">TODO: Document me.</doc>
        <source-position filename="src/camel/camel-mime-utils.h" line="114"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="addrlist" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-utils.c"
                 line="5196">a NULL-terminated list of #CamelHeaderAddress objects</doc>
            <array c:type="CamelHeaderAddress*">
              <type name="HeaderAddress" c:type="CamelHeaderAddress"/>
            </array>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="HeaderAddressType" c:type="CamelHeaderAddressType">
      <source-position filename="src/camel/camel-mime-utils.h" line="74"/>
      <member name="none" value="0" c:identifier="CAMEL_HEADER_ADDRESS_NONE">
      </member>
      <member name="name" value="1" c:identifier="CAMEL_HEADER_ADDRESS_NAME">
      </member>
      <member name="group" value="2" c:identifier="CAMEL_HEADER_ADDRESS_GROUP">
      </member>
    </enumeration>
    <record name="HeaderParam" c:type="CamelHeaderParam">
      <source-position filename="src/camel/camel-mime-utils.h" line="54"/>
      <field name="next" writable="1">
        <type name="gpointer" c:type="_camel_header_param*"/>
      </field>
      <field name="name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="value" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <function name="list_decode"
                c:identifier="camel_header_param_list_decode">
        <source-position filename="src/camel/camel-mime-utils.h" line="117"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="3598">Decode list of parameters.
   Free with camel_header_param_list_free() when done with it.</doc>
          <type name="gpointer" c:type="_camel_header_param*"/>
        </return-value>
        <parameters>
          <parameter name="in"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-utils.c"
                 line="3596">a header param value to decode</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="list_format"
                c:identifier="camel_header_param_list_format">
        <source-position filename="src/camel/camel-mime-utils.h" line="121"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="params"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="_camel_header_param*"/>
          </parameter>
        </parameters>
      </function>
      <function name="list_format_append"
                c:identifier="camel_header_param_list_format_append">
        <source-position filename="src/camel/camel-mime-utils.h" line="120"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="out" transfer-ownership="none">
            <type name="GLib.String" c:type="GString*"/>
          </parameter>
          <parameter name="params"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="_camel_header_param*"/>
          </parameter>
        </parameters>
      </function>
      <function name="list_free" c:identifier="camel_header_param_list_free">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="2550">Free the list of params.</doc>
        <source-position filename="src/camel/camel-mime-utils.h" line="122"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="params"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-utils.c"
                 line="2552">a list of params</doc>
            <type name="gpointer" c:type="_camel_header_param*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <function-macro name="INDEX" c:identifier="CAMEL_INDEX" introspectable="0">
      <source-position filename="src/camel/camel-index.h" line="30"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="INDEX_CLASS"
                    c:identifier="CAMEL_INDEX_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-index.h" line="33"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="INDEX_CURSOR"
                    c:identifier="CAMEL_INDEX_CURSOR"
                    introspectable="0">
      <source-position filename="src/camel/camel-index.h" line="64"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="INDEX_CURSOR_CLASS"
                    c:identifier="CAMEL_INDEX_CURSOR_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-index.h" line="67"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="INDEX_CURSOR_GET_CLASS"
                    c:identifier="CAMEL_INDEX_CURSOR_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-index.h" line="76"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="INDEX_DELETED" value="1" c:type="CAMEL_INDEX_DELETED">
      <source-position filename="src/camel/camel-index.h" line="184"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="INDEX_GET_CLASS"
                    c:identifier="CAMEL_INDEX_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-index.h" line="42"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="INDEX_NAME"
                    c:identifier="CAMEL_INDEX_NAME"
                    introspectable="0">
      <source-position filename="src/camel/camel-index.h" line="47"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="INDEX_NAME_CLASS"
                    c:identifier="CAMEL_INDEX_NAME_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-index.h" line="50"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="INDEX_NAME_GET_CLASS"
                    c:identifier="CAMEL_INDEX_NAME_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-index.h" line="59"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="INTERNET_ADDRESS"
                    c:identifier="CAMEL_INTERNET_ADDRESS"
                    introspectable="0">
      <source-position filename="src/camel/camel-internet-address.h"
                       line="31"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="INTERNET_ADDRESS_CLASS"
                    c:identifier="CAMEL_INTERNET_ADDRESS_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-internet-address.h"
                       line="34"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="INTERNET_ADDRESS_GET_CLASS"
                    c:identifier="CAMEL_INTERNET_ADDRESS_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-internet-address.h"
                       line="43"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ADDRESS"
                    c:identifier="CAMEL_IS_ADDRESS"
                    introspectable="0">
      <source-position filename="src/camel/camel-address.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ADDRESS_CLASS"
                    c:identifier="CAMEL_IS_ADDRESS_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-address.h" line="40"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BLOCK_FILE"
                    c:identifier="CAMEL_IS_BLOCK_FILE"
                    introspectable="0">
      <source-position filename="src/camel/camel-block-file.h" line="39"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BLOCK_FILE_CLASS"
                    c:identifier="CAMEL_IS_BLOCK_FILE_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-block-file.h" line="42"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CERTDB"
                    c:identifier="CAMEL_IS_CERTDB"
                    introspectable="0">
      <source-position filename="src/camel/camel-certdb.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CERTDB_CLASS"
                    c:identifier="CAMEL_IS_CERTDB_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-certdb.h" line="41"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CIPHER_CONTEXT"
                    c:identifier="CAMEL_IS_CIPHER_CONTEXT"
                    introspectable="0">
      <source-position filename="src/camel/camel-cipher-context.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CIPHER_CONTEXT_CLASS"
                    c:identifier="CAMEL_IS_CIPHER_CONTEXT_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-cipher-context.h" line="41"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DATA_CACHE"
                    c:identifier="CAMEL_IS_DATA_CACHE"
                    introspectable="0">
      <source-position filename="src/camel/camel-data-cache.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DATA_CACHE_CLASS"
                    c:identifier="CAMEL_IS_DATA_CACHE_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-data-cache.h" line="41"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DATA_WRAPPER"
                    c:identifier="CAMEL_IS_DATA_WRAPPER"
                    introspectable="0">
      <source-position filename="src/camel/camel-data-wrapper.h" line="42"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DATA_WRAPPER_CLASS"
                    c:identifier="CAMEL_IS_DATA_WRAPPER_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-data-wrapper.h" line="45"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DB" c:identifier="CAMEL_IS_DB" introspectable="0">
      <source-position filename="src/camel/camel-db.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DB_CLASS"
                    c:identifier="CAMEL_IS_DB_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-db.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILTER_DRIVER"
                    c:identifier="CAMEL_IS_FILTER_DRIVER"
                    introspectable="0">
      <source-position filename="src/camel/camel-filter-driver.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILTER_DRIVER_CLASS"
                    c:identifier="CAMEL_IS_FILTER_DRIVER_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-filter-driver.h" line="41"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILTER_INPUT_STREAM"
                    c:identifier="CAMEL_IS_FILTER_INPUT_STREAM"
                    introspectable="0">
      <source-position filename="src/camel/camel-filter-input-stream.h"
                       line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILTER_INPUT_STREAM_CLASS"
                    c:identifier="CAMEL_IS_FILTER_INPUT_STREAM_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-filter-input-stream.h"
                       line="39"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILTER_OUTPUT_STREAM"
                    c:identifier="CAMEL_IS_FILTER_OUTPUT_STREAM"
                    introspectable="0">
      <source-position filename="src/camel/camel-filter-output-stream.h"
                       line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILTER_OUTPUT_STREAM_CLASS"
                    c:identifier="CAMEL_IS_FILTER_OUTPUT_STREAM_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-filter-output-stream.h"
                       line="39"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FOLDER"
                    c:identifier="CAMEL_IS_FOLDER"
                    introspectable="0">
      <source-position filename="src/camel/camel-folder.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FOLDER_CLASS"
                    c:identifier="CAMEL_IS_FOLDER_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-folder.h" line="44"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FOLDER_INFO"
                    c:identifier="CAMEL_IS_FOLDER_INFO"
                    introspectable="0">
      <source-position filename="src/camel/camel-store.h" line="57"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FOLDER_SEARCH"
                    c:identifier="CAMEL_IS_FOLDER_SEARCH"
                    introspectable="0">
      <source-position filename="src/camel/camel-folder-search.h" line="39"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FOLDER_SEARCH_CLASS"
                    c:identifier="CAMEL_IS_FOLDER_SEARCH_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-folder-search.h" line="42"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FOLDER_SUMMARY"
                    c:identifier="CAMEL_IS_FOLDER_SUMMARY"
                    introspectable="0">
      <source-position filename="src/camel/camel-folder-summary.h" line="43"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FOLDER_SUMMARY_CLASS"
                    c:identifier="CAMEL_IS_FOLDER_SUMMARY_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-folder-summary.h" line="46"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GPG_CONTEXT"
                    c:identifier="CAMEL_IS_GPG_CONTEXT"
                    introspectable="0">
      <source-position filename="src/camel/camel-gpg-context.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GPG_CONTEXT_CLASS"
                    c:identifier="CAMEL_IS_GPG_CONTEXT_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-gpg-context.h" line="41"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_HTML_PARSER"
                    c:identifier="CAMEL_IS_HTML_PARSER"
                    introspectable="0">
      <source-position filename="src/camel/camel-html-parser.h" line="43"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_HTML_PARSER_CLASS"
                    c:identifier="CAMEL_IS_HTML_PARSER_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-html-parser.h" line="46"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_INDEX"
                    c:identifier="CAMEL_IS_INDEX"
                    introspectable="0">
      <source-position filename="src/camel/camel-index.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_INDEX_CLASS"
                    c:identifier="CAMEL_IS_INDEX_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-index.h" line="39"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_INDEX_CURSOR"
                    c:identifier="CAMEL_IS_INDEX_CURSOR"
                    introspectable="0">
      <source-position filename="src/camel/camel-index.h" line="70"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_INDEX_CURSOR_CLASS"
                    c:identifier="CAMEL_IS_INDEX_CURSOR_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-index.h" line="73"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_INDEX_NAME"
                    c:identifier="CAMEL_IS_INDEX_NAME"
                    introspectable="0">
      <source-position filename="src/camel/camel-index.h" line="53"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_INDEX_NAME_CLASS"
                    c:identifier="CAMEL_IS_INDEX_NAME_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-index.h" line="56"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_INTERNET_ADDRESS"
                    c:identifier="CAMEL_IS_INTERNET_ADDRESS"
                    introspectable="0">
      <source-position filename="src/camel/camel-internet-address.h"
                       line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_INTERNET_ADDRESS_CLASS"
                    c:identifier="CAMEL_IS_INTERNET_ADDRESS_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-internet-address.h"
                       line="40"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_JUNK_FILTER"
                    c:identifier="CAMEL_IS_JUNK_FILTER"
                    introspectable="0">
      <source-position filename="src/camel/camel-junk-filter.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_JUNK_FILTER_INTERFACE"
                    c:identifier="CAMEL_IS_JUNK_FILTER_INTERFACE"
                    introspectable="0">
      <source-position filename="src/camel/camel-junk-filter.h" line="39"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_KEY_FILE"
                    c:identifier="CAMEL_IS_KEY_FILE"
                    introspectable="0">
      <source-position filename="src/camel/camel-block-file.h" line="56"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_KEY_FILE_CLASS"
                    c:identifier="CAMEL_IS_KEY_FILE_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-block-file.h" line="59"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_KEY_TABLE"
                    c:identifier="CAMEL_IS_KEY_TABLE"
                    introspectable="0">
      <source-position filename="src/camel/camel-partition-table.h" line="53"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_KEY_TABLE_CLASS"
                    c:identifier="CAMEL_IS_KEY_TABLE_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-partition-table.h" line="56"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOCAL_SETTINGS"
                    c:identifier="CAMEL_IS_LOCAL_SETTINGS"
                    introspectable="0">
      <source-position filename="src/camel/camel-local-settings.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOCAL_SETTINGS_CLASS"
                    c:identifier="CAMEL_IS_LOCAL_SETTINGS_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-local-settings.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MEDIUM"
                    c:identifier="CAMEL_IS_MEDIUM"
                    introspectable="0">
      <source-position filename="src/camel/camel-medium.h" line="40"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MEDIUM_CLASS"
                    c:identifier="CAMEL_IS_MEDIUM_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-medium.h" line="43"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MESSAGE_INFO"
                    c:identifier="CAMEL_IS_MESSAGE_INFO"
                    introspectable="0">
      <source-position filename="src/camel/camel-message-info.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MESSAGE_INFO_BASE"
                    c:identifier="CAMEL_IS_MESSAGE_INFO_BASE"
                    introspectable="0">
      <source-position filename="src/camel/camel-message-info-base.h"
                       line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MESSAGE_INFO_BASE_CLASS"
                    c:identifier="CAMEL_IS_MESSAGE_INFO_BASE_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-message-info-base.h"
                       line="40"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MESSAGE_INFO_CLASS"
                    c:identifier="CAMEL_IS_MESSAGE_INFO_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-message-info.h" line="41"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER"
                    c:identifier="CAMEL_IS_MIME_FILTER"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_BASIC"
                    c:identifier="CAMEL_IS_MIME_FILTER_BASIC"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-basic.h"
                       line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_BASIC_CLASS"
                    c:identifier="CAMEL_IS_MIME_FILTER_BASIC_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-basic.h"
                       line="41"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_BESTENC"
                    c:identifier="CAMEL_IS_MIME_FILTER_BESTENC"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-bestenc.h"
                       line="39"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_BESTENC_CLASS"
                    c:identifier="CAMEL_IS_MIME_FILTER_BESTENC_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-bestenc.h"
                       line="42"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_CANON"
                    c:identifier="CAMEL_IS_MIME_FILTER_CANON"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-canon.h"
                       line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_CANON_CLASS"
                    c:identifier="CAMEL_IS_MIME_FILTER_CANON_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-canon.h"
                       line="41"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_CHARSET"
                    c:identifier="CAMEL_IS_MIME_FILTER_CHARSET"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-charset.h"
                       line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_CHARSET_CLASS"
                    c:identifier="CAMEL_IS_MIME_FILTER_CHARSET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-charset.h"
                       line="41"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_CLASS"
                    c:identifier="CAMEL_IS_MIME_FILTER_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter.h" line="44"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_CRLF"
                    c:identifier="CAMEL_IS_MIME_FILTER_CRLF"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-crlf.h"
                       line="39"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_CRLF_CLASS"
                    c:identifier="CAMEL_IS_MIME_FILTER_CRLF_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-crlf.h"
                       line="42"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_ENRICHED"
                    c:identifier="CAMEL_IS_MIME_FILTER_ENRICHED"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-enriched.h"
                       line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_ENRICHED_CLASS"
                    c:identifier="CAMEL_IS_MIME_FILTER_ENRICHED_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-enriched.h"
                       line="40"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_FROM"
                    c:identifier="CAMEL_IS_MIME_FILTER_FROM"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-from.h"
                       line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_FROM_CLASS"
                    c:identifier="CAMEL_IS_MIME_FILTER_FROM_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-from.h"
                       line="40"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_GZIP"
                    c:identifier="CAMEL_IS_MIME_FILTER_GZIP"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-gzip.h"
                       line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_GZIP_CLASS"
                    c:identifier="CAMEL_IS_MIME_FILTER_GZIP_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-gzip.h"
                       line="41"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_HTML"
                    c:identifier="CAMEL_IS_MIME_FILTER_HTML"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-html.h"
                       line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_HTML_CLASS"
                    c:identifier="CAMEL_IS_MIME_FILTER_HTML_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-html.h"
                       line="40"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_INDEX"
                    c:identifier="CAMEL_IS_MIME_FILTER_INDEX"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-index.h"
                       line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_INDEX_CLASS"
                    c:identifier="CAMEL_IS_MIME_FILTER_INDEX_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-index.h"
                       line="41"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_LINEWRAP"
                    c:identifier="CAMEL_IS_MIME_FILTER_LINEWRAP"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-linewrap.h"
                       line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_LINEWRAP_CLASS"
                    c:identifier="CAMEL_IS_MIME_FILTER_LINEWRAP_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-linewrap.h"
                       line="40"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_PGP"
                    c:identifier="CAMEL_IS_MIME_FILTER_PGP"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-pgp.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_PGP_CLASS"
                    c:identifier="CAMEL_IS_MIME_FILTER_PGP_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-pgp.h" line="40"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_PROGRESS"
                    c:identifier="CAMEL_IS_MIME_FILTER_PROGRESS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-progress.h"
                       line="39"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_PROGRESS_CLASS"
                    c:identifier="CAMEL_IS_MIME_FILTER_PROGRESS_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-progress.h"
                       line="42"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_TOHTML"
                    c:identifier="CAMEL_IS_MIME_FILTER_TOHTML"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-tohtml.h"
                       line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_TOHTML_CLASS"
                    c:identifier="CAMEL_IS_MIME_FILTER_TOHTML_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-tohtml.h"
                       line="41"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_WINDOWS"
                    c:identifier="CAMEL_IS_MIME_FILTER_WINDOWS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-windows.h"
                       line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_WINDOWS_CLASS"
                    c:identifier="CAMEL_IS_MIME_FILTER_WINDOWS_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-windows.h"
                       line="40"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_YENC"
                    c:identifier="CAMEL_IS_MIME_FILTER_YENC"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-yenc.h"
                       line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_FILTER_YENC_CLASS"
                    c:identifier="CAMEL_IS_MIME_FILTER_YENC_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-yenc.h"
                       line="41"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_MESSAGE"
                    c:identifier="CAMEL_IS_MIME_MESSAGE"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-message.h" line="42"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_MESSAGE_CLASS"
                    c:identifier="CAMEL_IS_MIME_MESSAGE_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-message.h" line="45"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_PARSER"
                    c:identifier="CAMEL_IS_MIME_PARSER"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-parser.h" line="40"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_PARSER_CLASS"
                    c:identifier="CAMEL_IS_MIME_PARSER_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-parser.h" line="43"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_PART"
                    c:identifier="CAMEL_IS_MIME_PART"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-part.h" line="42"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MIME_PART_CLASS"
                    c:identifier="CAMEL_IS_MIME_PART_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-part.h" line="45"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MULTIPART"
                    c:identifier="CAMEL_IS_MULTIPART"
                    introspectable="0">
      <source-position filename="src/camel/camel-multipart.h" line="40"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MULTIPART_CLASS"
                    c:identifier="CAMEL_IS_MULTIPART_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-multipart.h" line="43"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MULTIPART_ENCRYPTED"
                    c:identifier="CAMEL_IS_MULTIPART_ENCRYPTED"
                    introspectable="0">
      <source-position filename="src/camel/camel-multipart-encrypted.h"
                       line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MULTIPART_ENCRYPTED_CLASS"
                    c:identifier="CAMEL_IS_MULTIPART_ENCRYPTED_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-multipart-encrypted.h"
                       line="40"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MULTIPART_SIGNED"
                    c:identifier="CAMEL_IS_MULTIPART_SIGNED"
                    introspectable="0">
      <source-position filename="src/camel/camel-multipart-signed.h"
                       line="42"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MULTIPART_SIGNED_CLASS"
                    c:identifier="CAMEL_IS_MULTIPART_SIGNED_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-multipart-signed.h"
                       line="45"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NETWORK_SERVICE"
                    c:identifier="CAMEL_IS_NETWORK_SERVICE"
                    introspectable="0">
      <source-position filename="src/camel/camel-network-service.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NETWORK_SERVICE_INTERFACE"
                    c:identifier="CAMEL_IS_NETWORK_SERVICE_INTERFACE"
                    introspectable="0">
      <source-position filename="src/camel/camel-network-service.h" line="40"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NETWORK_SETTINGS"
                    c:identifier="CAMEL_IS_NETWORK_SETTINGS"
                    introspectable="0">
      <source-position filename="src/camel/camel-network-settings.h"
                       line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NETWORK_SETTINGS_INTERFACE"
                    c:identifier="CAMEL_IS_NETWORK_SETTINGS_INTERFACE"
                    introspectable="0">
      <source-position filename="src/camel/camel-network-settings.h"
                       line="39"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NNTP_ADDRESS"
                    c:identifier="CAMEL_IS_NNTP_ADDRESS"
                    introspectable="0">
      <source-position filename="src/camel/camel-nntp-address.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NNTP_ADDRESS_CLASS"
                    c:identifier="CAMEL_IS_NNTP_ADDRESS_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-nntp-address.h" line="40"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NULL_OUTPUT_STREAM"
                    c:identifier="CAMEL_IS_NULL_OUTPUT_STREAM"
                    introspectable="0">
      <source-position filename="src/camel/camel-null-output-stream.h"
                       line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NULL_OUTPUT_STREAM_CLASS"
                    c:identifier="CAMEL_IS_NULL_OUTPUT_STREAM_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-null-output-stream.h"
                       line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT"
                    c:identifier="CAMEL_IS_OBJECT"
                    introspectable="0">
      <source-position filename="src/camel/camel-object.h" line="42"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT_CLASS"
                    c:identifier="CAMEL_IS_OBJECT_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-object.h" line="45"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OFFLINE_FOLDER"
                    c:identifier="CAMEL_IS_OFFLINE_FOLDER"
                    introspectable="0">
      <source-position filename="src/camel/camel-offline-folder.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OFFLINE_FOLDER_CLASS"
                    c:identifier="CAMEL_IS_OFFLINE_FOLDER_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-offline-folder.h" line="41"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OFFLINE_SETTINGS"
                    c:identifier="CAMEL_IS_OFFLINE_SETTINGS"
                    introspectable="0">
      <source-position filename="src/camel/camel-offline-settings.h"
                       line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OFFLINE_SETTINGS_CLASS"
                    c:identifier="CAMEL_IS_OFFLINE_SETTINGS_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-offline-settings.h"
                       line="39"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OFFLINE_STORE"
                    c:identifier="CAMEL_IS_OFFLINE_STORE"
                    introspectable="0">
      <source-position filename="src/camel/camel-offline-store.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OFFLINE_STORE_CLASS"
                    c:identifier="CAMEL_IS_OFFLINE_STORE_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-offline-store.h" line="40"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OPERATION"
                    c:identifier="CAMEL_IS_OPERATION"
                    introspectable="0">
      <source-position filename="src/camel/camel-operation.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OPERATION_CLASS"
                    c:identifier="CAMEL_IS_OPERATION_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-operation.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARTITION_TABLE"
                    c:identifier="CAMEL_IS_PARTITION_TABLE"
                    introspectable="0">
      <source-position filename="src/camel/camel-partition-table.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARTITION_TABLE_CLASS"
                    c:identifier="CAMEL_IS_PARTITION_TABLE_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-partition-table.h" line="39"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SASL"
                    c:identifier="CAMEL_IS_SASL"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SASL_ANONYMOUS"
                    c:identifier="CAMEL_IS_SASL_ANONYMOUS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-anonymous.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SASL_ANONYMOUS_CLASS"
                    c:identifier="CAMEL_IS_SASL_ANONYMOUS_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-anonymous.h" line="41"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SASL_CLASS"
                    c:identifier="CAMEL_IS_SASL_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl.h" line="40"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SASL_CRAM_MD5"
                    c:identifier="CAMEL_IS_SASL_CRAM_MD5"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-cram-md5.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SASL_CRAM_MD5_CLASS"
                    c:identifier="CAMEL_IS_SASL_CRAM_MD5_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-cram-md5.h" line="40"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SASL_DIGEST_MD5"
                    c:identifier="CAMEL_IS_SASL_DIGEST_MD5"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-digest-md5.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SASL_DIGEST_MD5_CLASS"
                    c:identifier="CAMEL_IS_SASL_DIGEST_MD5_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-digest-md5.h" line="41"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SASL_GSSAPI"
                    c:identifier="CAMEL_IS_SASL_GSSAPI"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-gssapi.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SASL_GSSAPI_CLASS"
                    c:identifier="CAMEL_IS_SASL_GSSAPI_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-gssapi.h" line="41"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SASL_LOGIN"
                    c:identifier="CAMEL_IS_SASL_LOGIN"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-login.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SASL_LOGIN_CLASS"
                    c:identifier="CAMEL_IS_SASL_LOGIN_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-login.h" line="40"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SASL_NTLM"
                    c:identifier="CAMEL_IS_SASL_NTLM"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-ntlm.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SASL_NTLM_CLASS"
                    c:identifier="CAMEL_IS_SASL_NTLM_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-ntlm.h" line="39"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SASL_PLAIN"
                    c:identifier="CAMEL_IS_SASL_PLAIN"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-plain.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SASL_PLAIN_CLASS"
                    c:identifier="CAMEL_IS_SASL_PLAIN_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-plain.h" line="40"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SASL_POPB4SMTP"
                    c:identifier="CAMEL_IS_SASL_POPB4SMTP"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-popb4smtp.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SASL_POPB4SMTP_CLASS"
                    c:identifier="CAMEL_IS_SASL_POPB4SMTP_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-popb4smtp.h" line="40"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SASL_XOAUTH2"
                    c:identifier="CAMEL_IS_SASL_XOAUTH2"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-xoauth2.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SASL_XOAUTH2_CLASS"
                    c:identifier="CAMEL_IS_SASL_XOAUTH2_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-xoauth2.h" line="36"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SASL_XOAUTH2_GOOGLE"
                    c:identifier="CAMEL_IS_SASL_XOAUTH2_GOOGLE"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-xoauth2-google.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SASL_XOAUTH2_GOOGLE_CLASS"
                    c:identifier="CAMEL_IS_SASL_XOAUTH2_GOOGLE_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-xoauth2-google.h"
                       line="36"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SASL_XOAUTH2_OUTLOOK"
                    c:identifier="CAMEL_IS_SASL_XOAUTH2_OUTLOOK"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-xoauth2-outlook.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SASL_XOAUTH2_OUTLOOK_CLASS"
                    c:identifier="CAMEL_IS_SASL_XOAUTH2_OUTLOOK_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-xoauth2-outlook.h"
                       line="36"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SASL_XOAUTH2_YAHOO"
                    c:identifier="CAMEL_IS_SASL_XOAUTH2_YAHOO"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-xoauth2-yahoo.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SASL_XOAUTH2_YAHOO_CLASS"
                    c:identifier="CAMEL_IS_SASL_XOAUTH2_YAHOO_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-xoauth2-yahoo.h"
                       line="36"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SERVICE"
                    c:identifier="CAMEL_IS_SERVICE"
                    introspectable="0">
      <source-position filename="src/camel/camel-service.h" line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SERVICE_CLASS"
                    c:identifier="CAMEL_IS_SERVICE_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-service.h" line="47"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SESSION"
                    c:identifier="CAMEL_IS_SESSION"
                    introspectable="0">
      <source-position filename="src/camel/camel-session.h" line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SESSION_CLASS"
                    c:identifier="CAMEL_IS_SESSION_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-session.h" line="47"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SETTINGS"
                    c:identifier="CAMEL_IS_SETTINGS"
                    introspectable="0">
      <source-position filename="src/camel/camel-settings.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SETTINGS_CLASS"
                    c:identifier="CAMEL_IS_SETTINGS_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-settings.h" line="39"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SEXP"
                    c:identifier="CAMEL_IS_SEXP"
                    introspectable="0">
      <source-position filename="src/camel/camel-sexp.h" line="39"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SEXP_CLASS"
                    c:identifier="CAMEL_IS_SEXP_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sexp.h" line="42"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SMIME_CONTEXT"
                    c:identifier="CAMEL_IS_SMIME_CONTEXT"
                    introspectable="0">
      <source-position filename="src/camel/camel-smime-context.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SMIME_CONTEXT_CLASS"
                    c:identifier="CAMEL_IS_SMIME_CONTEXT_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-smime-context.h" line="41"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STORE"
                    c:identifier="CAMEL_IS_STORE"
                    introspectable="0">
      <source-position filename="src/camel/camel-store.h" line="43"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STORE_CLASS"
                    c:identifier="CAMEL_IS_STORE_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-store.h" line="46"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STORE_SETTINGS"
                    c:identifier="CAMEL_IS_STORE_SETTINGS"
                    introspectable="0">
      <source-position filename="src/camel/camel-store-settings.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STORE_SETTINGS_CLASS"
                    c:identifier="CAMEL_IS_STORE_SETTINGS_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-store-settings.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STORE_SUMMARY"
                    c:identifier="CAMEL_IS_STORE_SUMMARY"
                    introspectable="0">
      <source-position filename="src/camel/camel-store-summary.h" line="40"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STORE_SUMMARY_CLASS"
                    c:identifier="CAMEL_IS_STORE_SUMMARY_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-store-summary.h" line="43"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STREAM"
                    c:identifier="CAMEL_IS_STREAM"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STREAM_BUFFER"
                    c:identifier="CAMEL_IS_STREAM_BUFFER"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream-buffer.h" line="39"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STREAM_BUFFER_CLASS"
                    c:identifier="CAMEL_IS_STREAM_BUFFER_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream-buffer.h" line="42"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STREAM_CLASS"
                    c:identifier="CAMEL_IS_STREAM_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream.h" line="44"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STREAM_FILTER"
                    c:identifier="CAMEL_IS_STREAM_FILTER"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream-filter.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STREAM_FILTER_CLASS"
                    c:identifier="CAMEL_IS_STREAM_FILTER_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream-filter.h" line="41"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STREAM_FS"
                    c:identifier="CAMEL_IS_STREAM_FS"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream-fs.h" line="43"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STREAM_FS_CLASS"
                    c:identifier="CAMEL_IS_STREAM_FS_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream-fs.h" line="46"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STREAM_MEM"
                    c:identifier="CAMEL_IS_STREAM_MEM"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream-mem.h" line="40"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STREAM_MEM_CLASS"
                    c:identifier="CAMEL_IS_STREAM_MEM_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream-mem.h" line="43"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STREAM_NULL"
                    c:identifier="CAMEL_IS_STREAM_NULL"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream-null.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STREAM_NULL_CLASS"
                    c:identifier="CAMEL_IS_STREAM_NULL_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream-null.h" line="40"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STREAM_PROCESS"
                    c:identifier="CAMEL_IS_STREAM_PROCESS"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream-process.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STREAM_PROCESS_CLASS"
                    c:identifier="CAMEL_IS_STREAM_PROCESS_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream-process.h" line="40"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SUBSCRIBABLE"
                    c:identifier="CAMEL_IS_SUBSCRIBABLE"
                    introspectable="0">
      <source-position filename="src/camel/camel-subscribable.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SUBSCRIBABLE_INTERFACE"
                    c:identifier="CAMEL_IS_SUBSCRIBABLE_INTERFACE"
                    introspectable="0">
      <source-position filename="src/camel/camel-subscribable.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TEXT_INDEX"
                    c:identifier="CAMEL_IS_TEXT_INDEX"
                    introspectable="0">
      <source-position filename="src/camel/camel-text-index.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TEXT_INDEX_CLASS"
                    c:identifier="CAMEL_IS_TEXT_INDEX_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-text-index.h" line="39"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TEXT_INDEX_CURSOR"
                    c:identifier="CAMEL_IS_TEXT_INDEX_CURSOR"
                    introspectable="0">
      <source-position filename="src/camel/camel-text-index.h" line="70"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TEXT_INDEX_CURSOR_CLASS"
                    c:identifier="CAMEL_IS_TEXT_INDEX_CURSOR_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-text-index.h" line="73"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TEXT_INDEX_KEY_CURSOR"
                    c:identifier="CAMEL_IS_TEXT_INDEX_KEY_CURSOR"
                    introspectable="0">
      <source-position filename="src/camel/camel-text-index.h" line="87"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TEXT_INDEX_KEY_CURSOR_CLASS"
                    c:identifier="CAMEL_IS_TEXT_INDEX_KEY_CURSOR_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-text-index.h" line="90"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TEXT_INDEX_NAME"
                    c:identifier="CAMEL_IS_TEXT_INDEX_NAME"
                    introspectable="0">
      <source-position filename="src/camel/camel-text-index.h" line="53"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TEXT_INDEX_NAME_CLASS"
                    c:identifier="CAMEL_IS_TEXT_INDEX_NAME_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-text-index.h" line="56"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TRANSPORT"
                    c:identifier="CAMEL_IS_TRANSPORT"
                    introspectable="0">
      <source-position filename="src/camel/camel-transport.h" line="40"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TRANSPORT_CLASS"
                    c:identifier="CAMEL_IS_TRANSPORT_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-transport.h" line="43"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VEE_DATA_CACHE"
                    c:identifier="CAMEL_IS_VEE_DATA_CACHE"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-data-cache.h" line="71"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VEE_DATA_CACHE_CLASS"
                    c:identifier="CAMEL_IS_VEE_DATA_CACHE_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-data-cache.h" line="74"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VEE_FOLDER"
                    c:identifier="CAMEL_IS_VEE_FOLDER"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-folder.h" line="40"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VEE_FOLDER_CLASS"
                    c:identifier="CAMEL_IS_VEE_FOLDER_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-folder.h" line="43"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VEE_MESSAGE_INFO"
                    c:identifier="CAMEL_IS_VEE_MESSAGE_INFO"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-message-info.h"
                       line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VEE_MESSAGE_INFO_CLASS"
                    c:identifier="CAMEL_IS_VEE_MESSAGE_INFO_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-message-info.h"
                       line="40"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VEE_MESSAGE_INFO_DATA"
                    c:identifier="CAMEL_IS_VEE_MESSAGE_INFO_DATA"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-data-cache.h" line="54"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VEE_MESSAGE_INFO_DATA_CLASS"
                    c:identifier="CAMEL_IS_VEE_MESSAGE_INFO_DATA_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-data-cache.h" line="57"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VEE_STORE"
                    c:identifier="CAMEL_IS_VEE_STORE"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-store.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VEE_STORE_CLASS"
                    c:identifier="CAMEL_IS_VEE_STORE_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-store.h" line="41"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VEE_SUBFOLDER_DATA"
                    c:identifier="CAMEL_IS_VEE_SUBFOLDER_DATA"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-data-cache.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VEE_SUBFOLDER_DATA_CLASS"
                    c:identifier="CAMEL_IS_VEE_SUBFOLDER_DATA_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-data-cache.h" line="40"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VEE_SUMMARY"
                    c:identifier="CAMEL_IS_VEE_SUMMARY"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-summary.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VEE_SUMMARY_CLASS"
                    c:identifier="CAMEL_IS_VEE_SUMMARY_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-summary.h" line="41"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VTRASH_FOLDER"
                    c:identifier="CAMEL_IS_VTRASH_FOLDER"
                    introspectable="0">
      <source-position filename="src/camel/camel-vtrash-folder.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VTRASH_FOLDER_CLASS"
                    c:identifier="CAMEL_IS_VTRASH_FOLDER_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-vtrash-folder.h" line="41"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Index"
           c:symbol-prefix="index"
           c:type="CamelIndex"
           parent="GObject.Object"
           glib:type-name="CamelIndex"
           glib:get-type="camel_index_get_type"
           glib:type-struct="IndexClass">
      <source-position filename="src/camel/camel-index.h" line="184"/>
      <virtual-method name="add_name" invoker="add_name">
        <source-position filename="src/camel/camel-index.h" line="170"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-index.c"
               line="208">a #CamelIndexName with
   added given @name, or %NULL, when the @name could not be
   added.</doc>
          <type name="IndexName" c:type="CamelIndexName*"/>
        </return-value>
        <parameters>
          <instance-parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-index.c"
                 line="205">a #CamelIndex</doc>
            <type name="Index" c:type="CamelIndex*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-index.c"
                 line="206">a name to add</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="compress" invoker="compress">
        <source-position filename="src/camel/camel-index.h" line="164"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="index" transfer-ownership="none">
            <type name="Index" c:type="CamelIndex*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="delete_">
        <source-position filename="src/camel/camel-index.h" line="165"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="index" transfer-ownership="none">
            <type name="Index" c:type="CamelIndex*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="delete_name" invoker="delete_name">
        <doc xml:space="preserve"
             filename="src/camel/camel-index.c"
             line="276">Deletes the given @name from @index.</doc>
        <source-position filename="src/camel/camel-index.h" line="177"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-index.c"
                 line="278">a #CamelIndex</doc>
            <type name="Index" c:type="CamelIndex*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-index.c"
                 line="279">a name to delete</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="find" invoker="find">
        <source-position filename="src/camel/camel-index.h" line="180"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-index.c"
               line="304">a #CamelIndexCursor object with
   the given @word, or %NULL, when not found</doc>
          <type name="IndexCursor" c:type="CamelIndexCursor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-index.c"
                 line="301">a #CamelIndex</doc>
            <type name="Index" c:type="CamelIndex*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-index.c"
                 line="302">a word to find</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="find_name" invoker="find_name">
        <source-position filename="src/camel/camel-index.h" line="175"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-index.c"
               line="255">a #CamelIndexCursor with
   the given @name, or %NULL&lt; when not found.</doc>
          <type name="IndexCursor" c:type="CamelIndexCursor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-index.c"
                 line="252">a #CamelIndex</doc>
            <type name="Index" c:type="CamelIndex*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-index.c"
                 line="253">a name to find</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="has_name" invoker="has_name">
        <source-position filename="src/camel/camel-index.h" line="168"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="index" transfer-ownership="none">
            <type name="Index" c:type="CamelIndex*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="rename" invoker="rename">
        <source-position filename="src/camel/camel-index.h" line="166"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="index" transfer-ownership="none">
            <type name="Index" c:type="CamelIndex*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="sync" invoker="sync">
        <source-position filename="src/camel/camel-index.h" line="163"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="index" transfer-ownership="none">
            <type name="Index" c:type="CamelIndex*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="words" invoker="words">
        <source-position filename="src/camel/camel-index.h" line="183"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-index.c"
               line="339">a #CamelIndexCursor containing
   all words of the @index, or %NULL, when there are none</doc>
          <type name="IndexCursor" c:type="CamelIndexCursor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-index.c"
                 line="337">a #CamelIndex</doc>
            <type name="Index" c:type="CamelIndex*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="write_name" invoker="write_name">
        <source-position filename="src/camel/camel-index.h" line="172"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="index" transfer-ownership="none">
            <type name="Index" c:type="CamelIndex*"/>
          </instance-parameter>
          <parameter name="idn" transfer-ownership="none">
            <type name="IndexName" c:type="CamelIndexName*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_name" c:identifier="camel_index_add_name">
        <source-position filename="src/camel/camel-index.h" line="203"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-index.c"
               line="208">a #CamelIndexName with
   added given @name, or %NULL, when the @name could not be
   added.</doc>
          <type name="IndexName" c:type="CamelIndexName*"/>
        </return-value>
        <parameters>
          <instance-parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-index.c"
                 line="205">a #CamelIndex</doc>
            <type name="Index" c:type="CamelIndex*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-index.c"
                 line="206">a name to add</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="compress" c:identifier="camel_index_compress">
        <source-position filename="src/camel/camel-index.h" line="199"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="index" transfer-ownership="none">
            <type name="Index" c:type="CamelIndex*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="construct" c:identifier="camel_index_construct">
        <source-position filename="src/camel/camel-index.h" line="190"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="index" transfer-ownership="none">
            <type name="Index" c:type="CamelIndex*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete" c:identifier="camel_index_delete">
        <source-position filename="src/camel/camel-index.h" line="200"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="index" transfer-ownership="none">
            <type name="Index" c:type="CamelIndex*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="delete_name" c:identifier="camel_index_delete_name">
        <doc xml:space="preserve"
             filename="src/camel/camel-index.c"
             line="276">Deletes the given @name from @index.</doc>
        <source-position filename="src/camel/camel-index.h" line="210"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-index.c"
                 line="278">a #CamelIndex</doc>
            <type name="Index" c:type="CamelIndex*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-index.c"
                 line="279">a name to delete</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find" c:identifier="camel_index_find">
        <source-position filename="src/camel/camel-index.h" line="213"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-index.c"
               line="304">a #CamelIndexCursor object with
   the given @word, or %NULL, when not found</doc>
          <type name="IndexCursor" c:type="CamelIndexCursor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-index.c"
                 line="301">a #CamelIndex</doc>
            <type name="Index" c:type="CamelIndex*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-index.c"
                 line="302">a word to find</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_name" c:identifier="camel_index_find_name">
        <source-position filename="src/camel/camel-index.h" line="208"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-index.c"
               line="255">a #CamelIndexCursor with
   the given @name, or %NULL&lt; when not found.</doc>
          <type name="IndexCursor" c:type="CamelIndexCursor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-index.c"
                 line="252">a #CamelIndex</doc>
            <type name="Index" c:type="CamelIndex*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-index.c"
                 line="253">a name to find</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_name" c:identifier="camel_index_has_name">
        <source-position filename="src/camel/camel-index.h" line="201"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="index" transfer-ownership="none">
            <type name="Index" c:type="CamelIndex*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="rename" c:identifier="camel_index_rename">
        <source-position filename="src/camel/camel-index.h" line="193"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="index" transfer-ownership="none">
            <type name="Index" c:type="CamelIndex*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_normalize"
              c:identifier="camel_index_set_normalize"
              version="2.32">
        <source-position filename="src/camel/camel-index.h" line="195"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-index.c"
                 line="107">a #CamelIndex</doc>
            <type name="Index" c:type="CamelIndex*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-index.c"
                 line="108">normalization function</doc>
            <type name="IndexNorm" c:type="CamelIndexNorm"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-index.c"
                 line="109">user data for @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="sync" c:identifier="camel_index_sync">
        <source-position filename="src/camel/camel-index.h" line="198"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="index" transfer-ownership="none">
            <type name="Index" c:type="CamelIndex*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="words" c:identifier="camel_index_words">
        <source-position filename="src/camel/camel-index.h" line="216"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-index.c"
               line="339">a #CamelIndexCursor containing
   all words of the @index, or %NULL, when there are none</doc>
          <type name="IndexCursor" c:type="CamelIndexCursor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-index.c"
                 line="337">a #CamelIndex</doc>
            <type name="Index" c:type="CamelIndex*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="write_name" c:identifier="camel_index_write_name">
        <source-position filename="src/camel/camel-index.h" line="205"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="index" transfer-ownership="none">
            <type name="Index" c:type="CamelIndex*"/>
          </instance-parameter>
          <parameter name="idn" transfer-ownership="none">
            <type name="IndexName" c:type="CamelIndexName*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="IndexPrivate" c:type="CamelIndexPrivate*"/>
      </field>
      <field name="path">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="version">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="flags">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="state">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="normalize">
        <type name="IndexNorm" c:type="CamelIndexNorm"/>
      </field>
      <field name="normalize_data">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <record name="IndexClass"
            c:type="CamelIndexClass"
            glib:is-gtype-struct-for="Index">
      <source-position filename="src/camel/camel-index.h" line="184"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="sync">
        <callback name="sync">
          <source-position filename="src/camel/camel-index.h" line="163"/>
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="index" transfer-ownership="none">
              <type name="Index" c:type="CamelIndex*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="compress">
        <callback name="compress">
          <source-position filename="src/camel/camel-index.h" line="164"/>
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="index" transfer-ownership="none">
              <type name="Index" c:type="CamelIndex*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="delete_">
        <callback name="delete_">
          <source-position filename="src/camel/camel-index.h" line="165"/>
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="index" transfer-ownership="none">
              <type name="Index" c:type="CamelIndex*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="rename">
        <callback name="rename">
          <source-position filename="src/camel/camel-index.h" line="166"/>
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="index" transfer-ownership="none">
              <type name="Index" c:type="CamelIndex*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="has_name">
        <callback name="has_name">
          <source-position filename="src/camel/camel-index.h" line="168"/>
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="index" transfer-ownership="none">
              <type name="Index" c:type="CamelIndex*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_name">
        <callback name="add_name">
          <source-position filename="src/camel/camel-index.h" line="170"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-index.c"
                 line="208">a #CamelIndexName with
   added given @name, or %NULL, when the @name could not be
   added.</doc>
            <type name="IndexName" c:type="CamelIndexName*"/>
          </return-value>
          <parameters>
            <parameter name="index" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-index.c"
                   line="205">a #CamelIndex</doc>
              <type name="Index" c:type="CamelIndex*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-index.c"
                   line="206">a name to add</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="write_name">
        <callback name="write_name">
          <source-position filename="src/camel/camel-index.h" line="172"/>
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="index" transfer-ownership="none">
              <type name="Index" c:type="CamelIndex*"/>
            </parameter>
            <parameter name="idn" transfer-ownership="none">
              <type name="IndexName" c:type="CamelIndexName*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="find_name">
        <callback name="find_name">
          <source-position filename="src/camel/camel-index.h" line="175"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-index.c"
                 line="255">a #CamelIndexCursor with
   the given @name, or %NULL&lt; when not found.</doc>
            <type name="IndexCursor" c:type="CamelIndexCursor*"/>
          </return-value>
          <parameters>
            <parameter name="index" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-index.c"
                   line="252">a #CamelIndex</doc>
              <type name="Index" c:type="CamelIndex*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-index.c"
                   line="253">a name to find</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="delete_name">
        <callback name="delete_name">
          <source-position filename="src/camel/camel-index.h" line="177"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="index" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-index.c"
                   line="278">a #CamelIndex</doc>
              <type name="Index" c:type="CamelIndex*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-index.c"
                   line="279">a name to delete</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="find">
        <callback name="find">
          <source-position filename="src/camel/camel-index.h" line="180"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-index.c"
                 line="304">a #CamelIndexCursor object with
   the given @word, or %NULL, when not found</doc>
            <type name="IndexCursor" c:type="CamelIndexCursor*"/>
          </return-value>
          <parameters>
            <parameter name="index" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-index.c"
                   line="301">a #CamelIndex</doc>
              <type name="Index" c:type="CamelIndex*"/>
            </parameter>
            <parameter name="word" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-index.c"
                   line="302">a word to find</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="words">
        <callback name="words">
          <source-position filename="src/camel/camel-index.h" line="183"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-index.c"
                 line="339">a #CamelIndexCursor containing
   all words of the @index, or %NULL, when there are none</doc>
            <type name="IndexCursor" c:type="CamelIndexCursor*"/>
          </return-value>
          <parameters>
            <parameter name="index" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-index.c"
                   line="337">a #CamelIndex</doc>
              <type name="Index" c:type="CamelIndex*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="IndexCursor"
           c:symbol-prefix="index_cursor"
           c:type="CamelIndexCursor"
           parent="GObject.Object"
           glib:type-name="CamelIndexCursor"
           glib:get-type="camel_index_cursor_get_type"
           glib:type-struct="IndexCursorClass">
      <source-position filename="src/camel/camel-index.h" line="115"/>
      <virtual-method name="next" invoker="next">
        <source-position filename="src/camel/camel-index.h" line="111"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="idc" transfer-ownership="none">
            <type name="IndexCursor" c:type="CamelIndexCursor*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="next" c:identifier="camel_index_cursor_next">
        <source-position filename="src/camel/camel-index.h" line="118"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="idc" transfer-ownership="none">
            <type name="IndexCursor" c:type="CamelIndexCursor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="IndexCursorPrivate" c:type="CamelIndexCursorPrivate*"/>
      </field>
      <field name="index">
        <type name="Index" c:type="CamelIndex*"/>
      </field>
    </class>
    <record name="IndexCursorClass"
            c:type="CamelIndexCursorClass"
            glib:is-gtype-struct-for="IndexCursor">
      <source-position filename="src/camel/camel-index.h" line="115"/>
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="next">
        <callback name="next">
          <source-position filename="src/camel/camel-index.h" line="111"/>
          <return-value transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="idc" transfer-ownership="none">
              <type name="IndexCursor" c:type="CamelIndexCursor*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="IndexCursorPrivate"
            c:type="CamelIndexCursorPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-index.h" line="95"/>
    </record>
    <class name="IndexName"
           c:symbol-prefix="index_name"
           c:type="CamelIndexName"
           parent="GObject.Object"
           glib:type-name="CamelIndexName"
           glib:get-type="camel_index_name_get_type"
           glib:type-struct="IndexNameClass">
      <source-position filename="src/camel/camel-index.h" line="139"/>
      <virtual-method name="add_buffer" invoker="add_buffer">
        <source-position filename="src/camel/camel-index.h" line="138"/>
        <return-value transfer-ownership="none">
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="name" transfer-ownership="none">
            <type name="IndexName" c:type="CamelIndexName*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="add_word" invoker="add_word">
        <source-position filename="src/camel/camel-index.h" line="137"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="name" transfer-ownership="none">
            <type name="IndexName" c:type="CamelIndexName*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_buffer" c:identifier="camel_index_name_add_buffer">
        <source-position filename="src/camel/camel-index.h" line="143"/>
        <return-value transfer-ownership="none">
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="name" transfer-ownership="none">
            <type name="IndexName" c:type="CamelIndexName*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_word" c:identifier="camel_index_name_add_word">
        <source-position filename="src/camel/camel-index.h" line="142"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="name" transfer-ownership="none">
            <type name="IndexName" c:type="CamelIndexName*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="IndexNamePrivate" c:type="CamelIndexNamePrivate*"/>
      </field>
      <field name="index">
        <type name="Index" c:type="CamelIndex*"/>
      </field>
      <field name="name">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="buffer">
        <array name="GLib.ByteArray" c:type="GByteArray*">
          <type name="guint8" c:type="guint8"/>
        </array>
      </field>
      <field name="words">
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
    </class>
    <record name="IndexNameClass"
            c:type="CamelIndexNameClass"
            glib:is-gtype-struct-for="IndexName">
      <source-position filename="src/camel/camel-index.h" line="139"/>
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="add_word">
        <callback name="add_word">
          <source-position filename="src/camel/camel-index.h" line="137"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="name" transfer-ownership="none">
              <type name="IndexName" c:type="CamelIndexName*"/>
            </parameter>
            <parameter name="word" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_buffer">
        <callback name="add_buffer">
          <source-position filename="src/camel/camel-index.h" line="138"/>
          <return-value transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </return-value>
          <parameters>
            <parameter name="name" transfer-ownership="none">
              <type name="IndexName" c:type="CamelIndexName*"/>
            </parameter>
            <parameter name="buffer" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="len" transfer-ownership="none">
              <type name="gsize" c:type="gsize"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="IndexNamePrivate"
            c:type="CamelIndexNamePrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-index.h" line="91"/>
    </record>
    <callback name="IndexNorm" c:type="CamelIndexNorm">
      <source-position filename="src/camel/camel-index.h" line="97"/>
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="index" transfer-ownership="none">
          <type name="Index" c:type="CamelIndex*"/>
        </parameter>
        <parameter name="word" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="IndexPrivate"
            c:type="CamelIndexPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-index.h" line="87"/>
    </record>
    <class name="InternetAddress"
           c:symbol-prefix="internet_address"
           c:type="CamelInternetAddress"
           parent="Address"
           glib:type-name="CamelInternetAddress"
           glib:get-type="camel_internet_address_get_type"
           glib:type-struct="InternetAddressClass">
      <source-position filename="src/camel/camel-internet-address.h"
                       line="64"/>
      <constructor name="new" c:identifier="camel_internet_address_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-internet-address.c"
             line="281">Create a new #CamelInternetAddress object.</doc>
        <source-position filename="src/camel/camel-internet-address.h"
                         line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-internet-address.c"
               line="286">a new #CamelInternetAddress object</doc>
          <type name="InternetAddress" c:type="CamelInternetAddress*"/>
        </return-value>
      </constructor>
      <function name="encode_address"
                c:identifier="camel_internet_address_encode_address">
        <doc xml:space="preserve"
             filename="src/camel/camel-internet-address.c"
             line="589">Encode a single address ready for internet usage.  Header folding
as per rfc822 is also performed, based on the length *@len.  If @len
is %NULL, then no folding will occur.

Note: The value at *@in will be updated based on any linewrapping done</doc>
        <source-position filename="src/camel/camel-internet-address.h"
                         line="89"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-internet-address.c"
               line="601">the encoded address</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="len"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-internet-address.c"
                 line="591">the length of the line the address is being appended to</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-internet-address.c"
                 line="592">the unencoded real name associated with the address</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-internet-address.c"
                 line="593">the routing address</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="format_address"
                c:identifier="camel_internet_address_format_address">
        <doc xml:space="preserve"
             filename="src/camel/camel-internet-address.c"
             line="665">Function to format a single address, suitable for display.</doc>
        <source-position filename="src/camel/camel-internet-address.h"
                         line="93"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-internet-address.c"
               line="672">a nicely formatted string containing the rfc822 address</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-internet-address.c"
                 line="667">a name, quotes may be stripped from it</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-internet-address.c"
                 line="668">an rfc822 routing address</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <method name="add" c:identifier="camel_internet_address_add">
        <doc xml:space="preserve"
             filename="src/camel/camel-internet-address.c"
             line="294">Add a new internet address to @addr.</doc>
        <source-position filename="src/camel/camel-internet-address.h"
                         line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-internet-address.c"
               line="302">the index of added entry</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-internet-address.c"
                 line="296">a #CamelInternetAddress object</doc>
            <type name="InternetAddress" c:type="CamelInternetAddress*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-internet-address.c"
                 line="297">name associated with the new address</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-internet-address.c"
                 line="298">routing address associated with the new address</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ensure_ascii_domains"
              c:identifier="camel_internet_address_ensure_ascii_domains"
              version="3.16">
        <doc xml:space="preserve"
             filename="src/camel/camel-internet-address.c"
             line="429">Ensures that all email address' domains will be ASCII encoded,
which means that any non-ASCII letters will be properly encoded.
This includes IDN (Internationalized Domain Names).</doc>
        <source-position filename="src/camel/camel-internet-address.h"
                         line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-internet-address.c"
                 line="431">a #CamelInternetAddress</doc>
            <type name="InternetAddress" c:type="CamelInternetAddress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="find_address"
              c:identifier="camel_internet_address_find_address">
        <doc xml:space="preserve"
             filename="src/camel/camel-internet-address.c"
             line="519">Find an address by address.</doc>
        <source-position filename="src/camel/camel-internet-address.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-internet-address.c"
               line="527">the index of the address, or -1 if not found</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-internet-address.c"
                 line="521">a #CamelInternetAddress object</doc>
            <type name="InternetAddress" c:type="CamelInternetAddress*"/>
          </instance-parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-internet-address.c"
                 line="522">address to lookup</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="namep"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     nullable="1"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-internet-address.c"
                 line="523">holder for the matching name, or %NULL, if not required.</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_name" c:identifier="camel_internet_address_find_name">
        <doc xml:space="preserve"
             filename="src/camel/camel-internet-address.c"
             line="355">Find address by real name.</doc>
        <source-position filename="src/camel/camel-internet-address.h"
                         line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-internet-address.c"
               line="363">the index of the address matching the name, or -1 if no
match was found</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-internet-address.c"
                 line="357">a #CamelInternetAddress object</doc>
            <type name="InternetAddress" c:type="CamelInternetAddress*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-internet-address.c"
                 line="358">name to lookup</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="addressp"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     nullable="1"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-internet-address.c"
                 line="359">holder for address part, or %NULL, if not required.</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get" c:identifier="camel_internet_address_get">
        <doc xml:space="preserve"
             filename="src/camel/camel-internet-address.c"
             line="323">Get the address at @index.</doc>
        <source-position filename="src/camel/camel-internet-address.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-internet-address.c"
               line="332">%TRUE if such an address exists, or %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-internet-address.c"
                 line="325">a #CamelInternetAddress object</doc>
            <type name="InternetAddress" c:type="CamelInternetAddress*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-internet-address.c"
                 line="326">address's array index</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="namep"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     nullable="1"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-internet-address.c"
                 line="327">holder for the returned name, or %NULL, if not required.</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
          <parameter name="addressp"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     nullable="1"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-internet-address.c"
                 line="328">holder for the returned address, or %NULL, if not required.</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="sanitize_ascii_domain"
              c:identifier="camel_internet_address_sanitize_ascii_domain"
              version="3.44">
        <doc xml:space="preserve"
             filename="src/camel/camel-internet-address.c"
             line="469">Checks the addresses in @addr for any suspicious characters in the domain
name and coverts those domains into their representation. In contrast to
camel_internet_address_ensure_ascii_domains(), this converts the domains
into ASCII only when needed, as returned by camel_hostname_utils_requires_ascii().</doc>
        <source-position filename="src/camel/camel-internet-address.h"
                         line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-internet-address.c"
               line="478">%TRUE, when converted at least one address</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-internet-address.c"
                 line="471">a #CamelInternetAddress</doc>
            <type name="InternetAddress" c:type="CamelInternetAddress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Address" c:type="CamelAddress"/>
      </field>
      <field name="priv">
        <type name="InternetAddressPrivate"
              c:type="CamelInternetAddressPrivate*"/>
      </field>
    </class>
    <record name="InternetAddressClass"
            c:type="CamelInternetAddressClass"
            glib:is-gtype-struct-for="InternetAddress">
      <source-position filename="src/camel/camel-internet-address.h"
                       line="64"/>
      <field name="parent_class">
        <type name="AddressClass" c:type="CamelAddressClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="InternetAddressPrivate"
            c:type="CamelInternetAddressPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-internet-address.h"
                       line="52"/>
    </record>
    <function-macro name="JUNK_FILTER"
                    c:identifier="CAMEL_JUNK_FILTER"
                    introspectable="0">
      <source-position filename="src/camel/camel-junk-filter.h" line="30"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="JUNK_FILTER_GET_INTERFACE"
                    c:identifier="CAMEL_JUNK_FILTER_GET_INTERFACE"
                    introspectable="0">
      <source-position filename="src/camel/camel-junk-filter.h" line="42"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="JUNK_FILTER_INTERFACE"
                    c:identifier="CAMEL_JUNK_FILTER_INTERFACE"
                    introspectable="0">
      <source-position filename="src/camel/camel-junk-filter.h" line="33"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="JunkFilter"
               c:symbol-prefix="junk_filter"
               c:type="CamelJunkFilter"
               version="3.2"
               glib:type-name="CamelJunkFilter"
               glib:get-type="camel_junk_filter_get_type"
               glib:type-struct="JunkFilterInterface">
      <source-position filename="src/camel/camel-junk-filter.h" line="81"/>
      <virtual-method name="classify"
                      invoker="classify"
                      version="3.2"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-junk-filter.c"
             line="32">Classifies @message as junk, not junk or inconclusive.

If an error occurs, the function sets @error and returns
%CAMEL_JUNK_STATUS_ERROR.</doc>
        <source-position filename="src/camel/camel-junk-filter.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-junk-filter.c"
               line="44">the junk status determined by @junk_filter</doc>
          <type name="JunkStatus" c:type="CamelJunkStatus"/>
        </return-value>
        <parameters>
          <instance-parameter name="junk_filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-junk-filter.c"
                 line="34">a #CamelJunkFilter</doc>
            <type name="JunkFilter" c:type="CamelJunkFilter*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-junk-filter.c"
                 line="35">a #CamelMimeMessage</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-junk-filter.c"
                 line="36">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="learn_junk"
                      invoker="learn_junk"
                      version="3.2"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-junk-filter.c"
             line="66">Instructs @junk_filter to classify @message as junk.  If using an
adaptive junk filtering algorithm, explicitly marking @message as
junk will influence the classification of future messages.

If an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="src/camel/camel-junk-filter.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-junk-filter.c"
               line="79">%TRUE if @message was successfully classified</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="junk_filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-junk-filter.c"
                 line="68">a #CamelJunkFilter</doc>
            <type name="JunkFilter" c:type="CamelJunkFilter*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-junk-filter.c"
                 line="69">a #CamelMimeMessage</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-junk-filter.c"
                 line="70">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="learn_not_junk"
                      invoker="learn_not_junk"
                      version="3.2"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-junk-filter.c"
             line="101">Instructs @junk_filter to classify @message as not junk.  If using an
adaptive junk filtering algorithm, explicitly marking @message as not
junk will influence the classification of future messages.

If an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="src/camel/camel-junk-filter.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-junk-filter.c"
               line="114">%TRUE if @message was successfully classified</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="junk_filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-junk-filter.c"
                 line="103">a #CamelJunkFilter</doc>
            <type name="JunkFilter" c:type="CamelJunkFilter*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-junk-filter.c"
                 line="104">a #CamelMimeMessage</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-junk-filter.c"
                 line="105">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="synchronize"
                      invoker="synchronize"
                      version="3.2"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-junk-filter.c"
             line="136">Instructs @junk_filter to flush any in-memory caches to disk, if
applicable.  When filtering many messages, delaying this step until
all messages have been classified can improve performance.

If an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="src/camel/camel-junk-filter.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-junk-filter.c"
               line="148">%TRUE if @junk_filter was successfully synchronized</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="junk_filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-junk-filter.c"
                 line="138">a #CamelJunkFilter</doc>
            <type name="JunkFilter" c:type="CamelJunkFilter*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-junk-filter.c"
                 line="139">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="classify"
              c:identifier="camel_junk_filter_classify"
              version="3.2"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-junk-filter.c"
             line="32">Classifies @message as junk, not junk or inconclusive.

If an error occurs, the function sets @error and returns
%CAMEL_JUNK_STATUS_ERROR.</doc>
        <source-position filename="src/camel/camel-junk-filter.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-junk-filter.c"
               line="44">the junk status determined by @junk_filter</doc>
          <type name="JunkStatus" c:type="CamelJunkStatus"/>
        </return-value>
        <parameters>
          <instance-parameter name="junk_filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-junk-filter.c"
                 line="34">a #CamelJunkFilter</doc>
            <type name="JunkFilter" c:type="CamelJunkFilter*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-junk-filter.c"
                 line="35">a #CamelMimeMessage</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-junk-filter.c"
                 line="36">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="learn_junk"
              c:identifier="camel_junk_filter_learn_junk"
              version="3.2"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-junk-filter.c"
             line="66">Instructs @junk_filter to classify @message as junk.  If using an
adaptive junk filtering algorithm, explicitly marking @message as
junk will influence the classification of future messages.

If an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="src/camel/camel-junk-filter.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-junk-filter.c"
               line="79">%TRUE if @message was successfully classified</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="junk_filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-junk-filter.c"
                 line="68">a #CamelJunkFilter</doc>
            <type name="JunkFilter" c:type="CamelJunkFilter*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-junk-filter.c"
                 line="69">a #CamelMimeMessage</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-junk-filter.c"
                 line="70">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="learn_not_junk"
              c:identifier="camel_junk_filter_learn_not_junk"
              version="3.2"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-junk-filter.c"
             line="101">Instructs @junk_filter to classify @message as not junk.  If using an
adaptive junk filtering algorithm, explicitly marking @message as not
junk will influence the classification of future messages.

If an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="src/camel/camel-junk-filter.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-junk-filter.c"
               line="114">%TRUE if @message was successfully classified</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="junk_filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-junk-filter.c"
                 line="103">a #CamelJunkFilter</doc>
            <type name="JunkFilter" c:type="CamelJunkFilter*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-junk-filter.c"
                 line="104">a #CamelMimeMessage</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-junk-filter.c"
                 line="105">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="synchronize"
              c:identifier="camel_junk_filter_synchronize"
              version="3.2"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-junk-filter.c"
             line="136">Instructs @junk_filter to flush any in-memory caches to disk, if
applicable.  When filtering many messages, delaying this step until
all messages have been classified can improve performance.

If an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="src/camel/camel-junk-filter.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-junk-filter.c"
               line="148">%TRUE if @junk_filter was successfully synchronized</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="junk_filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-junk-filter.c"
                 line="138">a #CamelJunkFilter</doc>
            <type name="JunkFilter" c:type="CamelJunkFilter*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-junk-filter.c"
                 line="139">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="JunkFilterInterface"
            c:type="CamelJunkFilterInterface"
            glib:is-gtype-struct-for="JunkFilter">
      <source-position filename="src/camel/camel-junk-filter.h" line="81"/>
      <field name="parent_interface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="classify">
        <callback name="classify" throws="1">
          <source-position filename="src/camel/camel-junk-filter.h" line="61"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-junk-filter.c"
                 line="44">the junk status determined by @junk_filter</doc>
            <type name="JunkStatus" c:type="CamelJunkStatus"/>
          </return-value>
          <parameters>
            <parameter name="junk_filter" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-junk-filter.c"
                   line="34">a #CamelJunkFilter</doc>
              <type name="JunkFilter" c:type="CamelJunkFilter*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-junk-filter.c"
                   line="35">a #CamelMimeMessage</doc>
              <type name="MimeMessage" c:type="CamelMimeMessage*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-junk-filter.c"
                   line="36">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="learn_junk">
        <callback name="learn_junk" throws="1">
          <source-position filename="src/camel/camel-junk-filter.h" line="65"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-junk-filter.c"
                 line="79">%TRUE if @message was successfully classified</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="junk_filter" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-junk-filter.c"
                   line="68">a #CamelJunkFilter</doc>
              <type name="JunkFilter" c:type="CamelJunkFilter*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-junk-filter.c"
                   line="69">a #CamelMimeMessage</doc>
              <type name="MimeMessage" c:type="CamelMimeMessage*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-junk-filter.c"
                   line="70">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="learn_not_junk">
        <callback name="learn_not_junk" throws="1">
          <source-position filename="src/camel/camel-junk-filter.h" line="69"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-junk-filter.c"
                 line="114">%TRUE if @message was successfully classified</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="junk_filter" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-junk-filter.c"
                   line="103">a #CamelJunkFilter</doc>
              <type name="JunkFilter" c:type="CamelJunkFilter*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-junk-filter.c"
                   line="104">a #CamelMimeMessage</doc>
              <type name="MimeMessage" c:type="CamelMimeMessage*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-junk-filter.c"
                   line="105">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="synchronize">
        <callback name="synchronize" throws="1">
          <source-position filename="src/camel/camel-junk-filter.h" line="75"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-junk-filter.c"
                 line="148">%TRUE if @junk_filter was successfully synchronized</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="junk_filter" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-junk-filter.c"
                   line="138">a #CamelJunkFilter</doc>
              <type name="JunkFilter" c:type="CamelJunkFilter*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-junk-filter.c"
                   line="139">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="JunkStatus"
                 glib:type-name="CamelJunkStatus"
                 glib:get-type="camel_junk_status_get_type"
                 c:type="CamelJunkStatus">
      <doc xml:space="preserve"
           filename="src/camel/camel-enums.h"
           line="285">These are result codes used when passing messages through a junk filter.</doc>
      <member name="error"
              value="0"
              c:identifier="CAMEL_JUNK_STATUS_ERROR"
              glib:nick="error"
              glib:name="CAMEL_JUNK_STATUS_ERROR">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="287">An error occurred while invoking the junk filter.</doc>
      </member>
      <member name="inconclusive"
              value="1"
              c:identifier="CAMEL_JUNK_STATUS_INCONCLUSIVE"
              glib:nick="inconclusive"
              glib:name="CAMEL_JUNK_STATUS_INCONCLUSIVE">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="289">The junk filter could not determine whether the message is junk.</doc>
      </member>
      <member name="message_is_junk"
              value="2"
              c:identifier="CAMEL_JUNK_STATUS_MESSAGE_IS_JUNK"
              glib:nick="message-is-junk"
              glib:name="CAMEL_JUNK_STATUS_MESSAGE_IS_JUNK">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="291">The junk filter believes the message is junk.</doc>
      </member>
      <member name="message_is_not_junk"
              value="3"
              c:identifier="CAMEL_JUNK_STATUS_MESSAGE_IS_NOT_JUNK"
              glib:nick="message-is-not-junk"
              glib:name="CAMEL_JUNK_STATUS_MESSAGE_IS_NOT_JUNK">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="293">The junk filter believes the message is not junk.</doc>
      </member>
    </enumeration>
    <function-macro name="KEY_FILE"
                    c:identifier="CAMEL_KEY_FILE"
                    introspectable="0">
      <source-position filename="src/camel/camel-block-file.h" line="50"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="KEY_FILE_CLASS"
                    c:identifier="CAMEL_KEY_FILE_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-block-file.h" line="53"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="KEY_FILE_GET_CLASS"
                    c:identifier="CAMEL_KEY_FILE_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-block-file.h" line="62"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="KEY_TABLE"
                    c:identifier="CAMEL_KEY_TABLE"
                    introspectable="0">
      <source-position filename="src/camel/camel-partition-table.h" line="47"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="KEY_TABLE_CLASS"
                    c:identifier="CAMEL_KEY_TABLE_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-partition-table.h" line="50"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="KEY_TABLE_GET_CLASS"
                    c:identifier="CAMEL_KEY_TABLE_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-partition-table.h" line="59"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="KEY_TABLE_MAX_KEY"
              value="128"
              c:type="CAMEL_KEY_TABLE_MAX_KEY">
      <source-position filename="src/camel/camel-partition-table.h"
                       line="158"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <record name="KeyBlock" c:type="CamelKeyBlock">
      <source-position filename="src/camel/camel-partition-table.h"
                       line="158"/>
      <field name="next" writable="1">
        <type name="_block_t" c:type="camel_block_t"/>
      </field>
      <field name="used" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <union name="u" c:type="u">
        <source-position filename="src/camel/camel-partition-table.h"
                         line="157"/>
        <field name="keys" writable="1">
          <array zero-terminated="0" fixed-size="0">
            <type name="gpointer" c:type="_CamelKeyKey"/>
          </array>
        </field>
        <field name="keydata" writable="1">
          <array zero-terminated="0" fixed-size="1016">
            <type name="gchar" c:type="gchar"/>
          </array>
        </field>
      </union>
    </record>
    <class name="KeyFile"
           c:symbol-prefix="key_file"
           c:type="CamelKeyFile"
           parent="GObject.Object"
           glib:type-name="CamelKeyFile"
           glib:get-type="camel_key_file_get_type"
           glib:type-struct="KeyFileClass">
      <source-position filename="src/camel/camel-block-file.h" line="173"/>
      <constructor name="new" c:identifier="camel_key_file_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-block-file.c"
             line="1110">Create a new key file.  A linked list of record blocks.</doc>
        <source-position filename="src/camel/camel-block-file.h" line="177"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-block-file.c"
               line="1119">A new key file, or %NULL if the file could not
   be opened/created/initialised.</doc>
          <type name="KeyFile" c:type="CamelKeyFile*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="1112">a filename with path of the #CamelKeyFile to create</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="1113">open flags</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="version" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="1114">Version string (header) of file.  Currently
written but not checked.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="delete" c:identifier="camel_key_file_delete">
        <source-position filename="src/camel/camel-block-file.h" line="179"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="kf" transfer-ownership="none">
            <type name="KeyFile" c:type="CamelKeyFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="read" c:identifier="camel_key_file_read">
        <doc xml:space="preserve"
             filename="src/camel/camel-block-file.c"
             line="1289">Read the next block of data from the key file.  Returns the number of
records.</doc>
        <source-position filename="src/camel/camel-block-file.h" line="182"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-block-file.c"
               line="1299">-1 on io error.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="kf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="1291">a #CamelKeyFile</doc>
            <type name="KeyFile" c:type="CamelKeyFile*"/>
          </instance-parameter>
          <parameter name="start" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="1292">The record pointer.  This will be set to the next record pointer on success.</doc>
            <type name="_block_t" c:type="camel_block_t*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="1293">Number of records read, if != NULL.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="records"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="1294">Records, allocated, must be freed with g_free, if != NULL.</doc>
            <array length="1" zero-terminated="0" c:type="camel_key_t**">
              <type name="_key_t" c:type="camel_key_t*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="rename" c:identifier="camel_key_file_rename">
        <source-position filename="src/camel/camel-block-file.h" line="178"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="kf" transfer-ownership="none">
            <type name="KeyFile" c:type="CamelKeyFile*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="write" c:identifier="camel_key_file_write">
        <doc xml:space="preserve"
             filename="src/camel/camel-block-file.c"
             line="1226">Write a new list of records to the key file.</doc>
        <source-position filename="src/camel/camel-block-file.h" line="181"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-block-file.c"
               line="1235">-1 on io error.  The key file will remain unchanged.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="kf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="1228">a #CamelKeyFile</doc>
            <type name="KeyFile" c:type="CamelKeyFile*"/>
          </instance-parameter>
          <parameter name="parent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="1229">a #camel_block_t</doc>
            <type name="_block_t" c:type="camel_block_t*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="1230">how many @records to write</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="records" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-block-file.c"
                 line="1231">an array of #camel_key_t to write</doc>
            <array length="1" zero-terminated="0" c:type="camel_key_t*">
              <type name="_key_t" c:type="camel_key_t"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="KeyFilePrivate" c:type="CamelKeyFilePrivate*"/>
      </field>
    </class>
    <record name="KeyFileClass"
            c:type="CamelKeyFileClass"
            glib:is-gtype-struct-for="KeyFile">
      <source-position filename="src/camel/camel-block-file.h" line="173"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="KeyFilePrivate"
            c:type="CamelKeyFilePrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-block-file.h" line="161"/>
    </record>
    <record name="KeyRootBlock" c:type="CamelKeyRootBlock">
      <source-position filename="src/camel/camel-partition-table.h"
                       line="143"/>
      <field name="first" writable="1">
        <type name="_block_t" c:type="camel_block_t"/>
      </field>
      <field name="last" writable="1">
        <type name="_block_t" c:type="camel_block_t"/>
      </field>
      <field name="free" writable="1">
        <type name="_key_t" c:type="camel_key_t"/>
      </field>
    </record>
    <class name="KeyTable"
           c:symbol-prefix="key_table"
           c:type="CamelKeyTable"
           parent="GObject.Object"
           glib:type-name="CamelKeyTable"
           glib:get-type="camel_key_table_get_type"
           glib:type-struct="KeyTableClass">
      <source-position filename="src/camel/camel-partition-table.h"
                       line="172"/>
      <constructor name="new" c:identifier="camel_key_table_new">
        <source-position filename="src/camel/camel-partition-table.h"
                         line="175"/>
        <return-value transfer-ownership="full">
          <type name="KeyTable" c:type="CamelKeyTable*"/>
        </return-value>
        <parameters>
          <parameter name="bs" transfer-ownership="none">
            <type name="BlockFile" c:type="CamelBlockFile*"/>
          </parameter>
          <parameter name="root" transfer-ownership="none">
            <type name="_block_t" c:type="camel_block_t"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add" c:identifier="camel_key_table_add">
        <source-position filename="src/camel/camel-partition-table.h"
                         line="178"/>
        <return-value transfer-ownership="none">
          <type name="_key_t" c:type="camel_key_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="ki" transfer-ownership="none">
            <type name="KeyTable" c:type="CamelKeyTable*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="_block_t" c:type="camel_block_t"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup" c:identifier="camel_key_table_lookup">
        <source-position filename="src/camel/camel-partition-table.h"
                         line="189"/>
        <return-value transfer-ownership="none">
          <type name="_block_t" c:type="camel_block_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="ki" transfer-ownership="none">
            <type name="KeyTable" c:type="CamelKeyTable*"/>
          </instance-parameter>
          <parameter name="keyid" transfer-ownership="none">
            <type name="_key_t" c:type="camel_key_t"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="next" c:identifier="camel_key_table_next">
        <source-position filename="src/camel/camel-partition-table.h"
                         line="193"/>
        <return-value transfer-ownership="none">
          <type name="_key_t" c:type="camel_key_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="ki" transfer-ownership="none">
            <type name="KeyTable" c:type="CamelKeyTable*"/>
          </instance-parameter>
          <parameter name="next" transfer-ownership="none">
            <type name="_key_t" c:type="camel_key_t"/>
          </parameter>
          <parameter name="keyp" transfer-ownership="none">
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="flagsp" transfer-ownership="none">
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="datap" transfer-ownership="none">
            <type name="_block_t" c:type="camel_block_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_data" c:identifier="camel_key_table_set_data">
        <source-position filename="src/camel/camel-partition-table.h"
                         line="182"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ki" transfer-ownership="none">
            <type name="KeyTable" c:type="CamelKeyTable*"/>
          </instance-parameter>
          <parameter name="keyid" transfer-ownership="none">
            <type name="_key_t" c:type="camel_key_t"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="_block_t" c:type="camel_block_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_flags" c:identifier="camel_key_table_set_flags">
        <source-position filename="src/camel/camel-partition-table.h"
                         line="185"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ki" transfer-ownership="none">
            <type name="KeyTable" c:type="CamelKeyTable*"/>
          </instance-parameter>
          <parameter name="keyid" transfer-ownership="none">
            <type name="_key_t" c:type="camel_key_t"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="set" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="sync" c:identifier="camel_key_table_sync">
        <source-position filename="src/camel/camel-partition-table.h"
                         line="177"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="ki" transfer-ownership="none">
            <type name="KeyTable" c:type="CamelKeyTable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="KeyTablePrivate" c:type="CamelKeyTablePrivate*"/>
      </field>
    </class>
    <record name="KeyTableClass"
            c:type="CamelKeyTableClass"
            glib:is-gtype-struct-for="KeyTable">
      <source-position filename="src/camel/camel-partition-table.h"
                       line="172"/>
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="KeyTablePrivate"
            c:type="CamelKeyTablePrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-partition-table.h"
                       line="137"/>
    </record>
    <function-macro name="LOCAL_SETTINGS"
                    c:identifier="CAMEL_LOCAL_SETTINGS"
                    introspectable="0">
      <source-position filename="src/camel/camel-local-settings.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOCAL_SETTINGS_CLASS"
                    c:identifier="CAMEL_LOCAL_SETTINGS_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-local-settings.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOCAL_SETTINGS_GET_CLASS"
                    c:identifier="CAMEL_LOCAL_SETTINGS_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-local-settings.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="LOCK_DELAY" value="2" c:type="CAMEL_LOCK_DELAY">
      <source-position filename="src/camel/camel-lock.h" line="36"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="LOCK_DOT_DELAY" value="2" c:type="CAMEL_LOCK_DOT_DELAY">
      <source-position filename="src/camel/camel-lock.h" line="31"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="LOCK_DOT_RETRY" value="5" c:type="CAMEL_LOCK_DOT_RETRY">
      <source-position filename="src/camel/camel-lock.h" line="30"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="LOCK_DOT_STALE" value="60" c:type="CAMEL_LOCK_DOT_STALE">
      <source-position filename="src/camel/camel-lock.h" line="32"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="LOCK_RETRY" value="5" c:type="CAMEL_LOCK_RETRY">
      <source-position filename="src/camel/camel-lock.h" line="35"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="LocalSettings"
           c:symbol-prefix="local_settings"
           c:type="CamelLocalSettings"
           version="3.4"
           parent="StoreSettings"
           glib:type-name="CamelLocalSettings"
           glib:get-type="camel_local_settings_get_type"
           glib:type-struct="LocalSettingsClass">
      <doc xml:space="preserve"
           filename="src/camel/camel-local-settings.h"
           line="48">Contains only private data that should be read and manipulated using the
functions below.</doc>
      <source-position filename="src/camel/camel-local-settings.h" line="72"/>
      <method name="dup_path"
              c:identifier="camel_local_settings_dup_path"
              version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-local-settings.c"
             line="220">Thread-safe variation of camel_local_settings_get_path().
Use this function when accessing @settings from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="src/camel/camel-local-settings.h"
                         line="76"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-local-settings.c"
               line="229">a newly-allocated copy of #CamelLocalSettings:path</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-local-settings.c"
                 line="222">a #CamelLocalSettings</doc>
            <type name="LocalSettings" c:type="CamelLocalSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_filter_all"
              c:identifier="camel_local_settings_get_filter_all"
              glib:get-property="filter-all"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-local-settings.c"
             line="300">Returns whether apply filters in all folders.</doc>
        <source-position filename="src/camel/camel-local-settings.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-local-settings.c"
               line="306">whether to apply filters in all folders</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-local-settings.c"
                 line="302">a #CamelLocalSettings</doc>
            <type name="LocalSettings" c:type="CamelLocalSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_filter_junk"
              c:identifier="camel_local_settings_get_filter_junk"
              glib:get-property="filter-junk"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-local-settings.c"
             line="341">Returns whether to check new messages for junk.</doc>
        <source-position filename="src/camel/camel-local-settings.h"
                         line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-local-settings.c"
               line="347">whether to check new messages for junk</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-local-settings.c"
                 line="343">a #CamelLocalSettings</doc>
            <type name="LocalSettings" c:type="CamelLocalSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_maildir_alt_flag_sep"
              c:identifier="camel_local_settings_get_maildir_alt_flag_sep"
              glib:get-property="maildir-alt-flag-sep"
              version="3.40">
        <doc xml:space="preserve"
             filename="src/camel/camel-local-settings.c"
             line="382">Returns, whether the Maildir provider should use alternative
flag separator in the file name. When %TRUE, uses an exclamation
mark (!), when %FALSE, uses the colon (:). The default
is %FALSE, to be consistent with the Maildir specification.
The flag separator is flipped on the Windows build.</doc>
        <source-position filename="src/camel/camel-local-settings.h"
                         line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-local-settings.c"
               line="392">whether the Maildir provider should use an alternative flag separator</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-local-settings.c"
                 line="384">a #CamelLocalSettings</doc>
            <type name="LocalSettings" c:type="CamelLocalSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path"
              c:identifier="camel_local_settings_get_path"
              glib:get-property="path"
              version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-local-settings.c"
             line="202">Returns the file path to the root of the local mail store.</doc>
        <source-position filename="src/camel/camel-local-settings.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-local-settings.c"
               line="208">the file path to the local store</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-local-settings.c"
                 line="204">a #CamelLocalSettings</doc>
            <type name="LocalSettings" c:type="CamelLocalSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_filter_all"
              c:identifier="camel_local_settings_set_filter_all"
              glib:set-property="filter-all"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-local-settings.c"
             line="318">Sets whether to apply filters in all folders.</doc>
        <source-position filename="src/camel/camel-local-settings.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-local-settings.c"
                 line="320">a #CamelLocalSettings</doc>
            <type name="LocalSettings" c:type="CamelLocalSettings*"/>
          </instance-parameter>
          <parameter name="filter_all" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-local-settings.c"
                 line="321">whether to apply filters in all folders</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_filter_junk"
              c:identifier="camel_local_settings_set_filter_junk"
              glib:set-property="filter-junk"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-local-settings.c"
             line="359">Sets whether to check new messages for junk.</doc>
        <source-position filename="src/camel/camel-local-settings.h"
                         line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-local-settings.c"
                 line="361">a #CamelLocalSettings</doc>
            <type name="LocalSettings" c:type="CamelLocalSettings*"/>
          </instance-parameter>
          <parameter name="filter_junk" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-local-settings.c"
                 line="362">whether to check new messages for junk</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_maildir_alt_flag_sep"
              c:identifier="camel_local_settings_set_maildir_alt_flag_sep"
              glib:set-property="maildir-alt-flag-sep"
              version="3.40">
        <doc xml:space="preserve"
             filename="src/camel/camel-local-settings.c"
             line="404">Sets whether Maildir should use alternative flag separator.
See camel_local_settings_get_maildir_alt_flag_sep() for more
information on what it means.

Note: Change to this setting takes effect only for newly created
    Maildir stores.</doc>
        <source-position filename="src/camel/camel-local-settings.h"
                         line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-local-settings.c"
                 line="406">a #CamelLocalSettings</doc>
            <type name="LocalSettings" c:type="CamelLocalSettings*"/>
          </instance-parameter>
          <parameter name="maildir_alt_flag_sep" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-local-settings.c"
                 line="407">value to set</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_path"
              c:identifier="camel_local_settings_set_path"
              glib:set-property="path"
              version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-local-settings.c"
             line="251">Sets the file path to the root of the local mail store.  Any
trailing directory separator characters will be stripped off
of the #CamelLocalSettings:path property.</doc>
        <source-position filename="src/camel/camel-local-settings.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-local-settings.c"
                 line="253">a #CamelLocalSettings</doc>
            <type name="LocalSettings" c:type="CamelLocalSettings*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-local-settings.c"
                 line="254">the file path to the local store</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="filter-all"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_filter_all"
                getter="get_filter_all"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="filter-junk"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_filter_junk"
                getter="get_filter_junk"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="maildir-alt-flag-sep"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_maildir_alt_flag_sep"
                getter="get_maildir_alt_flag_sep"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="path"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_path"
                getter="get_path"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="StoreSettings" c:type="CamelStoreSettings"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="LocalSettingsPrivate" c:type="CamelLocalSettingsPrivate*"/>
      </field>
    </class>
    <record name="LocalSettingsClass"
            c:type="CamelLocalSettingsClass"
            glib:is-gtype-struct-for="LocalSettings">
      <source-position filename="src/camel/camel-local-settings.h" line="72"/>
      <field name="parent_class" readable="0" private="1">
        <type name="StoreSettingsClass" c:type="CamelStoreSettingsClass"/>
      </field>
      <field name="reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="LocalSettingsPrivate"
            c:type="CamelLocalSettingsPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-local-settings.h" line="58"/>
    </record>
    <enumeration name="LockType" c:type="CamelLockType">
      <source-position filename="src/camel/camel-lock.h" line="43"/>
      <member name="read" value="0" c:identifier="CAMEL_LOCK_READ">
      </member>
      <member name="write" value="1" c:identifier="CAMEL_LOCK_WRITE">
      </member>
    </enumeration>
    <function-macro name="MEDIUM"
                    c:identifier="CAMEL_MEDIUM"
                    introspectable="0">
      <source-position filename="src/camel/camel-medium.h" line="34"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MEDIUM_CLASS"
                    c:identifier="CAMEL_MEDIUM_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-medium.h" line="37"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MEDIUM_GET_CLASS"
                    c:identifier="CAMEL_MEDIUM_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-medium.h" line="46"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="MESSAGE_DATE_CURRENT"
              value="-1"
              c:type="CAMEL_MESSAGE_DATE_CURRENT">
      <source-position filename="src/camel/camel-mime-message.h" line="61"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="MESSAGE_INFO"
                    c:identifier="CAMEL_MESSAGE_INFO"
                    introspectable="0">
      <source-position filename="src/camel/camel-message-info.h" line="32"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MESSAGE_INFO_BASE"
                    c:identifier="CAMEL_MESSAGE_INFO_BASE"
                    introspectable="0">
      <source-position filename="src/camel/camel-message-info-base.h"
                       line="31"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MESSAGE_INFO_BASE_CLASS"
                    c:identifier="CAMEL_MESSAGE_INFO_BASE_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-message-info-base.h"
                       line="34"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MESSAGE_INFO_BASE_GET_CLASS"
                    c:identifier="CAMEL_MESSAGE_INFO_BASE_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-message-info-base.h"
                       line="43"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MESSAGE_INFO_CLASS"
                    c:identifier="CAMEL_MESSAGE_INFO_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-message-info.h" line="35"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MESSAGE_INFO_GET_CLASS"
                    c:identifier="CAMEL_MESSAGE_INFO_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-message-info.h" line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="MESSAGE_SYSTEM_MASK"
              value="4294901760"
              c:type="CAMEL_MESSAGE_SYSTEM_MASK">
      <source-position filename="src/camel/camel-message-info.h" line="94"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="MIME_FILTER"
                    c:identifier="CAMEL_MIME_FILTER"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_BASIC"
                    c:identifier="CAMEL_MIME_FILTER_BASIC"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-basic.h"
                       line="32"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_BASIC_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_BASIC_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-basic.h"
                       line="35"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_BASIC_GET_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_BASIC_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-basic.h"
                       line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_BESTENC"
                    c:identifier="CAMEL_MIME_FILTER_BESTENC"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-bestenc.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_BESTENC_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_BESTENC_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-bestenc.h"
                       line="36"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_BESTENC_GET_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_BESTENC_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-bestenc.h"
                       line="45"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_CANON"
                    c:identifier="CAMEL_MIME_FILTER_CANON"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-canon.h"
                       line="32"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_CANON_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_CANON_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-canon.h"
                       line="35"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_CANON_GET_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_CANON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-canon.h"
                       line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_CHARSET"
                    c:identifier="CAMEL_MIME_FILTER_CHARSET"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-charset.h"
                       line="32"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_CHARSET_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_CHARSET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-charset.h"
                       line="35"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_CHARSET_GET_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_CHARSET_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-charset.h"
                       line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_CRLF"
                    c:identifier="CAMEL_MIME_FILTER_CRLF"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-crlf.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_CRLF_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_CRLF_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-crlf.h"
                       line="36"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_CRLF_GET_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_CRLF_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-crlf.h"
                       line="45"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_ENRICHED"
                    c:identifier="CAMEL_MIME_FILTER_ENRICHED"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-enriched.h"
                       line="31"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_ENRICHED_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_ENRICHED_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-enriched.h"
                       line="34"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_ENRICHED_GET_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_ENRICHED_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-enriched.h"
                       line="43"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_FROM"
                    c:identifier="CAMEL_MIME_FILTER_FROM"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-from.h"
                       line="31"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_FROM_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_FROM_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-from.h"
                       line="34"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_FROM_GET_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_FROM_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-from.h"
                       line="43"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_GET_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter.h" line="47"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_GZIP"
                    c:identifier="CAMEL_MIME_FILTER_GZIP"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-gzip.h"
                       line="32"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_GZIP_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_GZIP_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-gzip.h"
                       line="35"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_GZIP_GET_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_GZIP_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-gzip.h"
                       line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_HTML"
                    c:identifier="CAMEL_MIME_FILTER_HTML"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-html.h"
                       line="31"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_HTML_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_HTML_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-html.h"
                       line="34"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_HTML_GET_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_HTML_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-html.h"
                       line="43"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_INDEX"
                    c:identifier="CAMEL_MIME_FILTER_INDEX"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-index.h"
                       line="32"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_INDEX_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_INDEX_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-index.h"
                       line="35"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_INDEX_GET_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_INDEX_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-index.h"
                       line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_LINEWRAP"
                    c:identifier="CAMEL_MIME_FILTER_LINEWRAP"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-linewrap.h"
                       line="31"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_LINEWRAP_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_LINEWRAP_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-linewrap.h"
                       line="34"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_LINEWRAP_GET_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_LINEWRAP_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-linewrap.h"
                       line="43"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_PGP"
                    c:identifier="CAMEL_MIME_FILTER_PGP"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-pgp.h" line="31"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_PGP_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_PGP_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-pgp.h" line="34"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_PGP_GET_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_PGP_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-pgp.h" line="43"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_PROGRESS"
                    c:identifier="CAMEL_MIME_FILTER_PROGRESS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-progress.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_PROGRESS_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_PROGRESS_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-progress.h"
                       line="36"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_PROGRESS_GET_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_PROGRESS_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-progress.h"
                       line="45"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_TOHTML"
                    c:identifier="CAMEL_MIME_FILTER_TOHTML"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-tohtml.h"
                       line="32"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_TOHTML_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_TOHTML_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-tohtml.h"
                       line="35"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_TOHTML_GET_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_TOHTML_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-tohtml.h"
                       line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_WINDOWS"
                    c:identifier="CAMEL_MIME_FILTER_WINDOWS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-windows.h"
                       line="31"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_WINDOWS_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_WINDOWS_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-windows.h"
                       line="34"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_WINDOWS_GET_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_WINDOWS_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-windows.h"
                       line="43"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_YENC"
                    c:identifier="CAMEL_MIME_FILTER_YENC"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-yenc.h"
                       line="32"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_YENC_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_YENC_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-yenc.h"
                       line="35"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_FILTER_YENC_GET_CLASS"
                    c:identifier="CAMEL_MIME_FILTER_YENC_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-yenc.h"
                       line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_MESSAGE"
                    c:identifier="CAMEL_MIME_MESSAGE"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-message.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_MESSAGE_CLASS"
                    c:identifier="CAMEL_MIME_MESSAGE_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-message.h" line="39"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_MESSAGE_GET_CLASS"
                    c:identifier="CAMEL_MIME_MESSAGE_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-message.h" line="48"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_PARSER"
                    c:identifier="CAMEL_MIME_PARSER"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-parser.h" line="34"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_PARSER_CLASS"
                    c:identifier="CAMEL_MIME_PARSER_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-parser.h" line="37"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_PARSER_GET_CLASS"
                    c:identifier="CAMEL_MIME_PARSER_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-parser.h" line="46"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_PART"
                    c:identifier="CAMEL_MIME_PART"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-part.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_PART_CLASS"
                    c:identifier="CAMEL_MIME_PART_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-part.h" line="39"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MIME_PART_GET_CLASS"
                    c:identifier="CAMEL_MIME_PART_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-part.h" line="48"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="MIME_YDECODE_STATE_BEGIN"
              value="4096"
              c:type="CAMEL_MIME_YDECODE_STATE_BEGIN">
      <source-position filename="src/camel/camel-mime-filter-yenc.h"
                       line="65"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MIME_YDECODE_STATE_DECODE"
              value="16384"
              c:type="CAMEL_MIME_YDECODE_STATE_DECODE">
      <source-position filename="src/camel/camel-mime-filter-yenc.h"
                       line="67"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MIME_YDECODE_STATE_END"
              value="32768"
              c:type="CAMEL_MIME_YDECODE_STATE_END">
      <source-position filename="src/camel/camel-mime-filter-yenc.h"
                       line="68"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MIME_YDECODE_STATE_EOLN"
              value="256"
              c:type="CAMEL_MIME_YDECODE_STATE_EOLN">
      <source-position filename="src/camel/camel-mime-filter-yenc.h"
                       line="60"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MIME_YDECODE_STATE_ESCAPE"
              value="512"
              c:type="CAMEL_MIME_YDECODE_STATE_ESCAPE">
      <source-position filename="src/camel/camel-mime-filter-yenc.h"
                       line="61"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MIME_YDECODE_STATE_INIT"
              value="0"
              c:type="CAMEL_MIME_YDECODE_STATE_INIT">
      <source-position filename="src/camel/camel-mime-filter-yenc.h"
                       line="54"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MIME_YDECODE_STATE_PART"
              value="8192"
              c:type="CAMEL_MIME_YDECODE_STATE_PART">
      <source-position filename="src/camel/camel-mime-filter-yenc.h"
                       line="66"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="MIME_YENCODE_CRC_FINAL"
                    c:identifier="CAMEL_MIME_YENCODE_CRC_FINAL"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-filter-yenc.h"
                       line="71"/>
      <parameters>
        <parameter name="crc">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="MIME_YENCODE_CRC_INIT"
              value="-1"
              c:type="CAMEL_MIME_YENCODE_CRC_INIT">
      <source-position filename="src/camel/camel-mime-filter-yenc.h"
                       line="70"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MIME_YENCODE_STATE_INIT"
              value="0"
              c:type="CAMEL_MIME_YENCODE_STATE_INIT">
      <source-position filename="src/camel/camel-mime-filter-yenc.h"
                       line="55"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <record name="MIRecord" c:type="CamelMIRecord" version="2.24">
      <doc xml:space="preserve"
           filename="src/camel/camel-db.h"
           line="153">The extensive DB format, supporting basic searching and sorting.</doc>
      <source-position filename="src/camel/camel-db.h" line="217"/>
      <field name="uid" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="155">Message UID</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="flags" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="156">Camel Message info flags</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="msg_type" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="157">unused</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="dirty" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="158">whether the message info requires upload to the server; it corresponds to #CAMEL_MESSAGE_FOLDER_FLAGGED</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="read" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="159">boolean read status</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="deleted" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="160">boolean deleted status</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="replied" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="161">boolean replied status</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="important" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="162">boolean important status</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="junk" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="163">boolean junk status</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="attachment" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="164">boolean attachment status</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="size" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="165">size of the mail</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="dsent" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="166">date sent</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="dreceived" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="167">date received</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="subject" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="168">subject of the mail</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="from" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="169">sender</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="to" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="170">recipient</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="cc" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="171">CC members</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="mlist" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="172">message list headers</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="followup_flag" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="173">followup flag / also can be queried to see for followup or not</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="followup_completed_on" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="174">completed date, can be used to see if completed</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="followup_due_by" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="175">to see the due by date</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="part" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="176">part / references / thread id</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="labels" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="177">labels of mails also called as userflags</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="usertags" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="178">composite string of user tags</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="cinfo" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="179">content info string - composite string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="bdata" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="180">provider specific data</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="userheaders" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="181">value for user-defined message headers; Since: 3.42</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="preview" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-db.h"
             line="182">message body preview; Since: 3.42</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
    </record>
    <function-macro name="MULTIPART"
                    c:identifier="CAMEL_MULTIPART"
                    introspectable="0">
      <source-position filename="src/camel/camel-multipart.h" line="34"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MULTIPART_CLASS"
                    c:identifier="CAMEL_MULTIPART_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-multipart.h" line="37"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MULTIPART_ENCRYPTED"
                    c:identifier="CAMEL_MULTIPART_ENCRYPTED"
                    introspectable="0">
      <source-position filename="src/camel/camel-multipart-encrypted.h"
                       line="31"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MULTIPART_ENCRYPTED_CLASS"
                    c:identifier="CAMEL_MULTIPART_ENCRYPTED_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-multipart-encrypted.h"
                       line="34"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MULTIPART_ENCRYPTED_GET_CLASS"
                    c:identifier="CAMEL_MULTIPART_ENCRYPTED_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-multipart-encrypted.h"
                       line="43"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MULTIPART_GET_CLASS"
                    c:identifier="CAMEL_MULTIPART_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-multipart.h" line="46"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MULTIPART_SIGNED"
                    c:identifier="CAMEL_MULTIPART_SIGNED"
                    introspectable="0">
      <source-position filename="src/camel/camel-multipart-signed.h"
                       line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MULTIPART_SIGNED_CLASS"
                    c:identifier="CAMEL_MULTIPART_SIGNED_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-multipart-signed.h"
                       line="39"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MULTIPART_SIGNED_GET_CLASS"
                    c:identifier="CAMEL_MULTIPART_SIGNED_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-multipart-signed.h"
                       line="48"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Medium"
           c:symbol-prefix="medium"
           c:type="CamelMedium"
           parent="DataWrapper"
           abstract="1"
           glib:type-name="CamelMedium"
           glib:get-type="camel_medium_get_type"
           glib:type-struct="MediumClass">
      <source-position filename="src/camel/camel-medium.h" line="86"/>
      <virtual-method name="add_header" invoker="add_header">
        <doc xml:space="preserve"
             filename="src/camel/camel-medium.c"
             line="161">Adds a header to a #CamelMedium.</doc>
        <source-position filename="src/camel/camel-medium.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="medium" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="163">a #CamelMedium object</doc>
            <type name="Medium" c:type="CamelMedium*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="164">name of the header</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="165">value of the header</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="dup_headers" invoker="dup_headers" version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-medium.c"
             line="273">Gets an array of all header name/value pairs. The values will be
decoded to UTF-8 for any headers that are recognized by Camel.
See also camel_medium_get_headers().</doc>
        <source-position filename="src/camel/camel-medium.h" line="76"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-medium.c"
               line="281">the array of headers, which must be freed with camel_name_value_array_free().</doc>
          <type name="NameValueArray" c:type="CamelNameValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="medium" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="275">a #CamelMedium object</doc>
            <type name="Medium" c:type="CamelMedium*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_content" invoker="get_content">
        <doc xml:space="preserve"
             filename="src/camel/camel-medium.c"
             line="325">Gets a data wrapper that represents the content of the medium,
without its headers.</doc>
        <source-position filename="src/camel/camel-medium.h" line="80"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-medium.c"
               line="332">a #CamelDataWrapper containing
@medium's content. Can return %NULL.</doc>
          <type name="DataWrapper" c:type="CamelDataWrapper*"/>
        </return-value>
        <parameters>
          <instance-parameter name="medium" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="327">a #CamelMedium object</doc>
            <type name="Medium" c:type="CamelMedium*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_header" invoker="get_header">
        <doc xml:space="preserve"
             filename="src/camel/camel-medium.c"
             line="243">Gets the value of the named header in the medium, or %NULL if
it is unset. The caller should not modify or free the data.

If the header occurs more than once, only retrieve the first
instance of the header.  For multi-occuring headers, use
camel_medium_dup_headers() or camel_medium_get_headers().</doc>
        <source-position filename="src/camel/camel-medium.h" line="73"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-medium.c"
               line="255">the value of the named header, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="medium" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="245">a #CamelMedium</doc>
            <type name="Medium" c:type="CamelMedium*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="246">the name of the header</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_headers" invoker="get_headers" version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-medium.c"
             line="299">Gets an array of all header name/value pairs. The values will be
decoded to UTF-8 for any headers that are recognized by Camel.
See also camel_medium_dup_headers().</doc>
        <source-position filename="src/camel/camel-medium.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-medium.c"
               line="307">the array of headers, owned by @medium.</doc>
          <type name="NameValueArray" c:type="const CamelNameValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="medium" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="301">a #CamelMedium object</doc>
            <type name="Medium" c:type="CamelMedium*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove_header" invoker="remove_header">
        <doc xml:space="preserve"
             filename="src/camel/camel-medium.c"
             line="219">Removes the named header from the medium.  All occurances of the
header are removed.</doc>
        <source-position filename="src/camel/camel-medium.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="medium" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="221">a #CamelMedium</doc>
            <type name="Medium" c:type="CamelMedium*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="222">the name of the header</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_content" invoker="set_content">
        <doc xml:space="preserve"
             filename="src/camel/camel-medium.c"
             line="349">Sets the content of @medium to be @content.</doc>
        <source-position filename="src/camel/camel-medium.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="medium" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="351">a #CamelMedium object</doc>
            <type name="Medium" c:type="CamelMedium*"/>
          </instance-parameter>
          <parameter name="content"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="352">a #CamelDataWrapper object</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_header" invoker="set_header">
        <doc xml:space="preserve"
             filename="src/camel/camel-medium.c"
             line="187">Sets the value of a header.  Any other occurances of the header
will be removed.  Setting a %NULL header can be used to remove
the header also.</doc>
        <source-position filename="src/camel/camel-medium.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="medium" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="189">a #CamelMedium object</doc>
            <type name="Medium" c:type="CamelMedium*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="190">name of the header</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="191">value of the header</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_header" c:identifier="camel_medium_add_header">
        <doc xml:space="preserve"
             filename="src/camel/camel-medium.c"
             line="161">Adds a header to a #CamelMedium.</doc>
        <source-position filename="src/camel/camel-medium.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="medium" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="163">a #CamelMedium object</doc>
            <type name="Medium" c:type="CamelMedium*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="164">name of the header</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="165">value of the header</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_headers"
              c:identifier="camel_medium_dup_headers"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-medium.c"
             line="273">Gets an array of all header name/value pairs. The values will be
decoded to UTF-8 for any headers that are recognized by Camel.
See also camel_medium_get_headers().</doc>
        <source-position filename="src/camel/camel-medium.h" line="100"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-medium.c"
               line="281">the array of headers, which must be freed with camel_name_value_array_free().</doc>
          <type name="NameValueArray" c:type="CamelNameValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="medium" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="275">a #CamelMedium object</doc>
            <type name="Medium" c:type="CamelMedium*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_content"
              c:identifier="camel_medium_get_content"
              glib:get-property="content">
        <doc xml:space="preserve"
             filename="src/camel/camel-medium.c"
             line="325">Gets a data wrapper that represents the content of the medium,
without its headers.</doc>
        <source-position filename="src/camel/camel-medium.h" line="104"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-medium.c"
               line="332">a #CamelDataWrapper containing
@medium's content. Can return %NULL.</doc>
          <type name="DataWrapper" c:type="CamelDataWrapper*"/>
        </return-value>
        <parameters>
          <instance-parameter name="medium" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="327">a #CamelMedium object</doc>
            <type name="Medium" c:type="CamelMedium*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_header" c:identifier="camel_medium_get_header">
        <doc xml:space="preserve"
             filename="src/camel/camel-medium.c"
             line="243">Gets the value of the named header in the medium, or %NULL if
it is unset. The caller should not modify or free the data.

If the header occurs more than once, only retrieve the first
instance of the header.  For multi-occuring headers, use
camel_medium_dup_headers() or camel_medium_get_headers().</doc>
        <source-position filename="src/camel/camel-medium.h" line="97"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-medium.c"
               line="255">the value of the named header, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="medium" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="245">a #CamelMedium</doc>
            <type name="Medium" c:type="CamelMedium*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="246">the name of the header</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_headers"
              c:identifier="camel_medium_get_headers"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-medium.c"
             line="299">Gets an array of all header name/value pairs. The values will be
decoded to UTF-8 for any headers that are recognized by Camel.
See also camel_medium_dup_headers().</doc>
        <source-position filename="src/camel/camel-medium.h" line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-medium.c"
               line="307">the array of headers, owned by @medium.</doc>
          <type name="NameValueArray" c:type="const CamelNameValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="medium" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="301">a #CamelMedium object</doc>
            <type name="Medium" c:type="CamelMedium*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_header" c:identifier="camel_medium_remove_header">
        <doc xml:space="preserve"
             filename="src/camel/camel-medium.c"
             line="219">Removes the named header from the medium.  All occurances of the
header are removed.</doc>
        <source-position filename="src/camel/camel-medium.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="medium" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="221">a #CamelMedium</doc>
            <type name="Medium" c:type="CamelMedium*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="222">the name of the header</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_content"
              c:identifier="camel_medium_set_content"
              glib:set-property="content">
        <doc xml:space="preserve"
             filename="src/camel/camel-medium.c"
             line="349">Sets the content of @medium to be @content.</doc>
        <source-position filename="src/camel/camel-medium.h" line="105"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="medium" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="351">a #CamelMedium object</doc>
            <type name="Medium" c:type="CamelMedium*"/>
          </instance-parameter>
          <parameter name="content"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="352">a #CamelDataWrapper object</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_header" c:identifier="camel_medium_set_header">
        <doc xml:space="preserve"
             filename="src/camel/camel-medium.c"
             line="187">Sets the value of a header.  Any other occurances of the header
will be removed.  Setting a %NULL header can be used to remove
the header also.</doc>
        <source-position filename="src/camel/camel-medium.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="medium" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="189">a #CamelMedium object</doc>
            <type name="Medium" c:type="CamelMedium*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="190">name of the header</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="191">value of the header</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="content"
                writable="1"
                transfer-ownership="none"
                setter="set_content"
                getter="get_content">
        <type name="DataWrapper"/>
      </property>
      <field name="parent">
        <type name="DataWrapper" c:type="CamelDataWrapper"/>
      </field>
      <field name="priv">
        <type name="MediumPrivate" c:type="CamelMediumPrivate*"/>
      </field>
    </class>
    <record name="MediumClass"
            c:type="CamelMediumClass"
            glib:is-gtype-struct-for="Medium">
      <source-position filename="src/camel/camel-medium.h" line="86"/>
      <field name="parent_class">
        <type name="DataWrapperClass" c:type="CamelDataWrapperClass"/>
      </field>
      <field name="add_header">
        <callback name="add_header">
          <source-position filename="src/camel/camel-medium.h" line="65"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="medium" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-medium.c"
                   line="163">a #CamelMedium object</doc>
              <type name="Medium" c:type="CamelMedium*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-medium.c"
                   line="164">name of the header</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-medium.c"
                   line="165">value of the header</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_header">
        <callback name="set_header">
          <source-position filename="src/camel/camel-medium.h" line="68"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="medium" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-medium.c"
                   line="189">a #CamelMedium object</doc>
              <type name="Medium" c:type="CamelMedium*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-medium.c"
                   line="190">name of the header</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="value"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-medium.c"
                   line="191">value of the header</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove_header">
        <callback name="remove_header">
          <source-position filename="src/camel/camel-medium.h" line="71"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="medium" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-medium.c"
                   line="221">a #CamelMedium</doc>
              <type name="Medium" c:type="CamelMedium*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-medium.c"
                   line="222">the name of the header</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_header">
        <callback name="get_header">
          <source-position filename="src/camel/camel-medium.h" line="73"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="255">the value of the named header, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="medium" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-medium.c"
                   line="245">a #CamelMedium</doc>
              <type name="Medium" c:type="CamelMedium*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-medium.c"
                   line="246">the name of the header</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="dup_headers">
        <callback name="dup_headers">
          <source-position filename="src/camel/camel-medium.h" line="76"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="281">the array of headers, which must be freed with camel_name_value_array_free().</doc>
            <type name="NameValueArray" c:type="CamelNameValueArray*"/>
          </return-value>
          <parameters>
            <parameter name="medium" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-medium.c"
                   line="275">a #CamelMedium object</doc>
              <type name="Medium" c:type="CamelMedium*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_headers">
        <callback name="get_headers">
          <source-position filename="src/camel/camel-medium.h" line="78"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="307">the array of headers, owned by @medium.</doc>
            <type name="NameValueArray" c:type="const CamelNameValueArray*"/>
          </return-value>
          <parameters>
            <parameter name="medium" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-medium.c"
                   line="301">a #CamelMedium object</doc>
              <type name="Medium" c:type="CamelMedium*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_content">
        <callback name="get_content">
          <source-position filename="src/camel/camel-medium.h" line="80"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-medium.c"
                 line="332">a #CamelDataWrapper containing
@medium's content. Can return %NULL.</doc>
            <type name="DataWrapper" c:type="CamelDataWrapper*"/>
          </return-value>
          <parameters>
            <parameter name="medium" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-medium.c"
                   line="327">a #CamelMedium object</doc>
              <type name="Medium" c:type="CamelMedium*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_content">
        <callback name="set_content">
          <source-position filename="src/camel/camel-medium.h" line="81"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="medium" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-medium.c"
                   line="351">a #CamelMedium object</doc>
              <type name="Medium" c:type="CamelMedium*"/>
            </parameter>
            <parameter name="content"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-medium.c"
                   line="352">a #CamelDataWrapper object</doc>
              <type name="DataWrapper" c:type="CamelDataWrapper*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="MediumPrivate"
            c:type="CamelMediumPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-medium.h" line="55"/>
    </record>
    <record name="MemChunk"
            c:type="CamelMemChunk"
            disguised="1"
            opaque="1"
            version="3.4">
      <source-position filename="src/camel/camel-memchunk.h" line="33"/>
    </record>
    <record name="MemPool"
            c:type="CamelMemPool"
            disguised="1"
            opaque="1"
            version="2.32">
      <source-position filename="src/camel/camel-mempool.h" line="38"/>
    </record>
    <enumeration name="MemPoolFlags" version="2.32" c:type="CamelMemPoolFlags">
      <source-position filename="src/camel/camel-mempool.h" line="58"/>
      <member name="struct"
              value="0"
              c:identifier="CAMEL_MEMPOOL_ALIGN_STRUCT">
        <doc xml:space="preserve"
             filename="src/camel/camel-mempool.h"
             line="42">Allocate to native structure alignment</doc>
      </member>
      <member name="word" value="1" c:identifier="CAMEL_MEMPOOL_ALIGN_WORD">
        <doc xml:space="preserve"
             filename="src/camel/camel-mempool.h"
             line="44">Allocate to words - 16 bit alignment</doc>
      </member>
      <member name="byte" value="2" c:identifier="CAMEL_MEMPOOL_ALIGN_BYTE">
        <doc xml:space="preserve"
             filename="src/camel/camel-mempool.h"
             line="46">Allocate to bytes - 8 bit alignment</doc>
      </member>
      <member name="mask" value="3" c:identifier="CAMEL_MEMPOOL_ALIGN_MASK">
        <doc xml:space="preserve"
             filename="src/camel/camel-mempool.h"
             line="48">Which bits determine the alignment information</doc>
      </member>
    </enumeration>
    <record name="MessageContentInfo"
            c:type="CamelMessageContentInfo"
            glib:type-name="CamelMessageContentInfo"
            glib:get-type="camel_message_content_info_get_type"
            c:symbol-prefix="message_content_info">
      <source-position filename="src/camel/camel-mime-part-utils.h" line="71"/>
      <field name="next" writable="1">
        <type name="MessageContentInfo" c:type="CamelMessageContentInfo*"/>
      </field>
      <field name="childs" writable="1">
        <type name="MessageContentInfo" c:type="CamelMessageContentInfo*"/>
      </field>
      <field name="parent" writable="1">
        <type name="MessageContentInfo" c:type="CamelMessageContentInfo*"/>
      </field>
      <field name="type" writable="1">
        <type name="ContentType" c:type="CamelContentType*"/>
      </field>
      <field name="disposition" writable="1">
        <type name="ContentDisposition" c:type="CamelContentDisposition*"/>
      </field>
      <field name="id" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="description" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="encoding" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="size" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <constructor name="new" c:identifier="camel_message_content_info_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-part-utils.c"
             line="166">Allocate a new #CamelMessageContentInfo.</doc>
        <source-position filename="src/camel/camel-mime-part-utils.h"
                         line="76"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-part-utils.c"
               line="171">a newly allocated #CamelMessageContentInfo</doc>
          <type name="MessageContentInfo" c:type="CamelMessageContentInfo*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_headers"
                   c:identifier="camel_message_content_info_new_from_headers">
        <source-position filename="src/camel/camel-mime-part-utils.h"
                         line="81"/>
        <return-value transfer-ownership="full">
          <type name="MessageContentInfo" c:type="CamelMessageContentInfo*"/>
        </return-value>
        <parameters>
          <parameter name="headers" transfer-ownership="none">
            <type name="NameValueArray" c:type="const CamelNameValueArray*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_message"
                   c:identifier="camel_message_content_info_new_from_message">
        <source-position filename="src/camel/camel-mime-part-utils.h"
                         line="87"/>
        <return-value transfer-ownership="full">
          <type name="MessageContentInfo" c:type="CamelMessageContentInfo*"/>
        </return-value>
        <parameters>
          <parameter name="mime_part" transfer-ownership="none">
            <type name="MimePart" c:type="CamelMimePart*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_parser"
                   c:identifier="camel_message_content_info_new_from_parser">
        <source-position filename="src/camel/camel-mime-part-utils.h"
                         line="84"/>
        <return-value transfer-ownership="full">
          <type name="MessageContentInfo" c:type="CamelMessageContentInfo*"/>
        </return-value>
        <parameters>
          <parameter name="parser" transfer-ownership="none">
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy"
              c:identifier="camel_message_content_info_copy"
              version="3.24">
        <source-position filename="src/camel/camel-mime-part-utils.h"
                         line="78"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-part-utils.c"
               line="183">a copy of @src, or %NULL, if @src was %NULL</doc>
          <type name="MessageContentInfo" c:type="CamelMessageContentInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part-utils.c"
                 line="181">a source #CamelMessageContentInfo to copy</doc>
            <type name="MessageContentInfo"
                  c:type="const CamelMessageContentInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dump" c:identifier="camel_message_content_info_dump">
        <source-position filename="src/camel/camel-mime-part-utils.h"
                         line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ci" transfer-ownership="none">
            <type name="MessageContentInfo" c:type="CamelMessageContentInfo*"/>
          </instance-parameter>
          <parameter name="depth" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="camel_message_content_info_free">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-part-utils.c"
             line="234">Recursively frees the content info @ci, and all associated memory.</doc>
        <source-position filename="src/camel/camel-mime-part-utils.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ci" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part-utils.c"
                 line="236">a #CamelMessageContentInfo</doc>
            <type name="MessageContentInfo" c:type="CamelMessageContentInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="traverse"
              c:identifier="camel_message_content_info_traverse">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-part-utils.c"
             line="322">Calls the @func for each #CamelMessageContentInfo, including the top one.
The @func can return %TRUE to continue processing or %FALSE to stop it.</doc>
        <source-position filename="src/camel/camel-mime-part-utils.h"
                         line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-part-utils.c"
               line="331">%FALSE on error or when the @func returned %FALSE, otherwise %TRUE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ci" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part-utils.c"
                 line="324">a #CamelMessageContentInfo</doc>
            <type name="MessageContentInfo" c:type="CamelMessageContentInfo*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part-utils.c"
                 line="325">a #CamelMessageContentInfoTraverseCallback</doc>
            <type name="MessageContentInfoTraverseCallback"
                  c:type="CamelMessageContentInfoTraverseCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part-utils.c"
                 line="326">user data passed to @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <callback name="MessageContentInfoTraverseCallback"
              c:type="CamelMessageContentInfoTraverseCallback"
              version="3.36">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-part-utils.h"
           line="41">This is the callback signature for camel_message_content_info_traverse().</doc>
      <source-position filename="src/camel/camel-mime-part-utils.h" line="53"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-part-utils.h"
             line="49">%TRUE to continue processing or %FALSE to stop it.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="ci" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-part-utils.h"
               line="43">a #CamelMessageContentInfo</doc>
          <type name="MessageContentInfo" c:type="CamelMessageContentInfo*"/>
        </parameter>
        <parameter name="depth" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-part-utils.h"
               line="44">the current depth</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-part-utils.h"
               line="45">data passed to camel_message_content_info_traverse()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <bitfield name="MessageFlags"
              glib:type-name="CamelMessageFlags"
              glib:get-type="camel_message_flags_get_type"
              c:type="CamelMessageFlags">
      <member name="answered"
              value="1"
              c:identifier="CAMEL_MESSAGE_ANSWERED"
              glib:nick="answered"
              glib:name="CAMEL_MESSAGE_ANSWERED">
      </member>
      <member name="deleted"
              value="2"
              c:identifier="CAMEL_MESSAGE_DELETED"
              glib:nick="deleted"
              glib:name="CAMEL_MESSAGE_DELETED">
      </member>
      <member name="draft"
              value="4"
              c:identifier="CAMEL_MESSAGE_DRAFT"
              glib:nick="draft"
              glib:name="CAMEL_MESSAGE_DRAFT">
      </member>
      <member name="flagged"
              value="8"
              c:identifier="CAMEL_MESSAGE_FLAGGED"
              glib:nick="flagged"
              glib:name="CAMEL_MESSAGE_FLAGGED">
      </member>
      <member name="seen"
              value="16"
              c:identifier="CAMEL_MESSAGE_SEEN"
              glib:nick="seen"
              glib:name="CAMEL_MESSAGE_SEEN">
      </member>
      <member name="attachments"
              value="32"
              c:identifier="CAMEL_MESSAGE_ATTACHMENTS"
              glib:nick="attachments"
              glib:name="CAMEL_MESSAGE_ATTACHMENTS">
      </member>
      <member name="answered_all"
              value="64"
              c:identifier="CAMEL_MESSAGE_ANSWERED_ALL"
              glib:nick="answered-all"
              glib:name="CAMEL_MESSAGE_ANSWERED_ALL">
      </member>
      <member name="junk"
              value="128"
              c:identifier="CAMEL_MESSAGE_JUNK"
              glib:nick="junk"
              glib:name="CAMEL_MESSAGE_JUNK">
      </member>
      <member name="secure"
              value="256"
              c:identifier="CAMEL_MESSAGE_SECURE"
              glib:nick="secure"
              glib:name="CAMEL_MESSAGE_SECURE">
      </member>
      <member name="notjunk"
              value="512"
              c:identifier="CAMEL_MESSAGE_NOTJUNK"
              glib:nick="notjunk"
              glib:name="CAMEL_MESSAGE_NOTJUNK">
      </member>
      <member name="forwarded"
              value="1024"
              c:identifier="CAMEL_MESSAGE_FORWARDED"
              glib:nick="forwarded"
              glib:name="CAMEL_MESSAGE_FORWARDED">
      </member>
      <member name="folder_flagged"
              value="65536"
              c:identifier="CAMEL_MESSAGE_FOLDER_FLAGGED"
              glib:nick="folder-flagged"
              glib:name="CAMEL_MESSAGE_FOLDER_FLAGGED">
      </member>
      <member name="junk_learn"
              value="1073741824"
              c:identifier="CAMEL_MESSAGE_JUNK_LEARN"
              glib:nick="junk-learn"
              glib:name="CAMEL_MESSAGE_JUNK_LEARN">
      </member>
      <member name="user"
              value="2147483648"
              c:identifier="CAMEL_MESSAGE_USER"
              glib:nick="user"
              glib:name="CAMEL_MESSAGE_USER">
      </member>
    </bitfield>
    <class name="MessageInfo"
           c:symbol-prefix="message_info"
           c:type="CamelMessageInfo"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="CamelMessageInfo"
           glib:get-type="camel_message_info_get_type"
           glib:type-struct="MessageInfoClass">
      <source-position filename="src/camel/camel-message-info.h" line="209"/>
      <constructor name="new"
                   c:identifier="camel_message_info_new"
                   version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="1147">Create a new #CamelMessageInfo object, optionally for given @summary.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="213"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="1153">a new #CamelMessageInfo object</doc>
          <type name="MessageInfo" c:type="CamelMessageInfo*"/>
        </return-value>
        <parameters>
          <parameter name="summary"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1149">parent #CamelFolderSummary object, or %NULL</doc>
            <type name="FolderSummary" c:type="_CamelFolderSummary*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_headers"
                   c:identifier="camel_message_info_new_from_headers"
                   version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="3407">Create a new #CamelMessageInfo pre-populated with info from
@headers.</doc>
        <source-position filename="src/camel/camel-folder-summary.h"
                         line="270"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="3415">a new #CamelMessageInfo</doc>
          <type name="MessageInfo" c:type="CamelMessageInfo*"/>
        </return-value>
        <parameters>
          <parameter name="summary"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="3409">a #CamelFolderSummary object or %NULL</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </parameter>
          <parameter name="headers" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-folder-summary.c"
                 line="3410">a #CamelNameValueArray</doc>
            <type name="NameValueArray" c:type="const CamelNameValueArray*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="clone" invoker="clone" version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="1176">Clones the @mi as a new #CamelMessageInfo and eventually assigns
a new #CamelFolderSummary to it. If it's not set, then the same
summary as the one with @mi is used.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="109"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="1185">a new #CamelMessageInfo object, clone of the @mi</doc>
          <type name="MessageInfo" c:type="CamelMessageInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1178">a #CamelMessageInfo to clone</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="assign_summary"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1179">parent #CamelFolderSummary object, or %NULL, to set on the clone</doc>
            <type name="FolderSummary" c:type="_CamelFolderSummary*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="dup_user_flags"
                      invoker="dup_user_flags"
                      version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="130"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="1982">A newly allocated #CamelNamedFlags with
  all the currently set user flags on the @mi. Free the returned structure
  with camel_named_flags_free() when no londer needed.</doc>
          <type name="NamedFlags" c:type="CamelNamedFlags*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1980">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="dup_user_tags"
                      invoker="dup_user_tags"
                      version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="143"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2192">a newly allocated #CamelNameValueArray containing all set
  user tags of the @mi. Free it with camel_name_value_array_free() when no longer needed.</doc>
          <type name="NameValueArray" c:type="CamelNameValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2190">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_cc" invoker="get_cc" version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="157"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2488">CC address of the @mi.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2486">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_date_received"
                      invoker="get_date_received"
                      version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="171"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2780">time_t of the Received header of the message, encoded as gint64.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2778">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_date_sent"
                      invoker="get_date_sent"
                      version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="166"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2707">time_t of the Date header of the message, encoded as gint64.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2705">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_flags" invoker="get_flags" version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="117"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="1789">Bit-or of #CamelMessageFlags set on the @mi.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1787">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_from" invoker="get_from" version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="151"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2342">From address of the @mi.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2340">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_headers" invoker="get_headers" version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="187"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="3052">All the message headers of the associated
  message, or %NULL, when none are available.</doc>
          <type name="NameValueArray" c:type="const CamelNameValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3050">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_message_id"
                      invoker="get_message_id"
                      version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="2849">Encoded Message-ID of the associated message as a guint64 number,
partial MD5 sum. The value can be cast to #CamelSummaryMessageID.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="176"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2856">Partial MD5 hash of the Message-ID header of the associated message.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2851">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_mlist" invoker="get_mlist" version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="160"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2561">Mailing list address of the @mi.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2559">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_preview" invoker="get_preview" version="3.42">
        <source-position filename="src/camel/camel-message-info.h" line="203"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="3365">Body preview of the associated
   message, or %NULL, when not available.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3363">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_references"
                      invoker="get_references"
                      version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="2926">Gets encoded In-Reply-To and References headers of the associated
message as an array of guint64 numbers, partial MD5 sums. Each value
can be cast to #CamelSummaryMessageID.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="181"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2934">A #GArray of
  guint64 encoded Message-ID-s; or %NULL when none are available.</doc>
          <array name="GLib.Array" c:type="const GArray*">
            <type name="guint64"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2928">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size" invoker="get_size" version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="163"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2634">Size of the associated message.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2632">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_subject" invoker="get_subject" version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="148"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2269">Subject of the #mi.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2267">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_to" invoker="get_to" version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="154"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2415">To address of the @mi.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2413">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_user_flag"
                      invoker="get_user_flag"
                      version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="121"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="1878">Whther the user flag named @name is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1875">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1876">user flag name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_user_flags"
                      invoker="get_user_flags"
                      version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="128"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="1954">A #CamelNamedFlags with all the currently set
  user flags on the @mi. Do not modify it.</doc>
          <type name="NamedFlags" c:type="const CamelNamedFlags*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1952">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_user_header"
                      invoker="get_user_header"
                      version="3.42">
        <source-position filename="src/camel/camel-message-info.h" line="190"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="3162">Value of the header named @name from
   the user-defined message headers of the associated message, or %NULL,
   when not available.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3159">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3160">header name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_user_headers"
                      invoker="get_user_headers"
                      version="3.42">
        <source-position filename="src/camel/camel-message-info.h" line="198"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="3264">All the user-defined message headers
   of the associated message, or %NULL, when none are available.</doc>
          <type name="NameValueArray" c:type="const CamelNameValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3262">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_user_tag"
                      invoker="get_user_tag"
                      version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="135"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2061">Value of the user tag, or %NULL when
  it is not set.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2058">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2059">user tag name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_user_tags"
                      invoker="get_user_tags"
                      version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="141"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2164">a #CamelNameValueArray containing all set
  user tags of the @mi. Do not modify it.</doc>
          <type name="NameValueArray" c:type="const CamelNameValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2162">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load" invoker="load" version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="1206">Load content of @mi from the data stored in @record. The @bdata_ptr points
to the current position of the record-&gt;bdata, where the read can continue.
Use helper functions camel_util_bdata_get_number() and camel_util_bdata_get_string()
to read data from it and also move forward the *bdata_ptr.

After successful load of the @mi, the 'dirty' flag is unset.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="111"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="1219">Whether the load was successful.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1208">a #CamelMessageInfo to load</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="record"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1209">a #CamelMIRecord to load the @mi from</doc>
            <type name="MIRecord" c:type="const _CamelMIRecord*"/>
          </parameter>
          <parameter name="bdata_ptr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1210">a backend specific data (bdata) pointer</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="save" invoker="save" version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="1255">Save the @mi content to the message info record @record. It can populate all
but the record-&gt;bdata value, which is set fro mthe @bdata_str. Use helper functions
camel_util_bdata_put_number() and camel_util_bdata_put_string() to put data into the @bdata_str.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="1265">Whether the save succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1257">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="record"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1258">a #CamelMIRecord to populate</doc>
            <type name="MIRecord" c:type="_CamelMIRecord*"/>
          </parameter>
          <parameter name="bdata_str" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1259">a #GString with a string to save as backend specific data (bdata)</doc>
            <type name="GLib.String" c:type="GString*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_cc" invoker="set_cc" version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="2511">Sets CC from the associated message.

This property is considered static, in a meaning that it should
not change during the life-time of the @mi, the same as it doesn't
change in the associated message.

If the @mi changed, the 'dirty' flag and the 'folder-flagged' flag are
set automatically, unless the @mi is aborting notifications. There is not emitted
folder's "changed" signal for this @mi.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="158"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2526">Whether the value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2513">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="cc"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2514">a CC to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_date_received"
                      invoker="set_date_received"
                      version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="2803">Sets received date (the Received header) of the associated message.

This property is considered static, in a meaning that it should
not change during the life-time of the @mi, the same as it doesn't
change in the associated message.

If the @mi changed, the 'dirty' flag and the 'folder-flagged' flag are
set automatically, unless the @mi is aborting notifications. There is not emitted
folder's "changed" signal for this @mi.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="173"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2818">Whether the value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2805">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="date_received" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2806">a received date to set</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_date_sent"
                      invoker="set_date_sent"
                      version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="2730">Sets sent date (the Date header) of the associated message.

This property is considered static, in a meaning that it should
not change during the life-time of the @mi, the same as it doesn't
change in the associated message.

If the @mi changed, the 'dirty' flag and the 'folder-flagged' flag are
set automatically, unless the @mi is aborting notifications. There is not emitted
folder's "changed" signal for this @mi.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="168"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2745">Whether the value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2732">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="date_sent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2733">a sent date to set</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_flags" invoker="set_flags" version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="1812">Change the state of the flags on the @mi. Both @mask and @set are bit-or
of #CamelMessageFlags.

If the @mi changed, the 'dirty' flag and the 'folder-flagged' flag are
set automatically, unless the @mi is aborting notifications. There is also emitted
folder's "changed" signal for this @mi, if necessary. In case
the CAMEL_MESSAGE_FOLDER_FLAGGED flag would be set and the @mi is
not aborting notifications, the 'folder-flagged-stamp' changes too.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="118"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="1827">Whether the flags changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1814">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="mask" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1815">mask of flags to change</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1816">state the flags should be changed to</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_from" invoker="set_from" version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="2365">Sets From from the associated message.

This property is considered static, in a meaning that it should
not change during the life-time of the @mi, the same as it doesn't
change in the associated message.

If the @mi changed, the 'dirty' flag and the 'folder-flagged' flag are
set automatically, unless the @mi is aborting notifications. There is not emitted
folder's "changed" signal for this @mi.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="152"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2380">Whether the value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2367">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="from"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2368">a From to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_message_id"
                      invoker="set_message_id"
                      version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="2879">Sets encoded Message-ID of the associated message as a guint64 number,
partial MD5 sum. The value can be cast to #CamelSummaryMessageID.

This property is considered static, in a meaning that it should
not change during the life-time of the @mi, the same as it doesn't
change in the associated message.

If the @mi changed, the 'dirty' flag and the 'folder-flagged' flag are
set automatically, unless the @mi is aborting notifications. There is not emitted
folder's "changed" signal for this @mi.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="178"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2895">Whether the value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2881">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="message_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2882">a message id to set</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_mlist" invoker="set_mlist" version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="2584">Sets mesage list address from the associated message.

This property is considered static, in a meaning that it should
not change during the life-time of the @mi, the same as it doesn't
change in the associated message.

If the @mi changed, the 'dirty' flag and the 'folder-flagged' flag are
set automatically, unless the @mi is aborting notifications. There is not emitted
folder's "changed" signal for this @mi.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="161"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2599">Whether the value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2586">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="mlist"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2587">a message list address to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_preview" invoker="set_preview" version="3.42">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="3413">Set @preview as the body preview of the associated message. Use %NULL or an empty
string to unset the value.

If the @mi changed, the 'dirty' flag is set automatically, unless the @mi is
aborting notifications. There is not emitted folder's "changed" signal for this @mi.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="204"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="3424">Whether the value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3415">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="preview"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3416">message body preview, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_size" invoker="set_size" version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="2657">Sets size of the associated message.

This property is considered static, in a meaning that it should
not change during the life-time of the @mi, the same as it doesn't
change in the associated message.

If the @mi changed, the 'dirty' flag and the 'folder-flagged' flag are
set automatically, unless the @mi is aborting notifications. There is not emitted
folder's "changed" signal for this @mi.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="164"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2672">Whether the value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2659">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2660">a size to set</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_subject" invoker="set_subject" version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="2292">Sets Subject from the associated message.

This property is considered static, in a meaning that it should
not change during the life-time of the @mi, the same as it doesn't
change in the associated message.

If the @mi changed, the 'dirty' flag and the 'folder-flagged' flag are
set automatically, unless the @mi is aborting notifications. There is not emitted
folder's "changed" signal for this @mi.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="149"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2307">Whether the value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2294">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="subject"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2295">a Subject to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_to" invoker="set_to" version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="2438">Sets To from the associated message.

This property is considered static, in a meaning that it should
not change during the life-time of the @mi, the same as it doesn't
change in the associated message.

If the @mi changed, the 'dirty' flag and the 'folder-flagged' flag are
set automatically, unless the @mi is aborting notifications. There is not emitted
folder's "changed" signal for this @mi.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="155"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2453">Whether the value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2440">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="to"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2441">a To to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_user_flag"
                      invoker="set_user_flag"
                      version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="1902">Change @state of the flag named @name. Unlike user tags, user flags
can only be set or unset, while the user tags can contain certain values.

If the @mi changed, the 'dirty' flag and the 'folder-flagged' flag are
set automatically, unless the @mi is aborting notifications. There is also emitted
folder's "changed" signal for this @mi, if necessary.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="124"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="1915">Whether the message info changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1904">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1905">user flag name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1906">state to set for the flag</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_user_header"
                      invoker="set_user_header"
                      version="3.42">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="3216">Set @value for a single user-defined message header of the associated message.
When the @value is %NULL, the header @name is removed from the user-defined
headers.

If the @mi changed, the 'dirty' flag is set automatically, unless the @mi is
aborting notifications. There is not emitted folder's "changed" signal for this @mi.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="193"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="3229">Whether the value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3218">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3219">header name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3220">header value, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_user_tag"
                      invoker="set_user_tag"
                      version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="2113">Set user tag @name to @value, or remove it, if @value is %NULL.

If the @mi changed, the 'dirty' flag and the 'folder-flagged' flag are
set automatically, unless the @mi is aborting notifications. There is also emitted
folder's "changed" signal for this @mi, if necessary.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="137"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2125">Whether the @mi changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2115">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2116">user tag name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2117">user tag value, or %NULL to remove the user tag</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="take_headers"
                      invoker="take_headers"
                      version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="3108">Takes headers of the associated message.

This property is considered static, in a meaning that it should
not change during the life-time of the @mi, the same as it doesn't
change in the associated message.

If the @mi changed, the 'dirty' flag and the 'folder-flagged' flag are
set automatically, unless the @mi is aborting notifications. There is not emitted
folder's "changed" signal for this @mi.

Note that it's not safe to use the @headers after the call to this function,
because it can be freed due to no change.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="188"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="3126">Whether the value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3110">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="headers"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3111">headers to set, as #CamelNameValueArray, or %NULL</doc>
            <type name="NameValueArray" c:type="CamelNameValueArray*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="take_references"
                      invoker="take_references"
                      version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="2997">Takes encoded In-Reply-To and References headers of the associated message
as an array of guint64 numbers, partial MD5 sums. Each value can be
cast to #CamelSummaryMessageID.

This property is considered static, in a meaning that it should
not change during the life-time of the @mi, the same as it doesn't
change in the associated message.

If the @mi changed, the 'dirty' flag and the 'folder-flagged' flag are
set automatically, unless the @mi is aborting notifications. There is not emitted
folder's "changed" signal for this @mi.

Note that it's not safe to use the @references after the call to this function,
because it can be freed due to no change.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="183"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="3017">Whether the value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2999">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="references"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3000">a references to set</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="guint64"/>
            </array>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="take_user_flags"
                      invoker="take_user_flags"
                      version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="2007">Takes all the @user_flags, which replaces any current user flags on the @mi.
The passed-in @user_flags is consumed by the @mi, which becomes an owner
of it. The caller should not change @user_flags afterwards.

If the @mi changed, the 'dirty' flag and the 'folder-flagged' flag are
set automatically, unless the @mi is aborting notifications. There is also emitted
folder's "changed" signal for this @mi, if necessary.

Note that it's not safe to use the @user_flags after the call to this function,
because it can be freed due to no change.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="132"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2023">Whether the message info changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2009">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="user_flags"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2010">user flags to set</doc>
            <type name="NamedFlags" c:type="CamelNamedFlags*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="take_user_headers"
                      invoker="take_user_headers"
                      version="3.42">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="3318">Takes user-defined message headers of the associated message.

If the @mi changed, the 'dirty' flag is set automatically, unless the @mi is
aborting notifications. There is not emitted folder's "changed" signal for this @mi.

Note that it's not safe to use the @headers after the call to this function,
because it can be freed due to no change.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="200"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="3331">Whether the value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3320">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="headers"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3321">headers to set, as #CamelNameValueArray, or %NULL</doc>
            <type name="NameValueArray" c:type="CamelNameValueArray*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="take_user_tags"
                      invoker="take_user_tags"
                      version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="2216">Takes all the @user_tags, which replaces any current user tags on the @mi.
The passed-in @user_tags is consumed by the @mi, which becomes an owner
of it. The caller should not change @user_tags afterwards.

If the @mi changed, the 'dirty' flag and the 'folder-flagged' flag are
set automatically, unless the @mi is aborting notifications. There is also emitted
folder's "changed" signal for this @mi, if necessary.

Note that it's not safe to use the @user_tags after the call to this function,
because it can be freed due to no change.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="145"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2232">Whether the @mi changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2218">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="user_tags"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2219">user tags to set</doc>
            <type name="NameValueArray" c:type="CamelNameValueArray*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="clone"
              c:identifier="camel_message_info_clone"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="1176">Clones the @mi as a new #CamelMessageInfo and eventually assigns
a new #CamelFolderSummary to it. If it's not set, then the same
summary as the one with @mi is used.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="215"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="1185">a new #CamelMessageInfo object, clone of the @mi</doc>
          <type name="MessageInfo" c:type="CamelMessageInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1178">a #CamelMessageInfo to clone</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="assign_summary"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1179">parent #CamelFolderSummary object, or %NULL, to set on the clone</doc>
            <type name="FolderSummary" c:type="_CamelFolderSummary*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dump"
              c:identifier="camel_message_info_dump"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="3454">Dumps the mesasge info @mi to stdout. This is meand for debugging
purposes only.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="362"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3456">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_headers"
              c:identifier="camel_message_info_dup_headers"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="3076">Duplicates array of headers for the @mi.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="334"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="3082">All the message headers of the associated
  message, or %NULL, when none are available. Free returned array with
  camel_name_value_array_free() when no longer needed.</doc>
          <type name="NameValueArray" c:type="CamelNameValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3078">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_preview"
              c:identifier="camel_message_info_dup_preview"
              version="3.42">
        <source-position filename="src/camel/camel-message-info.h" line="357"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="3393">Body preview of the associated
   message, or %NULL, when not available. Free the returned string
   with g_free(), when no longer needed.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3391">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_references"
              c:identifier="camel_message_info_dup_references"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="2958">Duplicates encoded In-Reply-To and References headers of the associated
message as an array of guint64 numbers, partial MD5 sums. Each value
can be cast to #CamelSummaryMessageID.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="326"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2966">A #GArray of
  guint64 encoded Message-ID-s; or %NULL when none are available. Free returned
  array with g_array_unref() when no longer needed.</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="guint64"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2960">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_user_flags"
              c:identifier="camel_message_info_dup_user_flags"
              version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="269"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="1982">A newly allocated #CamelNamedFlags with
  all the currently set user flags on the @mi. Free the returned structure
  with camel_named_flags_free() when no londer needed.</doc>
          <type name="NamedFlags" c:type="CamelNamedFlags*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1980">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_user_header"
              c:identifier="camel_message_info_dup_user_header"
              version="3.42">
        <source-position filename="src/camel/camel-message-info.h" line="340"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="3194">Value of the header named @name from
   the user-defined message headers of the associated message, or %NULL,
   when not available. Free the returned string with g_free(), when no longer
   needed.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3191">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3192">header name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_user_headers"
              c:identifier="camel_message_info_dup_user_headers"
              version="3.42">
        <source-position filename="src/camel/camel-message-info.h" line="351"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="3292">All the user-defined message headers
   of the associated message, or %NULL, when none are available. Free returned
   array with camel_name_value_array_free() when no longer needed.</doc>
          <type name="NameValueArray" c:type="CamelNameValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3290">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_user_tag"
              c:identifier="camel_message_info_dup_user_tag"
              version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="277"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2092">Value of the user tag as newly allocated
  string, or %NULL when it is not set. Free it with g_free() when no longer needed.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2089">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2090">user tag name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_user_tags"
              c:identifier="camel_message_info_dup_user_tags"
              version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="286"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2192">a newly allocated #CamelNameValueArray containing all set
  user tags of the @mi. Free it with camel_name_value_array_free() when no longer needed.</doc>
          <type name="NameValueArray" c:type="CamelNameValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2190">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="freeze_notifications"
              c:identifier="camel_message_info_freeze_notifications"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="1608">Freezes all the notifications until the camel_message_info_thaw_notifications() is called.
This function can be called multiple times, where the last thaw will do the notifications.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="244"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1610">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_abort_notifications"
              c:identifier="camel_message_info_get_abort_notifications"
              glib:get-property="abort-notifications"
              version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="239"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="1558">Whether the @mi is aborting notifications, which means
  that it will not influence 'dirty' and 'folder-flagged' flags
  in the set/take functions, neither it will emit any GObject::notify
  signals on change, nor associated folder's "changed" signal.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1556">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cc"
              c:identifier="camel_message_info_get_cc"
              glib:get-property="cc"
              version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="300"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2488">CC address of the @mi.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2486">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_date_received"
              c:identifier="camel_message_info_get_date_received"
              glib:get-property="date-received"
              version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="314"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2780">time_t of the Received header of the message, encoded as gint64.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2778">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_date_sent"
              c:identifier="camel_message_info_get_date_sent"
              glib:get-property="date-sent"
              version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="309"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2707">time_t of the Date header of the message, encoded as gint64.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2705">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dirty"
              c:identifier="camel_message_info_get_dirty"
              glib:get-property="dirty"
              version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="229"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="1413">Whether the @mi is dirty, which means that it had been
  changed and a save to the local summary is required.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1411">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags"
              c:identifier="camel_message_info_get_flags"
              glib:get-property="flags"
              version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="254"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="1789">Bit-or of #CamelMessageFlags set on the @mi.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1787">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_folder_flagged"
              c:identifier="camel_message_info_get_folder_flagged"
              glib:get-property="folder-flagged"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="1474">The folder flagged flag is used to mark the message infor as being changed
and this change should be propagated to the remote store (server). This is
different from the 'dirty' flag, which is set for local changes only. It
can happen that the 'folder-flagged' flag is set, but the 'dirty' flag not.

This is only a convenient wrapper around CAMEL_MESSAGE_FOLDER_FLAGGED flag,
for better readiness of the code.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="232"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="1486">Whether requires save of the local changes into the remote store.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1476">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_folder_flagged_stamp"
              c:identifier="camel_message_info_get_folder_flagged_stamp"
              glib:get-property="folder-flagged-stamp"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="1527">The 'folder-flagged-stamp' is a stamp of the 'folder-flagged' flag. This stamp
changes whenever anything would mark the @mi as 'folder-flagged', regardless
the @mi being already 'folder-flagged'. It can be used to recognize changes
on the 'folder-flagged' flag during the time.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="237"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="1536">Stamp of the 'folder-flagged' flag.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1529">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_from"
              c:identifier="camel_message_info_get_from"
              glib:get-property="from"
              version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="294"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2342">From address of the @mi.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2340">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_headers"
              c:identifier="camel_message_info_get_headers"
              glib:get-property="headers"
              version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="332"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="3052">All the message headers of the associated
  message, or %NULL, when none are available.</doc>
          <type name="NameValueArray" c:type="const CamelNameValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3050">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_message_id"
              c:identifier="camel_message_info_get_message_id"
              glib:get-property="message-id"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="2849">Encoded Message-ID of the associated message as a guint64 number,
partial MD5 sum. The value can be cast to #CamelSummaryMessageID.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="319"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2856">Partial MD5 hash of the Message-ID header of the associated message.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2851">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mlist"
              c:identifier="camel_message_info_get_mlist"
              glib:get-property="mlist"
              version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="303"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2561">Mailing list address of the @mi.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2559">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_notifications_frozen"
              c:identifier="camel_message_info_get_notifications_frozen"
              version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="248"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="1677">Whether the notifications are frozen.

See: camel_message_info_freeze_notifications()</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1675">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_preview"
              c:identifier="camel_message_info_get_preview"
              glib:get-property="preview"
              version="3.42">
        <source-position filename="src/camel/camel-message-info.h" line="356"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="3365">Body preview of the associated
   message, or %NULL, when not available.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3363">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_references"
              c:identifier="camel_message_info_get_references"
              glib:get-property="references"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="2926">Gets encoded In-Reply-To and References headers of the associated
message as an array of guint64 numbers, partial MD5 sums. Each value
can be cast to #CamelSummaryMessageID.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="324"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2934">A #GArray of
  guint64 encoded Message-ID-s; or %NULL when none are available.</doc>
          <array name="GLib.Array" c:type="const GArray*">
            <type name="guint64"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2928">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="camel_message_info_get_size"
              glib:get-property="size"
              version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="306"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2634">Size of the associated message.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2632">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subject"
              c:identifier="camel_message_info_get_subject"
              glib:get-property="subject"
              version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="291"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2269">Subject of the #mi.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2267">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_to"
              c:identifier="camel_message_info_get_to"
              glib:get-property="to"
              version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="297"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2415">To address of the @mi.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2413">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uid"
              c:identifier="camel_message_info_get_uid"
              glib:get-property="uid"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="1697">Get the UID of the #mi.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="250"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="1703">The UID of the @mi.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1699">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user_flag"
              c:identifier="camel_message_info_get_user_flag"
              version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="258"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="1878">Whther the user flag named @name is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1875">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1876">user flag name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user_flags"
              c:identifier="camel_message_info_get_user_flags"
              glib:get-property="user-flags"
              version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="266"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="1954">A #CamelNamedFlags with all the currently set
  user flags on the @mi. Do not modify it.</doc>
          <type name="NamedFlags" c:type="const CamelNamedFlags*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1952">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user_header"
              c:identifier="camel_message_info_get_user_header"
              version="3.42">
        <source-position filename="src/camel/camel-message-info.h" line="337"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="3162">Value of the header named @name from
   the user-defined message headers of the associated message, or %NULL,
   when not available.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3159">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3160">header name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user_headers"
              c:identifier="camel_message_info_get_user_headers"
              glib:get-property="user-headers"
              version="3.42">
        <source-position filename="src/camel/camel-message-info.h" line="348"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="3264">All the user-defined message headers
   of the associated message, or %NULL, when none are available.</doc>
          <type name="NameValueArray" c:type="const CamelNameValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3262">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user_tag"
              c:identifier="camel_message_info_get_user_tag"
              version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="275"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2061">Value of the user tag, or %NULL when
  it is not set.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2058">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2059">user tag name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user_tags"
              c:identifier="camel_message_info_get_user_tags"
              glib:get-property="user-tags"
              version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="283"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2164">a #CamelNameValueArray containing all set
  user tags of the @mi. Do not modify it.</doc>
          <type name="NameValueArray" c:type="const CamelNameValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2162">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load"
              c:identifier="camel_message_info_load"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="1206">Load content of @mi from the data stored in @record. The @bdata_ptr points
to the current position of the record-&gt;bdata, where the read can continue.
Use helper functions camel_util_bdata_get_number() and camel_util_bdata_get_string()
to read data from it and also move forward the *bdata_ptr.

After successful load of the @mi, the 'dirty' flag is unset.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="217"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="1219">Whether the load was successful.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1208">a #CamelMessageInfo to load</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="record" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1209">a #CamelMIRecord to load the @mi from</doc>
            <type name="MIRecord" c:type="const _CamelMIRecord*"/>
          </parameter>
          <parameter name="bdata_ptr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1210">a backend specific data (bdata) pointer</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="pooldup_uid"
              c:identifier="camel_message_info_pooldup_uid"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="1721">Get the UID of the #mi, duplicated on the Camel's string pool.
This is good for thread safety, though the UID should not change once set.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="251"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="1728">A newly references string in the string pool, the #mi UID.
  Free it with camel_pstring_free() when no longer needed.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1723">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="property_lock"
              c:identifier="camel_message_info_property_lock"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="1312">Acquires a property lock, which is used to ensure thread safety
when properties are changing. Release the lock with
camel_message_info_property_unlock().

Note: Make sure the CamelFolderSummary lock is held before this lock,
if there will be called any 'set' function on the @mi, to avoid deadlock
when the summary would be set as dirty while another thread might try
to read values from the @mi, waiting for the property lock and holding
the summary lock at the same time.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="225"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1314">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="property_unlock"
              c:identifier="camel_message_info_property_unlock"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="1336">Releases a property lock, previously acquired with
camel_message_info_property_lock().</doc>
        <source-position filename="src/camel/camel-message-info.h" line="227"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1338">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_summary"
              c:identifier="camel_message_info_ref_summary"
              version="3.24">
        <source-position filename="src/camel/camel-message-info.h" line="224"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="1298">Referenced #CamelFolderSummary to which
the @mi belongs, or %NULL, if there is none. Use g_object_unref() for
non-NULL returned values when done with it.</doc>
          <type name="gpointer" c:type="_CamelFolderSummary*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1296">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="save"
              c:identifier="camel_message_info_save"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="1255">Save the @mi content to the message info record @record. It can populate all
but the record-&gt;bdata value, which is set fro mthe @bdata_str. Use helper functions
camel_util_bdata_put_number() and camel_util_bdata_put_string() to put data into the @bdata_str.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="220"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="1265">Whether the save succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1257">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="record" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1258">a #CamelMIRecord to populate</doc>
            <type name="MIRecord" c:type="_CamelMIRecord*"/>
          </parameter>
          <parameter name="bdata_str" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1259">a #GString with a string to save as backend specific data (bdata)</doc>
            <type name="GLib.String" c:type="GString*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_abort_notifications"
              c:identifier="camel_message_info_set_abort_notifications"
              glib:set-property="abort-notifications"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="1579">Marks the @mi to abort any notifications, which means that it
will not influence 'dirty' and 'folder-flagged' flags in
the set/take functions, neither it will emit any GObject::notify
signals on change, nor associated folder's "changed" signal.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="241"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1581">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="abort_notifications" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1582">a state to set</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cc"
              c:identifier="camel_message_info_set_cc"
              glib:set-property="cc"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="2511">Sets CC from the associated message.

This property is considered static, in a meaning that it should
not change during the life-time of the @mi, the same as it doesn't
change in the associated message.

If the @mi changed, the 'dirty' flag and the 'folder-flagged' flag are
set automatically, unless the @mi is aborting notifications. There is not emitted
folder's "changed" signal for this @mi.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="301"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2526">Whether the value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2513">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="cc"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2514">a CC to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_date_received"
              c:identifier="camel_message_info_set_date_received"
              glib:set-property="date-received"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="2803">Sets received date (the Received header) of the associated message.

This property is considered static, in a meaning that it should
not change during the life-time of the @mi, the same as it doesn't
change in the associated message.

If the @mi changed, the 'dirty' flag and the 'folder-flagged' flag are
set automatically, unless the @mi is aborting notifications. There is not emitted
folder's "changed" signal for this @mi.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="316"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2818">Whether the value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2805">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="date_received" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2806">a received date to set</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_date_sent"
              c:identifier="camel_message_info_set_date_sent"
              glib:set-property="date-sent"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="2730">Sets sent date (the Date header) of the associated message.

This property is considered static, in a meaning that it should
not change during the life-time of the @mi, the same as it doesn't
change in the associated message.

If the @mi changed, the 'dirty' flag and the 'folder-flagged' flag are
set automatically, unless the @mi is aborting notifications. There is not emitted
folder's "changed" signal for this @mi.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="311"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2745">Whether the value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2732">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="date_sent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2733">a sent date to set</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_dirty"
              c:identifier="camel_message_info_set_dirty"
              glib:set-property="dirty"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="1432">Marks the @mi as dirty, which means a save to the local summary
is required.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="230"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1434">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="dirty" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1435">a dirty state to set</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_flags"
              c:identifier="camel_message_info_set_flags"
              glib:set-property="flags"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="1812">Change the state of the flags on the @mi. Both @mask and @set are bit-or
of #CamelMessageFlags.

If the @mi changed, the 'dirty' flag and the 'folder-flagged' flag are
set automatically, unless the @mi is aborting notifications. There is also emitted
folder's "changed" signal for this @mi, if necessary. In case
the CAMEL_MESSAGE_FOLDER_FLAGGED flag would be set and the @mi is
not aborting notifications, the 'folder-flagged-stamp' changes too.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="255"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="1827">Whether the flags changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1814">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="mask" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1815">mask of flags to change</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1816">state the flags should be changed to</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_folder_flagged"
              c:identifier="camel_message_info_set_folder_flagged"
              glib:set-property="folder-flagged"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="1498">Changes the folder-flagged flag to the @folder_flagged value. See
camel_message_info_get_folder_flagged() for more information about
the use of this flag.

This is only a convenient wrapper around CAMEL_MESSAGE_FOLDER_FLAGGED flag,
for better readiness of the code.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="234"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="1510">Whether the flag had been changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1500">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="folder_flagged" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1501">a value to set to</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_from"
              c:identifier="camel_message_info_set_from"
              glib:set-property="from"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="2365">Sets From from the associated message.

This property is considered static, in a meaning that it should
not change during the life-time of the @mi, the same as it doesn't
change in the associated message.

If the @mi changed, the 'dirty' flag and the 'folder-flagged' flag are
set automatically, unless the @mi is aborting notifications. There is not emitted
folder's "changed" signal for this @mi.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="295"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2380">Whether the value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2367">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="from"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2368">a From to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_message_id"
              c:identifier="camel_message_info_set_message_id"
              glib:set-property="message-id"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="2879">Sets encoded Message-ID of the associated message as a guint64 number,
partial MD5 sum. The value can be cast to #CamelSummaryMessageID.

This property is considered static, in a meaning that it should
not change during the life-time of the @mi, the same as it doesn't
change in the associated message.

If the @mi changed, the 'dirty' flag and the 'folder-flagged' flag are
set automatically, unless the @mi is aborting notifications. There is not emitted
folder's "changed" signal for this @mi.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="321"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2895">Whether the value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2881">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="message_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2882">a message id to set</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mlist"
              c:identifier="camel_message_info_set_mlist"
              glib:set-property="mlist"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="2584">Sets mesage list address from the associated message.

This property is considered static, in a meaning that it should
not change during the life-time of the @mi, the same as it doesn't
change in the associated message.

If the @mi changed, the 'dirty' flag and the 'folder-flagged' flag are
set automatically, unless the @mi is aborting notifications. There is not emitted
folder's "changed" signal for this @mi.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="304"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2599">Whether the value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2586">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="mlist"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2587">a message list address to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_preview"
              c:identifier="camel_message_info_set_preview"
              glib:set-property="preview"
              version="3.42">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="3413">Set @preview as the body preview of the associated message. Use %NULL or an empty
string to unset the value.

If the @mi changed, the 'dirty' flag is set automatically, unless the @mi is
aborting notifications. There is not emitted folder's "changed" signal for this @mi.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="358"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="3424">Whether the value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3415">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="preview"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3416">message body preview, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="camel_message_info_set_size"
              glib:set-property="size"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="2657">Sets size of the associated message.

This property is considered static, in a meaning that it should
not change during the life-time of the @mi, the same as it doesn't
change in the associated message.

If the @mi changed, the 'dirty' flag and the 'folder-flagged' flag are
set automatically, unless the @mi is aborting notifications. There is not emitted
folder's "changed" signal for this @mi.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="307"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2672">Whether the value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2659">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2660">a size to set</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subject"
              c:identifier="camel_message_info_set_subject"
              glib:set-property="subject"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="2292">Sets Subject from the associated message.

This property is considered static, in a meaning that it should
not change during the life-time of the @mi, the same as it doesn't
change in the associated message.

If the @mi changed, the 'dirty' flag and the 'folder-flagged' flag are
set automatically, unless the @mi is aborting notifications. There is not emitted
folder's "changed" signal for this @mi.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="292"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2307">Whether the value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2294">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="subject"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2295">a Subject to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_to"
              c:identifier="camel_message_info_set_to"
              glib:set-property="to"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="2438">Sets To from the associated message.

This property is considered static, in a meaning that it should
not change during the life-time of the @mi, the same as it doesn't
change in the associated message.

If the @mi changed, the 'dirty' flag and the 'folder-flagged' flag are
set automatically, unless the @mi is aborting notifications. There is not emitted
folder's "changed" signal for this @mi.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="298"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2453">Whether the value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2440">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="to"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2441">a To to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uid"
              c:identifier="camel_message_info_set_uid"
              glib:set-property="uid"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="1747">Changes UID of the @mi to @uid. If it changes, the 'dirty' flag
of the @mi is set too, unless the @mi is aborting notifications. This change
does not influence the 'folder-flagged' flag.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="252"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="1756">Whether the UID changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1749">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1750">a UID to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_user_flag"
              c:identifier="camel_message_info_set_user_flag"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="1902">Change @state of the flag named @name. Unlike user tags, user flags
can only be set or unset, while the user tags can contain certain values.

If the @mi changed, the 'dirty' flag and the 'folder-flagged' flag are
set automatically, unless the @mi is aborting notifications. There is also emitted
folder's "changed" signal for this @mi, if necessary.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="261"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="1915">Whether the message info changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1904">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1905">user flag name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1906">state to set for the flag</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_user_header"
              c:identifier="camel_message_info_set_user_header"
              version="3.42">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="3216">Set @value for a single user-defined message header of the associated message.
When the @value is %NULL, the header @name is removed from the user-defined
headers.

If the @mi changed, the 'dirty' flag is set automatically, unless the @mi is
aborting notifications. There is not emitted folder's "changed" signal for this @mi.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="343"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="3229">Whether the value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3218">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3219">header name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3220">header value, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_user_tag"
              c:identifier="camel_message_info_set_user_tag"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="2113">Set user tag @name to @value, or remove it, if @value is %NULL.

If the @mi changed, the 'dirty' flag and the 'folder-flagged' flag are
set automatically, unless the @mi is aborting notifications. There is also emitted
folder's "changed" signal for this @mi, if necessary.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="279"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2125">Whether the @mi changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2115">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2116">user tag name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2117">user tag value, or %NULL to remove the user tag</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_headers"
              c:identifier="camel_message_info_take_headers"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="3108">Takes headers of the associated message.

This property is considered static, in a meaning that it should
not change during the life-time of the @mi, the same as it doesn't
change in the associated message.

If the @mi changed, the 'dirty' flag and the 'folder-flagged' flag are
set automatically, unless the @mi is aborting notifications. There is not emitted
folder's "changed" signal for this @mi.

Note that it's not safe to use the @headers after the call to this function,
because it can be freed due to no change.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="335"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="3126">Whether the value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3110">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="headers"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3111">headers to set, as #CamelNameValueArray, or %NULL</doc>
            <type name="NameValueArray" c:type="CamelNameValueArray*"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_references"
              c:identifier="camel_message_info_take_references"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="2997">Takes encoded In-Reply-To and References headers of the associated message
as an array of guint64 numbers, partial MD5 sums. Each value can be
cast to #CamelSummaryMessageID.

This property is considered static, in a meaning that it should
not change during the life-time of the @mi, the same as it doesn't
change in the associated message.

If the @mi changed, the 'dirty' flag and the 'folder-flagged' flag are
set automatically, unless the @mi is aborting notifications. There is not emitted
folder's "changed" signal for this @mi.

Note that it's not safe to use the @references after the call to this function,
because it can be freed due to no change.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="328"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="3017">Whether the value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2999">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="references"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3000">a references to set</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="guint64"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="take_user_flags"
              c:identifier="camel_message_info_take_user_flags"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="2007">Takes all the @user_flags, which replaces any current user flags on the @mi.
The passed-in @user_flags is consumed by the @mi, which becomes an owner
of it. The caller should not change @user_flags afterwards.

If the @mi changed, the 'dirty' flag and the 'folder-flagged' flag are
set automatically, unless the @mi is aborting notifications. There is also emitted
folder's "changed" signal for this @mi, if necessary.

Note that it's not safe to use the @user_flags after the call to this function,
because it can be freed due to no change.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="272"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2023">Whether the message info changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2009">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="user_flags"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2010">user flags to set</doc>
            <type name="NamedFlags" c:type="CamelNamedFlags*"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_user_headers"
              c:identifier="camel_message_info_take_user_headers"
              version="3.42">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="3318">Takes user-defined message headers of the associated message.

If the @mi changed, the 'dirty' flag is set automatically, unless the @mi is
aborting notifications. There is not emitted folder's "changed" signal for this @mi.

Note that it's not safe to use the @headers after the call to this function,
because it can be freed due to no change.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="353"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="3331">Whether the value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3320">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="headers"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3321">headers to set, as #CamelNameValueArray, or %NULL</doc>
            <type name="NameValueArray" c:type="CamelNameValueArray*"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_user_tags"
              c:identifier="camel_message_info_take_user_tags"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="2216">Takes all the @user_tags, which replaces any current user tags on the @mi.
The passed-in @user_tags is consumed by the @mi, which becomes an owner
of it. The caller should not change @user_tags afterwards.

If the @mi changed, the 'dirty' flag and the 'folder-flagged' flag are
set automatically, unless the @mi is aborting notifications. There is also emitted
folder's "changed" signal for this @mi, if necessary.

Note that it's not safe to use the @user_tags after the call to this function,
because it can be freed due to no change.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="288"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-message-info.c"
               line="2232">Whether the @mi changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2218">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
          <parameter name="user_tags"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2219">user tags to set</doc>
            <type name="NameValueArray" c:type="CamelNameValueArray*"/>
          </parameter>
        </parameters>
      </method>
      <method name="thaw_notifications"
              c:identifier="camel_message_info_thaw_notifications"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="1632">Reverses the call of the camel_message_info_freeze_notifications().
If this is the last freeze, then the associated folder is also notified
about the change, if any happened during the freeze.</doc>
        <source-position filename="src/camel/camel-message-info.h" line="246"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1634">a #CamelMessageInfo</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="abort-notifications"
                version="3.24"
                writable="1"
                transfer-ownership="none"
                setter="set_abort_notifications"
                getter="get_abort_notifications"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="793">Flag, whether the info is currently aborting notifications. It is used to avoid
unnecessary 'folder-flagged' and 'dirty' flags changes and also to avoid
associated folder's "changed" signal.
f</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="cc"
                version="3.24"
                writable="1"
                transfer-ownership="none"
                setter="set_cc"
                getter="get_cc"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="933">CC address of the associated message.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="date-received"
                version="3.24"
                writable="1"
                transfer-ownership="none"
                setter="set_date_received"
                getter="get_date_received"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="1009">Received date of the associated message.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="date-sent"
                version="3.24"
                writable="1"
                transfer-ownership="none"
                setter="set_date_sent"
                getter="get_date_sent"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="990">Sent Date of the associated message.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="dirty"
                version="3.24"
                writable="1"
                transfer-ownership="none"
                setter="set_dirty"
                getter="get_dirty"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="730">Flag, whether the info is changed and requires save to disk.
Compare with CamelMessageInfo:folder-flagged</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="flags"
                version="3.24"
                writable="1"
                transfer-ownership="none"
                setter="set_flags"
                getter="get_flags"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="814">Bit-or of #CamelMessageFlags.</doc>
        <type name="MessageFlags"/>
      </property>
      <property name="folder-flagged"
                version="3.24"
                writable="1"
                transfer-ownership="none"
                setter="set_folder_flagged"
                getter="get_folder_flagged"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="750">Flag, whether the info is changed and requires save to
the destination store/server. This is different from
the CamelMessageInfo:dirty, which takes care of the local
information only.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="folder-flagged-stamp"
                version="3.24"
                transfer-ownership="none"
                getter="get_folder_flagged_stamp"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="772">The 'folder-flagged-stamp' is a stamp of the 'folder-flagged' flag. This stamp
changes whenever anything would mark the @mi 'folder-flagged', regardless the @mi
being already 'folder-flagged'. It can be used to recognize changes
on the 'folder-flagged' flag during the time.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="from"
                version="3.24"
                writable="1"
                transfer-ownership="none"
                setter="set_from"
                getter="get_from"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="895">From address of the associated message.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="headers"
                version="3.24"
                writable="1"
                transfer-ownership="none"
                getter="get_headers">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="1069">Headers of the associated message. Can be %NULL.</doc>
        <type name="NameValueArray"/>
      </property>
      <property name="message-id"
                version="3.24"
                writable="1"
                transfer-ownership="none"
                setter="set_message_id"
                getter="get_message_id"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="1028">Encoded Message-ID of the associated message as a guint64 number,
partial MD5 sum. The value can be cast to #CamelSummaryMessageID.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="mlist"
                version="3.24"
                writable="1"
                transfer-ownership="none"
                setter="set_mlist"
                getter="get_mlist"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="952">Mailing list address of the associated message.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="preview"
                version="3.42"
                writable="1"
                transfer-ownership="none"
                setter="set_preview"
                getter="get_preview"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="1107">Body preview of the associated message. Can be %NULL.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="references"
                version="3.24"
                writable="1"
                transfer-ownership="none"
                getter="get_references">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="1048">Encoded In-Reply-To and References headers of the associated message
as an array of guint64 numbers, partial MD5 sums. Each value can be
cast to #CamelSummaryMessageID.</doc>
        <array name="GLib.Array">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="size"
                version="3.24"
                writable="1"
                transfer-ownership="none"
                setter="set_size"
                getter="get_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="971">Size of the associated message.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="subject"
                version="3.24"
                writable="1"
                transfer-ownership="none"
                setter="set_subject"
                getter="get_subject"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="876">Subject of the associated message.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="summary"
                version="3.24"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="691">The #CamelFolderSummary to which the message info belongs, or %NULL.
It can be set only during construction of the object.</doc>
        <type name="FolderSummary"/>
      </property>
      <property name="to"
                version="3.24"
                writable="1"
                transfer-ownership="none"
                setter="set_to"
                getter="get_to"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="914">To address of the associated message.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="uid"
                version="3.24"
                writable="1"
                transfer-ownership="none"
                setter="set_uid"
                getter="get_uid"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="711">A unique ID of the message in its folder.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="user-flags"
                version="3.24"
                writable="1"
                transfer-ownership="none"
                getter="get_user_flags">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="834">User flags for the associated message. Can be %NULL.
Unlike user-tags, which can contain various values, the user-flags
can only be set or not.</doc>
        <type name="NamedFlags"/>
      </property>
      <property name="user-headers"
                version="3.42"
                writable="1"
                transfer-ownership="none"
                getter="get_user_headers">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="1088">User-defined headers of the associated message. Can be %NULL.</doc>
        <type name="NameValueArray"/>
      </property>
      <property name="user-tags"
                version="3.24"
                writable="1"
                transfer-ownership="none"
                getter="get_user_tags">
        <doc xml:space="preserve"
             filename="src/camel/camel-message-info.c"
             line="855">User tags for the associated message. Can be %NULL.
Unlike user-flags, which can be set or not, the user-tags
can contain various values.</doc>
        <type name="NameValueArray"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="MessageInfoPrivate" c:type="CamelMessageInfoPrivate*"/>
      </field>
    </class>
    <class name="MessageInfoBase"
           c:symbol-prefix="message_info_base"
           c:type="CamelMessageInfoBase"
           parent="MessageInfo"
           glib:type-name="CamelMessageInfoBase"
           glib:get-type="camel_message_info_base_get_type"
           glib:type-struct="MessageInfoBaseClass">
      <source-position filename="src/camel/camel-message-info-base.h"
                       line="64"/>
      <field name="parent">
        <type name="MessageInfo" c:type="CamelMessageInfo"/>
      </field>
      <field name="priv">
        <type name="MessageInfoBasePrivate"
              c:type="CamelMessageInfoBasePrivate*"/>
      </field>
    </class>
    <record name="MessageInfoBaseClass"
            c:type="CamelMessageInfoBaseClass"
            glib:is-gtype-struct-for="MessageInfoBase">
      <source-position filename="src/camel/camel-message-info-base.h"
                       line="64"/>
      <field name="parent_class">
        <type name="MessageInfoClass" c:type="CamelMessageInfoClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="MessageInfoBasePrivate"
            c:type="CamelMessageInfoBasePrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-message-info-base.h"
                       line="52"/>
    </record>
    <record name="MessageInfoClass"
            c:type="CamelMessageInfoClass"
            glib:is-gtype-struct-for="MessageInfo">
      <source-position filename="src/camel/camel-message-info.h" line="209"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="clone">
        <callback name="clone">
          <source-position filename="src/camel/camel-message-info.h"
                           line="109"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1185">a new #CamelMessageInfo object, clone of the @mi</doc>
            <type name="MessageInfo" c:type="CamelMessageInfo*"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="1178">a #CamelMessageInfo to clone</doc>
              <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
            </parameter>
            <parameter name="assign_summary"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="1179">parent #CamelFolderSummary object, or %NULL, to set on the clone</doc>
              <type name="FolderSummary" c:type="_CamelFolderSummary*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="load">
        <callback name="load">
          <source-position filename="src/camel/camel-message-info.h"
                           line="111"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1219">Whether the load was successful.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="1208">a #CamelMessageInfo to load</doc>
              <type name="MessageInfo" c:type="CamelMessageInfo*"/>
            </parameter>
            <parameter name="record"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="1209">a #CamelMIRecord to load the @mi from</doc>
              <type name="MIRecord" c:type="const _CamelMIRecord*"/>
            </parameter>
            <parameter name="bdata_ptr" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="1210">a backend specific data (bdata) pointer</doc>
              <type name="utf8" c:type="gchar**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="save">
        <callback name="save">
          <source-position filename="src/camel/camel-message-info.h"
                           line="114"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1265">Whether the save succeeded.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="1257">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
            </parameter>
            <parameter name="record"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="1258">a #CamelMIRecord to populate</doc>
              <type name="MIRecord" c:type="_CamelMIRecord*"/>
            </parameter>
            <parameter name="bdata_str" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="1259">a #GString with a string to save as backend specific data (bdata)</doc>
              <type name="GLib.String" c:type="GString*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_flags">
        <callback name="get_flags">
          <source-position filename="src/camel/camel-message-info.h"
                           line="117"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1789">Bit-or of #CamelMessageFlags set on the @mi.</doc>
            <type name="guint32" c:type="guint32"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="1787">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_flags">
        <callback name="set_flags">
          <source-position filename="src/camel/camel-message-info.h"
                           line="118"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1827">Whether the flags changed.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="1814">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="CamelMessageInfo*"/>
            </parameter>
            <parameter name="mask" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="1815">mask of flags to change</doc>
              <type name="guint32" c:type="guint32"/>
            </parameter>
            <parameter name="set" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="1816">state the flags should be changed to</doc>
              <type name="guint32" c:type="guint32"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_user_flag">
        <callback name="get_user_flag">
          <source-position filename="src/camel/camel-message-info.h"
                           line="121"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1878">Whther the user flag named @name is set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="1875">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="1876">user flag name</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_user_flag">
        <callback name="set_user_flag">
          <source-position filename="src/camel/camel-message-info.h"
                           line="124"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1915">Whether the message info changed.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="1904">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="CamelMessageInfo*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="1905">user flag name</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="state" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="1906">state to set for the flag</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_user_flags">
        <callback name="get_user_flags">
          <source-position filename="src/camel/camel-message-info.h"
                           line="128"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1954">A #CamelNamedFlags with all the currently set
  user flags on the @mi. Do not modify it.</doc>
            <type name="NamedFlags" c:type="const CamelNamedFlags*"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="1952">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="dup_user_flags">
        <callback name="dup_user_flags">
          <source-position filename="src/camel/camel-message-info.h"
                           line="130"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="1982">A newly allocated #CamelNamedFlags with
  all the currently set user flags on the @mi. Free the returned structure
  with camel_named_flags_free() when no londer needed.</doc>
            <type name="NamedFlags" c:type="CamelNamedFlags*"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="1980">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="take_user_flags">
        <callback name="take_user_flags">
          <source-position filename="src/camel/camel-message-info.h"
                           line="132"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2023">Whether the message info changed.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2009">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="CamelMessageInfo*"/>
            </parameter>
            <parameter name="user_flags"
                       transfer-ownership="full"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2010">user flags to set</doc>
              <type name="NamedFlags" c:type="CamelNamedFlags*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_user_tag">
        <callback name="get_user_tag">
          <source-position filename="src/camel/camel-message-info.h"
                           line="135"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2061">Value of the user tag, or %NULL when
  it is not set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2058">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2059">user tag name</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_user_tag">
        <callback name="set_user_tag">
          <source-position filename="src/camel/camel-message-info.h"
                           line="137"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2125">Whether the @mi changed.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2115">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="CamelMessageInfo*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2116">user tag name</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="value"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2117">user tag value, or %NULL to remove the user tag</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_user_tags">
        <callback name="get_user_tags">
          <source-position filename="src/camel/camel-message-info.h"
                           line="141"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2164">a #CamelNameValueArray containing all set
  user tags of the @mi. Do not modify it.</doc>
            <type name="NameValueArray" c:type="const CamelNameValueArray*"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2162">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="dup_user_tags">
        <callback name="dup_user_tags">
          <source-position filename="src/camel/camel-message-info.h"
                           line="143"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2192">a newly allocated #CamelNameValueArray containing all set
  user tags of the @mi. Free it with camel_name_value_array_free() when no longer needed.</doc>
            <type name="NameValueArray" c:type="CamelNameValueArray*"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2190">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="take_user_tags">
        <callback name="take_user_tags">
          <source-position filename="src/camel/camel-message-info.h"
                           line="145"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2232">Whether the @mi changed.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2218">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="CamelMessageInfo*"/>
            </parameter>
            <parameter name="user_tags"
                       transfer-ownership="full"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2219">user tags to set</doc>
              <type name="NameValueArray" c:type="CamelNameValueArray*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_subject">
        <callback name="get_subject">
          <source-position filename="src/camel/camel-message-info.h"
                           line="148"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2269">Subject of the #mi.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2267">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_subject">
        <callback name="set_subject">
          <source-position filename="src/camel/camel-message-info.h"
                           line="149"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2307">Whether the value changed.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2294">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="CamelMessageInfo*"/>
            </parameter>
            <parameter name="subject"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2295">a Subject to set</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_from">
        <callback name="get_from">
          <source-position filename="src/camel/camel-message-info.h"
                           line="151"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2342">From address of the @mi.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2340">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_from">
        <callback name="set_from">
          <source-position filename="src/camel/camel-message-info.h"
                           line="152"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2380">Whether the value changed.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2367">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="CamelMessageInfo*"/>
            </parameter>
            <parameter name="from"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2368">a From to set</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_to">
        <callback name="get_to">
          <source-position filename="src/camel/camel-message-info.h"
                           line="154"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2415">To address of the @mi.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2413">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_to">
        <callback name="set_to">
          <source-position filename="src/camel/camel-message-info.h"
                           line="155"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2453">Whether the value changed.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2440">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="CamelMessageInfo*"/>
            </parameter>
            <parameter name="to"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2441">a To to set</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_cc">
        <callback name="get_cc">
          <source-position filename="src/camel/camel-message-info.h"
                           line="157"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2488">CC address of the @mi.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2486">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_cc">
        <callback name="set_cc">
          <source-position filename="src/camel/camel-message-info.h"
                           line="158"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2526">Whether the value changed.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2513">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="CamelMessageInfo*"/>
            </parameter>
            <parameter name="cc"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2514">a CC to set</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_mlist">
        <callback name="get_mlist">
          <source-position filename="src/camel/camel-message-info.h"
                           line="160"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2561">Mailing list address of the @mi.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2559">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_mlist">
        <callback name="set_mlist">
          <source-position filename="src/camel/camel-message-info.h"
                           line="161"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2599">Whether the value changed.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2586">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="CamelMessageInfo*"/>
            </parameter>
            <parameter name="mlist"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2587">a message list address to set</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <source-position filename="src/camel/camel-message-info.h"
                           line="163"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2634">Size of the associated message.</doc>
            <type name="guint32" c:type="guint32"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2632">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_size">
        <callback name="set_size">
          <source-position filename="src/camel/camel-message-info.h"
                           line="164"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2672">Whether the value changed.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2659">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="CamelMessageInfo*"/>
            </parameter>
            <parameter name="size" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2660">a size to set</doc>
              <type name="guint32" c:type="guint32"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_date_sent">
        <callback name="get_date_sent">
          <source-position filename="src/camel/camel-message-info.h"
                           line="166"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2707">time_t of the Date header of the message, encoded as gint64.</doc>
            <type name="gint64" c:type="gint64"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2705">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_date_sent">
        <callback name="set_date_sent">
          <source-position filename="src/camel/camel-message-info.h"
                           line="168"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2745">Whether the value changed.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2732">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="CamelMessageInfo*"/>
            </parameter>
            <parameter name="date_sent" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2733">a sent date to set</doc>
              <type name="gint64" c:type="gint64"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_date_received">
        <callback name="get_date_received">
          <source-position filename="src/camel/camel-message-info.h"
                           line="171"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2780">time_t of the Received header of the message, encoded as gint64.</doc>
            <type name="gint64" c:type="gint64"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2778">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_date_received">
        <callback name="set_date_received">
          <source-position filename="src/camel/camel-message-info.h"
                           line="173"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2818">Whether the value changed.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2805">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="CamelMessageInfo*"/>
            </parameter>
            <parameter name="date_received" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2806">a received date to set</doc>
              <type name="gint64" c:type="gint64"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_message_id">
        <callback name="get_message_id">
          <source-position filename="src/camel/camel-message-info.h"
                           line="176"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2856">Partial MD5 hash of the Message-ID header of the associated message.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2851">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_message_id">
        <callback name="set_message_id">
          <source-position filename="src/camel/camel-message-info.h"
                           line="178"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2895">Whether the value changed.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2881">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="CamelMessageInfo*"/>
            </parameter>
            <parameter name="message_id" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2882">a message id to set</doc>
              <type name="guint64" c:type="guint64"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_references">
        <callback name="get_references">
          <source-position filename="src/camel/camel-message-info.h"
                           line="181"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="2934">A #GArray of
  guint64 encoded Message-ID-s; or %NULL when none are available.</doc>
            <array name="GLib.Array" c:type="const GArray*">
              <type name="guint64"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2928">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="take_references">
        <callback name="take_references">
          <source-position filename="src/camel/camel-message-info.h"
                           line="183"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3017">Whether the value changed.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="2999">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="CamelMessageInfo*"/>
            </parameter>
            <parameter name="references"
                       transfer-ownership="full"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="3000">a references to set</doc>
              <array name="GLib.Array" c:type="GArray*">
                <type name="guint64"/>
              </array>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_headers">
        <callback name="get_headers">
          <source-position filename="src/camel/camel-message-info.h"
                           line="187"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3052">All the message headers of the associated
  message, or %NULL, when none are available.</doc>
            <type name="NameValueArray" c:type="const CamelNameValueArray*"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="3050">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="take_headers">
        <callback name="take_headers">
          <source-position filename="src/camel/camel-message-info.h"
                           line="188"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3126">Whether the value changed.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="3110">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="CamelMessageInfo*"/>
            </parameter>
            <parameter name="headers"
                       transfer-ownership="full"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="3111">headers to set, as #CamelNameValueArray, or %NULL</doc>
              <type name="NameValueArray" c:type="CamelNameValueArray*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_user_header">
        <callback name="get_user_header">
          <source-position filename="src/camel/camel-message-info.h"
                           line="190"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3162">Value of the header named @name from
   the user-defined message headers of the associated message, or %NULL,
   when not available.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="3159">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="3160">header name</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_user_header">
        <callback name="set_user_header">
          <source-position filename="src/camel/camel-message-info.h"
                           line="193"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3229">Whether the value changed.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="3218">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="CamelMessageInfo*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="3219">header name</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="value"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="3220">header value, or %NULL</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_user_headers">
        <callback name="get_user_headers">
          <source-position filename="src/camel/camel-message-info.h"
                           line="198"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3264">All the user-defined message headers
   of the associated message, or %NULL, when none are available.</doc>
            <type name="NameValueArray" c:type="const CamelNameValueArray*"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="3262">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="take_user_headers">
        <callback name="take_user_headers">
          <source-position filename="src/camel/camel-message-info.h"
                           line="200"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3331">Whether the value changed.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="3320">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="CamelMessageInfo*"/>
            </parameter>
            <parameter name="headers"
                       transfer-ownership="full"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="3321">headers to set, as #CamelNameValueArray, or %NULL</doc>
              <type name="NameValueArray" c:type="CamelNameValueArray*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_preview">
        <callback name="get_preview">
          <source-position filename="src/camel/camel-message-info.h"
                           line="203"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3365">Body preview of the associated
   message, or %NULL, when not available.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="3363">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="const CamelMessageInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_preview">
        <callback name="set_preview">
          <source-position filename="src/camel/camel-message-info.h"
                           line="204"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-message-info.c"
                 line="3424">Whether the value changed.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="mi" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="3415">a #CamelMessageInfo</doc>
              <type name="MessageInfo" c:type="CamelMessageInfo*"/>
            </parameter>
            <parameter name="preview"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-message-info.c"
                   line="3416">message body preview, or %NULL</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="14">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="MessageInfoPrivate"
            c:type="CamelMessageInfoPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-message-info.h" line="99"/>
    </record>
    <class name="MimeFilter"
           c:symbol-prefix="mime_filter"
           c:type="CamelMimeFilter"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="CamelMimeFilter"
           glib:get-type="camel_mime_filter_get_type"
           glib:type-struct="MimeFilterClass">
      <source-position filename="src/camel/camel-mime-filter.h" line="94"/>
      <constructor name="new" c:identifier="camel_mime_filter_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter.c"
             line="101">Create a new #CamelMimeFilter object.</doc>
        <source-position filename="src/camel/camel-mime-filter.h" line="98"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter.c"
               line="106">a new #CamelMimeFilter</doc>
          <type name="MimeFilter" c:type="CamelMimeFilter*"/>
        </return-value>
      </constructor>
      <virtual-method name="complete" invoker="complete">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter.c"
             line="231">Passes the input buffer, @in, through @filter and generates an
output buffer, @out and makes sure that all data is flushed to the
output buffer. This must be the last filtering call made, no
further calls to camel_mime_filter_filter() may be called on @filter
until @filter has been reset using camel_mime_filter_reset().</doc>
        <source-position filename="src/camel/camel-mime-filter.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="233">a #CamelMimeFilter object</doc>
            <type name="MimeFilter" c:type="CamelMimeFilter*"/>
          </instance-parameter>
          <parameter name="in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="234">input buffer</doc>
            <array length="1" zero-terminated="0" c:type="const gchar*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="235">length of @in</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="prespace" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="236">amount of prespace</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="out"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="237">pointer to the output buffer (to be set)</doc>
            <array length="4" zero-terminated="0" c:type="gchar**">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="outlen"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="238">pointer to the length of the output buffer (to be set)</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="outprespace"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="239">pointer to the output prespace length (to be set)</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="filter" invoker="filter">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter.c"
             line="195">Passes the input buffer, @in, through @filter and generates an
output buffer, @out.</doc>
        <source-position filename="src/camel/camel-mime-filter.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="197">a #CamelMimeFilter object</doc>
            <type name="MimeFilter" c:type="CamelMimeFilter*"/>
          </instance-parameter>
          <parameter name="in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="198">input buffer</doc>
            <array length="1" zero-terminated="0" c:type="const gchar*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="199">length of @in</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="prespace" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="200">amount of prespace</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="out"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="201">pointer to the output buffer (to be set)</doc>
            <array length="4" zero-terminated="0" c:type="gchar**">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="outlen"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="202">pointer to the length of the output buffer (to be set)</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="outprespace"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="203">pointer to the output prespace length (to be set)</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reset" invoker="reset">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter.c"
             line="270">Resets the state on @filter so that it may be used again.</doc>
        <source-position filename="src/camel/camel-mime-filter.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="272">a #CamelMimeFilter object</doc>
            <type name="MimeFilter" c:type="CamelMimeFilter*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="backup" c:identifier="camel_mime_filter_backup">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter.c"
             line="293">Saves @data to be used as prespace input data to the next call to
camel_mime_filter_filter() or camel_mime_filter_complete().

Note: New calls replace old data.</doc>
        <source-position filename="src/camel/camel-mime-filter.h" line="116"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="295">a #CamelMimeFilter object</doc>
            <type name="MimeFilter" c:type="CamelMimeFilter*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="296">data buffer to backup</doc>
            <array length="1" zero-terminated="0" c:type="const gchar*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="297">length of @data</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete" c:identifier="camel_mime_filter_complete">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter.c"
             line="231">Passes the input buffer, @in, through @filter and generates an
output buffer, @out and makes sure that all data is flushed to the
output buffer. This must be the last filtering call made, no
further calls to camel_mime_filter_filter() may be called on @filter
until @filter has been reset using camel_mime_filter_reset().</doc>
        <source-position filename="src/camel/camel-mime-filter.h" line="106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="233">a #CamelMimeFilter object</doc>
            <type name="MimeFilter" c:type="CamelMimeFilter*"/>
          </instance-parameter>
          <parameter name="in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="234">input buffer</doc>
            <array length="1" zero-terminated="0" c:type="const gchar*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="235">length of @in</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="prespace" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="236">amount of prespace</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="out"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="237">pointer to the output buffer (to be set)</doc>
            <array length="4" zero-terminated="0" c:type="gchar**">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="outlen"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="238">pointer to the length of the output buffer (to be set)</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="outprespace"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="239">pointer to the output prespace length (to be set)</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="filter" c:identifier="camel_mime_filter_filter">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter.c"
             line="195">Passes the input buffer, @in, through @filter and generates an
output buffer, @out.</doc>
        <source-position filename="src/camel/camel-mime-filter.h" line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="197">a #CamelMimeFilter object</doc>
            <type name="MimeFilter" c:type="CamelMimeFilter*"/>
          </instance-parameter>
          <parameter name="in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="198">input buffer</doc>
            <array length="1" zero-terminated="0" c:type="const gchar*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="199">length of @in</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="prespace" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="200">amount of prespace</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="out"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="201">pointer to the output buffer (to be set)</doc>
            <array length="4" zero-terminated="0" c:type="gchar**">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="outlen"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="202">pointer to the length of the output buffer (to be set)</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="outprespace"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="203">pointer to the output prespace length (to be set)</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="camel_mime_filter_reset">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter.c"
             line="270">Resets the state on @filter so that it may be used again.</doc>
        <source-position filename="src/camel/camel-mime-filter.h" line="113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="272">a #CamelMimeFilter object</doc>
            <type name="MimeFilter" c:type="CamelMimeFilter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_size" c:identifier="camel_mime_filter_set_size">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter.c"
             line="322">Ensure that @filter has enough storage space to store @size bytes
for filter output.</doc>
        <source-position filename="src/camel/camel-mime-filter.h" line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="324">a #CamelMimeFilter object</doc>
            <type name="MimeFilter" c:type="CamelMimeFilter*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="325">requested amount of storage space</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="keep" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter.c"
                 line="326">%TRUE to keep existing buffered data or %FALSE otherwise</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="MimeFilterPrivate" c:type="CamelMimeFilterPrivate*"/>
      </field>
      <field name="outreal">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="outbuf">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="outptr">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="outsize">
        <type name="gsize" c:type="gsize"/>
      </field>
      <field name="outpre">
        <type name="gsize" c:type="gsize"/>
      </field>
      <field name="backbuf">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="backsize">
        <type name="gsize" c:type="gsize"/>
      </field>
      <field name="backlen">
        <type name="gsize" c:type="gsize"/>
      </field>
    </class>
    <class name="MimeFilterBasic"
           c:symbol-prefix="mime_filter_basic"
           c:type="CamelMimeFilterBasic"
           parent="MimeFilter"
           glib:type-name="CamelMimeFilterBasic"
           glib:get-type="camel_mime_filter_basic_get_type"
           glib:type-struct="MimeFilterBasicClass">
      <source-position filename="src/camel/camel-mime-filter-basic.h"
                       line="65"/>
      <constructor name="new" c:identifier="camel_mime_filter_basic_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter-basic.c"
             line="312">Create a new #CamelMimeFilterBasic object of type @type.</doc>
        <source-position filename="src/camel/camel-mime-filter-basic.h"
                         line="69"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-basic.c"
               line="318">a new #CamelMimeFilterBasic object</doc>
          <type name="MimeFilter" c:type="CamelMimeFilter*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-basic.c"
                 line="314">a #CamelMimeFilterBasicType type</doc>
            <type name="MimeFilterBasicType"
                  c:type="CamelMimeFilterBasicType"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent">
        <type name="MimeFilter" c:type="CamelMimeFilter"/>
      </field>
      <field name="priv">
        <type name="MimeFilterBasicPrivate"
              c:type="CamelMimeFilterBasicPrivate*"/>
      </field>
    </class>
    <record name="MimeFilterBasicClass"
            c:type="CamelMimeFilterBasicClass"
            glib:is-gtype-struct-for="MimeFilterBasic">
      <source-position filename="src/camel/camel-mime-filter-basic.h"
                       line="65"/>
      <field name="parent_class">
        <type name="MimeFilterClass" c:type="CamelMimeFilterClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="MimeFilterBasicPrivate"
            c:type="CamelMimeFilterBasicPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-mime-filter-basic.h"
                       line="53"/>
    </record>
    <enumeration name="MimeFilterBasicType"
                 glib:type-name="CamelMimeFilterBasicType"
                 glib:get-type="camel_mime_filter_basic_type_get_type"
                 c:type="CamelMimeFilterBasicType">
      <member name="invalid"
              value="0"
              c:identifier="CAMEL_MIME_FILTER_BASIC_INVALID"
              glib:nick="invalid"
              glib:name="CAMEL_MIME_FILTER_BASIC_INVALID">
      </member>
      <member name="base64_enc"
              value="1"
              c:identifier="CAMEL_MIME_FILTER_BASIC_BASE64_ENC"
              glib:nick="base64-enc"
              glib:name="CAMEL_MIME_FILTER_BASIC_BASE64_ENC">
      </member>
      <member name="base64_dec"
              value="2"
              c:identifier="CAMEL_MIME_FILTER_BASIC_BASE64_DEC"
              glib:nick="base64-dec"
              glib:name="CAMEL_MIME_FILTER_BASIC_BASE64_DEC">
      </member>
      <member name="qp_enc"
              value="3"
              c:identifier="CAMEL_MIME_FILTER_BASIC_QP_ENC"
              glib:nick="qp-enc"
              glib:name="CAMEL_MIME_FILTER_BASIC_QP_ENC">
      </member>
      <member name="qp_dec"
              value="4"
              c:identifier="CAMEL_MIME_FILTER_BASIC_QP_DEC"
              glib:nick="qp-dec"
              glib:name="CAMEL_MIME_FILTER_BASIC_QP_DEC">
      </member>
      <member name="uu_enc"
              value="5"
              c:identifier="CAMEL_MIME_FILTER_BASIC_UU_ENC"
              glib:nick="uu-enc"
              glib:name="CAMEL_MIME_FILTER_BASIC_UU_ENC">
      </member>
      <member name="uu_dec"
              value="6"
              c:identifier="CAMEL_MIME_FILTER_BASIC_UU_DEC"
              glib:nick="uu-dec"
              glib:name="CAMEL_MIME_FILTER_BASIC_UU_DEC">
      </member>
    </enumeration>
    <class name="MimeFilterBestenc"
           c:symbol-prefix="mime_filter_bestenc"
           c:type="CamelMimeFilterBestenc"
           parent="MimeFilter"
           glib:type-name="CamelMimeFilterBestenc"
           glib:get-type="camel_mime_filter_bestenc_get_type"
           glib:type-struct="MimeFilterBestencClass">
      <source-position filename="src/camel/camel-mime-filter-bestenc.h"
                       line="85"/>
      <constructor name="new" c:identifier="camel_mime_filter_bestenc_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter-bestenc.c"
             line="213">Create a new #CamelMimeFilterBestenc object.</doc>
        <source-position filename="src/camel/camel-mime-filter-bestenc.h"
                         line="89"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-bestenc.c"
               line="219">a new #CamelMimeFilterBestenc object</doc>
          <type name="MimeFilter" c:type="CamelMimeFilter*"/>
        </return-value>
        <parameters>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-bestenc.c"
                 line="215">a bitmask of data required.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_best_charset"
              c:identifier="camel_mime_filter_bestenc_get_best_charset">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter-bestenc.c"
             line="298">Gets the best charset that can be used to contain this content.</doc>
        <source-position filename="src/camel/camel-mime-filter-bestenc.h"
                         line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-bestenc.c"
               line="304">the name of the best charset to use to encode the input
text filtered by @filter</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-bestenc.c"
                 line="300">a #CamelMimeFilterBestenc object</doc>
            <type name="MimeFilterBestenc" c:type="CamelMimeFilterBestenc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_best_encoding"
              c:identifier="camel_mime_filter_bestenc_get_best_encoding">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter-bestenc.c"
             line="232">Get the best encoding, given specific constraints, that can be used to
encode a stream of bytes.</doc>
        <source-position filename="src/camel/camel-mime-filter-bestenc.h"
                         line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-bestenc.c"
               line="240">the best encoding to use</doc>
          <type name="TransferEncoding" c:type="CamelTransferEncoding"/>
        </return-value>
        <parameters>
          <instance-parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-bestenc.c"
                 line="234">a #CamelMimeFilterBestenc object</doc>
            <type name="MimeFilterBestenc" c:type="CamelMimeFilterBestenc*"/>
          </instance-parameter>
          <parameter name="required" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-bestenc.c"
                 line="235">maximum level of output encoding allowed.</doc>
            <type name="BestencEncoding" c:type="CamelBestencEncoding"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_flags"
              c:identifier="camel_mime_filter_bestenc_set_flags">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter-bestenc.c"
             line="315">Set the flags for subsequent operations.</doc>
        <source-position filename="src/camel/camel-mime-filter-bestenc.h"
                         line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-bestenc.c"
                 line="317">a #CamelMimeFilterBestenc object</doc>
            <type name="MimeFilterBestenc" c:type="CamelMimeFilterBestenc*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-bestenc.c"
                 line="318">bestenc filter flags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="MimeFilter" c:type="CamelMimeFilter"/>
      </field>
      <field name="priv">
        <type name="MimeFilterBestencPrivate"
              c:type="CamelMimeFilterBestencPrivate*"/>
      </field>
    </class>
    <record name="MimeFilterBestencClass"
            c:type="CamelMimeFilterBestencClass"
            glib:is-gtype-struct-for="MimeFilterBestenc">
      <source-position filename="src/camel/camel-mime-filter-bestenc.h"
                       line="85"/>
      <field name="parent_class">
        <type name="MimeFilterClass" c:type="CamelMimeFilterClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="MimeFilterBestencPrivate"
            c:type="CamelMimeFilterBestencPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-mime-filter-bestenc.h"
                       line="54"/>
    </record>
    <class name="MimeFilterCRLF"
           c:symbol-prefix="mime_filter_crlf"
           c:type="CamelMimeFilterCRLF"
           parent="MimeFilter"
           glib:type-name="CamelMimeFilterCRLF"
           glib:get-type="camel_mime_filter_crlf_get_type"
           glib:type-struct="MimeFilterCRLFClass">
      <source-position filename="src/camel/camel-mime-filter-crlf.h"
                       line="66"/>
      <constructor name="new" c:identifier="camel_mime_filter_crlf_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter-crlf.c"
             line="229">Create a new #CamelMimeFilterCRLF object.</doc>
        <source-position filename="src/camel/camel-mime-filter-crlf.h"
                         line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-crlf.c"
               line="236">a new #CamelMimeFilterCRLF object</doc>
          <type name="MimeFilter" c:type="CamelMimeFilter*"/>
        </return-value>
        <parameters>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-crlf.c"
                 line="231">encode vs decode</doc>
            <type name="MimeFilterCRLFDirection"
                  c:type="CamelMimeFilterCRLFDirection"/>
          </parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-crlf.c"
                 line="232">whether or not to perform SMTP dot-escaping</doc>
            <type name="MimeFilterCRLFMode" c:type="CamelMimeFilterCRLFMode"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_ensure_crlf_end"
              c:identifier="camel_mime_filter_crlf_get_ensure_crlf_end"
              version="3.42">
        <source-position filename="src/camel/camel-mime-filter-crlf.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-crlf.c"
               line="278">whether the filter will ensure that the output stream will
   end with CRLF</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-crlf.c"
                 line="276">a #CamelMimeFilterCRLF</doc>
            <type name="MimeFilterCRLF" c:type="CamelMimeFilterCRLF*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_ensure_crlf_end"
              c:identifier="camel_mime_filter_crlf_set_ensure_crlf_end"
              version="3.42">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter-crlf.c"
             line="254">When set to true, the filter will ensure that the output stream will
end with CRLF, in case it does not. The default is to not do that.
The option is used only when encoding the stream.</doc>
        <source-position filename="src/camel/camel-mime-filter-crlf.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-crlf.c"
                 line="256">a #CamelMimeFilterCRLF</doc>
            <type name="MimeFilterCRLF" c:type="CamelMimeFilterCRLF*"/>
          </instance-parameter>
          <parameter name="ensure_crlf_end" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-crlf.c"
                 line="257">value to set</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="MimeFilter" c:type="CamelMimeFilter"/>
      </field>
      <field name="priv">
        <type name="MimeFilterCRLFPrivate"
              c:type="CamelMimeFilterCRLFPrivate*"/>
      </field>
    </class>
    <record name="MimeFilterCRLFClass"
            c:type="CamelMimeFilterCRLFClass"
            glib:is-gtype-struct-for="MimeFilterCRLF">
      <source-position filename="src/camel/camel-mime-filter-crlf.h"
                       line="66"/>
      <field name="parent_class">
        <type name="MimeFilterClass" c:type="CamelMimeFilterClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="MimeFilterCRLFDirection"
                 glib:type-name="CamelMimeFilterCRLFDirection"
                 glib:get-type="camel_mime_filter_crlf_direction_get_type"
                 c:type="CamelMimeFilterCRLFDirection">
      <member name="encode"
              value="0"
              c:identifier="CAMEL_MIME_FILTER_CRLF_ENCODE"
              glib:nick="encode"
              glib:name="CAMEL_MIME_FILTER_CRLF_ENCODE">
      </member>
      <member name="decode"
              value="1"
              c:identifier="CAMEL_MIME_FILTER_CRLF_DECODE"
              glib:nick="decode"
              glib:name="CAMEL_MIME_FILTER_CRLF_DECODE">
      </member>
    </enumeration>
    <enumeration name="MimeFilterCRLFMode"
                 glib:type-name="CamelMimeFilterCRLFMode"
                 glib:get-type="camel_mime_filter_crlf_mode_get_type"
                 c:type="CamelMimeFilterCRLFMode">
      <member name="dots"
              value="0"
              c:identifier="CAMEL_MIME_FILTER_CRLF_MODE_CRLF_DOTS"
              glib:nick="dots"
              glib:name="CAMEL_MIME_FILTER_CRLF_MODE_CRLF_DOTS">
      </member>
      <member name="only"
              value="1"
              c:identifier="CAMEL_MIME_FILTER_CRLF_MODE_CRLF_ONLY"
              glib:nick="only"
              glib:name="CAMEL_MIME_FILTER_CRLF_MODE_CRLF_ONLY">
      </member>
    </enumeration>
    <record name="MimeFilterCRLFPrivate"
            c:type="CamelMimeFilterCRLFPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-mime-filter-crlf.h"
                       line="54"/>
    </record>
    <class name="MimeFilterCanon"
           c:symbol-prefix="mime_filter_canon"
           c:type="CamelMimeFilterCanon"
           parent="MimeFilter"
           glib:type-name="CamelMimeFilterCanon"
           glib:get-type="camel_mime_filter_canon_get_type"
           glib:type-struct="MimeFilterCanonClass">
      <source-position filename="src/camel/camel-mime-filter-canon.h"
                       line="71"/>
      <constructor name="new" c:identifier="camel_mime_filter_canon_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter-canon.c"
             line="192">Create a new filter to canonicalise an input stream.</doc>
        <source-position filename="src/camel/camel-mime-filter-canon.h"
                         line="75"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-canon.c"
               line="198">a new #CamelMimeFilterCanon</doc>
          <type name="MimeFilter" c:type="CamelMimeFilter*"/>
        </return-value>
        <parameters>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-canon.c"
                 line="194">bitwise flags defining the behaviour of the filter</doc>
            <type name="MimeFilterCanonFlags" c:type="guint32"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent">
        <type name="MimeFilter" c:type="CamelMimeFilter"/>
      </field>
      <field name="priv">
        <type name="MimeFilterCanonPrivate"
              c:type="CamelMimeFilterCanonPrivate*"/>
      </field>
    </class>
    <record name="MimeFilterCanonClass"
            c:type="CamelMimeFilterCanonClass"
            glib:is-gtype-struct-for="MimeFilterCanon">
      <source-position filename="src/camel/camel-mime-filter-canon.h"
                       line="71"/>
      <field name="parent_class">
        <type name="MimeFilterClass" c:type="CamelMimeFilterClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <bitfield name="MimeFilterCanonFlags"
              glib:type-name="CamelMimeFilterCanonFlags"
              glib:get-type="camel_mime_filter_canon_flags_get_type"
              c:type="CamelMimeFilterCanonFlags">
      <member name="crlf"
              value="1"
              c:identifier="CAMEL_MIME_FILTER_CANON_CRLF"
              glib:nick="crlf"
              glib:name="CAMEL_MIME_FILTER_CANON_CRLF">
      </member>
      <member name="from"
              value="2"
              c:identifier="CAMEL_MIME_FILTER_CANON_FROM"
              glib:nick="from"
              glib:name="CAMEL_MIME_FILTER_CANON_FROM">
      </member>
      <member name="strip"
              value="4"
              c:identifier="CAMEL_MIME_FILTER_CANON_STRIP"
              glib:nick="strip"
              glib:name="CAMEL_MIME_FILTER_CANON_STRIP">
      </member>
    </bitfield>
    <record name="MimeFilterCanonPrivate"
            c:type="CamelMimeFilterCanonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-mime-filter-canon.h"
                       line="53"/>
    </record>
    <class name="MimeFilterCharset"
           c:symbol-prefix="mime_filter_charset"
           c:type="CamelMimeFilterCharset"
           parent="MimeFilter"
           glib:type-name="CamelMimeFilterCharset"
           glib:get-type="camel_mime_filter_charset_get_type"
           glib:type-struct="MimeFilterCharsetClass">
      <source-position filename="src/camel/camel-mime-filter-charset.h"
                       line="65"/>
      <constructor name="new" c:identifier="camel_mime_filter_charset_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter-charset.c"
             line="258">Create a new #CamelMimeFilterCharset object to convert text from
@from_charset to @to_charset.</doc>
        <source-position filename="src/camel/camel-mime-filter-charset.h"
                         line="69"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-charset.c"
               line="266">a new #CamelMimeFilterCharset object</doc>
          <type name="MimeFilter" c:type="CamelMimeFilter*"/>
        </return-value>
        <parameters>
          <parameter name="from_charset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-charset.c"
                 line="260">charset to convert from</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="to_charset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-charset.c"
                 line="261">charset to convert to</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent">
        <type name="MimeFilter" c:type="CamelMimeFilter"/>
      </field>
      <field name="priv">
        <type name="MimeFilterCharsetPrivate"
              c:type="CamelMimeFilterCharsetPrivate*"/>
      </field>
    </class>
    <record name="MimeFilterCharsetClass"
            c:type="CamelMimeFilterCharsetClass"
            glib:is-gtype-struct-for="MimeFilterCharset">
      <source-position filename="src/camel/camel-mime-filter-charset.h"
                       line="65"/>
      <field name="parent_class">
        <type name="MimeFilterClass" c:type="CamelMimeFilterClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="MimeFilterCharsetPrivate"
            c:type="CamelMimeFilterCharsetPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-mime-filter-charset.h"
                       line="53"/>
    </record>
    <record name="MimeFilterClass"
            c:type="CamelMimeFilterClass"
            glib:is-gtype-struct-for="MimeFilter">
      <source-position filename="src/camel/camel-mime-filter.h" line="94"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="filter">
        <callback name="filter">
          <source-position filename="src/camel/camel-mime-filter.h" line="76"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="filter" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-mime-filter.c"
                   line="197">a #CamelMimeFilter object</doc>
              <type name="MimeFilter" c:type="CamelMimeFilter*"/>
            </parameter>
            <parameter name="in" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-mime-filter.c"
                   line="198">input buffer</doc>
              <array length="2" zero-terminated="0" c:type="const gchar*">
                <type name="guint8"/>
              </array>
            </parameter>
            <parameter name="len" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-mime-filter.c"
                   line="199">length of @in</doc>
              <type name="gsize" c:type="gsize"/>
            </parameter>
            <parameter name="prespace" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-mime-filter.c"
                   line="200">amount of prespace</doc>
              <type name="gsize" c:type="gsize"/>
            </parameter>
            <parameter name="out"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="src/camel/camel-mime-filter.c"
                   line="201">pointer to the output buffer (to be set)</doc>
              <array length="5" zero-terminated="0" c:type="gchar**">
                <type name="guint8"/>
              </array>
            </parameter>
            <parameter name="outlen"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="src/camel/camel-mime-filter.c"
                   line="202">pointer to the length of the output buffer (to be set)</doc>
              <type name="gsize" c:type="gsize*"/>
            </parameter>
            <parameter name="outprespace"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="src/camel/camel-mime-filter.c"
                   line="203">pointer to the output prespace length (to be set)</doc>
              <type name="gsize" c:type="gsize*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="complete">
        <callback name="complete">
          <source-position filename="src/camel/camel-mime-filter.h" line="83"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="filter" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-mime-filter.c"
                   line="233">a #CamelMimeFilter object</doc>
              <type name="MimeFilter" c:type="CamelMimeFilter*"/>
            </parameter>
            <parameter name="in" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-mime-filter.c"
                   line="234">input buffer</doc>
              <array length="2" zero-terminated="0" c:type="const gchar*">
                <type name="guint8"/>
              </array>
            </parameter>
            <parameter name="len" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-mime-filter.c"
                   line="235">length of @in</doc>
              <type name="gsize" c:type="gsize"/>
            </parameter>
            <parameter name="prespace" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-mime-filter.c"
                   line="236">amount of prespace</doc>
              <type name="gsize" c:type="gsize"/>
            </parameter>
            <parameter name="out"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="src/camel/camel-mime-filter.c"
                   line="237">pointer to the output buffer (to be set)</doc>
              <array length="5" zero-terminated="0" c:type="gchar**">
                <type name="guint8"/>
              </array>
            </parameter>
            <parameter name="outlen"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="src/camel/camel-mime-filter.c"
                   line="238">pointer to the length of the output buffer (to be set)</doc>
              <type name="gsize" c:type="gsize*"/>
            </parameter>
            <parameter name="outprespace"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="src/camel/camel-mime-filter.c"
                   line="239">pointer to the output prespace length (to be set)</doc>
              <type name="gsize" c:type="gsize*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reset">
        <callback name="reset">
          <source-position filename="src/camel/camel-mime-filter.h" line="90"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="filter" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-mime-filter.c"
                   line="272">a #CamelMimeFilter object</doc>
              <type name="MimeFilter" c:type="CamelMimeFilter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="MimeFilterEnriched"
           c:symbol-prefix="mime_filter_enriched"
           c:type="CamelMimeFilterEnriched"
           parent="MimeFilter"
           glib:type-name="CamelMimeFilterEnriched"
           glib:get-type="camel_mime_filter_enriched_get_type"
           glib:type-struct="MimeFilterEnrichedClass">
      <source-position filename="src/camel/camel-mime-filter-enriched.h"
                       line="69"/>
      <constructor name="new" c:identifier="camel_mime_filter_enriched_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter-enriched.c"
             line="554">Create a new #CamelMimeFilterEnriched object to convert input text
streams from text/plain into text/enriched or text/richtext.</doc>
        <source-position filename="src/camel/camel-mime-filter-enriched.h"
                         line="73"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-enriched.c"
               line="561">a new #CamelMimeFilterEnriched object</doc>
          <type name="MimeFilter" c:type="CamelMimeFilter*"/>
        </return-value>
        <parameters>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-enriched.c"
                 line="556">bitwise set of flags to specify filter behaviour</doc>
            <type name="MimeFilterEnrichedFlags" c:type="guint32"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent">
        <type name="MimeFilter" c:type="CamelMimeFilter"/>
      </field>
      <field name="priv">
        <type name="MimeFilterEnrichedPrivate"
              c:type="CamelMimeFilterEnrichedPrivate*"/>
      </field>
    </class>
    <record name="MimeFilterEnrichedClass"
            c:type="CamelMimeFilterEnrichedClass"
            glib:is-gtype-struct-for="MimeFilterEnriched">
      <source-position filename="src/camel/camel-mime-filter-enriched.h"
                       line="69"/>
      <field name="parent_class">
        <type name="MimeFilterClass" c:type="CamelMimeFilterClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <bitfield name="MimeFilterEnrichedFlags"
              glib:type-name="CamelMimeFilterEnrichedFlags"
              glib:get-type="camel_mime_filter_enriched_flags_get_type"
              c:type="CamelMimeFilterEnrichedFlags">
      <member name="none"
              value="0"
              c:identifier="CAMEL_MIME_FILTER_ENRICHED_NONE"
              glib:nick="none"
              glib:name="CAMEL_MIME_FILTER_ENRICHED_NONE">
      </member>
      <member name="is_richtext"
              value="1"
              c:identifier="CAMEL_MIME_FILTER_ENRICHED_IS_RICHTEXT"
              glib:nick="is-richtext"
              glib:name="CAMEL_MIME_FILTER_ENRICHED_IS_RICHTEXT">
      </member>
    </bitfield>
    <record name="MimeFilterEnrichedPrivate"
            c:type="CamelMimeFilterEnrichedPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-mime-filter-enriched.h"
                       line="57"/>
    </record>
    <class name="MimeFilterFrom"
           c:symbol-prefix="mime_filter_from"
           c:type="CamelMimeFilterFrom"
           parent="MimeFilter"
           glib:type-name="CamelMimeFilterFrom"
           glib:get-type="camel_mime_filter_from_get_type"
           glib:type-struct="MimeFilterFromClass">
      <source-position filename="src/camel/camel-mime-filter-from.h"
                       line="64"/>
      <constructor name="new" c:identifier="camel_mime_filter_from_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter-from.c"
             line="160">Create a new #CamelMimeFilterFrom object.</doc>
        <source-position filename="src/camel/camel-mime-filter-from.h"
                         line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-from.c"
               line="165">a new #CamelMimeFilterFrom object</doc>
          <type name="MimeFilter" c:type="CamelMimeFilter*"/>
        </return-value>
      </constructor>
      <field name="parent">
        <type name="MimeFilter" c:type="CamelMimeFilter"/>
      </field>
      <field name="priv">
        <type name="MimeFilterFromPrivate"
              c:type="CamelMimeFilterFromPrivate*"/>
      </field>
    </class>
    <record name="MimeFilterFromClass"
            c:type="CamelMimeFilterFromClass"
            glib:is-gtype-struct-for="MimeFilterFrom">
      <source-position filename="src/camel/camel-mime-filter-from.h"
                       line="64"/>
      <field name="parent_class">
        <type name="MimeFilterClass" c:type="CamelMimeFilterClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="MimeFilterFromPrivate"
            c:type="CamelMimeFilterFromPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-mime-filter-from.h"
                       line="52"/>
    </record>
    <class name="MimeFilterGZip"
           c:symbol-prefix="mime_filter_gzip"
           c:type="CamelMimeFilterGZip"
           parent="MimeFilter"
           glib:type-name="CamelMimeFilterGZip"
           glib:get-type="camel_mime_filter_gzip_get_type"
           glib:type-struct="MimeFilterGZipClass">
      <source-position filename="src/camel/camel-mime-filter-gzip.h"
                       line="65"/>
      <constructor name="new" c:identifier="camel_mime_filter_gzip_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter-gzip.c"
             line="442">Creates a new gzip (or gunzip) filter.</doc>
        <source-position filename="src/camel/camel-mime-filter-gzip.h"
                         line="69"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-gzip.c"
               line="449">a new gzip (or gunzip) filter.</doc>
          <type name="MimeFilter" c:type="CamelMimeFilter*"/>
        </return-value>
        <parameters>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-gzip.c"
                 line="444">zip or unzip</doc>
            <type name="MimeFilterGZipMode" c:type="CamelMimeFilterGZipMode"/>
          </parameter>
          <parameter name="level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-gzip.c"
                 line="445">compression level</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent">
        <type name="MimeFilter" c:type="CamelMimeFilter"/>
      </field>
      <field name="priv">
        <type name="MimeFilterGZipPrivate"
              c:type="CamelMimeFilterGZipPrivate*"/>
      </field>
    </class>
    <record name="MimeFilterGZipClass"
            c:type="CamelMimeFilterGZipClass"
            glib:is-gtype-struct-for="MimeFilterGZip">
      <source-position filename="src/camel/camel-mime-filter-gzip.h"
                       line="65"/>
      <field name="parent_class">
        <type name="MimeFilterClass" c:type="CamelMimeFilterClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="MimeFilterGZipMode"
                 glib:type-name="CamelMimeFilterGZipMode"
                 glib:get-type="camel_mime_filter_gzip_mode_get_type"
                 c:type="CamelMimeFilterGZipMode">
      <member name="zip"
              value="0"
              c:identifier="CAMEL_MIME_FILTER_GZIP_MODE_ZIP"
              glib:nick="zip"
              glib:name="CAMEL_MIME_FILTER_GZIP_MODE_ZIP">
      </member>
      <member name="unzip"
              value="1"
              c:identifier="CAMEL_MIME_FILTER_GZIP_MODE_UNZIP"
              glib:nick="unzip"
              glib:name="CAMEL_MIME_FILTER_GZIP_MODE_UNZIP">
      </member>
    </enumeration>
    <record name="MimeFilterGZipPrivate"
            c:type="CamelMimeFilterGZipPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-mime-filter-gzip.h"
                       line="53"/>
    </record>
    <class name="MimeFilterHTML"
           c:symbol-prefix="mime_filter_html"
           c:type="CamelMimeFilterHTML"
           parent="MimeFilter"
           glib:type-name="CamelMimeFilterHTML"
           glib:get-type="camel_mime_filter_html_get_type"
           glib:type-struct="MimeFilterHTMLClass">
      <source-position filename="src/camel/camel-mime-filter-html.h"
                       line="64"/>
      <constructor name="new" c:identifier="camel_mime_filter_html_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter-html.c"
             line="189">Create a new #CamelMimeFilterHTML object.</doc>
        <source-position filename="src/camel/camel-mime-filter-html.h"
                         line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-html.c"
               line="194">a new #CamelMimeFilterHTML object</doc>
          <type name="MimeFilter" c:type="CamelMimeFilter*"/>
        </return-value>
      </constructor>
      <field name="parent">
        <type name="MimeFilter" c:type="CamelMimeFilter"/>
      </field>
      <field name="priv">
        <type name="MimeFilterHTMLPrivate"
              c:type="CamelMimeFilterHTMLPrivate*"/>
      </field>
    </class>
    <record name="MimeFilterHTMLClass"
            c:type="CamelMimeFilterHTMLClass"
            glib:is-gtype-struct-for="MimeFilterHTML">
      <source-position filename="src/camel/camel-mime-filter-html.h"
                       line="64"/>
      <field name="parent_class">
        <type name="MimeFilterClass" c:type="CamelMimeFilterClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="MimeFilterHTMLPrivate"
            c:type="CamelMimeFilterHTMLPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-mime-filter-html.h"
                       line="52"/>
    </record>
    <class name="MimeFilterIndex"
           c:symbol-prefix="mime_filter_index"
           c:type="CamelMimeFilterIndex"
           parent="MimeFilter"
           glib:type-name="CamelMimeFilterIndex"
           glib:get-type="camel_mime_filter_index_get_type"
           glib:type-struct="MimeFilterIndexClass">
      <source-position filename="src/camel/camel-mime-filter-index.h"
                       line="65"/>
      <constructor name="new" c:identifier="camel_mime_filter_index_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter-index.c"
             line="113">Create a new #CamelMimeFilterIndex based on @index.</doc>
        <source-position filename="src/camel/camel-mime-filter-index.h"
                         line="69"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-index.c"
               line="119">a new #CamelMimeFilterIndex object</doc>
          <type name="MimeFilter" c:type="CamelMimeFilter*"/>
        </return-value>
        <parameters>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-index.c"
                 line="115">a #CamelIndex object</doc>
            <type name="Index" c:type="CamelIndex*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_index"
              c:identifier="camel_mime_filter_index_set_index">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter-index.c"
             line="163">Set @index on @filter.</doc>
        <source-position filename="src/camel/camel-mime-filter-index.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-index.c"
                 line="165">a #CamelMimeFilterIndex object</doc>
            <type name="MimeFilterIndex" c:type="CamelMimeFilterIndex*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-index.c"
                 line="166">a #CamelIndex object</doc>
            <type name="Index" c:type="CamelIndex*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name" c:identifier="camel_mime_filter_index_set_name">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter-index.c"
             line="139">Set the match name for any indexed words.</doc>
        <source-position filename="src/camel/camel-mime-filter-index.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-index.c"
                 line="141">a #CamelMimeFilterIndex object</doc>
            <type name="MimeFilterIndex" c:type="CamelMimeFilterIndex*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-index.c"
                 line="142">a #CamelIndexName object</doc>
            <type name="IndexName" c:type="CamelIndexName*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="MimeFilter" c:type="CamelMimeFilter"/>
      </field>
      <field name="priv">
        <type name="MimeFilterIndexPrivate"
              c:type="CamelMimeFilterIndexPrivate*"/>
      </field>
    </class>
    <record name="MimeFilterIndexClass"
            c:type="CamelMimeFilterIndexClass"
            glib:is-gtype-struct-for="MimeFilterIndex">
      <source-position filename="src/camel/camel-mime-filter-index.h"
                       line="65"/>
      <field name="parent_class">
        <type name="MimeFilterClass" c:type="CamelMimeFilterClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="MimeFilterIndexPrivate"
            c:type="CamelMimeFilterIndexPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-mime-filter-index.h"
                       line="53"/>
    </record>
    <class name="MimeFilterLinewrap"
           c:symbol-prefix="mime_filter_linewrap"
           c:type="CamelMimeFilterLinewrap"
           parent="MimeFilter"
           glib:type-name="CamelMimeFilterLinewrap"
           glib:get-type="camel_mime_filter_linewrap_get_type"
           glib:type-struct="MimeFilterLinewrapClass">
      <source-position filename="src/camel/camel-mime-filter-linewrap.h"
                       line="69"/>
      <constructor name="new" c:identifier="camel_mime_filter_linewrap_new">
        <source-position filename="src/camel/camel-mime-filter-linewrap.h"
                         line="73"/>
        <return-value transfer-ownership="full">
          <type name="MimeFilter" c:type="CamelMimeFilter*"/>
        </return-value>
        <parameters>
          <parameter name="preferred_len" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="max_len" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="indent_char" transfer-ownership="none">
            <type name="gchar" c:type="gchar"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent">
        <type name="MimeFilter" c:type="CamelMimeFilter"/>
      </field>
      <field name="priv">
        <type name="MimeFilterLinewrapPrivate"
              c:type="CamelMimeFilterLinewrapPrivate*"/>
      </field>
    </class>
    <record name="MimeFilterLinewrapClass"
            c:type="CamelMimeFilterLinewrapClass"
            glib:is-gtype-struct-for="MimeFilterLinewrap">
      <source-position filename="src/camel/camel-mime-filter-linewrap.h"
                       line="69"/>
      <field name="parent_class">
        <type name="MimeFilterClass" c:type="CamelMimeFilterClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="MimeFilterLinewrapPrivate"
            c:type="CamelMimeFilterLinewrapPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-mime-filter-linewrap.h"
                       line="57"/>
    </record>
    <class name="MimeFilterPgp"
           c:symbol-prefix="mime_filter_pgp"
           c:type="CamelMimeFilterPgp"
           parent="MimeFilter"
           glib:type-name="CamelMimeFilterPgp"
           glib:get-type="camel_mime_filter_pgp_get_type"
           glib:type-struct="MimeFilterPgpClass">
      <source-position filename="src/camel/camel-mime-filter-pgp.h" line="64"/>
      <constructor name="new" c:identifier="camel_mime_filter_pgp_new">
        <source-position filename="src/camel/camel-mime-filter-pgp.h"
                         line="68"/>
        <return-value transfer-ownership="full">
          <type name="MimeFilter" c:type="CamelMimeFilter*"/>
        </return-value>
      </constructor>
      <field name="parent">
        <type name="MimeFilter" c:type="CamelMimeFilter"/>
      </field>
      <field name="priv">
        <type name="MimeFilterPgpPrivate" c:type="CamelMimeFilterPgpPrivate*"/>
      </field>
    </class>
    <record name="MimeFilterPgpClass"
            c:type="CamelMimeFilterPgpClass"
            glib:is-gtype-struct-for="MimeFilterPgp">
      <source-position filename="src/camel/camel-mime-filter-pgp.h" line="64"/>
      <field name="parent_class">
        <type name="MimeFilterClass" c:type="CamelMimeFilterClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="MimeFilterPgpPrivate"
            c:type="CamelMimeFilterPgpPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-mime-filter-pgp.h" line="52"/>
    </record>
    <record name="MimeFilterPrivate"
            c:type="CamelMimeFilterPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-mime-filter.h" line="56"/>
    </record>
    <class name="MimeFilterProgress"
           c:symbol-prefix="mime_filter_progress"
           c:type="CamelMimeFilterProgress"
           version="2.24"
           parent="MimeFilter"
           glib:type-name="CamelMimeFilterProgress"
           glib:get-type="camel_mime_filter_progress_get_type"
           glib:type-struct="MimeFilterProgressClass">
      <source-position filename="src/camel/camel-mime-filter-progress.h"
                       line="72"/>
      <constructor name="new"
                   c:identifier="camel_mime_filter_progress_new"
                   version="2.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter-progress.c"
             line="123">Create a new #CamelMimeFilterProgress object that will report streaming
progress.  While the function will silently accept @cancellable being
%NULL or a plain #GCancellable for convenience sake, no progress will be
reported unless @cancellable is a #CamelOperation.</doc>
        <source-position filename="src/camel/camel-mime-filter-progress.h"
                         line="76"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-progress.c"
               line="133">a new #CamelMimeFilter object</doc>
          <type name="MimeFilter" c:type="CamelMimeFilter*"/>
        </return-value>
        <parameters>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-progress.c"
                 line="125">a #CamelOperation cast as a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="total" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-progress.c"
                 line="126">total number of bytes to report progress on</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent" readable="0" private="1">
        <type name="MimeFilter" c:type="CamelMimeFilter"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="MimeFilterProgressPrivate"
              c:type="CamelMimeFilterProgressPrivate*"/>
      </field>
    </class>
    <record name="MimeFilterProgressClass"
            c:type="CamelMimeFilterProgressClass"
            glib:is-gtype-struct-for="MimeFilterProgress">
      <source-position filename="src/camel/camel-mime-filter-progress.h"
                       line="72"/>
      <field name="parent_class">
        <type name="MimeFilterClass" c:type="CamelMimeFilterClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="MimeFilterProgressPrivate"
            c:type="CamelMimeFilterProgressPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-mime-filter-progress.h"
                       line="54"/>
    </record>
    <class name="MimeFilterToHTML"
           c:symbol-prefix="mime_filter_tohtml"
           c:type="CamelMimeFilterToHTML"
           parent="MimeFilter"
           glib:type-name="CamelMimeFilterToHTML"
           glib:get-type="camel_mime_filter_tohtml_get_type"
           glib:type-struct="MimeFilterToHTMLClass">
      <source-position filename="src/camel/camel-mime-filter-tohtml.h"
                       line="65"/>
      <constructor name="new" c:identifier="camel_mime_filter_tohtml_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter-tohtml.c"
             line="686">Create a new #CamelMimeFilterToHTML object to convert plain text
into HTML.</doc>
        <source-position filename="src/camel/camel-mime-filter-tohtml.h"
                         line="69"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-tohtml.c"
               line="694">a new #CamelMimeFilterToHTML object</doc>
          <type name="MimeFilter" c:type="CamelMimeFilter*"/>
        </return-value>
        <parameters>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-tohtml.c"
                 line="688">bitwise flags defining the behaviour</doc>
            <type name="MimeFilterToHTMLFlags"
                  c:type="CamelMimeFilterToHTMLFlags"/>
          </parameter>
          <parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-tohtml.c"
                 line="689">color to use when highlighting quoted text</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent">
        <type name="MimeFilter" c:type="CamelMimeFilter"/>
      </field>
      <field name="priv">
        <type name="MimeFilterToHTMLPrivate"
              c:type="CamelMimeFilterToHTMLPrivate*"/>
      </field>
    </class>
    <record name="MimeFilterToHTMLClass"
            c:type="CamelMimeFilterToHTMLClass"
            glib:is-gtype-struct-for="MimeFilterToHTML">
      <source-position filename="src/camel/camel-mime-filter-tohtml.h"
                       line="65"/>
      <field name="parent_class">
        <type name="MimeFilterClass" c:type="CamelMimeFilterClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <bitfield name="MimeFilterToHTMLFlags"
              glib:type-name="CamelMimeFilterToHTMLFlags"
              glib:get-type="camel_mime_filter_to_html_flags_get_type"
              c:type="CamelMimeFilterToHTMLFlags">
      <doc xml:space="preserve"
           filename="src/camel/camel-enums.h"
           line="167">Flags for converting text/plain content into text/html.</doc>
      <member name="pre"
              value="1"
              c:identifier="CAMEL_MIME_FILTER_TOHTML_PRE"
              glib:nick="pre"
              glib:name="CAMEL_MIME_FILTER_TOHTML_PRE">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="169">Enclose the content in &amp;lt;pre&amp;gt; ... &amp;lt;/pre&amp;gt; tags.
    Cannot be used together with %CAMEL_MIME_FILTER_TOHTML_DIV.</doc>
      </member>
      <member name="convert_nl"
              value="2"
              c:identifier="CAMEL_MIME_FILTER_TOHTML_CONVERT_NL"
              glib:nick="convert-nl"
              glib:name="CAMEL_MIME_FILTER_TOHTML_CONVERT_NL">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="172">Convert newline characters to &amp;lt;br&amp;gt; tags.</doc>
      </member>
      <member name="convert_spaces"
              value="4"
              c:identifier="CAMEL_MIME_FILTER_TOHTML_CONVERT_SPACES"
              glib:nick="convert-spaces"
              glib:name="CAMEL_MIME_FILTER_TOHTML_CONVERT_SPACES">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="174">Convert space and tab characters to a non-breaking space (&amp;amp;nbsp;).</doc>
      </member>
      <member name="convert_urls"
              value="8"
              c:identifier="CAMEL_MIME_FILTER_TOHTML_CONVERT_URLS"
              glib:nick="convert-urls"
              glib:name="CAMEL_MIME_FILTER_TOHTML_CONVERT_URLS">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="176">Convert recognized URLs to &amp;lt;a href="foo"&amp;gt;foo&amp;lt;/a&amp;gt;.</doc>
      </member>
      <member name="mark_citation"
              value="16"
              c:identifier="CAMEL_MIME_FILTER_TOHTML_MARK_CITATION"
              glib:nick="mark-citation"
              glib:name="CAMEL_MIME_FILTER_TOHTML_MARK_CITATION">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="178">Color quoted lines (lines beginning with '&amp;gt;').</doc>
      </member>
      <member name="convert_addresses"
              value="32"
              c:identifier="CAMEL_MIME_FILTER_TOHTML_CONVERT_ADDRESSES"
              glib:nick="convert-addresses"
              glib:name="CAMEL_MIME_FILTER_TOHTML_CONVERT_ADDRESSES">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="180">Convert mailto: URLs to &amp;lt;a href="mailto:foo"&amp;gt;mailto:foo&amp;lt;/a&amp;gt;.</doc>
      </member>
      <member name="escape_8bit"
              value="64"
              c:identifier="CAMEL_MIME_FILTER_TOHTML_ESCAPE_8BIT"
              glib:nick="escape-8bit"
              glib:name="CAMEL_MIME_FILTER_TOHTML_ESCAPE_8BIT">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="182">Convert 8-bit characters to escaped hexdecimal (&amp;amp;#nnn;).</doc>
      </member>
      <member name="cite"
              value="128"
              c:identifier="CAMEL_MIME_FILTER_TOHTML_CITE"
              glib:nick="cite"
              glib:name="CAMEL_MIME_FILTER_TOHTML_CITE">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="184">Prefix each line with "&amp;gt; ".</doc>
      </member>
      <member name="preserve_8bit"
              value="256"
              c:identifier="CAMEL_MIME_FILTER_TOHTML_PRESERVE_8BIT"
              glib:nick="preserve-8bit"
              glib:name="CAMEL_MIME_FILTER_TOHTML_PRESERVE_8BIT">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="186">This flag is not used by #CamelMimeFilterToHTML.</doc>
      </member>
      <member name="format_flowed"
              value="512"
              c:identifier="CAMEL_MIME_FILTER_TOHTML_FORMAT_FLOWED"
              glib:nick="format-flowed"
              glib:name="CAMEL_MIME_FILTER_TOHTML_FORMAT_FLOWED">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="188">This flag is not used by #CamelMimeFilterToHTML.</doc>
      </member>
      <member name="quote_citation"
              value="1024"
              c:identifier="CAMEL_MIME_FILTER_TOHTML_QUOTE_CITATION"
              glib:nick="quote-citation"
              glib:name="CAMEL_MIME_FILTER_TOHTML_QUOTE_CITATION">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="190">Group lines beginning with one or more '&amp;gt;' characters in
    &amp;lt;blockquote type="cite"&amp;gt; ... &amp;lt;/blockquote&amp;gt; tags. The tags
    are nested according to the number of '&amp;gt;' characters.</doc>
      </member>
      <member name="div"
              value="2048"
              c:identifier="CAMEL_MIME_FILTER_TOHTML_DIV"
              glib:nick="div"
              glib:name="CAMEL_MIME_FILTER_TOHTML_DIV">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="194">Enclose the paragraphs in &amp;lt;div&amp;gt; ... &amp;lt;/div&amp;gt; tags.
    Cannot be used together with %CAMEL_MIME_FILTER_TOHTML_PRE.</doc>
      </member>
      <member name="preserve_tabs"
              value="4096"
              c:identifier="CAMEL_MIME_FILTER_TOHTML_PRESERVE_TABS"
              glib:nick="preserve-tabs"
              glib:name="CAMEL_MIME_FILTER_TOHTML_PRESERVE_TABS">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="197">Set in combination with %CAMEL_MIME_FILTER_TOHTML_CONVERT_SPACES,
    to keep tab characters. If not set, converts them into the spaces.</doc>
      </member>
    </bitfield>
    <record name="MimeFilterToHTMLPrivate"
            c:type="CamelMimeFilterToHTMLPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-mime-filter-tohtml.h"
                       line="53"/>
    </record>
    <class name="MimeFilterWindows"
           c:symbol-prefix="mime_filter_windows"
           c:type="CamelMimeFilterWindows"
           parent="MimeFilter"
           glib:type-name="CamelMimeFilterWindows"
           glib:get-type="camel_mime_filter_windows_get_type"
           glib:type-struct="MimeFilterWindowsClass">
      <source-position filename="src/camel/camel-mime-filter-windows.h"
                       line="64"/>
      <constructor name="new" c:identifier="camel_mime_filter_windows_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter-windows.c"
             line="135">Create a new #CamelMimeFilterWindows object that will analyse
whether or not the text is really encoded in @claimed_charset.</doc>
        <source-position filename="src/camel/camel-mime-filter-windows.h"
                         line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-windows.c"
               line="142">a new #CamelMimeFilter object</doc>
          <type name="MimeFilter" c:type="CamelMimeFilter*"/>
        </return-value>
        <parameters>
          <parameter name="claimed_charset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-windows.c"
                 line="137">ISO charset name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="is_windows_charset"
              c:identifier="camel_mime_filter_windows_is_windows_charset">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter-windows.c"
             line="160">Get whether or not the textual content filtered by @filter is
really in a Microsoft Windows charset rather than the claimed ISO
charset.</doc>
        <source-position filename="src/camel/camel-mime-filter-windows.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-windows.c"
               line="168">%TRUE if the text was found to be in a Microsoft Windows
CP125x charset or %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-windows.c"
                 line="162">a #CamelMimeFilterWindows object</doc>
            <type name="MimeFilterWindows" c:type="CamelMimeFilterWindows*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="real_charset"
              c:identifier="camel_mime_filter_windows_real_charset">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter-windows.c"
             line="179">Get the name of the actual charset used to encode the textual
content filtered by @filter (it will either be the original
claimed_charset passed in at creation time or the Windows-CP125x
equivalent).</doc>
        <source-position filename="src/camel/camel-mime-filter-windows.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-windows.c"
               line="188">the name of the actual charset</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-windows.c"
                 line="181">a #CamelMimeFilterWindows object</doc>
            <type name="MimeFilterWindows" c:type="CamelMimeFilterWindows*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="MimeFilter" c:type="CamelMimeFilter"/>
      </field>
      <field name="priv">
        <type name="MimeFilterWindowsPrivate"
              c:type="CamelMimeFilterWindowsPrivate*"/>
      </field>
    </class>
    <record name="MimeFilterWindowsClass"
            c:type="CamelMimeFilterWindowsClass"
            glib:is-gtype-struct-for="MimeFilterWindows">
      <source-position filename="src/camel/camel-mime-filter-windows.h"
                       line="64"/>
      <field name="parent_class">
        <type name="MimeFilterClass" c:type="CamelMimeFilterClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="MimeFilterWindowsPrivate"
            c:type="CamelMimeFilterWindowsPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-mime-filter-windows.h"
                       line="52"/>
    </record>
    <class name="MimeFilterYenc"
           c:symbol-prefix="mime_filter_yenc"
           c:type="CamelMimeFilterYenc"
           parent="MimeFilter"
           glib:type-name="CamelMimeFilterYenc"
           glib:get-type="camel_mime_filter_yenc_get_type"
           glib:type-struct="MimeFilterYencClass">
      <source-position filename="src/camel/camel-mime-filter-yenc.h"
                       line="84"/>
      <constructor name="new" c:identifier="camel_mime_filter_yenc_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter-yenc.c"
             line="239">Create a new #CamelMimeFilterYenc filter object.</doc>
        <source-position filename="src/camel/camel-mime-filter-yenc.h"
                         line="88"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-yenc.c"
               line="245">a new #CamelMimeFilterYenc object</doc>
          <type name="MimeFilter" c:type="CamelMimeFilter*"/>
        </return-value>
        <parameters>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-yenc.c"
                 line="241">encode direction</doc>
            <type name="MimeFilterYencDirection"
                  c:type="CamelMimeFilterYencDirection"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_crc" c:identifier="camel_mime_filter_yenc_get_crc">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter-yenc.c"
             line="320">Get the computed crc or (#guint32) -1 on fail.</doc>
        <source-position filename="src/camel/camel-mime-filter-yenc.h"
                         line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-yenc.c"
               line="326">the computed crc or (#guint32) -1 on fail.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="yenc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-yenc.c"
                 line="322">a #CamelMimeFilterYenc object</doc>
            <type name="MimeFilterYenc" c:type="CamelMimeFilterYenc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pcrc" c:identifier="camel_mime_filter_yenc_get_pcrc">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter-yenc.c"
             line="304">Get the computed part crc or (#guint32) -1 on fail.</doc>
        <source-position filename="src/camel/camel-mime-filter-yenc.h"
                         line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-yenc.c"
               line="310">the computed part crc or (#guint32) -1 on fail.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="yenc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-yenc.c"
                 line="306">a #CamelMimeFilterYenc object</doc>
            <type name="MimeFilterYenc" c:type="CamelMimeFilterYenc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_crc" c:identifier="camel_mime_filter_yenc_set_crc">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter-yenc.c"
             line="288">Sets the current crc32 value on the yEnc filter @yenc to @crc.</doc>
        <source-position filename="src/camel/camel-mime-filter-yenc.h"
                         line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="yenc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-yenc.c"
                 line="290">a #CamelMimeFilterYenc object</doc>
            <type name="MimeFilterYenc" c:type="CamelMimeFilterYenc*"/>
          </instance-parameter>
          <parameter name="crc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-yenc.c"
                 line="291">crc32 value</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_state" c:identifier="camel_mime_filter_yenc_set_state">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter-yenc.c"
             line="272">Sets the current state of the yencoder/ydecoder</doc>
        <source-position filename="src/camel/camel-mime-filter-yenc.h"
                         line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="yenc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-yenc.c"
                 line="274">a #CamelMimeFilterYenc object</doc>
            <type name="MimeFilterYenc" c:type="CamelMimeFilterYenc*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-filter-yenc.c"
                 line="275">encode/decode state</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="MimeFilter" c:type="CamelMimeFilter"/>
      </field>
      <field name="priv">
        <type name="MimeFilterYencPrivate"
              c:type="CamelMimeFilterYencPrivate*"/>
      </field>
    </class>
    <record name="MimeFilterYencClass"
            c:type="CamelMimeFilterYencClass"
            glib:is-gtype-struct-for="MimeFilterYenc">
      <source-position filename="src/camel/camel-mime-filter-yenc.h"
                       line="84"/>
      <field name="parent_class">
        <type name="MimeFilterClass" c:type="CamelMimeFilterClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="MimeFilterYencDirection"
                 glib:type-name="CamelMimeFilterYencDirection"
                 glib:get-type="camel_mime_filter_yenc_direction_get_type"
                 c:type="CamelMimeFilterYencDirection">
      <member name="encode"
              value="0"
              c:identifier="CAMEL_MIME_FILTER_YENC_DIRECTION_ENCODE"
              glib:nick="encode"
              glib:name="CAMEL_MIME_FILTER_YENC_DIRECTION_ENCODE">
      </member>
      <member name="decode"
              value="1"
              c:identifier="CAMEL_MIME_FILTER_YENC_DIRECTION_DECODE"
              glib:nick="decode"
              glib:name="CAMEL_MIME_FILTER_YENC_DIRECTION_DECODE">
      </member>
    </enumeration>
    <record name="MimeFilterYencPrivate"
            c:type="CamelMimeFilterYencPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-mime-filter-yenc.h"
                       line="53"/>
    </record>
    <class name="MimeMessage"
           c:symbol-prefix="mime_message"
           c:type="CamelMimeMessage"
           parent="MimePart"
           glib:type-name="CamelMimeMessage"
           glib:get-type="camel_mime_message_get_type"
           glib:type-struct="MimeMessageClass">
      <source-position filename="src/camel/camel-mime-message.h" line="80"/>
      <constructor name="new" c:identifier="camel_mime_message_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-message.c"
             line="507">Create a new #CamelMimeMessage object.</doc>
        <source-position filename="src/camel/camel-mime-message.h" line="84"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-message.c"
               line="512">a new #CamelMimeMessage object</doc>
          <type name="MimeMessage" c:type="CamelMimeMessage*"/>
        </return-value>
      </constructor>
      <method name="build_mbox_from"
              c:identifier="camel_mime_message_build_mbox_from">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-message.c"
             line="1332">Build an MBox from-line from @message.</doc>
        <source-position filename="src/camel/camel-mime-message.h" line="156"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-message.c"
               line="1338">an MBox from-line suitable for use in an mbox file</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="1334">a #CamelMimeMessage object</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dump" c:identifier="camel_mime_message_dump">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-message.c"
             line="1526">Dump information about the mime message to stdout.

If body is TRUE, then dump body content of the message as well.</doc>
        <source-position filename="src/camel/camel-mime-message.h" line="160"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="1528">a #CamelMimeMessage</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </instance-parameter>
          <parameter name="body" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="1529">whether to dump also message body</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="encode_8bit_parts"
              c:identifier="camel_mime_message_encode_8bit_parts">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-message.c"
             line="1259">Encode all message parts to a suitable transfer encoding for transport (7bit clean).</doc>
        <source-position filename="src/camel/camel-mime-message.h" line="151"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="1261">a #CamelMimeMessage object</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="foreach_part"
              c:identifier="camel_mime_message_foreach_part"
              version="3.34">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-message.c"
             line="972">Calls @callback for each part of the @message, including the message itself.
The traverse of the @message parts can be stopped when the @callback
returns %FALSE.</doc>
        <source-position filename="src/camel/camel-mime-message.h" line="142"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="974">a #CamelMimeMessage</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="975">a #CamelForeachPartFunc callback to call for each part</doc>
            <type name="ForeachPartFunc" c:type="CamelForeachPartFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="0">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="976">user data passed to the @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_date" c:identifier="camel_mime_message_get_date">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-message.c"
             line="561">Get the date and UTC offset of a message.
See camel_mime_message_set_date() for information about the @offset format.</doc>
        <source-position filename="src/camel/camel-mime-message.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-message.c"
               line="569">the date of the message</doc>
          <type name="glong" c:type="time_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="563">a #CamelMimeMessage object</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </instance-parameter>
          <parameter name="offset"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="564">output for the UTC offset</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_date_received"
              c:identifier="camel_mime_message_get_date_received">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-message.c"
             line="581">Get the received date and UTC offset of a message.
See camel_mime_message_set_date() for information about the @offset format.</doc>
        <source-position filename="src/camel/camel-mime-message.h" line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-message.c"
               line="589">the received date of the message</doc>
          <type name="glong" c:type="time_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="583">a #CamelMimeMessage object</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </instance-parameter>
          <parameter name="offset"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="584">output for the UTC offset</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_from" c:identifier="camel_mime_message_get_from">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-message.c"
             line="799">Get the from address of a message.</doc>
        <source-position filename="src/camel/camel-mime-message.h" line="108"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-message.c"
               line="805">the from address of the message</doc>
          <type name="InternetAddress" c:type="CamelInternetAddress*"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="801">a #CamelMimeMessage object</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_message_id"
              c:identifier="camel_mime_message_get_message_id">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-message.c"
             line="654">Get the message-id of a message.</doc>
        <source-position filename="src/camel/camel-mime-message.h" line="96"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-message.c"
               line="660">the message-id of a message</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="656">a #CamelMimeMessage object</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_part_by_content_id"
              c:identifier="camel_mime_message_get_part_by_content_id">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-message.c"
             line="1295">Get a MIME part by id from a message.</doc>
        <source-position filename="src/camel/camel-mime-message.h" line="153"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-message.c"
               line="1302">the MIME part with the requested id, or %NULL if not found</doc>
          <type name="MimePart" c:type="CamelMimePart*"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="1297">a #CamelMimeMessage object</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </instance-parameter>
          <parameter name="content_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="1298">content-id to search for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_recipients"
              c:identifier="camel_mime_message_get_recipients">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-message.c"
             line="859">Get the message recipients of a specified type.</doc>
        <source-position filename="src/camel/camel-mime-message.h" line="110"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-message.c"
               line="866">the requested recipients</doc>
          <type name="InternetAddress" c:type="CamelInternetAddress*"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="861">a #CamelMimeMessage object</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="862">recipient type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_reply_to"
              c:identifier="camel_mime_message_get_reply_to">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-message.c"
             line="700">Get the Reply-To of a message.</doc>
        <source-position filename="src/camel/camel-mime-message.h" line="101"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-message.c"
               line="706">the Reply-To address of the message</doc>
          <type name="InternetAddress" c:type="CamelInternetAddress*"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="702">a #CamelMimeMessage object</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_source" c:identifier="camel_mime_message_get_source">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-message.c"
             line="905">Get the UID of the source account of the message.</doc>
        <source-position filename="src/camel/camel-mime-message.h" line="119"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-message.c"
               line="911">the uid of the source account</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="907">a #CamelMimeMessage object</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subject" c:identifier="camel_mime_message_get_subject">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-message.c"
             line="749">Get the UTF-8 subject text of a message.</doc>
        <source-position filename="src/camel/camel-mime-message.h" line="104"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-message.c"
               line="755">the message subject</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="751">a #CamelMimeMessage object</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_8bit_parts"
              c:identifier="camel_mime_message_has_8bit_parts">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-message.c"
             line="1012">Find out if a message contains 8bit or binary encoded parts.</doc>
        <source-position filename="src/camel/camel-mime-message.h" line="145"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-message.c"
               line="1018">%TRUE if the message contains 8bit parts or %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="1014">a #CamelMimeMessage object</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_attachment"
              c:identifier="camel_mime_message_has_attachment"
              version="2.28">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-message.c"
             line="1424">Returns whether message contains at least one attachment part.</doc>
        <source-position filename="src/camel/camel-mime-message.h" line="158"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="1426">a #CamelMimeMessage object</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_best_encoding"
              c:identifier="camel_mime_message_set_best_encoding">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-message.c"
             line="1229">Re-encode all message parts to conform with the required encoding rules.

If @enctype is #CAMEL_BESTENC_7BIT, then all parts will be re-encoded into
one of the 7bit transfer encodings. If @enctype is #CAMEL_BESTENC_8BIT, all
parts will be re-encoded to either a 7bit encoding or, if the part is 8bit
text, allowed to stay 8bit. If @enctype is #CAMEL_BESTENC_BINARY, then binary
parts will be encoded as binary and 8bit textual parts will be encoded as 8bit.</doc>
        <source-position filename="src/camel/camel-mime-message.h" line="147"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="1231">a #CamelMimeMessage object</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </instance-parameter>
          <parameter name="required" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="1232">a bitwise ORing of #CAMEL_BESTENC_GET_ENCODING and #CAMEL_BESTENC_GET_CHARSET</doc>
            <type name="BestencRequired" c:type="CamelBestencRequired"/>
          </parameter>
          <parameter name="enctype" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="1233">an encoding to enforce</doc>
            <type name="BestencEncoding" c:type="CamelBestencEncoding"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_date" c:identifier="camel_mime_message_set_date">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-message.c"
             line="522">Set the date on a message.

In most cases, this is used to set the current date:
|[&lt;!-- language="C" --&gt;
camel_mime_message_set_date (message, CAMEL_MESSAGE_DATE_CURRENT, 0);
]|</doc>
        <source-position filename="src/camel/camel-mime-message.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="524">a #CamelMimeMessage object</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </instance-parameter>
          <parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="525">a time_t date or %CAMEL_MESSAGE_DATE_CURRENT to use the current local date and time</doc>
            <type name="glong" c:type="time_t"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="526">an offset from UTC in decimal number using the +HHMM format (for instance an offset
  of -10:45 is -1045). If @date set to %CAMEL_MESSAGE_DATE_CURRENT, this parameter is ignored</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_from" c:identifier="camel_mime_message_set_from">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-message.c"
             line="771">Set the from address of a message.</doc>
        <source-position filename="src/camel/camel-mime-message.h" line="105"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="773">a #CamelMimeMessage object</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </instance-parameter>
          <parameter name="from"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="774">a #CamelInternetAddress object</doc>
            <type name="InternetAddress" c:type="CamelInternetAddress*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_message_id"
              c:identifier="camel_mime_message_set_message_id">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-message.c"
             line="613">Set the message-id on a message.</doc>
        <source-position filename="src/camel/camel-mime-message.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="615">a #CamelMimeMessage object</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </instance-parameter>
          <parameter name="message_id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="616">id of the message, or %NULL to generate a new one using the from address</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_recipients"
              c:identifier="camel_mime_message_set_recipients">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-message.c"
             line="819">Set the recipients of a message.</doc>
        <source-position filename="src/camel/camel-mime-message.h" line="113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="821">a #CamelMimeMessage object</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="822">recipient type (one of #CAMEL_RECIPIENT_TYPE_TO, #CAMEL_RECIPIENT_TYPE_CC, or #CAMEL_RECIPIENT_TYPE_BCC)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="recipients"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="823">a #CamelInternetAddress with the recipient addresses set or %NULL
  to remove the already defined one</doc>
            <type name="InternetAddress" c:type="CamelInternetAddress*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reply_to"
              c:identifier="camel_mime_message_set_reply_to">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-message.c"
             line="672">Set the Reply-To of a message.</doc>
        <source-position filename="src/camel/camel-mime-message.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="674">a #CamelMimeMessage object</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </instance-parameter>
          <parameter name="reply_to"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="675">a #CamelInternetAddress object</doc>
            <type name="InternetAddress" c:type="CamelInternetAddress*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_source" c:identifier="camel_mime_message_set_source">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-message.c"
             line="877">Set the UID of the source account of the message.</doc>
        <source-position filename="src/camel/camel-mime-message.h" line="117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="879">a #CamelMimeMessage object</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </instance-parameter>
          <parameter name="source_uid"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="880">the uid of the source account</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subject" c:identifier="camel_mime_message_set_subject">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-message.c"
             line="720">Set the subject text of a message.</doc>
        <source-position filename="src/camel/camel-mime-message.h" line="102"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="722">a #CamelMimeMessage object</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </instance-parameter>
          <parameter name="subject"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-message.c"
                 line="723">UTF-8 message subject</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="MimePart" c:type="CamelMimePart"/>
      </field>
      <field name="priv">
        <type name="MimeMessagePrivate" c:type="CamelMimeMessagePrivate*"/>
      </field>
    </class>
    <record name="MimeMessageClass"
            c:type="CamelMimeMessageClass"
            glib:is-gtype-struct-for="MimeMessage">
      <source-position filename="src/camel/camel-mime-message.h" line="80"/>
      <field name="parent_class">
        <type name="MimePartClass" c:type="CamelMimePartClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="MimeMessagePrivate"
            c:type="CamelMimeMessagePrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-mime-message.h" line="68"/>
    </record>
    <class name="MimeParser"
           c:symbol-prefix="mime_parser"
           c:type="CamelMimeParser"
           parent="GObject.Object"
           glib:type-name="CamelMimeParser"
           glib:get-type="camel_mime_parser_get_type"
           glib:type-struct="MimeParserClass">
      <source-position filename="src/camel/camel-mime-parser.h" line="96"/>
      <constructor name="new" c:identifier="camel_mime_parser_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-parser.c"
             line="230">Create a new CamelMimeParser object.</doc>
        <source-position filename="src/camel/camel-mime-parser.h" line="99"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-parser.c"
               line="235">A new #CamelMimeParser object</doc>
          <type name="MimeParser" c:type="CamelMimeParser*"/>
        </return-value>
      </constructor>
      <virtual-method name="content">
        <source-position filename="src/camel/camel-mime-parser.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="message">
        <source-position filename="src/camel/camel-mime-parser.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </instance-parameter>
          <parameter name="headers"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="part">
        <source-position filename="src/camel/camel-mime-parser.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="content_type"
              c:identifier="camel_mime_parser_content_type">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-parser.c"
             line="588">Get the content type defined in the current part.</doc>
        <source-position filename="src/camel/camel-mime-parser.h" line="130"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-parser.c"
               line="594">A content_type structure, or %NULL if there
is no content-type defined for this part of state of the
parser.</doc>
          <type name="ContentType" c:type="CamelContentType*"/>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="590">MIME parser object</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="drop_step" c:identifier="camel_mime_parser_drop_step">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-parser.c"
             line="630">Drop the last step call.  This should only be used
in conjunction with seeking of the stream as the
stream may be in an undefined state relative to the
state of the parser.

Use this call with care.</doc>
        <source-position filename="src/camel/camel-mime-parser.h" line="122"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="632">MIME parser object</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_headers"
              c:identifier="camel_mime_parser_dup_headers"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-parser.c"
             line="341">Get the list of the raw headers which are defined for the
current state of the parser.  These headers are valid
until the next call to camel_mime_parser_step(), or camel_mime_parser_drop_step().</doc>
        <source-position filename="src/camel/camel-mime-parser.h" line="136"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-parser.c"
               line="349">The headers, or %NULL, if there are no
headers defined for the current part or state. Free it with
camel_name_value_array_free().</doc>
          <type name="NameValueArray" c:type="CamelNameValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="m" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="343">a #CamelMimeParser</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="errno" c:identifier="camel_mime_parser_errno">
        <source-position filename="src/camel/camel-mime-parser.h" line="102"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="filter_add"
              c:identifier="camel_mime_parser_filter_add"
              version="2.22">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-parser.c"
             line="243">Add a filter that will be applied to any body content before it is passed
to the caller.  Filters may be pipelined to perform multi-pass operations
on the content, and are applied in the order they were added.

Note that filters are only applied to the body content of messages, and once
a filter has been set, all content returned by a camel_mime_parser_step()
with a state of CAMEL_MIME_PARSER_STATE_BODY will have passed through the
filter.</doc>
        <source-position filename="src/camel/camel-mime-parser.h" line="146"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-parser.c"
               line="257">An id that may be passed to camel_mime_parser_filter_remove() to
remove the filter, or -1 if the operation failed.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="m" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="245">a #CamelMimeParser</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </instance-parameter>
          <parameter name="mf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="246">a #CamelMimeFilter</doc>
            <type name="MimeFilter" c:type="CamelMimeFilter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="filter_remove"
              c:identifier="camel_mime_parser_filter_remove"
              version="2.22">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-parser.c"
             line="285">Remove a processing filter from the pipeline.  There is no
restriction on the order the filters can be removed.</doc>
        <source-position filename="src/camel/camel-mime-parser.h" line="147"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="m" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="287">a #CamelMimeParser</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="288">id of the filter to remove, as returned from camel_mime_parser_filter_add()</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="from_line"
              c:identifier="camel_mime_parser_from_line"
              version="2.22">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-parser.c"
             line="430">Get the last scanned "From " line, from a recently scanned from.
This should only be called in the CAMEL_MIME_PARSER_STATE_FROM state.  The
from line will include the closing \n found (if there was one).

The return value will remain valid while in the CAMEL_MIME_PARSER_STATE_FROM
state, or any deeper state.</doc>
        <source-position filename="src/camel/camel-mime-parser.h" line="143"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-parser.c"
               line="441">The From line, or %NULL if called out of context.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="m" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="432">a #CamelMimeParser</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="header" c:identifier="camel_mime_parser_header">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-parser.c"
             line="316">Lookup a header by name.</doc>
        <source-position filename="src/camel/camel-mime-parser.h" line="133"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-parser.c"
               line="325">The header value, or %NULL if the header is not
defined.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="m" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="318">a #CamelMimeParser</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="319">Name of header.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="320">Pointer that can receive the offset of the header in
the stream from the start of parsing.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="init_with_bytes"
              c:identifier="camel_mime_parser_init_with_bytes"
              version="3.12">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-parser.c"
             line="521">Convenience function creates a #GMemoryInputStream from @bytes and hands
it off to camel_mime_parser_init_with_input_stream().</doc>
        <source-position filename="src/camel/camel-mime-parser.h" line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="523">a #CamelMimeParser</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </instance-parameter>
          <parameter name="bytes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="524">a #GBytes containing the message content</doc>
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
        </parameters>
      </method>
      <method name="init_with_fd"
              c:identifier="camel_mime_parser_init_with_fd">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-parser.c"
             line="456">Initialise the scanner with an fd.  The scanner's offsets
will be relative to the current file position of the file
descriptor.  As a result, seekable descritors should
be seeked using the parser seek functions.</doc>
        <source-position filename="src/camel/camel-mime-parser.h" line="104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-parser.c"
               line="466">Returns -1 on error.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="m" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="458">a #CamelMimeParser</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </instance-parameter>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="459">A valid file descriptor.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="init_with_input_stream"
              c:identifier="camel_mime_parser_init_with_input_stream"
              version="3.12">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-parser.c"
             line="500">Initialize the scanner with @input_stream.  The scanner's offsets will
be relative to the current file position of the stream.  As a result,
seekable streams should only be seeked using the parser seek function.</doc>
        <source-position filename="src/camel/camel-mime-parser.h" line="106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="502">a #CamelMimeParser</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </instance-parameter>
          <parameter name="input_stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="503">a #GInputStream</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
        </parameters>
      </method>
      <method name="init_with_stream"
              c:identifier="camel_mime_parser_init_with_stream"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-parser.c"
             line="477">Initialise the scanner with a source stream.  The scanner's
offsets will be relative to the current file position of
the stream.  As a result, seekable streams should only
be seeked using the parser seek function.</doc>
        <source-position filename="src/camel/camel-mime-parser.h" line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-parser.c"
               line="488">-1 on error.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="m" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="479">a #CamelMimeParser</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="480">a #CamelStream to init with</doc>
            <type name="Stream" c:type="CamelStream*"/>
          </parameter>
        </parameters>
      </method>
      <method name="postface"
              c:identifier="camel_mime_parser_postface"
              version="2.22">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-parser.c"
             line="407">Retrieve the postface text for the current multipart.
Only returns valid data when the current state if
CAMEL_MIME_PARSER_STATE_MULTIPART_END.</doc>
        <source-position filename="src/camel/camel-mime-parser.h" line="140"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-parser.c"
               line="415">The postface text, or %NULL if there wasn't any.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="m" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="409">a #CamelMimeParser</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="preface"
              c:identifier="camel_mime_parser_preface"
              version="2.22">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-parser.c"
             line="385">Retrieve the preface text for the current multipart.
Can only be used when the state is CAMEL_MIME_PARSER_STATE_MULTIPART_END.</doc>
        <source-position filename="src/camel/camel-mime-parser.h" line="139"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-parser.c"
               line="392">The preface text, or %NULL if there wasn't any.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="m" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="387">a #CamelMimeParser</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="push_state" c:identifier="camel_mime_parser_push_state">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-parser.c"
             line="900">Pre-load a new parser state.  Used to post-parse multipart content
without headers.</doc>
        <source-position filename="src/camel/camel-mime-parser.h" line="124"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="902">MIME parser object</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </instance-parameter>
          <parameter name="newstate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="903">New state</doc>
            <type name="MimeParserState" c:type="CamelMimeParserState"/>
          </parameter>
          <parameter name="boundary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="904">Boundary marker for state.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="read" c:identifier="camel_mime_parser_read" throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-parser.c"
             line="702">Read at most @len bytes from the internal mime parser buffer.

Returns the address of the internal buffer in @databuffer,
and the length of useful data.

@len may be specified as %G_MAXSSIZE, in which case you will
get the full remainder of the buffer at each call.

Note that no parsing of the data read through this function
occurs, so no state changes occur, but the seek position
is updated appropriately.</doc>
        <source-position filename="src/camel/camel-mime-parser.h" line="127"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-parser.c"
               line="721">The number of bytes available, or -1 on error.</doc>
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="704">MIME parser object</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </instance-parameter>
          <parameter name="databuffer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="705">The data buffer</doc>
            <array zero-terminated="0" c:type="const gchar**">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="706">The length of data to read</doc>
            <type name="gssize" c:type="gssize"/>
          </parameter>
        </parameters>
      </method>
      <method name="scan_from" c:identifier="camel_mime_parser_scan_from">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-parser.c"
             line="545">Tell the scanner if it should scan "^From " lines or not.

If the scanner is scanning from lines, two additional
states CAMEL_MIME_PARSER_STATE_FROM and CAMEL_MIME_PARSER_STATE_FROM_END will be returned
to the caller during parsing.

This may also be preceeded by an optional
CAMEL_MIME_PARSER_STATE_PRE_FROM state which contains the scanned data
found before the From line is encountered.  See also
camel_mime_parser_scan_pre_from().</doc>
        <source-position filename="src/camel/camel-mime-parser.h" line="112"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="547">MIME parser object</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </instance-parameter>
          <parameter name="scan_from" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="548">%TRUE if the scanner should scan From lines.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="scan_pre_from"
              c:identifier="camel_mime_parser_scan_pre_from">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-parser.c"
             line="570">Tell the scanner whether we want to know abou the pre-from
data during a scan.  If we do, then we may get an additional
state CAMEL_MIME_PARSER_STATE_PRE_FROM which returns the specified data.</doc>
        <source-position filename="src/camel/camel-mime-parser.h" line="114"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="572">MIME parser object</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </instance-parameter>
          <parameter name="scan_pre_from" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="573">%TRUE if we want to get pre-from data.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="seek" c:identifier="camel_mime_parser_seek" version="2.22">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-parser.c"
             line="855">Reset the source position to a known value.

Note that if the source stream/descriptor was not
positioned at 0 to begin with, and an absolute seek
is specified (whence != SEEK_CUR), then the seek
position may not match the desired seek position.</doc>
        <source-position filename="src/camel/camel-mime-parser.h" line="153"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-parser.c"
               line="868">The new seek offset, or -1 on
an error (for example, trying to seek on a non-seekable
stream or file descriptor).</doc>
          <type name="gint64" c:type="goffset"/>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="857">MIME parser object</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </instance-parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="858">Number of bytes to offset the seek by.</doc>
            <type name="gint64" c:type="goffset"/>
          </parameter>
          <parameter name="whence" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="859">SEEK_SET, SEEK_CUR, SEEK_END</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_header_regex"
              c:identifier="camel_mime_parser_set_header_regex">
        <source-position filename="src/camel/camel-mime-parser.h" line="117"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </instance-parameter>
          <parameter name="matchstr" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="state" c:identifier="camel_mime_parser_state">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-parser.c"
             line="884">Get the current parser state.</doc>
        <source-position filename="src/camel/camel-mime-parser.h" line="123"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-parser.c"
               line="890">The current parser state.</doc>
          <type name="MimeParserState" c:type="CamelMimeParserState"/>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="886">MIME parser object</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="step" c:identifier="camel_mime_parser_step">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-parser.c"
             line="650">Parse the next part of the MIME message.  If camel_mime_parser_unstep()
has been called, then continue to return the same state
for that many calls.

If the step is CAMEL_MIME_PARSER_STATE_BODY then the databuffer and datalength
pointers will be setup to point to the internal data buffer
of the scanner and may be processed as required.  Any
filters will have already been applied to this data.

Refer to the state diagram elsewhere for a full listing of
the states an application is gauranteed to get from the
scanner.</doc>
        <source-position filename="src/camel/camel-mime-parser.h" line="120"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-parser.c"
               line="672">The current new state of the parser
is returned.</doc>
          <type name="MimeParserState" c:type="CamelMimeParserState"/>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="652">MIME parser object</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </instance-parameter>
          <parameter name="databuffer"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="653">Pointer to
accept a pointer to the data associated with this step (if any).  May be %NULL,
in which case datalength is also ingored.</doc>
            <array length="1" zero-terminated="0" c:type="gchar**">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="datalength"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="none"
                     optional="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="656">Pointer to accept a pointer to the data
length associated with this step (if any).</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="stream" c:identifier="camel_mime_parser_stream">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-parser.c"
             line="928">Get the stream, if any, the parser has been initialised
with.  May be used to setup sub-streams, but should not
be read from directly (without saving and restoring
the seek position in between).</doc>
        <source-position filename="src/camel/camel-mime-parser.h" line="109"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-parser.c"
               line="937">The stream from camel_mime_parser_init_with_stream(),
or NULL if the parser is reading from a file descriptor or is
uninitialised.</doc>
          <type name="Stream" c:type="CamelStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="930">MIME parser object</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="tell" c:identifier="camel_mime_parser_tell" version="2.22">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-parser.c"
             line="764">Return the current scanning offset.  The meaning of this
value will depend on the current state of the parser.

An incomplete listing of the states:

CAMEL_MIME_PARSER_STATE_INITIAL, The start of the current message.
CAMEL_MIME_PARSER_STATE_HEADER, CAMEL_MIME_PARSER_STATE_MESSAGE, CAMEL_MIME_PARSER_STATE_MULTIPART, the character
position immediately after the end of the header.
CAMEL_MIME_PARSER_STATE_BODY, Position within the message of the start
of the current data block.
CAMEL_MIME_PARSER_STATE_*_END, The position of the character starting
the next section of the scan (the last position + 1 of
the respective current state).</doc>
        <source-position filename="src/camel/camel-mime-parser.h" line="152"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-parser.c"
               line="782">See above.</doc>
          <type name="gint64" c:type="goffset"/>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="766">MIME parser object</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="tell_start_boundary"
              c:identifier="camel_mime_parser_tell_start_boundary"
              version="2.22">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-parser.c"
             line="835">When parsing a multipart, this returns the start of the last
boundary.</doc>
        <source-position filename="src/camel/camel-mime-parser.h" line="157"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-parser.c"
               line="842">The start of the boundary, or -1 if there
was no boundary encountered yet.</doc>
          <type name="gint64" c:type="goffset"/>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="837">MIME parser object</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="tell_start_from"
              c:identifier="camel_mime_parser_tell_start_from"
              version="2.22">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-parser.c"
             line="815">If the parser is scanning From lines, then this returns
the position of the start of the From line.</doc>
        <source-position filename="src/camel/camel-mime-parser.h" line="156"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-parser.c"
               line="822">The start of the from line, or -1 if there
was no From line, or From lines are not being scanned.</doc>
          <type name="gint64" c:type="goffset"/>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="817">MIME parser object</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="tell_start_headers"
              c:identifier="camel_mime_parser_tell_start_headers"
              version="2.22">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-parser.c"
             line="794">Find out the position within the file of where the
headers started, this is cached by the parser
at the time.</doc>
        <source-position filename="src/camel/camel-mime-parser.h" line="155"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-parser.c"
               line="802">The header start position, or -1 if
no headers were scanned in the current state.</doc>
          <type name="gint64" c:type="goffset"/>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="796">MIME parser object</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unstep" c:identifier="camel_mime_parser_unstep">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-parser.c"
             line="611">Cause the last step operation to repeat itself.  If this is
called repeated times, then the same step will be repeated
that many times.

Note that it is not possible to scan back using this function,
only to have a way of peeking the next state.</doc>
        <source-position filename="src/camel/camel-mime-parser.h" line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-parser.c"
                 line="613">MIME parser object</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="MimeParserPrivate" c:type="CamelMimeParserPrivate*"/>
      </field>
    </class>
    <record name="MimeParserClass"
            c:type="CamelMimeParserClass"
            glib:is-gtype-struct-for="MimeParser">
      <source-position filename="src/camel/camel-mime-parser.h" line="96"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="message">
        <callback name="message">
          <source-position filename="src/camel/camel-mime-parser.h" line="90"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="parser" transfer-ownership="none">
              <type name="MimeParser" c:type="CamelMimeParser*"/>
            </parameter>
            <parameter name="headers"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="part">
        <callback name="part">
          <source-position filename="src/camel/camel-mime-parser.h" line="91"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="parser" transfer-ownership="none">
              <type name="MimeParser" c:type="CamelMimeParser*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="content">
        <callback name="content">
          <source-position filename="src/camel/camel-mime-parser.h" line="92"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="parser" transfer-ownership="none">
              <type name="MimeParser" c:type="CamelMimeParser*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="MimeParserPrivate"
            c:type="CamelMimeParserPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-mime-parser.h" line="55"/>
    </record>
    <enumeration name="MimeParserState" c:type="CamelMimeParserState">
      <source-position filename="src/camel/camel-mime-parser.h" line="80"/>
      <member name="initial"
              value="0"
              c:identifier="CAMEL_MIME_PARSER_STATE_INITIAL">
      </member>
      <member name="pre_from"
              value="1"
              c:identifier="CAMEL_MIME_PARSER_STATE_PRE_FROM">
      </member>
      <member name="from"
              value="2"
              c:identifier="CAMEL_MIME_PARSER_STATE_FROM">
      </member>
      <member name="header"
              value="3"
              c:identifier="CAMEL_MIME_PARSER_STATE_HEADER">
      </member>
      <member name="body"
              value="4"
              c:identifier="CAMEL_MIME_PARSER_STATE_BODY">
      </member>
      <member name="multipart"
              value="5"
              c:identifier="CAMEL_MIME_PARSER_STATE_MULTIPART">
      </member>
      <member name="message"
              value="6"
              c:identifier="CAMEL_MIME_PARSER_STATE_MESSAGE">
      </member>
      <member name="part"
              value="7"
              c:identifier="CAMEL_MIME_PARSER_STATE_PART">
      </member>
      <member name="end" value="8" c:identifier="CAMEL_MIME_PARSER_STATE_END">
      </member>
      <member name="eof" value="8" c:identifier="CAMEL_MIME_PARSER_STATE_EOF">
      </member>
      <member name="pre_from_end"
              value="9"
              c:identifier="CAMEL_MIME_PARSER_STATE_PRE_FROM_END">
      </member>
      <member name="from_end"
              value="10"
              c:identifier="CAMEL_MIME_PARSER_STATE_FROM_END">
      </member>
      <member name="header_end"
              value="11"
              c:identifier="CAMEL_MIME_PARSER_STATE_HEADER_END">
      </member>
      <member name="body_end"
              value="12"
              c:identifier="CAMEL_MIME_PARSER_STATE_BODY_END">
      </member>
      <member name="multipart_end"
              value="13"
              c:identifier="CAMEL_MIME_PARSER_STATE_MULTIPART_END">
      </member>
      <member name="message_end"
              value="14"
              c:identifier="CAMEL_MIME_PARSER_STATE_MESSAGE_END">
      </member>
    </enumeration>
    <class name="MimePart"
           c:symbol-prefix="mime_part"
           c:type="CamelMimePart"
           parent="Medium"
           glib:type-name="CamelMimePart"
           glib:get-type="camel_mime_part_get_type"
           glib:type-struct="MimePartClass">
      <source-position filename="src/camel/camel-mime-part.h" line="76"/>
      <constructor name="new" c:identifier="camel_mime_part_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-part.c"
             line="1101">Create a new MIME part.</doc>
        <source-position filename="src/camel/camel-mime-part.h" line="79"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-part.c"
               line="1106">a new #CamelMimePart</doc>
          <type name="MimePart" c:type="CamelMimePart*"/>
        </return-value>
      </constructor>
      <virtual-method name="construct_from_parser_sync"
                      invoker="construct_from_parser_sync"
                      version="3.0"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-part.c"
             line="1562">Constructs a MIME part from a parser.</doc>
        <source-position filename="src/camel/camel-mime-part.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-part.c"
               line="1571">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mime_part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1564">a #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </instance-parameter>
          <parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1565">a #CamelMimeParser</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1566">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="construct_content_from_parser"
              c:identifier="camel_mime_part_construct_content_from_parser"
              version="2.24"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-part-utils.c"
             line="82">Constructs the contnet of @mime_part from the given mime parser.</doc>
        <source-position filename="src/camel/camel-mime-part-utils.h"
                         line="33"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-part-utils.c"
               line="91">whether succeeded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mime_part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part-utils.c"
                 line="84">a #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </instance-parameter>
          <parameter name="mp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part-utils.c"
                 line="85">a #CamelMimeParser</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part-utils.c"
                 line="86">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="construct_from_parser"
              c:identifier="camel_mime_part_construct_from_parser"
              version="3.0">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-part.c"
             line="1624">Asynchronously constructs a MIME part from a parser.

When the operation is finished, @callback will be called.  You can then
call camel_mime_part_construct_from_parser_finish() to get the result of
the operation.</doc>
        <source-position filename="src/camel/camel-mime-part.h" line="128"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mime_part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1626">a #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </instance-parameter>
          <parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1627">a #CamelMimeParser</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1628">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1629">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1630">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1631">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="construct_from_parser_finish"
              c:identifier="camel_mime_part_construct_from_parser_finish"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-part.c"
             line="1671">Finishes the operation started with camel_mime_part_construct_from_parser().</doc>
        <source-position filename="src/camel/camel-mime-part.h" line="135"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-part.c"
               line="1679">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mime_part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1673">a #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1674">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="construct_from_parser_sync"
              c:identifier="camel_mime_part_construct_from_parser_sync"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-part.c"
             line="1562">Constructs a MIME part from a parser.</doc>
        <source-position filename="src/camel/camel-mime-part.h" line="123"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-part.c"
               line="1571">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mime_part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1564">a #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </instance-parameter>
          <parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1565">a #CamelMimeParser</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1566">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_content_disposition"
              c:identifier="camel_mime_part_get_content_disposition"
              version="2.30">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-part.c"
             line="1146">Get the disposition of the MIME part as a structure.
Returned pointer is owned by @mime_part.</doc>
        <source-position filename="src/camel/camel-mime-part.h" line="87"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-part.c"
               line="1153">the disposition structure</doc>
          <type name="ContentDisposition"
                c:type="const CamelContentDisposition*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mime_part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1148">a #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_content_id"
              c:identifier="camel_mime_part_get_content_id"
              glib:get-property="content-id">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-part.c"
             line="1165">Get the content-id field of a MIME part.</doc>
        <source-position filename="src/camel/camel-mime-part.h" line="94"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-part.c"
               line="1171">the content-id field of the MIME part</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mime_part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1167">a #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_content_languages"
              c:identifier="camel_mime_part_get_content_languages">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-part.c"
             line="1288">Get the Content-Languages set on the MIME part.</doc>
        <source-position filename="src/camel/camel-mime-part.h" line="110"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-part.c"
               line="1294">a #GList of languages</doc>
          <type name="GLib.List" c:type="const GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="mime_part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1290">a #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_content_location"
              c:identifier="camel_mime_part_get_content_location">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-part.c"
             line="1213">Get the content-location field of a MIME part.</doc>
        <source-position filename="src/camel/camel-mime-part.h" line="101"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-part.c"
               line="1219">the content-location field of a MIME part</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mime_part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1215">a #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_content_md5"
              c:identifier="camel_mime_part_get_content_md5"
              glib:get-property="content-md5">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-part.c"
             line="1252">Get the content-md5 field of the MIME part.</doc>
        <source-position filename="src/camel/camel-mime-part.h" line="97"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-part.c"
               line="1258">the content-md5 field of the MIME part</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mime_part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1254">a #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_content_type"
              c:identifier="camel_mime_part_get_content_type">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-part.c"
             line="1329">Get the Content-Type of a MIME part.</doc>
        <source-position filename="src/camel/camel-mime-part.h" line="116"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-part.c"
               line="1335">the parsed #CamelContentType of the MIME part</doc>
          <type name="ContentType" c:type="CamelContentType*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mime_part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1331">a #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="camel_mime_part_get_description"
              glib:get-property="description">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-part.c"
             line="1369">Get the description of the MIME part.</doc>
        <source-position filename="src/camel/camel-mime-part.h" line="82"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-part.c"
               line="1375">the description</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mime_part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1371">a #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_disposition"
              c:identifier="camel_mime_part_get_disposition"
              glib:get-property="disposition">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-part.c"
             line="1411">Get the disposition of the MIME part.</doc>
        <source-position filename="src/camel/camel-mime-part.h" line="85"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-part.c"
               line="1417">the disposition</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mime_part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1413">a #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_encoding" c:identifier="camel_mime_part_get_encoding">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-part.c"
             line="1464">Get the Content-Transfer-Encoding of a MIME part.</doc>
        <source-position filename="src/camel/camel-mime-part.h" line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-part.c"
               line="1470">a #CamelTransferEncoding</doc>
          <type name="TransferEncoding" c:type="CamelTransferEncoding"/>
        </return-value>
        <parameters>
          <instance-parameter name="mime_part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1466">a #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_filename" c:identifier="camel_mime_part_get_filename">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-part.c"
             line="1504">Get the filename of a MIME part.</doc>
        <source-position filename="src/camel/camel-mime-part.h" line="91"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-part.c"
               line="1510">the filename of the MIME part</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mime_part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1506">a #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_content" c:identifier="camel_mime_part_set_content">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-part.c"
             line="1114">Utility function used to set the content of a mime part object to
be the provided data. If @length is 0, this routine can be used as
a way to remove old content (in which case @data and @type are
ignored and may be %NULL).</doc>
        <source-position filename="src/camel/camel-mime-part.h" line="118"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mime_part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1116">a #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </instance-parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1117">data to put into the part</doc>
            <array length="1" zero-terminated="0" c:type="const gchar*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1118">length of @data</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="type"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1119">Content-Type of the data</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_content_id"
              c:identifier="camel_mime_part_set_content_id"
              glib:set-property="content-id">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-part.c"
             line="1181">Set the content-id field on a MIME part.</doc>
        <source-position filename="src/camel/camel-mime-part.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mime_part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1183">a #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </instance-parameter>
          <parameter name="contentid"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1184">content id</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_content_languages"
              c:identifier="camel_mime_part_set_content_languages">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-part.c"
             line="1304">Set the Content-Languages field of a MIME part.</doc>
        <source-position filename="src/camel/camel-mime-part.h" line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mime_part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1306">a #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </instance-parameter>
          <parameter name="content_languages"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1307">list of languages</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="utf8"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="set_content_location"
              c:identifier="camel_mime_part_set_content_location">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-part.c"
             line="1229">Set the content-location field of the MIME part.</doc>
        <source-position filename="src/camel/camel-mime-part.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mime_part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1231">a #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </instance-parameter>
          <parameter name="location"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1232">the content-location value of the MIME part</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_content_md5"
              c:identifier="camel_mime_part_set_content_md5"
              glib:set-property="content-md5">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-part.c"
             line="1268">Set the content-md5 field of the MIME part.</doc>
        <source-position filename="src/camel/camel-mime-part.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mime_part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1270">a #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </instance-parameter>
          <parameter name="md5sum"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1271">the md5sum of the MIME part</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_content_type"
              c:identifier="camel_mime_part_set_content_type">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-part.c"
             line="1349">Set the content-type on a MIME part.</doc>
        <source-position filename="src/camel/camel-mime-part.h" line="112"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mime_part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1351">a #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </instance-parameter>
          <parameter name="content_type"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1352">content-type string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_description"
              c:identifier="camel_mime_part_set_description"
              glib:set-property="description">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-part.c"
             line="1385">Set a description on the MIME part.</doc>
        <source-position filename="src/camel/camel-mime-part.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mime_part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1387">a #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </instance-parameter>
          <parameter name="description" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1388">description of the MIME part</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_disposition"
              c:identifier="camel_mime_part_set_disposition"
              glib:set-property="disposition">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-part.c"
             line="1430">Set a disposition on the MIME part.</doc>
        <source-position filename="src/camel/camel-mime-part.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mime_part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1432">a #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </instance-parameter>
          <parameter name="disposition"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1433">disposition of the MIME part</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_encoding" c:identifier="camel_mime_part_set_encoding">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-part.c"
             line="1482">Set the Content-Transfer-Encoding to use on a MIME part.</doc>
        <source-position filename="src/camel/camel-mime-part.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mime_part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1484">a #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </instance-parameter>
          <parameter name="encoding" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1485">a #CamelTransferEncoding</doc>
            <type name="TransferEncoding" c:type="CamelTransferEncoding"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_filename" c:identifier="camel_mime_part_set_filename">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-part.c"
             line="1525">Set the filename on a MIME part.</doc>
        <source-position filename="src/camel/camel-mime-part.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mime_part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1527">a #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </instance-parameter>
          <parameter name="filename"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1528">filename given to the MIME part</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="content-id"
                writable="1"
                transfer-ownership="none"
                setter="set_content_id"
                getter="get_content_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="content-md5"
                writable="1"
                transfer-ownership="none"
                setter="set_content_md5"
                getter="get_content_md5"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="description"
                writable="1"
                transfer-ownership="none"
                setter="set_description"
                getter="get_description"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="disposition"
                writable="1"
                transfer-ownership="none"
                setter="set_disposition"
                getter="get_disposition"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Medium" c:type="CamelMedium"/>
      </field>
      <field name="priv">
        <type name="MimePartPrivate" c:type="CamelMimePartPrivate*"/>
      </field>
    </class>
    <record name="MimePartClass"
            c:type="CamelMimePartClass"
            glib:is-gtype-struct-for="MimePart">
      <source-position filename="src/camel/camel-mime-part.h" line="76"/>
      <field name="parent_class">
        <type name="MediumClass" c:type="CamelMediumClass"/>
      </field>
      <field name="construct_from_parser_sync">
        <callback name="construct_from_parser_sync" throws="1">
          <source-position filename="src/camel/camel-mime-part.h" line="68"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-mime-part.c"
                 line="1571">%TRUE on success, %FALSE on error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="mime_part" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-mime-part.c"
                   line="1564">a #CamelMimePart</doc>
              <type name="MimePart" c:type="CamelMimePart*"/>
            </parameter>
            <parameter name="parser" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-mime-part.c"
                   line="1565">a #CamelMimeParser</doc>
              <type name="MimeParser" c:type="CamelMimeParser*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-mime-part.c"
                   line="1566">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="MimePartPrivate"
            c:type="CamelMimePartPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-mime-part.h" line="57"/>
    </record>
    <record name="Msg" c:type="CamelMsg" version="2.24">
      <source-position filename="src/camel/camel-msgport.h" line="50"/>
      <field name="reply_port" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-msgport.h"
             line="41">a #CamelMsgPort this #CamelMsg belongs to</doc>
        <type name="MsgPort" c:type="CamelMsgPort*"/>
      </field>
      <field name="flags" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <method name="ort_reply"
              c:identifier="camel_msgport_reply"
              moved-to="msgport_reply"
              version="2.24"
              introspectable="0">
        <source-position filename="src/camel/camel-msgport.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-msgport.c"
                 line="472">a #CamelMsg</doc>
            <type name="Msg" c:type="CamelMsg*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="MsgPort"
            c:type="CamelMsgPort"
            disguised="1"
            opaque="1"
            version="2.24">
      <source-position filename="src/camel/camel-msgport.h" line="37"/>
    </record>
    <class name="Multipart"
           c:symbol-prefix="multipart"
           c:type="CamelMultipart"
           parent="DataWrapper"
           glib:type-name="CamelMultipart"
           glib:get-type="camel_multipart_get_type"
           glib:type-struct="MultipartClass">
      <source-position filename="src/camel/camel-multipart.h" line="79"/>
      <constructor name="new" c:identifier="camel_multipart_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-multipart.c"
             line="414">Create a new #CamelMultipart object.</doc>
        <source-position filename="src/camel/camel-multipart.h" line="83"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-multipart.c"
               line="419">a new #CamelMultipart object</doc>
          <type name="Multipart" c:type="CamelMultipart*"/>
        </return-value>
      </constructor>
      <virtual-method name="add_part" invoker="add_part">
        <doc xml:space="preserve"
             filename="src/camel/camel-multipart.c"
             line="427">Appends the part to the multipart object.</doc>
        <source-position filename="src/camel/camel-multipart.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="multipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart.c"
                 line="429">a #CamelMultipart object</doc>
            <type name="Multipart" c:type="CamelMultipart*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart.c"
                 line="430">a #CamelMimePart to add</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="construct_from_parser"
                      invoker="construct_from_parser">
        <doc xml:space="preserve"
             filename="src/camel/camel-multipart.c"
             line="619">Construct a multipart from a parser.</doc>
        <source-position filename="src/camel/camel-multipart.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-multipart.c"
               line="626">0 on success or -1 on fail</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="multipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart.c"
                 line="621">a #CamelMultipart object</doc>
            <type name="Multipart" c:type="CamelMultipart*"/>
          </instance-parameter>
          <parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart.c"
                 line="622">a #CamelMimeParser object</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_boundary" invoker="get_boundary">
        <source-position filename="src/camel/camel-multipart.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-multipart.c"
               line="496">the boundary</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="multipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart.c"
                 line="494">a #CamelMultipart object</doc>
            <type name="Multipart" c:type="CamelMultipart*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_number" invoker="get_number">
        <source-position filename="src/camel/camel-multipart.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-multipart.c"
               line="476">the number of subparts in @multipart</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="multipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart.c"
                 line="474">a #CamelMultipart object</doc>
            <type name="Multipart" c:type="CamelMultipart*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_part" invoker="get_part">
        <source-position filename="src/camel/camel-multipart.h" line="67"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-multipart.c"
               line="455">the indicated subpart, or %NULL</doc>
          <type name="MimePart" c:type="CamelMimePart*"/>
        </return-value>
        <parameters>
          <instance-parameter name="multipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart.c"
                 line="452">a #CamelMultipart object</doc>
            <type name="Multipart" c:type="CamelMultipart*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart.c"
                 line="453">a zero-based index indicating the part to get</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_boundary" invoker="set_boundary">
        <doc xml:space="preserve"
             filename="src/camel/camel-multipart.c"
             line="512">Sets the message boundary for @multipart to @boundary. This should
be a string which does not occur anywhere in any of @multipart's
subparts. If @boundary is %NULL, a randomly-generated boundary will
be used.</doc>
        <source-position filename="src/camel/camel-multipart.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="multipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart.c"
                 line="514">a #CamelMultipart object</doc>
            <type name="Multipart" c:type="CamelMultipart*"/>
          </instance-parameter>
          <parameter name="boundary"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart.c"
                 line="515">the message boundary, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_part" c:identifier="camel_multipart_add_part">
        <doc xml:space="preserve"
             filename="src/camel/camel-multipart.c"
             line="427">Appends the part to the multipart object.</doc>
        <source-position filename="src/camel/camel-multipart.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="multipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart.c"
                 line="429">a #CamelMultipart object</doc>
            <type name="Multipart" c:type="CamelMultipart*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart.c"
                 line="430">a #CamelMimePart to add</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </parameter>
        </parameters>
      </method>
      <method name="construct_from_parser"
              c:identifier="camel_multipart_construct_from_parser">
        <doc xml:space="preserve"
             filename="src/camel/camel-multipart.c"
             line="619">Construct a multipart from a parser.</doc>
        <source-position filename="src/camel/camel-multipart.h" line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-multipart.c"
               line="626">0 on success or -1 on fail</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="multipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart.c"
                 line="621">a #CamelMultipart object</doc>
            <type name="Multipart" c:type="CamelMultipart*"/>
          </instance-parameter>
          <parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart.c"
                 line="622">a #CamelMimeParser object</doc>
            <type name="MimeParser" c:type="CamelMimeParser*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_boundary" c:identifier="camel_multipart_get_boundary">
        <source-position filename="src/camel/camel-multipart.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-multipart.c"
               line="496">the boundary</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="multipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart.c"
                 line="494">a #CamelMultipart object</doc>
            <type name="Multipart" c:type="CamelMultipart*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_number" c:identifier="camel_multipart_get_number">
        <source-position filename="src/camel/camel-multipart.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-multipart.c"
               line="476">the number of subparts in @multipart</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="multipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart.c"
                 line="474">a #CamelMultipart object</doc>
            <type name="Multipart" c:type="CamelMultipart*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_part" c:identifier="camel_multipart_get_part">
        <source-position filename="src/camel/camel-multipart.h" line="86"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-multipart.c"
               line="455">the indicated subpart, or %NULL</doc>
          <type name="MimePart" c:type="CamelMimePart*"/>
        </return-value>
        <parameters>
          <instance-parameter name="multipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart.c"
                 line="452">a #CamelMultipart object</doc>
            <type name="Multipart" c:type="CamelMultipart*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart.c"
                 line="453">a zero-based index indicating the part to get</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_postface"
              c:identifier="camel_multipart_get_postface"
              version="3.12">
        <doc xml:space="preserve"
             filename="src/camel/camel-multipart.c"
             line="577">Returns the postface text for @multipart.</doc>
        <source-position filename="src/camel/camel-multipart.h" line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-multipart.c"
               line="583">the postface text</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="multipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart.c"
                 line="579">a #CamelMultipart</doc>
            <type name="Multipart" c:type="CamelMultipart*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_preface"
              c:identifier="camel_multipart_get_preface"
              version="3.12">
        <doc xml:space="preserve"
             filename="src/camel/camel-multipart.c"
             line="537">Returns the preface text for @multipart.</doc>
        <source-position filename="src/camel/camel-multipart.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-multipart.c"
               line="543">the preface text</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="multipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart.c"
                 line="539">a #CamelMultipart</doc>
            <type name="Multipart" c:type="CamelMultipart*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_boundary" c:identifier="camel_multipart_set_boundary">
        <doc xml:space="preserve"
             filename="src/camel/camel-multipart.c"
             line="512">Sets the message boundary for @multipart to @boundary. This should
be a string which does not occur anywhere in any of @multipart's
subparts. If @boundary is %NULL, a randomly-generated boundary will
be used.</doc>
        <source-position filename="src/camel/camel-multipart.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="multipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart.c"
                 line="514">a #CamelMultipart object</doc>
            <type name="Multipart" c:type="CamelMultipart*"/>
          </instance-parameter>
          <parameter name="boundary"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart.c"
                 line="515">the message boundary, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_postface" c:identifier="camel_multipart_set_postface">
        <doc xml:space="preserve"
             filename="src/camel/camel-multipart.c"
             line="595">Set the postface text for this multipart.  Will be written out after
the last boundary of the multipart, and ignored by any MIME mail
client.

Generally postface texts should not be sent with multipart messages.</doc>
        <source-position filename="src/camel/camel-multipart.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="multipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart.c"
                 line="597">a #CamelMultipart object</doc>
            <type name="Multipart" c:type="CamelMultipart*"/>
          </instance-parameter>
          <parameter name="postface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart.c"
                 line="598">multipat postface</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_preface" c:identifier="camel_multipart_set_preface">
        <doc xml:space="preserve"
             filename="src/camel/camel-multipart.c"
             line="555">Set the preface text for this multipart.  Will be written out infront
of the multipart.  This text should only include US-ASCII strings, and
be relatively short, and will be ignored by any MIME mail client.</doc>
        <source-position filename="src/camel/camel-multipart.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="multipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart.c"
                 line="557">a #CamelMultipart object</doc>
            <type name="Multipart" c:type="CamelMultipart*"/>
          </instance-parameter>
          <parameter name="preface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart.c"
                 line="558">the multipart preface</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="DataWrapper" c:type="CamelDataWrapper"/>
      </field>
      <field name="priv">
        <type name="MultipartPrivate" c:type="CamelMultipartPrivate*"/>
      </field>
    </class>
    <record name="MultipartClass"
            c:type="CamelMultipartClass"
            glib:is-gtype-struct-for="Multipart">
      <source-position filename="src/camel/camel-multipart.h" line="79"/>
      <field name="parent_class">
        <type name="DataWrapperClass" c:type="CamelDataWrapperClass"/>
      </field>
      <field name="add_part">
        <callback name="add_part">
          <source-position filename="src/camel/camel-multipart.h" line="65"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="multipart" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-multipart.c"
                   line="429">a #CamelMultipart object</doc>
              <type name="Multipart" c:type="CamelMultipart*"/>
            </parameter>
            <parameter name="part" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-multipart.c"
                   line="430">a #CamelMimePart to add</doc>
              <type name="MimePart" c:type="CamelMimePart*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_part">
        <callback name="get_part">
          <source-position filename="src/camel/camel-multipart.h" line="67"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart.c"
                 line="455">the indicated subpart, or %NULL</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </return-value>
          <parameters>
            <parameter name="multipart" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-multipart.c"
                   line="452">a #CamelMultipart object</doc>
              <type name="Multipart" c:type="CamelMultipart*"/>
            </parameter>
            <parameter name="index" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-multipart.c"
                   line="453">a zero-based index indicating the part to get</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_number">
        <callback name="get_number">
          <source-position filename="src/camel/camel-multipart.h" line="69"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart.c"
                 line="476">the number of subparts in @multipart</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="multipart" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-multipart.c"
                   line="474">a #CamelMultipart object</doc>
              <type name="Multipart" c:type="CamelMultipart*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_boundary">
        <callback name="get_boundary">
          <source-position filename="src/camel/camel-multipart.h" line="70"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart.c"
                 line="496">the boundary</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="multipart" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-multipart.c"
                   line="494">a #CamelMultipart object</doc>
              <type name="Multipart" c:type="CamelMultipart*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_boundary">
        <callback name="set_boundary">
          <source-position filename="src/camel/camel-multipart.h" line="71"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="multipart" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-multipart.c"
                   line="514">a #CamelMultipart object</doc>
              <type name="Multipart" c:type="CamelMultipart*"/>
            </parameter>
            <parameter name="boundary"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-multipart.c"
                   line="515">the message boundary, or %NULL</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="construct_from_parser">
        <callback name="construct_from_parser">
          <source-position filename="src/camel/camel-multipart.h" line="73"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart.c"
                 line="626">0 on success or -1 on fail</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="multipart" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-multipart.c"
                   line="621">a #CamelMultipart object</doc>
              <type name="Multipart" c:type="CamelMultipart*"/>
            </parameter>
            <parameter name="parser" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-multipart.c"
                   line="622">a #CamelMimeParser object</doc>
              <type name="MimeParser" c:type="CamelMimeParser*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="MultipartEncrypted"
           c:symbol-prefix="multipart_encrypted"
           c:type="CamelMultipartEncrypted"
           parent="Multipart"
           glib:type-name="CamelMultipartEncrypted"
           glib:get-type="camel_multipart_encrypted_get_type"
           glib:type-struct="MultipartEncryptedClass">
      <source-position filename="src/camel/camel-multipart-encrypted.h"
                       line="70"/>
      <constructor name="new" c:identifier="camel_multipart_encrypted_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-multipart-encrypted.c"
             line="41">Create a new #CamelMultipartEncrypted object.

A MultipartEncrypted should be used to store and create parts of
type "multipart/encrypted".</doc>
        <source-position filename="src/camel/camel-multipart-encrypted.h"
                         line="74"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-multipart-encrypted.c"
               line="49">a new #CamelMultipartEncrypted object</doc>
          <type name="MultipartEncrypted" c:type="CamelMultipartEncrypted*"/>
        </return-value>
      </constructor>
      <field name="parent">
        <type name="Multipart" c:type="CamelMultipart"/>
      </field>
      <field name="priv">
        <type name="MultipartEncryptedPrivate"
              c:type="CamelMultipartEncryptedPrivate*"/>
      </field>
    </class>
    <record name="MultipartEncryptedClass"
            c:type="CamelMultipartEncryptedClass"
            glib:is-gtype-struct-for="MultipartEncrypted">
      <source-position filename="src/camel/camel-multipart-encrypted.h"
                       line="70"/>
      <field name="parent_class">
        <type name="MultipartClass" c:type="CamelMultipartClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="MultipartEncryptedPrivate"
            c:type="CamelMultipartEncryptedPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-multipart-encrypted.h"
                       line="52"/>
    </record>
    <record name="MultipartPrivate"
            c:type="CamelMultipartPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-multipart.h" line="55"/>
    </record>
    <class name="MultipartSigned"
           c:symbol-prefix="multipart_signed"
           c:type="CamelMultipartSigned"
           parent="Multipart"
           glib:type-name="CamelMultipartSigned"
           glib:get-type="camel_multipart_signed_get_type"
           glib:type-struct="MultipartSignedClass">
      <source-position filename="src/camel/camel-multipart-signed.h"
                       line="75"/>
      <constructor name="new" c:identifier="camel_multipart_signed_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-multipart-signed.c"
             line="735">Create a new #CamelMultipartSigned object.

A MultipartSigned should be used to store and create parts of
type "multipart/signed".  This is because multipart/signed is
entirely broken-by-design (tm) and uses completely
different semantics to other mutlipart types.  It must be treated
as opaque data by any transport.  See rfc 3156 for details.

There are 3 ways to create the part:
Use construct_from_stream.  If this is used, then you must
set the mime_type appropriately to match the data uses, so
that the multiple parts my be extracted.

Use construct_from_parser.  The parser MUST be in the #CAMEL_MIME_PARSER_STATE_HEADER
state, and the current content_type MUST be "multipart/signed" with
the appropriate boundary and it SHOULD include the appropriate protocol
and hash specifiers.

Use sign_part.  A signature part will automatically be created
and the whole part may be written using write_to_stream to
create a 'transport-safe' version (as safe as can be expected with
such a broken specification).</doc>
        <source-position filename="src/camel/camel-multipart-signed.h"
                         line="79"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-multipart-signed.c"
               line="761">a new #CamelMultipartSigned object</doc>
          <type name="MultipartSigned" c:type="CamelMultipartSigned*"/>
        </return-value>
      </constructor>
      <method name="get_content_stream"
              c:identifier="camel_multipart_signed_get_content_stream"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-multipart-signed.c"
             line="769">Get the raw signed content stream of the multipart/signed MIME part
suitable for use with verification of the signature.</doc>
        <source-position filename="src/camel/camel-multipart-signed.h"
                         line="80"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-multipart-signed.c"
               line="777">the signed content stream</doc>
          <type name="Stream" c:type="CamelStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mps" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart-signed.c"
                 line="771">a #CamelMultipartSigned object</doc>
            <type name="MultipartSigned" c:type="CamelMultipartSigned*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_content_stream"
              c:identifier="camel_multipart_signed_set_content_stream"
              version="3.12">
        <doc xml:space="preserve"
             filename="src/camel/camel-multipart-signed.c"
             line="832">Explicits sets the raw signed content stream of the multipart/signed
MIME part.</doc>
        <source-position filename="src/camel/camel-multipart-signed.h"
                         line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mps" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart-signed.c"
                 line="834">a #CamelMultipartSigned</doc>
            <type name="MultipartSigned" c:type="CamelMultipartSigned*"/>
          </instance-parameter>
          <parameter name="content_stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart-signed.c"
                 line="835">a #CamelStream</doc>
            <type name="Stream" c:type="CamelStream*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_signature"
              c:identifier="camel_multipart_signed_set_signature"
              version="3.12">
        <doc xml:space="preserve"
             filename="src/camel/camel-multipart-signed.c"
             line="853">Explicitly sets the signature part of @mps.</doc>
        <source-position filename="src/camel/camel-multipart-signed.h"
                         line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mps" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart-signed.c"
                 line="855">a #CamelMultipartSigned</doc>
            <type name="MultipartSigned" c:type="CamelMultipartSigned*"/>
          </instance-parameter>
          <parameter name="signature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-multipart-signed.c"
                 line="856">a #CamelMimePart</doc>
            <type name="MimePart" c:type="CamelMimePart*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Multipart" c:type="CamelMultipart"/>
      </field>
      <field name="priv">
        <type name="MultipartSignedPrivate"
              c:type="CamelMultipartSignedPrivate*"/>
      </field>
    </class>
    <record name="MultipartSignedClass"
            c:type="CamelMultipartSignedClass"
            glib:is-gtype-struct-for="MultipartSigned">
      <source-position filename="src/camel/camel-multipart-signed.h"
                       line="75"/>
      <field name="parent_class">
        <type name="MultipartClass" c:type="CamelMultipartClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="MultipartSignedPrivate"
            c:type="CamelMultipartSignedPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-multipart-signed.h"
                       line="63"/>
    </record>
    <function-macro name="NETWORK_SERVICE"
                    c:identifier="CAMEL_NETWORK_SERVICE"
                    introspectable="0">
      <source-position filename="src/camel/camel-network-service.h" line="31"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NETWORK_SERVICE_GET_INTERFACE"
                    c:identifier="CAMEL_NETWORK_SERVICE_GET_INTERFACE"
                    introspectable="0">
      <source-position filename="src/camel/camel-network-service.h" line="43"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NETWORK_SERVICE_INTERFACE"
                    c:identifier="CAMEL_NETWORK_SERVICE_INTERFACE"
                    introspectable="0">
      <source-position filename="src/camel/camel-network-service.h" line="34"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NETWORK_SETTINGS"
                    c:identifier="CAMEL_NETWORK_SETTINGS"
                    introspectable="0">
      <source-position filename="src/camel/camel-network-settings.h"
                       line="30"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NETWORK_SETTINGS_GET_INTERFACE"
                    c:identifier="CAMEL_NETWORK_SETTINGS_GET_INTERFACE"
                    introspectable="0">
      <source-position filename="src/camel/camel-network-settings.h"
                       line="42"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NETWORK_SETTINGS_INTERFACE"
                    c:identifier="CAMEL_NETWORK_SETTINGS_INTERFACE"
                    introspectable="0">
      <source-position filename="src/camel/camel-network-settings.h"
                       line="33"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="NI_DGRAM" value="16" c:type="NI_DGRAM">
      <source-position filename="src/camel/camel-net-utils.h" line="88"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NI_NAMEREQD" value="8" c:type="NI_NAMEREQD">
      <source-position filename="src/camel/camel-net-utils.h" line="87"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NI_NOFQDN" value="4" c:type="NI_NOFQDN">
      <source-position filename="src/camel/camel-net-utils.h" line="86"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NI_NUMERICHOST" value="1" c:type="NI_NUMERICHOST">
      <source-position filename="src/camel/camel-net-utils.h" line="84"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NI_NUMERICSERV" value="2" c:type="NI_NUMERICSERV">
      <source-position filename="src/camel/camel-net-utils.h" line="85"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="NNTPAddress"
           c:symbol-prefix="nntp_address"
           c:type="CamelNNTPAddress"
           parent="Address"
           glib:type-name="CamelNNTPAddress"
           glib:get-type="camel_nntp_address_get_type"
           glib:type-struct="NNTPAddressClass">
      <source-position filename="src/camel/camel-nntp-address.h" line="64"/>
      <constructor name="new" c:identifier="camel_nntp_address_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-nntp-address.c"
             line="157">Create a new CamelNNTPAddress object.</doc>
        <source-position filename="src/camel/camel-nntp-address.h" line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-nntp-address.c"
               line="162">A new CamelNNTPAddress object.</doc>
          <type name="NNTPAddress" c:type="CamelNNTPAddress*"/>
        </return-value>
      </constructor>
      <method name="add" c:identifier="camel_nntp_address_add">
        <doc xml:space="preserve"
             filename="src/camel/camel-nntp-address.c"
             line="170">Add a new nntp address to the address object.  Duplicates are not added twice.</doc>
        <source-position filename="src/camel/camel-nntp-address.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-nntp-address.c"
               line="177">Index of added entry, or existing matching entry.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-nntp-address.c"
                 line="172">nntp address object</doc>
            <type name="NNTPAddress" c:type="CamelNNTPAddress*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-nntp-address.c"
                 line="173">a new NNTP address to add</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get" c:identifier="camel_nntp_address_get">
        <doc xml:space="preserve"
             filename="src/camel/camel-nntp-address.c"
             line="197">Get the address at @index.</doc>
        <source-position filename="src/camel/camel-nntp-address.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-nntp-address.c"
               line="205">TRUE if such an address exists, or FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-nntp-address.c"
                 line="199">nntp address object</doc>
            <type name="NNTPAddress" c:type="CamelNNTPAddress*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-nntp-address.c"
                 line="200">address's array index</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="namep" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-nntp-address.c"
                 line="201">Holder for the returned address, or NULL, if not required.</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Address" c:type="CamelAddress"/>
      </field>
      <field name="priv">
        <type name="NNTPAddressPrivate" c:type="CamelNNTPAddressPrivate*"/>
      </field>
    </class>
    <record name="NNTPAddressClass"
            c:type="CamelNNTPAddressClass"
            glib:is-gtype-struct-for="NNTPAddress">
      <source-position filename="src/camel/camel-nntp-address.h" line="64"/>
      <field name="parent_class">
        <type name="AddressClass" c:type="CamelAddressClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="NNTPAddressPrivate"
            c:type="CamelNNTPAddressPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-nntp-address.h" line="52"/>
    </record>
    <function-macro name="NNTP_ADDRESS"
                    c:identifier="CAMEL_NNTP_ADDRESS"
                    introspectable="0">
      <source-position filename="src/camel/camel-nntp-address.h" line="31"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NNTP_ADDRESS_CLASS"
                    c:identifier="CAMEL_NNTP_ADDRESS_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-nntp-address.h" line="34"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NNTP_ADDRESS_GET_CLASS"
                    c:identifier="CAMEL_NNTP_ADDRESS_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-nntp-address.h" line="43"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NULL_OUTPUT_STREAM"
                    c:identifier="CAMEL_NULL_OUTPUT_STREAM"
                    introspectable="0">
      <source-position filename="src/camel/camel-null-output-stream.h"
                       line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NULL_OUTPUT_STREAM_CLASS"
                    c:identifier="CAMEL_NULL_OUTPUT_STREAM_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-null-output-stream.h"
                       line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NULL_OUTPUT_STREAM_GET_CLASS"
                    c:identifier="CAMEL_NULL_OUTPUT_STREAM_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-null-output-stream.h"
                       line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <record name="NameValueArray"
            c:type="CamelNameValueArray"
            opaque="1"
            version="3.24"
            glib:type-name="CamelNameValueArray"
            glib:get-type="camel_name_value_array_get_type"
            c:symbol-prefix="name_value_array">
      <source-position filename="src/camel/camel-name-value-array.h"
                       line="36"/>
      <constructor name="new"
                   c:identifier="camel_name_value_array_new"
                   version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-name-value-array.c"
             line="51">Creates a new #CamelNameValueArray. The returned pointer should be freed
with camel_name_value_array_free() when no longer needed.</doc>
        <source-position filename="src/camel/camel-name-value-array.h"
                         line="42"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-name-value-array.c"
               line="57">A new #CamelNameValueArray.

See: camel_name_value_array_new_sized, camel_name_value_array_copy</doc>
          <type name="NameValueArray" c:type="CamelNameValueArray*"/>
        </return-value>
      </constructor>
      <constructor name="new_sized"
                   c:identifier="camel_name_value_array_new_sized"
                   version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-name-value-array.c"
             line="74">Creates a new #CamelNameValueArray, which has reserved @reserve_size
elements. This value doesn't influence the camel_name_value_array_get_length(),
which returns zero on the array returned from this function. The returned
pointer should be freed with camel_name_value_array_free() when no longer needed.</doc>
        <source-position filename="src/camel/camel-name-value-array.h"
                         line="44"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-name-value-array.c"
               line="83">A new #CamelNameValueArray.

See: camel_name_value_array_new, camel_name_value_array_copy</doc>
          <type name="NameValueArray" c:type="CamelNameValueArray*"/>
        </return-value>
        <parameters>
          <parameter name="reserve_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="76">an array size to reserve</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="append"
              c:identifier="camel_name_value_array_append"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-name-value-array.c"
             line="326">Appends a new element of the name @name and the value @value
at the end of @array.

See: camel_name_value_array_set_named</doc>
        <source-position filename="src/camel/camel-name-value-array.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="328">a #CamelNameValueArray</doc>
            <type name="NameValueArray" c:type="CamelNameValueArray*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="329">a name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="330">a value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear"
              c:identifier="camel_name_value_array_clear"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-name-value-array.c"
             line="574">Removes all elements of the @array.</doc>
        <source-position filename="src/camel/camel-name-value-array.h"
                         line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="576">a #CamelNameValueArray</doc>
            <type name="NameValueArray" c:type="CamelNameValueArray*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="copy"
              c:identifier="camel_name_value_array_copy"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-name-value-array.c"
             line="100">Creates a new copy of the @array. The returned pointer should be freed
with camel_name_value_array_free() when no longer needed.</doc>
        <source-position filename="src/camel/camel-name-value-array.h"
                         line="47"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-name-value-array.c"
               line="107">A new copy of the @array.

See: camel_name_value_array_new, camel_name_value_array_new_sized</doc>
          <type name="NameValueArray" c:type="CamelNameValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="array"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="102">a #CamelNameValueArray</doc>
            <type name="NameValueArray" c:type="const CamelNameValueArray*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="equal"
              c:identifier="camel_name_value_array_equal"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-name-value-array.c"
             line="592">Compares content of the two #CamelNameValueArray and returns whether
they equal. Note this is an expensive operation for large arrays.</doc>
        <source-position filename="src/camel/camel-name-value-array.h"
                         line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-name-value-array.c"
               line="601">Whether the two #CamelNameValueArray have the same content.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="array_a"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="594">the first #CamelNameValueArray</doc>
            <type name="NameValueArray" c:type="const CamelNameValueArray*"/>
          </instance-parameter>
          <parameter name="array_b"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="595">the second #CamelNameValueArray</doc>
            <type name="NameValueArray" c:type="const CamelNameValueArray*"/>
          </parameter>
          <parameter name="compare_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="596">a compare type, one of #CamelCompareType</doc>
            <type name="CompareType" c:type="CamelCompareType"/>
          </parameter>
        </parameters>
      </method>
      <method name="free"
              c:identifier="camel_name_value_array_free"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-name-value-array.c"
             line="135">Frees the @array, previously allocated by camel_name_value_array_new(),
camel_name_value_array_new_sized() or camel_name_value_array_copy().
If the @array is %NULL, then does nothing.</doc>
        <source-position filename="src/camel/camel-name-value-array.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="array"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="137">a #CamelNameValueArray, or %NULL</doc>
            <type name="NameValueArray" c:type="CamelNameValueArray*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get"
              c:identifier="camel_name_value_array_get"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-name-value-array.c"
             line="171">Returns the name and the value of the element at index @index. Either
of the @out_name and @out_value can be %NULL, to not return that part.</doc>
        <source-position filename="src/camel/camel-name-value-array.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-name-value-array.c"
               line="181">%TRUE on success, %FALSE otherwise.

See: camel_name_value_array_get_name, camel_name_value_array_get_value, camel_name_value_array_get_named</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="173">a #CamelNameValueArray</doc>
            <type name="NameValueArray" c:type="const CamelNameValueArray*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="174">an index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="out_name"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="175">A place to store the name of the element, or %NULL</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
          <parameter name="out_value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="176">A place to store the value of the element, or %NULL</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_length"
              c:identifier="camel_name_value_array_get_length"
              version="3.24">
        <source-position filename="src/camel/camel-name-value-array.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-name-value-array.c"
               line="156">Length of the @array, aka how many elements are stored in the @array.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="array"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="154">a #CamelNameValueArray</doc>
            <type name="NameValueArray" c:type="const CamelNameValueArray*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="camel_name_value_array_get_name"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-name-value-array.c"
             line="270">Returns the name of the element at index @index.</doc>
        <source-position filename="src/camel/camel-name-value-array.h"
                         line="59"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-name-value-array.c"
               line="277">Name of the element at the given @index,
   or %NULL on error.

See: camel_name_value_array_get, camel_name_value_array_get_value</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="272">a #CamelNameValueArray</doc>
            <type name="NameValueArray" c:type="const CamelNameValueArray*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="273">an index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_named"
              c:identifier="camel_name_value_array_get_named"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-name-value-array.c"
             line="237">Returns the value of the first element named @name, or %NULL when there
is no element of such @name in the @array. The @compare_type determines
how to compare the names.</doc>
        <source-position filename="src/camel/camel-name-value-array.h"
                         line="55"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-name-value-array.c"
               line="247">Value of the first element named @name, or %NULL.

See: camel_name_value_array_get, camel_name_value_array_get_name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="239">a #CamelNameValueArray</doc>
            <type name="NameValueArray" c:type="const CamelNameValueArray*"/>
          </instance-parameter>
          <parameter name="compare_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="240">a compare type, one of #CamelCompareType</doc>
            <type name="CompareType" c:type="CamelCompareType"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="241">a name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value"
              c:identifier="camel_name_value_array_get_value"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-name-value-array.c"
             line="298">Returns the value of the element at index @index.</doc>
        <source-position filename="src/camel/camel-name-value-array.h"
                         line="61"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-name-value-array.c"
               line="305">Value of the element at the given @index,
   or %NULL on error.

See: camel_name_value_array_get, camel_name_value_array_get_name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="300">a #CamelNameValueArray</doc>
            <type name="NameValueArray" c:type="const CamelNameValueArray*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="301">an index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove"
              c:identifier="camel_name_value_array_remove"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-name-value-array.c"
             line="511">Removes element at index @index.</doc>
        <source-position filename="src/camel/camel-name-value-array.h"
                         line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-name-value-array.c"
               line="518">Whether the element was removed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="513">a #CamelNameValueArray</doc>
            <type name="NameValueArray" c:type="CamelNameValueArray*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="514">an index to remove</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_named"
              c:identifier="camel_name_value_array_remove_named"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-name-value-array.c"
             line="534">Removes elements of the @array with the given @name.
The @compare_type determines hot to compare the names.
If the @all_occurrences is set to %TRUE, then every elements with the @name
are removed, otherwise only the first occurrence is removed.</doc>
        <source-position filename="src/camel/camel-name-value-array.h"
                         line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-name-value-array.c"
               line="546">How many elements had been removed.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="536">a #CamelNameValueArray</doc>
            <type name="NameValueArray" c:type="CamelNameValueArray*"/>
          </instance-parameter>
          <parameter name="compare_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="537">a compare type, one of #CamelCompareType</doc>
            <type name="CompareType" c:type="CamelCompareType"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="538">a name to remove</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="all_occurrences" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="539">whether to remove all occurrences of the @name</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set"
              c:identifier="camel_name_value_array_set"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-name-value-array.c"
             line="387">Sets both the @name and the @value of the element at index @index.</doc>
        <source-position filename="src/camel/camel-name-value-array.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-name-value-array.c"
               line="396">Whether the @array changed.

See: camel_name_value_array_append, camel_name_value_array_set_name, camel_name_value_array_set_value</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="389">a #CamelNameValueArray</doc>
            <type name="NameValueArray" c:type="CamelNameValueArray*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="390">an index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="391">a name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="392">a value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="camel_name_value_array_set_name"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-name-value-array.c"
             line="416">Sets the @name of the element at index @index.</doc>
        <source-position filename="src/camel/camel-name-value-array.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-name-value-array.c"
               line="424">Whether the @array changed.

See: camel_name_value_array_set, camel_name_value_array_set_value</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="418">a #CamelNameValueArray</doc>
            <type name="NameValueArray" c:type="CamelNameValueArray*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="419">an index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="420">a name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_named"
              c:identifier="camel_name_value_array_set_named"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-name-value-array.c"
             line="468">Finds an element named @name and sets its value to @value, or appends
a new element, in case no such named element exists in the @array yet.
In case there are more elements named with @name only the first
occurrence is changed. The @compare_type determines how to compare
the names.</doc>
        <source-position filename="src/camel/camel-name-value-array.h"
                         line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-name-value-array.c"
               line="481">Whether the @array changed.

See: camel_name_value_array_append, camel_name_value_array_set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="470">a #CamelNameValueArray</doc>
            <type name="NameValueArray" c:type="CamelNameValueArray*"/>
          </instance-parameter>
          <parameter name="compare_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="471">a compare type, one of #CamelCompareType</doc>
            <type name="CompareType" c:type="CamelCompareType"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="472">a name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="473">a value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value"
              c:identifier="camel_name_value_array_set_value"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-name-value-array.c"
             line="442">Sets the @value of the element at index @index.</doc>
        <source-position filename="src/camel/camel-name-value-array.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-name-value-array.c"
               line="450">Whether the @array changed.

See: camel_name_value_array_set, camel_name_value_array_set_name</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="444">a #CamelNameValueArray</doc>
            <type name="NameValueArray" c:type="CamelNameValueArray*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="445">an index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-name-value-array.c"
                 line="446">a value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="NamedFlags"
            c:type="CamelNamedFlags"
            opaque="1"
            version="3.24"
            glib:type-name="CamelNamedFlags"
            glib:get-type="camel_named_flags_get_type"
            c:symbol-prefix="named_flags">
      <source-position filename="src/camel/camel-named-flags.h" line="35"/>
      <constructor name="new"
                   c:identifier="camel_named_flags_new"
                   version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-named-flags.c"
             line="30">Creates a new #CamelNamedFlags.</doc>
        <source-position filename="src/camel/camel-named-flags.h" line="41"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-named-flags.c"
               line="35">A newly allocated #CamelNamedFlags.
   Free it with camel_named_flags_free() when done with it.</doc>
          <type name="NamedFlags" c:type="CamelNamedFlags*"/>
        </return-value>
      </constructor>
      <constructor name="new_sized"
                   c:identifier="camel_named_flags_new_sized"
                   version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-named-flags.c"
             line="46">Created a new #CamelNamedFlags, which has reserved @reserve_size
elements. This value doesn't influence the camel_named_flags_get_length(),
which returns zero on the array returned from this function.</doc>
        <source-position filename="src/camel/camel-named-flags.h" line="43"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-named-flags.c"
               line="54">A newly allocated #CamelNameValueArray.
   Free it with camel_named_flags_free() when done with it.

See: camel_name_value_array_new, camel_name_value_array_copy</doc>
          <type name="NamedFlags" c:type="CamelNamedFlags*"/>
        </return-value>
        <parameters>
          <parameter name="reserve_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-named-flags.c"
                 line="48">an array size to reserve</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="clear"
              c:identifier="camel_named_flags_clear"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-named-flags.c"
             line="221">Removes all the elements of the array.</doc>
        <source-position filename="src/camel/camel-named-flags.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="named_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-named-flags.c"
                 line="223">a #CamelNamedFlags</doc>
            <type name="NamedFlags" c:type="CamelNamedFlags*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="contains"
              c:identifier="camel_named_flags_contains"
              version="3.24">
        <source-position filename="src/camel/camel-named-flags.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-named-flags.c"
               line="206">Whether the @named_flags contains a flag named @name,
   comparing case sensitively.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="named_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-named-flags.c"
                 line="203">a #CamelNamedFlags</doc>
            <type name="NamedFlags" c:type="const CamelNamedFlags*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-named-flags.c"
                 line="204">name of the flag</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="camel_named_flags_copy" version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-named-flags.c"
             line="67">Creates a copy of the @named_flags and returns it.</doc>
        <source-position filename="src/camel/camel-named-flags.h" line="45"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-named-flags.c"
               line="73">A newly allocated #CamelNamedFlags.
   Free it with camel_named_flags_free() when done with it.</doc>
          <type name="NamedFlags" c:type="CamelNamedFlags*"/>
        </return-value>
        <parameters>
          <instance-parameter name="named_flags"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-named-flags.c"
                 line="69">a #CamelNamedFlags</doc>
            <type name="NamedFlags" c:type="const CamelNamedFlags*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="equal"
              c:identifier="camel_named_flags_equal"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-named-flags.c"
             line="283">Compares content of the two #CamelNamedFlags and returns whether
they equal. Note this is an expensive operation for large sets.</doc>
        <source-position filename="src/camel/camel-named-flags.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-named-flags.c"
               line="291">Whether the two #CamelNamedFlags have the same content.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="named_flags_a"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-named-flags.c"
                 line="285">the first #CamelNamedFlags</doc>
            <type name="NamedFlags" c:type="const CamelNamedFlags*"/>
          </instance-parameter>
          <parameter name="named_flags_b"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-named-flags.c"
                 line="286">the second #CamelNamedFlags</doc>
            <type name="NamedFlags" c:type="const CamelNamedFlags*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="camel_named_flags_free" version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-named-flags.c"
             line="99">Frees memory associated iwth the @named_flags. Does nothing,
if @named_flags is %NULL.</doc>
        <source-position filename="src/camel/camel-named-flags.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="named_flags"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-named-flags.c"
                 line="101">a #CamelNamedFlags, or %NULL</doc>
            <type name="NamedFlags" c:type="CamelNamedFlags*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get" c:identifier="camel_named_flags_get" version="3.24">
        <source-position filename="src/camel/camel-named-flags.h" line="55"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-named-flags.c"
               line="264">Name of the flag in at the given @index,
  or %NULL on error.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="named_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-named-flags.c"
                 line="261">a #CamelNamedFlags</doc>
            <type name="NamedFlags" c:type="const CamelNamedFlags*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-named-flags.c"
                 line="262">an index of an element</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_length"
              c:identifier="camel_named_flags_get_length"
              version="3.24">
        <source-position filename="src/camel/camel-named-flags.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-named-flags.c"
               line="244">Length of the array, aka how many named flags are stored there.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="named_flags"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-named-flags.c"
                 line="242">a #CamelNamedFlags</doc>
            <type name="NamedFlags" c:type="const CamelNamedFlags*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="insert"
              c:identifier="camel_named_flags_insert"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-named-flags.c"
             line="135">Inserts a flag named @name into the @named_flags, if it is not included
already (comparing case sensitively), or does nothing otherwise.</doc>
        <source-position filename="src/camel/camel-named-flags.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-named-flags.c"
               line="143">%TRUE the flag named @name was inserted; %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="named_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-named-flags.c"
                 line="137">a #CamelNamedFlags</doc>
            <type name="NamedFlags" c:type="CamelNamedFlags*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-named-flags.c"
                 line="138">name of the flag</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove"
              c:identifier="camel_named_flags_remove"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-named-flags.c"
             line="168">Removes a flag named @name from the @named_flags.</doc>
        <source-position filename="src/camel/camel-named-flags.h" line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-named-flags.c"
               line="175">%TRUE when the @named_flags contained a flag named @name,
   comparing case sensitively, and it was removed; %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="named_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-named-flags.c"
                 line="170">a #CamelNamedFlags</doc>
            <type name="NamedFlags" c:type="CamelNamedFlags*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-named-flags.c"
                 line="171">name of the flag</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="NetworkSecurityMethod"
                 version="3.2"
                 glib:type-name="CamelNetworkSecurityMethod"
                 glib:get-type="camel_network_security_method_get_type"
                 c:type="CamelNetworkSecurityMethod">
      <doc xml:space="preserve"
           filename="src/camel/camel-enums.h"
           line="335">Methods for establishing an encrypted (or unencrypted) network connection.</doc>
      <member name="none"
              value="0"
              c:identifier="CAMEL_NETWORK_SECURITY_METHOD_NONE"
              glib:nick="none"
              glib:name="CAMEL_NETWORK_SECURITY_METHOD_NONE">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="337">Use an unencrypted network connection.</doc>
      </member>
      <member name="ssl_on_alternate_port"
              value="1"
              c:identifier="CAMEL_NETWORK_SECURITY_METHOD_SSL_ON_ALTERNATE_PORT"
              glib:nick="ssl-on-alternate-port"
              glib:name="CAMEL_NETWORK_SECURITY_METHOD_SSL_ON_ALTERNATE_PORT">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="339">Use SSL by connecting to an alternate port number.</doc>
      </member>
      <member name="starttls_on_standard_port"
              value="2"
              c:identifier="CAMEL_NETWORK_SECURITY_METHOD_STARTTLS_ON_STANDARD_PORT"
              glib:nick="starttls-on-standard-port"
              glib:name="CAMEL_NETWORK_SECURITY_METHOD_STARTTLS_ON_STANDARD_PORT">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="341">Use SSL or TLS by connecting to the standard port and invoking
  STARTTLS before authenticating.  This is the recommended method.</doc>
      </member>
    </enumeration>
    <interface name="NetworkService"
               c:symbol-prefix="network_service"
               c:type="CamelNetworkService"
               version="3.2"
               glib:type-name="CamelNetworkService"
               glib:get-type="camel_network_service_get_type"
               glib:type-struct="NetworkServiceInterface">
      <source-position filename="src/camel/camel-network-service.h" line="78"/>
      <prerequisite name="Service"/>
      <virtual-method name="connect_sync"
                      invoker="connect_sync"
                      version="3.2"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-network-service.c"
             line="915">Attempts to establish a network connection to the server described by
@service, using the preferred #CamelNetworkSettings:security-method to
secure the connection.  If a connection cannot be established, or the
connection attempt is cancelled, the function sets @error and returns
%NULL.</doc>
        <source-position filename="src/camel/camel-network-service.h"
                         line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-network-service.c"
               line="927">a #GIOStream, or %NULL on error</doc>
          <type name="Gio.IOStream" c:type="GIOStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-service.c"
                 line="917">a #CamelNetworkService</doc>
            <type name="NetworkService" c:type="CamelNetworkService*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-service.c"
                 line="918">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_default_port"
                      invoker="get_default_port"
                      version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-network-service.c"
             line="767">Returns the default network port number for @service and the security
method @method, as defined in /etc/services.  For example, the default
port for unencrypted IMAP or encrypted IMAP using STARTTLS is 143, but
the default port for IMAP over SSL is 993.</doc>
        <source-position filename="src/camel/camel-network-service.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-network-service.c"
               line="777">the default port number for @service and @method</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-service.c"
                 line="769">a #CamelNetworkService</doc>
            <type name="NetworkService" c:type="CamelNetworkService*"/>
          </instance-parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-service.c"
                 line="770">a #CamelNetworkSecurityMethod</doc>
            <type name="NetworkSecurityMethod"
                  c:type="CamelNetworkSecurityMethod"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_service_name"
                      invoker="get_service_name"
                      version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-network-service.c"
             line="735">Returns the standard network service name for @service and the security
method @method, as defined in /etc/services.  For example, the service
name for unencrypted IMAP or encrypted IMAP using STARTTLS is "imap",
but the service name for IMAP over SSL is "imaps".</doc>
        <source-position filename="src/camel/camel-network-service.h"
                         line="61"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-network-service.c"
               line="745">the network service name for @service and @method,
or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-service.c"
                 line="737">a #CamelNetworkService</doc>
            <type name="NetworkService" c:type="CamelNetworkService*"/>
          </instance-parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-service.c"
                 line="738">a #CamelNetworkSecurityMethod</doc>
            <type name="NetworkSecurityMethod"
                  c:type="CamelNetworkSecurityMethod"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="new_connectable" introspectable="0">
        <source-position filename="src/camel/camel-network-service.h"
                         line="73"/>
        <return-value>
          <type name="Gio.SocketConnectable" c:type="GSocketConnectable*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <type name="NetworkService" c:type="CamelNetworkService*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="can_reach"
              c:identifier="camel_network_service_can_reach"
              version="3.12">
        <doc xml:space="preserve"
             filename="src/camel/camel-network-service.c"
             line="1092">Asynchronously attempts to determine whether or not the host described by
@service's #CamelNetworkService:connectable property can be reached, without
actually trying to connect to it.

For more details, see camel_network_service_can_reach_sync().

When the operation is finished, @callback will be called.  You can then
call camel_network_service_can_reach_finish() to get the result of the
operation.</doc>
        <source-position filename="src/camel/camel-network-service.h"
                         line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-service.c"
                 line="1094">a #CamelNetworkService</doc>
            <type name="NetworkService" c:type="CamelNetworkService*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-service.c"
                 line="1095">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-service.c"
                 line="1096">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-service.c"
                 line="1097">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="can_reach_finish"
              c:identifier="camel_network_service_can_reach_finish"
              version="3.12"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-network-service.c"
             line="1142">Finishes the operation started with camel_network_service_can_reach().</doc>
        <source-position filename="src/camel/camel-network-service.h"
                         line="112"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-network-service.c"
               line="1150">whether the host for @service can be reached</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-service.c"
                 line="1144">a #CamelNetworkService</doc>
            <type name="NetworkService" c:type="CamelNetworkService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-service.c"
                 line="1145">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="can_reach_sync"
              c:identifier="camel_network_service_can_reach_sync"
              version="3.12"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-network-service.c"
             line="993">Attempts to determine whether or not the host described by @service's
#CamelNetworkService:connectable property can be reached, without actually
trying to connect to it.

If @service believes an attempt to connect will succeed, the function
returns %TRUE.  Otherwise the function returns %FALSE and sets @error
to an appropriate error (such as %G_IO_ERROR_HOST_UNREACHABLE).

The function will also update the @service's
#CamelNetworkService:host-reachable property based on the result.</doc>
        <source-position filename="src/camel/camel-network-service.h"
                         line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-network-service.c"
               line="1010">whether the host for @service can be reached</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-service.c"
                 line="995">a #CamelNetworkService</doc>
            <type name="NetworkService" c:type="CamelNetworkService*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-service.c"
                 line="996">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_sync"
              c:identifier="camel_network_service_connect_sync"
              version="3.2"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-network-service.c"
             line="915">Attempts to establish a network connection to the server described by
@service, using the preferred #CamelNetworkSettings:security-method to
secure the connection.  If a connection cannot be established, or the
connection attempt is cancelled, the function sets @error and returns
%NULL.</doc>
        <source-position filename="src/camel/camel-network-service.h"
                         line="95"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-network-service.c"
               line="927">a #GIOStream, or %NULL on error</doc>
          <type name="Gio.IOStream" c:type="GIOStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-service.c"
                 line="917">a #CamelNetworkService</doc>
            <type name="NetworkService" c:type="CamelNetworkService*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-service.c"
                 line="918">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_default_port"
              c:identifier="camel_network_service_get_default_port"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-network-service.c"
             line="767">Returns the default network port number for @service and the security
method @method, as defined in /etc/services.  For example, the default
port for unencrypted IMAP or encrypted IMAP using STARTTLS is 143, but
the default port for IMAP over SSL is 993.</doc>
        <source-position filename="src/camel/camel-network-service.h"
                         line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-network-service.c"
               line="777">the default port number for @service and @method</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-service.c"
                 line="769">a #CamelNetworkService</doc>
            <type name="NetworkService" c:type="CamelNetworkService*"/>
          </instance-parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-service.c"
                 line="770">a #CamelNetworkSecurityMethod</doc>
            <type name="NetworkSecurityMethod"
                  c:type="CamelNetworkSecurityMethod"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_host_reachable"
              c:identifier="camel_network_service_get_host_reachable"
              glib:get-property="host-reachable"
              version="3.8">
        <doc xml:space="preserve"
             filename="src/camel/camel-network-service.c"
             line="890">Returns %TRUE if @service believes that the host pointed to by
#CamelNetworkService:connectable can be reached.  This property
is updated automatically as network conditions change.</doc>
        <source-position filename="src/camel/camel-network-service.h"
                         line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-network-service.c"
               line="898">whether the host is reachable</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-service.c"
                 line="892">a #CamelNetworkService</doc>
            <type name="NetworkService" c:type="CamelNetworkService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_service_name"
              c:identifier="camel_network_service_get_service_name"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-network-service.c"
             line="735">Returns the standard network service name for @service and the security
method @method, as defined in /etc/services.  For example, the service
name for unencrypted IMAP or encrypted IMAP using STARTTLS is "imap",
but the service name for IMAP over SSL is "imaps".</doc>
        <source-position filename="src/camel/camel-network-service.h"
                         line="81"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-network-service.c"
               line="745">the network service name for @service and @method,
or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-service.c"
                 line="737">a #CamelNetworkService</doc>
            <type name="NetworkService" c:type="CamelNetworkService*"/>
          </instance-parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-service.c"
                 line="738">a #CamelNetworkSecurityMethod</doc>
            <type name="NetworkSecurityMethod"
                  c:type="CamelNetworkSecurityMethod"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref_connectable"
              c:identifier="camel_network_service_ref_connectable"
              version="3.8">
        <doc xml:space="preserve"
             filename="src/camel/camel-network-service.c"
             line="798">Returns the socket endpoint for the network service to which @service
is a client.

The returned #GSocketConnectable is referenced for thread-safety and
must be unreferenced with g_object_unref() when finished with it.</doc>
        <source-position filename="src/camel/camel-network-service.h"
                         line="88"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-network-service.c"
               line="808">a #GSocketConnectable</doc>
          <type name="Gio.SocketConnectable" c:type="GSocketConnectable*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-service.c"
                 line="800">a #CamelNetworkService</doc>
            <type name="NetworkService" c:type="CamelNetworkService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_connectable"
              c:identifier="camel_network_service_set_connectable"
              glib:set-property="connectable"
              version="3.8">
        <doc xml:space="preserve"
             filename="src/camel/camel-network-service.c"
             line="844">Sets the socket endpoint for the network service to which @service is
a client.  If @connectable is %NULL, a #GSocketConnectable is derived
from the @service's #CamelNetworkSettings.</doc>
        <source-position filename="src/camel/camel-network-service.h"
                         line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-service.c"
                 line="846">a #CamelNetworkService</doc>
            <type name="NetworkService" c:type="CamelNetworkService*"/>
          </instance-parameter>
          <parameter name="connectable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-service.c"
                 line="847">a #GSocketConnectable, or %NULL</doc>
            <type name="Gio.SocketConnectable" c:type="GSocketConnectable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="starttls"
              c:identifier="camel_network_service_starttls"
              version="3.12"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-network-service.c"
             line="946">Creates a #GTlsClientConnection wrapping @base_stream, which is
assumed to communicate with the server identified by @service's
#CamelNetworkService:connectable.

This should typically be called after issuing a STARTTLS command
to a server to initiate a Transport Layer Security handshake.</doc>
        <source-position filename="src/camel/camel-network-service.h"
                         line="99"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-network-service.c"
               line="959">the new #GTlsClientConnection,
or %NULL on error</doc>
          <type name="Gio.IOStream" c:type="GIOStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-service.c"
                 line="948">a #CamelNetworkService</doc>
            <type name="NetworkService" c:type="CamelNetworkService*"/>
          </instance-parameter>
          <parameter name="base_stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-service.c"
                 line="949">a #GIOStream</doc>
            <type name="Gio.IOStream" c:type="GIOStream*"/>
          </parameter>
        </parameters>
      </method>
      <property name="connectable"
                writable="1"
                transfer-ownership="none"
                setter="set_connectable">
        <type name="Gio.SocketConnectable"/>
      </property>
      <property name="host-reachable"
                transfer-ownership="none"
                getter="get_host_reachable"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </interface>
    <record name="NetworkServiceInterface"
            c:type="CamelNetworkServiceInterface"
            glib:is-gtype-struct-for="NetworkService">
      <source-position filename="src/camel/camel-network-service.h" line="78"/>
      <field name="parent_interface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_service_name">
        <callback name="get_service_name">
          <source-position filename="src/camel/camel-network-service.h"
                           line="61"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-service.c"
                 line="745">the network service name for @service and @method,
or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-network-service.c"
                   line="737">a #CamelNetworkService</doc>
              <type name="NetworkService" c:type="CamelNetworkService*"/>
            </parameter>
            <parameter name="method" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-network-service.c"
                   line="738">a #CamelNetworkSecurityMethod</doc>
              <type name="NetworkSecurityMethod"
                    c:type="CamelNetworkSecurityMethod"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_default_port">
        <callback name="get_default_port">
          <source-position filename="src/camel/camel-network-service.h"
                           line="64"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-service.c"
                 line="777">the default port number for @service and @method</doc>
            <type name="guint16" c:type="guint16"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-network-service.c"
                   line="769">a #CamelNetworkService</doc>
              <type name="NetworkService" c:type="CamelNetworkService*"/>
            </parameter>
            <parameter name="method" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-network-service.c"
                   line="770">a #CamelNetworkSecurityMethod</doc>
              <type name="NetworkSecurityMethod"
                    c:type="CamelNetworkSecurityMethod"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="connect_sync">
        <callback name="connect_sync" throws="1">
          <source-position filename="src/camel/camel-network-service.h"
                           line="68"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-service.c"
                 line="927">a #GIOStream, or %NULL on error</doc>
            <type name="Gio.IOStream" c:type="GIOStream*"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-network-service.c"
                   line="917">a #CamelNetworkService</doc>
              <type name="NetworkService" c:type="CamelNetworkService*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-network-service.c"
                   line="918">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="new_connectable" introspectable="0">
        <callback name="new_connectable" introspectable="0">
          <source-position filename="src/camel/camel-network-service.h"
                           line="73"/>
          <return-value>
            <type name="Gio.SocketConnectable" c:type="GSocketConnectable*"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <type name="NetworkService" c:type="CamelNetworkService*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <interface name="NetworkSettings"
               c:symbol-prefix="network_settings"
               c:type="CamelNetworkSettings"
               version="3.2"
               glib:type-name="CamelNetworkSettings"
               glib:get-type="camel_network_settings_get_type"
               glib:type-struct="NetworkSettingsInterface">
      <source-position filename="src/camel/camel-network-settings.h"
                       line="62"/>
      <prerequisite name="Settings"/>
      <method name="dup_auth_mechanism"
              c:identifier="camel_network_settings_dup_auth_mechanism"
              version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-network-settings.c"
             line="119">Thread-safe variation of camel_network_settings_get_auth_mechanism().
Use this function when accessing @settings from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="src/camel/camel-network-settings.h"
                         line="68"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-network-settings.c"
               line="128">a newly-allocated copy of #CamelNetworkSettings:auth-mechanism</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-settings.c"
                 line="121">a #CamelNetworkSettings</doc>
            <type name="NetworkSettings" c:type="CamelNetworkSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_host"
              c:identifier="camel_network_settings_dup_host"
              version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-network-settings.c"
             line="206">Thread-safe variation of camel_network_settings_get_host().
Use this function when accessing @settings from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="src/camel/camel-network-settings.h"
                         line="75"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-network-settings.c"
               line="215">a newly-allocated copy of #CamelNetworkSettings:host</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-settings.c"
                 line="208">a #CamelNetworkSettings</doc>
            <type name="NetworkSettings" c:type="CamelNetworkSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_host_ensure_ascii"
              c:identifier="camel_network_settings_dup_host_ensure_ascii"
              version="3.16">
        <doc xml:space="preserve"
             filename="src/camel/camel-network-settings.c"
             line="237">Just like camel_network_settings_dup_host(), only makes sure that
the returned host name will be converted into its ASCII form in case
of IDNA value.</doc>
        <source-position filename="src/camel/camel-network-settings.h"
                         line="77"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-network-settings.c"
               line="245">a newly-allocated copy of #CamelNetworkSettings:host with
   only ASCII letters.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-settings.c"
                 line="239">a #CamelNetworkSettings</doc>
            <type name="NetworkSettings" c:type="CamelNetworkSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_user"
              c:identifier="camel_network_settings_dup_user"
              version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-network-settings.c"
             line="421">Thread-safe variation of camel_network_settings_get_user().
Use this function when accessing @settings from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="src/camel/camel-network-settings.h"
                         line="95"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-network-settings.c"
               line="430">a newly-allocated copy of #CamelNetworkSettings:user</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-settings.c"
                 line="423">a #CamelNetworkSettings</doc>
            <type name="NetworkSettings" c:type="CamelNetworkSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_auth_mechanism"
              c:identifier="camel_network_settings_get_auth_mechanism"
              glib:get-property="auth-mechanism"
              version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-network-settings.c"
             line="100">Returns the mechanism name used to authenticate to a network service.
Often this refers to a SASL mechanism such as "LOGIN" or "GSSAPI".</doc>
        <source-position filename="src/camel/camel-network-settings.h"
                         line="66"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-network-settings.c"
               line="107">the authentication mechanism name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-settings.c"
                 line="102">a #CamelNetworkSettings</doc>
            <type name="NetworkSettings" c:type="CamelNetworkSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_host"
              c:identifier="camel_network_settings_get_host"
              glib:get-property="host"
              version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-network-settings.c"
             line="188">Returns the host name used to authenticate to a network service.</doc>
        <source-position filename="src/camel/camel-network-settings.h"
                         line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-network-settings.c"
               line="194">the host name of a network service</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-settings.c"
                 line="190">a #CamelNetworkSettings</doc>
            <type name="NetworkSettings" c:type="CamelNetworkSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_port"
              c:identifier="camel_network_settings_get_port"
              glib:get-property="port"
              version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-network-settings.c"
             line="309">Returns the port number used to authenticate to a network service.</doc>
        <source-position filename="src/camel/camel-network-settings.h"
                         line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-network-settings.c"
               line="315">the port number of a network service</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-settings.c"
                 line="311">a #CamelNetworkSettings</doc>
            <type name="NetworkSettings" c:type="CamelNetworkSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_security_method"
              c:identifier="camel_network_settings_get_security_method"
              glib:get-property="security-method"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-network-settings.c"
             line="353">Returns the method used to establish a secure (or unsecure) network
connection.</doc>
        <source-position filename="src/camel/camel-network-settings.h"
                         line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-network-settings.c"
               line="360">the security method</doc>
          <type name="NetworkSecurityMethod"
                c:type="CamelNetworkSecurityMethod"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-settings.c"
                 line="355">a #CamelNetworkSettings</doc>
            <type name="NetworkSettings" c:type="CamelNetworkSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user"
              c:identifier="camel_network_settings_get_user"
              glib:get-property="user"
              version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-network-settings.c"
             line="403">Returns the user name used to authenticate to a network service.</doc>
        <source-position filename="src/camel/camel-network-settings.h"
                         line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-network-settings.c"
               line="409">the user name of a network service</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-settings.c"
                 line="405">a #CamelNetworkSettings</doc>
            <type name="NetworkSettings" c:type="CamelNetworkSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_auth_mechanism"
              c:identifier="camel_network_settings_set_auth_mechanism"
              glib:set-property="auth-mechanism"
              version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-network-settings.c"
             line="150">Sets the mechanism name used to authenticate to a network service.
Often this refers to a SASL mechanism such as "LOGIN" or "GSSAPI".
The #CamelNetworkSettings:auth-mechanism property is automatically
stripped of leading and trailing whitespace.</doc>
        <source-position filename="src/camel/camel-network-settings.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-settings.c"
                 line="152">a #CamelNetworkSettings</doc>
            <type name="NetworkSettings" c:type="CamelNetworkSettings*"/>
          </instance-parameter>
          <parameter name="auth_mechanism"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-settings.c"
                 line="153">an authentication mechanism name, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_host"
              c:identifier="camel_network_settings_set_host"
              glib:set-property="host"
              version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-network-settings.c"
             line="271">Sets the host name used to authenticate to a network service.  The
#CamelNetworkSettings:host property is automatically stripped of
leading and trailing whitespace.</doc>
        <source-position filename="src/camel/camel-network-settings.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-settings.c"
                 line="273">a #CamelNetworkSettings</doc>
            <type name="NetworkSettings" c:type="CamelNetworkSettings*"/>
          </instance-parameter>
          <parameter name="host"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-settings.c"
                 line="274">a host name, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_port"
              c:identifier="camel_network_settings_set_port"
              glib:set-property="port"
              version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-network-settings.c"
             line="331">Sets the port number used to authenticate to a network service.</doc>
        <source-position filename="src/camel/camel-network-settings.h"
                         line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-settings.c"
                 line="333">a #CamelNetworkSettings</doc>
            <type name="NetworkSettings" c:type="CamelNetworkSettings*"/>
          </instance-parameter>
          <parameter name="port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-settings.c"
                 line="334">a port number</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_security_method"
              c:identifier="camel_network_settings_set_security_method"
              glib:set-property="security-method"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-network-settings.c"
             line="378">Sets the method used to establish a secure (or unsecure) network
connection.  Note that changing this setting has no effect on an
already-established network connection.</doc>
        <source-position filename="src/camel/camel-network-settings.h"
                         line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-settings.c"
                 line="380">a #CamelNetworkSettings</doc>
            <type name="NetworkSettings" c:type="CamelNetworkSettings*"/>
          </instance-parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-settings.c"
                 line="381">the security method</doc>
            <type name="NetworkSecurityMethod"
                  c:type="CamelNetworkSecurityMethod"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_user"
              c:identifier="camel_network_settings_set_user"
              glib:set-property="user"
              version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-network-settings.c"
             line="452">Sets the user name used to authenticate to a network service.  The
#CamelNetworkSettings:user property is automatically stripped of
leading and trailing whitespace.</doc>
        <source-position filename="src/camel/camel-network-settings.h"
                         line="97"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-settings.c"
                 line="454">a #CamelNetworkSettings</doc>
            <type name="NetworkSettings" c:type="CamelNetworkSettings*"/>
          </instance-parameter>
          <parameter name="user"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-network-settings.c"
                 line="455">a user name, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="auth-mechanism"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_auth_mechanism"
                getter="get_auth_mechanism"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="host"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_host"
                getter="get_host">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="port"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_port"
                getter="get_port"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="security-method"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_security_method"
                getter="get_security_method"
                default-value="CAMEL_NETWORK_SECURITY_METHOD_STARTTLS_ON_STANDARD_PORT">
        <type name="NetworkSecurityMethod"/>
      </property>
      <property name="user"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_user"
                getter="get_user"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </interface>
    <record name="NetworkSettingsInterface"
            c:type="CamelNetworkSettingsInterface"
            glib:is-gtype-struct-for="NetworkSettings">
      <source-position filename="src/camel/camel-network-settings.h"
                       line="62"/>
      <field name="parent_interface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="NullOutputStream"
           c:symbol-prefix="null_output_stream"
           c:type="CamelNullOutputStream"
           parent="Gio.OutputStream"
           glib:type-name="CamelNullOutputStream"
           glib:get-type="camel_null_output_stream_get_type"
           glib:type-struct="NullOutputStreamClass">
      <source-position filename="src/camel/camel-null-output-stream.h"
                       line="62"/>
      <constructor name="new"
                   c:identifier="camel_null_output_stream_new"
                   version="3.12">
        <doc xml:space="preserve"
             filename="src/camel/camel-null-output-stream.c"
             line="85">Creates a new "null" output stream.</doc>
        <source-position filename="src/camel/camel-null-output-stream.h"
                         line="66"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-null-output-stream.c"
               line="90">a new #GOutputStream</doc>
          <type name="Gio.OutputStream" c:type="GOutputStream*"/>
        </return-value>
      </constructor>
      <method name="get_bytes_written"
              c:identifier="camel_null_output_stream_get_bytes_written"
              version="3.12">
        <doc xml:space="preserve"
             filename="src/camel/camel-null-output-stream.c"
             line="100">Gets the total number of bytes written to @null_stream.</doc>
        <source-position filename="src/camel/camel-null-output-stream.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-null-output-stream.c"
               line="106">total byte count</doc>
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="null_stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-null-output-stream.c"
                 line="102">a #CamelNullOutputStream</doc>
            <type name="NullOutputStream" c:type="CamelNullOutputStream*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ends_with_crlf"
              c:identifier="camel_null_output_stream_get_ends_with_crlf"
              version="3.30">
        <source-position filename="src/camel/camel-null-output-stream.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-null-output-stream.c"
               line="122">Whether the data being written to @null_stream ended with CRLF.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="null_stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-null-output-stream.c"
                 line="120">a #CamelNullOutputStream</doc>
            <type name="NullOutputStream" c:type="CamelNullOutputStream*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Gio.OutputStream" c:type="GOutputStream"/>
      </field>
      <field name="priv">
        <type name="NullOutputStreamPrivate"
              c:type="CamelNullOutputStreamPrivate*"/>
      </field>
    </class>
    <record name="NullOutputStreamClass"
            c:type="CamelNullOutputStreamClass"
            glib:is-gtype-struct-for="NullOutputStream">
      <source-position filename="src/camel/camel-null-output-stream.h"
                       line="62"/>
      <field name="parent_class">
        <type name="Gio.OutputStreamClass" c:type="GOutputStreamClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="NullOutputStreamPrivate"
            c:type="CamelNullOutputStreamPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-null-output-stream.h"
                       line="50"/>
    </record>
    <function-macro name="OBJECT"
                    c:identifier="CAMEL_OBJECT"
                    introspectable="0">
      <source-position filename="src/camel/camel-object.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_CLASS"
                    c:identifier="CAMEL_OBJECT_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-object.h" line="39"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_GET_CLASS"
                    c:identifier="CAMEL_OBJECT_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-object.h" line="48"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFFLINE_FOLDER"
                    c:identifier="CAMEL_OFFLINE_FOLDER"
                    introspectable="0">
      <source-position filename="src/camel/camel-offline-folder.h" line="32"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFFLINE_FOLDER_CLASS"
                    c:identifier="CAMEL_OFFLINE_FOLDER_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-offline-folder.h" line="35"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFFLINE_FOLDER_GET_CLASS"
                    c:identifier="CAMEL_OFFLINE_FOLDER_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-offline-folder.h" line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFFLINE_SETTINGS"
                    c:identifier="CAMEL_OFFLINE_SETTINGS"
                    introspectable="0">
      <source-position filename="src/camel/camel-offline-settings.h"
                       line="30"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFFLINE_SETTINGS_CLASS"
                    c:identifier="CAMEL_OFFLINE_SETTINGS_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-offline-settings.h"
                       line="33"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFFLINE_SETTINGS_GET_CLASS"
                    c:identifier="CAMEL_OFFLINE_SETTINGS_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-offline-settings.h"
                       line="42"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFFLINE_STORE"
                    c:identifier="CAMEL_OFFLINE_STORE"
                    introspectable="0">
      <source-position filename="src/camel/camel-offline-store.h" line="31"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFFLINE_STORE_CLASS"
                    c:identifier="CAMEL_OFFLINE_STORE_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-offline-store.h" line="34"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFFLINE_STORE_GET_CLASS"
                    c:identifier="CAMEL_OFFLINE_STORE_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-offline-store.h" line="43"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OPERATION"
                    c:identifier="CAMEL_OPERATION"
                    introspectable="0">
      <source-position filename="src/camel/camel-operation.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OPERATION_CLASS"
                    c:identifier="CAMEL_OPERATION_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-operation.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OPERATION_GET_CLASS"
                    c:identifier="CAMEL_OPERATION_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-operation.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="O_BINARY" value="0" c:type="O_BINARY">
      <source-position filename="src/camel/camel-file-utils.h" line="36"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="Object"
           c:symbol-prefix="object"
           c:type="CamelObject"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="CamelObject"
           glib:get-type="camel_object_get_type"
           glib:type-struct="ObjectClass">
      <source-position filename="src/camel/camel-object.h" line="108"/>
      <virtual-method name="state_read">
        <source-position filename="src/camel/camel-object.h" line="101"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="CamelObject*"/>
          </instance-parameter>
          <parameter name="fp"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="FILE*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="state_write">
        <source-position filename="src/camel/camel-object.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="CamelObject*"/>
          </instance-parameter>
          <parameter name="fp"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="FILE*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_state_filename"
              c:identifier="camel_object_get_state_filename"
              glib:get-property="state-filename"
              version="2.32">
        <doc xml:space="preserve"
             filename="src/camel/camel-object.c"
             line="530">Returns the name of the file in which persistent property values for
@object are stored.  The file is used by camel_object_state_write()
and camel_object_state_read() to save and restore object state.</doc>
        <source-position filename="src/camel/camel-object.h" line="114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-object.c"
               line="538">the name of the persistent property file</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-object.c"
                 line="532">a #CamelObject</doc>
            <type name="Object" c:type="CamelObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_state_filename"
              c:identifier="camel_object_set_state_filename"
              glib:set-property="state-filename"
              version="2.32">
        <doc xml:space="preserve"
             filename="src/camel/camel-object.c"
             line="550">Sets the name of the file in which persistent property values for
@object are stored.  The file is used by camel_object_state_write()
and camel_object_state_read() to save and restore object state.</doc>
        <source-position filename="src/camel/camel-object.h" line="115"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-object.c"
                 line="552">a #CamelObject</doc>
            <type name="Object" c:type="CamelObject*"/>
          </instance-parameter>
          <parameter name="state_filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-object.c"
                 line="553">path to a local file</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="state_read" c:identifier="camel_object_state_read">
        <doc xml:space="preserve"
             filename="src/camel/camel-object.c"
             line="440">Read persistent object state from #CamelObject:state-filename.</doc>
        <source-position filename="src/camel/camel-object.h" line="112"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-object.c"
               line="446">-1 on error.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-object.c"
                 line="442">a #CamelObject</doc>
            <type name="Object" c:type="CamelObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="state_write" c:identifier="camel_object_state_write">
        <doc xml:space="preserve"
             filename="src/camel/camel-object.c"
             line="477">Write persistent object state #CamelObject:state-filename.</doc>
        <source-position filename="src/camel/camel-object.h" line="113"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-object.c"
               line="483">-1 on error.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-object.c"
                 line="479">a #CamelObject</doc>
            <type name="Object" c:type="CamelObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="state-filename"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_state_filename"
                getter="get_state_filename"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/camel/camel-object.c"
             line="412">The file in which to store persistent property values for this
instance.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ObjectPrivate" c:type="CamelObjectPrivate*"/>
      </field>
    </class>
    <record name="ObjectBag" c:type="CamelObjectBag" disguised="1" opaque="1">
      <source-position filename="src/camel/camel-object-bag.h" line="32"/>
      <method name="abort" c:identifier="camel_object_bag_abort">
        <doc xml:space="preserve"
             filename="src/camel/camel-object-bag.c"
             line="461">Aborts a key reservation.</doc>
        <source-position filename="src/camel/camel-object-bag.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-object-bag.c"
                 line="463">a #CamelObjectBag</doc>
            <type name="ObjectBag" c:type="CamelObjectBag*"/>
          </instance-parameter>
          <parameter name="key"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-object-bag.c"
                 line="464">a reserved key</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="add" c:identifier="camel_object_bag_add">
        <doc xml:space="preserve"
             filename="src/camel/camel-object-bag.c"
             line="417">Adds @object to @bag.  The @key MUST have been previously reserved using
camel_object_bag_reserve().</doc>
        <source-position filename="src/camel/camel-object-bag.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-object-bag.c"
                 line="419">a #CamelObjectBag</doc>
            <type name="ObjectBag" c:type="CamelObjectBag*"/>
          </instance-parameter>
          <parameter name="key"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-object-bag.c"
                 line="420">a reserved key</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-object-bag.c"
                 line="421">a #GObject</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="destroy" c:identifier="camel_object_bag_destroy">
        <doc xml:space="preserve"
             filename="src/camel/camel-object-bag.c"
             line="593">Frees @bag.  As a precaution, the function will emit a warning to standard
error and return without freeing @bag if @bag still has reserved keys.</doc>
        <source-position filename="src/camel/camel-object-bag.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-object-bag.c"
                 line="595">a #CamelObjectBag</doc>
            <type name="ObjectBag" c:type="CamelObjectBag*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get" c:identifier="camel_object_bag_get">
        <doc xml:space="preserve"
             filename="src/camel/camel-object-bag.c"
             line="202">Lookup an object by @key.  If the key is currently reserved, the function
will block until another thread commits or aborts the reservation.  The
caller owns the reference to the returned object.  Use g_object_unref ()
to unreference it.</doc>
        <source-position filename="src/camel/camel-object-bag.h" line="39"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-object-bag.c"
               line="212">the object corresponding to @key, or
%NULL if not found</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="bag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-object-bag.c"
                 line="204">a #CamelObjectBag</doc>
            <type name="ObjectBag" c:type="CamelObjectBag*"/>
          </instance-parameter>
          <parameter name="key"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-object-bag.c"
                 line="205">a key</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="list" c:identifier="camel_object_bag_list">
        <doc xml:space="preserve"
             filename="src/camel/camel-object-bag.c"
             line="524">Returns a #GPtrArray of all the objects in the bag.  The caller owns
both the array and the object references, so to free the array use:

|[
    g_ptr_array_foreach (array, (GFunc) g_object_unref, NULL);
    g_ptr_array_free (array, TRUE);
]|</doc>
        <source-position filename="src/camel/camel-object-bag.h" line="53"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-object-bag.c"
               line="536">an array of objects in @bag</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="GObject.Object"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="bag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-object-bag.c"
                 line="526">a #CamelObjectBag</doc>
            <type name="ObjectBag" c:type="CamelObjectBag*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek" c:identifier="camel_object_bag_peek">
        <doc xml:space="preserve"
             filename="src/camel/camel-object-bag.c"
             line="276">Returns the object for @key in @bag, ignoring any reservations.  If it
isn't committed, then it isn't considered.  This should only be used
where reliable transactional-based state is not required.

Unlink other "peek" operations, the caller owns the returned object
reference.  Use g_object_unref () to unreference it.</doc>
        <source-position filename="src/camel/camel-object-bag.h" line="41"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-object-bag.c"
               line="288">the object for @key, or %NULL if @key
is reserved or not found</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="bag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-object-bag.c"
                 line="278">a #CamelObjectBag</doc>
            <type name="ObjectBag" c:type="CamelObjectBag*"/>
          </instance-parameter>
          <parameter name="key"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-object-bag.c"
                 line="279">an unreserved key</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="rekey" c:identifier="camel_object_bag_rekey">
        <doc xml:space="preserve"
             filename="src/camel/camel-object-bag.c"
             line="482">Changes the key for @object to @new_key, atomically.

It is considered a programming error if @object is not found in @bag.
In such case the function will emit a terminal warning and return.</doc>
        <source-position filename="src/camel/camel-object-bag.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-object-bag.c"
                 line="484">a #CamelObjectBag</doc>
            <type name="ObjectBag" c:type="CamelObjectBag*"/>
          </instance-parameter>
          <parameter name="object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-object-bag.c"
                 line="485">a #GObject</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="new_key"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-object-bag.c"
                 line="486">a new key for @object</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="camel_object_bag_remove">
        <doc xml:space="preserve"
             filename="src/camel/camel-object-bag.c"
             line="566">Removes @object from @bag.</doc>
        <source-position filename="src/camel/camel-object-bag.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-object-bag.c"
                 line="568">a #CamelObjectBag</doc>
            <type name="ObjectBag" c:type="CamelObjectBag*"/>
          </instance-parameter>
          <parameter name="object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-object-bag.c"
                 line="569">a #GObject</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="reserve" c:identifier="camel_object_bag_reserve">
        <doc xml:space="preserve"
             filename="src/camel/camel-object-bag.c"
             line="312">Reserves @key in @bag.  If @key is already reserved in another thread,
then wait until the reservation has been committed.

After reserving @key, you either get a reference to the object
corresponding to @key (similar to camel_object_bag_get()) or you get
%NULL, signifying that you MUST call either camel_object_bag_add() or
camel_object_bag_abort().</doc>
        <source-position filename="src/camel/camel-object-bag.h" line="43"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-object-bag.c"
               line="325">the object for @key, or %NULL if @key
is not found</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="bag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-object-bag.c"
                 line="314">a #CamelObjectBag</doc>
            <type name="ObjectBag" c:type="CamelObjectBag*"/>
          </instance-parameter>
          <parameter name="key"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-object-bag.c"
                 line="315">the key to reserve</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <function name="new"
                c:identifier="camel_object_bag_new"
                introspectable="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-object-bag.c"
             line="153">Returns a new object bag.  Object bags are keyed hash tables of objects
that can be updated atomically using transaction semantics.  Use
camel_object_bag_destroy() to free the object bag.</doc>
        <source-position filename="src/camel/camel-object-bag.h" line="35"/>
        <return-value>
          <doc xml:space="preserve"
               filename="src/camel/camel-object-bag.c"
               line="164">a newly-allocated #CamelObjectBag</doc>
          <type name="ObjectBag" c:type="CamelObjectBag*"/>
        </return-value>
        <parameters>
          <parameter name="key_hash_func"
                     transfer-ownership="none"
                     scope="call">
            <doc xml:space="preserve"
                 filename="src/camel/camel-object-bag.c"
                 line="155">a hashing function for keys</doc>
            <type name="GLib.HashFunc" c:type="GHashFunc"/>
          </parameter>
          <parameter name="key_equal_func"
                     transfer-ownership="none"
                     scope="call">
            <doc xml:space="preserve"
                 filename="src/camel/camel-object-bag.c"
                 line="156">a comparison function for keys</doc>
            <type name="GLib.EqualFunc" c:type="GEqualFunc"/>
          </parameter>
          <parameter name="key_copy_func"
                     transfer-ownership="none"
                     scope="call">
            <doc xml:space="preserve"
                 filename="src/camel/camel-object-bag.c"
                 line="157">a function to copy keys</doc>
            <type name="CopyFunc" c:type="CamelCopyFunc"/>
          </parameter>
          <parameter name="key_free_func"
                     transfer-ownership="none"
                     scope="call">
            <doc xml:space="preserve"
                 filename="src/camel/camel-object-bag.c"
                 line="158">a function to free keys</doc>
            <type name="GLib.FreeFunc" c:type="GFreeFunc"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="ObjectClass"
            c:type="CamelObjectClass"
            glib:is-gtype-struct-for="Object">
      <source-position filename="src/camel/camel-object.h" line="108"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="state_read">
        <callback name="state_read">
          <source-position filename="src/camel/camel-object.h" line="101"/>
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="CamelObject*"/>
            </parameter>
            <parameter name="fp"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="gpointer" c:type="FILE*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="state_write">
        <callback name="state_write">
          <source-position filename="src/camel/camel-object.h" line="103"/>
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="CamelObject*"/>
            </parameter>
            <parameter name="fp"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="gpointer" c:type="FILE*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="ObjectPrivate"
            c:type="CamelObjectPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-object.h" line="65"/>
    </record>
    <class name="OfflineFolder"
           c:symbol-prefix="offline_folder"
           c:type="CamelOfflineFolder"
           parent="Folder"
           glib:type-name="CamelOfflineFolder"
           glib:get-type="camel_offline_folder_get_type"
           glib:type-struct="OfflineFolderClass">
      <source-position filename="src/camel/camel-offline-folder.h" line="71"/>
      <virtual-method name="downsync_sync"
                      invoker="downsync_sync"
                      version="3.0"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-offline-folder.c"
             line="582">Synchronizes messages in @folder described by the search @expression to
the local machine for offline availability.</doc>
        <source-position filename="src/camel/camel-offline-folder.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-offline-folder.c"
               line="593">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-folder.c"
                 line="584">a #CamelOfflineFolder</doc>
            <type name="OfflineFolder" c:type="CamelOfflineFolder*"/>
          </instance-parameter>
          <parameter name="expression"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-folder.c"
                 line="585">search expression describing which set of messages
             to downsync (%NULL for all)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-folder.c"
                 line="587">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="can_downsync"
              c:identifier="camel_offline_folder_can_downsync"
              version="3.22">
        <doc xml:space="preserve"
             filename="src/camel/camel-offline-folder.c"
             line="543">Checks whether the @folder can run downsync according to its
settings (camel_offline_folder_get_offline_sync()) and to
the parent's #CamelOfflineStore settings (camel_offline_settings_get_stay_synchronized()).</doc>
        <source-position filename="src/camel/camel-offline-folder.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-offline-folder.c"
               line="551">%TRUE, when the @folder can be synchronized for offline; %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-folder.c"
                 line="545">a #CamelOfflineFolder</doc>
            <type name="OfflineFolder" c:type="CamelOfflineFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="downsync"
              c:identifier="camel_offline_folder_downsync"
              version="3.0">
        <doc xml:space="preserve"
             filename="src/camel/camel-offline-folder.c"
             line="644">Synchronizes messages in @folder described by the search @expression to
the local machine asynchronously for offline availability.

When the operation is finished, @callback will be called.  You can then
call camel_offline_folder_downsync_finish() to get the result of the
operation.</doc>
        <source-position filename="src/camel/camel-offline-folder.h"
                         line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-folder.c"
                 line="646">a #CamelOfflineFolder</doc>
            <type name="OfflineFolder" c:type="CamelOfflineFolder*"/>
          </instance-parameter>
          <parameter name="expression"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-folder.c"
                 line="647">search expression describing which set of messages
             to downsync (%NULL for all)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-folder.c"
                 line="649">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-folder.c"
                 line="650">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-folder.c"
                 line="651">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-folder.c"
                 line="652">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="downsync_finish"
              c:identifier="camel_offline_folder_downsync_finish"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-offline-folder.c"
             line="692">Finishes the operation started with camel_offline_folder_downsync().</doc>
        <source-position filename="src/camel/camel-offline-folder.h"
                         line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-offline-folder.c"
               line="700">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-folder.c"
                 line="694">a #CamelOfflineFolder</doc>
            <type name="OfflineFolder" c:type="CamelOfflineFolder*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-folder.c"
                 line="695">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="downsync_sync"
              c:identifier="camel_offline_folder_downsync_sync"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-offline-folder.c"
             line="582">Synchronizes messages in @folder described by the search @expression to
the local machine for offline availability.</doc>
        <source-position filename="src/camel/camel-offline-folder.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-offline-folder.c"
               line="593">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-folder.c"
                 line="584">a #CamelOfflineFolder</doc>
            <type name="OfflineFolder" c:type="CamelOfflineFolder*"/>
          </instance-parameter>
          <parameter name="expression"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-folder.c"
                 line="585">search expression describing which set of messages
             to downsync (%NULL for all)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-folder.c"
                 line="587">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_offline_sync"
              c:identifier="camel_offline_folder_get_offline_sync"
              glib:get-property="offline-sync"
              version="2.32">
        <source-position filename="src/camel/camel-offline-folder.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <type name="ThreeState" c:type="CamelThreeState"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-folder.c"
                 line="508">a #CamelOfflineFolder</doc>
            <type name="OfflineFolder" c:type="CamelOfflineFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_offline_sync"
              c:identifier="camel_offline_folder_set_offline_sync"
              glib:set-property="offline-sync"
              version="2.32">
        <doc xml:space="preserve"
             filename="src/camel/camel-offline-folder.c"
             line="520">The %CAMEL_THREE_STATE_INCONSISTENT means what the parent store has set.</doc>
        <source-position filename="src/camel/camel-offline-folder.h"
                         line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-folder.c"
                 line="522">a #CamelOfflineFolder</doc>
            <type name="OfflineFolder" c:type="CamelOfflineFolder*"/>
          </instance-parameter>
          <parameter name="offline_sync" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-folder.c"
                 line="523">whether to synchronize for offline use, as a #CamelThreeState enum</doc>
            <type name="ThreeState" c:type="CamelThreeState"/>
          </parameter>
        </parameters>
      </method>
      <property name="offline-sync"
                writable="1"
                transfer-ownership="none"
                setter="set_offline_sync"
                getter="get_offline_sync"
                default-value="CAMEL_THREE_STATE_INCONSISTENT">
        <type name="ThreeState"/>
      </property>
      <field name="parent">
        <type name="Folder" c:type="CamelFolder"/>
      </field>
      <field name="priv">
        <type name="OfflineFolderPrivate" c:type="CamelOfflineFolderPrivate*"/>
      </field>
    </class>
    <record name="OfflineFolderClass"
            c:type="CamelOfflineFolderClass"
            glib:is-gtype-struct-for="OfflineFolder">
      <source-position filename="src/camel/camel-offline-folder.h" line="71"/>
      <field name="parent_class">
        <type name="FolderClass" c:type="CamelFolderClass"/>
      </field>
      <field name="downsync_sync">
        <callback name="downsync_sync" throws="1">
          <source-position filename="src/camel/camel-offline-folder.h"
                           line="64"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-folder.c"
                 line="593">%TRUE on success, %FALSE on error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-offline-folder.c"
                   line="584">a #CamelOfflineFolder</doc>
              <type name="OfflineFolder" c:type="CamelOfflineFolder*"/>
            </parameter>
            <parameter name="expression"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-offline-folder.c"
                   line="585">search expression describing which set of messages
             to downsync (%NULL for all)</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-offline-folder.c"
                   line="587">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="OfflineFolderPrivate"
            c:type="CamelOfflineFolderPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-offline-folder.h" line="53"/>
    </record>
    <class name="OfflineSettings"
           c:symbol-prefix="offline_settings"
           c:type="CamelOfflineSettings"
           version="3.2"
           parent="StoreSettings"
           glib:type-name="CamelOfflineSettings"
           glib:get-type="camel_offline_settings_get_type"
           glib:type-struct="OfflineSettingsClass">
      <doc xml:space="preserve"
           filename="src/camel/camel-offline-settings.h"
           line="49">Contains only private data that should be read and manipulated using the
functions below.</doc>
      <source-position filename="src/camel/camel-offline-settings.h"
                       line="72"/>
      <method name="get_limit_by_age"
              c:identifier="camel_offline_settings_get_limit_by_age"
              glib:get-property="limit-by-age"
              version="3.24">
        <source-position filename="src/camel/camel-offline-settings.h"
                         line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-offline-settings.c"
               line="283">whether limit messages stored for offline use by their age</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-settings.c"
                 line="281">a #CamelOfflineSettings</doc>
            <type name="OfflineSettings" c:type="CamelOfflineSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_limit_unit"
              c:identifier="camel_offline_settings_get_limit_unit"
              glib:get-property="limit-unit"
              version="3.24">
        <source-position filename="src/camel/camel-offline-settings.h"
                         line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-offline-settings.c"
               line="324">the limit unit to use when interpreting 'limit-value'</doc>
          <type name="TimeUnit" c:type="CamelTimeUnit"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-settings.c"
                 line="322">a #CamelOfflineSettings</doc>
            <type name="OfflineSettings" c:type="CamelOfflineSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_limit_value"
              c:identifier="camel_offline_settings_get_limit_value"
              glib:get-property="limit-value"
              version="3.24">
        <source-position filename="src/camel/camel-offline-settings.h"
                         line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-offline-settings.c"
               line="364">the limit, in 'limit-unit', to use when 'limit-by-age' is set to %TRUE</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-settings.c"
                 line="362">a #CamelOfflineSettings</doc>
            <type name="OfflineSettings" c:type="CamelOfflineSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stay_synchronized"
              c:identifier="camel_offline_settings_get_stay_synchronized"
              glib:get-property="stay-synchronized"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-offline-settings.c"
             line="190">Returns whether to synchronize the local cache with the remote server
before switching to offline mode, so the store's content can still be
read while offline.</doc>
        <source-position filename="src/camel/camel-offline-settings.h"
                         line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-offline-settings.c"
               line="198">whether to stay synchronized with the remote server</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-settings.c"
                 line="192">a #CamelOfflineSettings</doc>
            <type name="OfflineSettings" c:type="CamelOfflineSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_store_changes_interval"
              c:identifier="camel_offline_settings_get_store_changes_interval"
              version="3.18"
              deprecated="1"
              deprecated-version="3.40">
        <doc xml:space="preserve"
             filename="src/camel/camel-offline-settings.c"
             line="235">Returns the interval, in seconds, for the changes in the folder being
saved automatically. 0 means immediately, while -1 means turning off
automatic folder change saving.</doc>
        <doc-deprecated xml:space="preserve">Use camel_store_settings_get_store_changes_interval() instead</doc-deprecated>
        <source-position filename="src/camel/camel-offline-settings.h"
                         line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-offline-settings.c"
               line="243">the interval for automatic store of folder changes</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-settings.c"
                 line="237">a #CamelOfflineSettings</doc>
            <type name="OfflineSettings" c:type="CamelOfflineSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_limit_by_age"
              c:identifier="camel_offline_settings_set_limit_by_age"
              glib:set-property="limit-by-age"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-offline-settings.c"
             line="295">Set whether the messages to download for offline should be limited
by age. If set to %TRUE, then messages older than 'limit-value'
will not be downloaded automatically.</doc>
        <source-position filename="src/camel/camel-offline-settings.h"
                         line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-settings.c"
                 line="297">a #CamelOfflineSettings</doc>
            <type name="OfflineSettings" c:type="CamelOfflineSettings*"/>
          </instance-parameter>
          <parameter name="limit_by_age" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-settings.c"
                 line="298">a value to set</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_limit_unit"
              c:identifier="camel_offline_settings_set_limit_unit"
              glib:set-property="limit-unit"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-offline-settings.c"
             line="336">Set the limit unit to use when interpreting 'limit-value'.</doc>
        <source-position filename="src/camel/camel-offline-settings.h"
                         line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-settings.c"
                 line="338">a #CamelOfflineSettings</doc>
            <type name="OfflineSettings" c:type="CamelOfflineSettings*"/>
          </instance-parameter>
          <parameter name="limit_unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-settings.c"
                 line="339">a #CamelTimeUnit with a unit to use</doc>
            <type name="TimeUnit" c:type="CamelTimeUnit"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_limit_value"
              c:identifier="camel_offline_settings_set_limit_value"
              glib:set-property="limit-value"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-offline-settings.c"
             line="376">Set the limit, in 'limit-unit', to use when 'limit-by-age' is set to %TRUE.</doc>
        <source-position filename="src/camel/camel-offline-settings.h"
                         line="100"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-settings.c"
                 line="378">a #CamelOfflineSettings</doc>
            <type name="OfflineSettings" c:type="CamelOfflineSettings*"/>
          </instance-parameter>
          <parameter name="limit_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-settings.c"
                 line="379">a value to set</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_stay_synchronized"
              c:identifier="camel_offline_settings_set_stay_synchronized"
              glib:set-property="stay-synchronized"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-offline-settings.c"
             line="210">Sets whether to synchronize the local cache with the remote server before
switching to offline mode, so the store's content can still be read while
offline.</doc>
        <source-position filename="src/camel/camel-offline-settings.h"
                         line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-settings.c"
                 line="212">a #CamelOfflineSettings</doc>
            <type name="OfflineSettings" c:type="CamelOfflineSettings*"/>
          </instance-parameter>
          <parameter name="stay_synchronized" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-settings.c"
                 line="213">whether to stay synchronized with the remote server</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_store_changes_interval"
              c:identifier="camel_offline_settings_set_store_changes_interval"
              version="3.18"
              deprecated="1"
              deprecated-version="3.40">
        <doc xml:space="preserve"
             filename="src/camel/camel-offline-settings.c"
             line="257">Sets the interval, in seconds, for the changes in the folder being
saved automatically. 0 means immediately, while -1 means turning off
automatic folder change saving.</doc>
        <doc-deprecated xml:space="preserve">Use camel_store_settings_set_store_changes_interval() instead</doc-deprecated>
        <source-position filename="src/camel/camel-offline-settings.h"
                         line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-settings.c"
                 line="259">a #CamelOfflineSettings</doc>
            <type name="OfflineSettings" c:type="CamelOfflineSettings*"/>
          </instance-parameter>
          <parameter name="interval" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-settings.c"
                 line="260">the interval, in seconds</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="limit-by-age"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_limit_by_age"
                getter="get_limit_by_age"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="limit-unit"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_limit_unit"
                getter="get_limit_unit"
                default-value="CAMEL_TIME_UNIT_YEARS">
        <type name="TimeUnit"/>
      </property>
      <property name="limit-value"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_limit_value"
                getter="get_limit_value"
                default-value="1">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="stay-synchronized"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_stay_synchronized"
                getter="get_stay_synchronized"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="StoreSettings" c:type="CamelStoreSettings"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="OfflineSettingsPrivate"
              c:type="CamelOfflineSettingsPrivate*"/>
      </field>
    </class>
    <record name="OfflineSettingsClass"
            c:type="CamelOfflineSettingsClass"
            glib:is-gtype-struct-for="OfflineSettings">
      <source-position filename="src/camel/camel-offline-settings.h"
                       line="72"/>
      <field name="parent_class">
        <type name="StoreSettingsClass" c:type="CamelStoreSettingsClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="OfflineSettingsPrivate"
            c:type="CamelOfflineSettingsPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-offline-settings.h"
                       line="59"/>
    </record>
    <class name="OfflineStore"
           c:symbol-prefix="offline_store"
           c:type="CamelOfflineStore"
           parent="Store"
           glib:type-name="CamelOfflineStore"
           glib:get-type="camel_offline_store_get_type"
           glib:type-struct="OfflineStoreClass">
      <source-position filename="src/camel/camel-offline-store.h" line="66"/>
      <implements name="Gio.Initable"/>
      <virtual-method name="dup_downsync_folders"
                      invoker="dup_downsync_folders"
                      version="3.28">
        <doc xml:space="preserve"
             filename="src/camel/camel-offline-store.c"
             line="586">Returns a #GPtrArray of #CamelFolder objects which should be checked
for offline synchronization. Free the returned pointer with the below
calls, when no longer needed:

|[
    g_ptr_array_foreach (array, (GFunc) g_object_unref, NULL);
    g_ptr_array_free (array, TRUE);
]|</doc>
        <source-position filename="src/camel/camel-offline-store.h" line="62"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-offline-store.c"
               line="599">an array with folders
  to be checked for offline synchronization.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Folder"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-store.c"
                 line="588">a #CamelOfflineStore</doc>
            <type name="OfflineStore" c:type="CamelOfflineStore*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="dup_downsync_folders"
              c:identifier="camel_offline_store_dup_downsync_folders"
              version="3.28">
        <doc xml:space="preserve"
             filename="src/camel/camel-offline-store.c"
             line="586">Returns a #GPtrArray of #CamelFolder objects which should be checked
for offline synchronization. Free the returned pointer with the below
calls, when no longer needed:

|[
    g_ptr_array_foreach (array, (GFunc) g_object_unref, NULL);
    g_ptr_array_free (array, TRUE);
]|</doc>
        <source-position filename="src/camel/camel-offline-store.h" line="91"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-offline-store.c"
               line="599">an array with folders
  to be checked for offline synchronization.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Folder"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-store.c"
                 line="588">a #CamelOfflineStore</doc>
            <type name="OfflineStore" c:type="CamelOfflineStore*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_online"
              c:identifier="camel_offline_store_get_online"
              glib:get-property="online"
              version="2.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-offline-store.c"
             line="215">Returns %TRUE if @store is online.</doc>
        <source-position filename="src/camel/camel-offline-store.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-store.c"
                 line="217">a #CamelOfflineStore</doc>
            <type name="OfflineStore" c:type="CamelOfflineStore*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepare_for_offline_sync"
              c:identifier="camel_offline_store_prepare_for_offline_sync"
              version="2.22"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-offline-store.c"
             line="456">Downloads messages for offline, when setup to do so and when
the host is reachable.</doc>
        <source-position filename="src/camel/camel-offline-store.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-offline-store.c"
               line="465">whether succeeded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-store.c"
                 line="458">a #CamelOfflineStore</doc>
            <type name="OfflineStore" c:type="CamelOfflineStore*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-store.c"
                 line="459">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="requires_downsync"
              c:identifier="camel_offline_store_requires_downsync"
              version="3.12">
        <doc xml:space="preserve"
             filename="src/camel/camel-offline-store.c"
             line="522">Check whether the @store requires synchronization for offline usage.
This is not blocking, it only checks settings on the store and its
currently opened folders.

Returns %TRUE if the @store requires synchronization for offline usage</doc>
        <source-position filename="src/camel/camel-offline-store.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-store.c"
                 line="524">a #CamelOfflineStore</doc>
            <type name="OfflineStore" c:type="CamelOfflineStore*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_online"
              c:identifier="camel_offline_store_set_online"
              version="3.26">
        <doc xml:space="preserve"
             filename="src/camel/camel-offline-store.c"
             line="395">An asynchronous variant of camel_offline_store_set_online_sync().
Call camel_offline_store_set_online_finish() from within the @callback.</doc>
        <source-position filename="src/camel/camel-offline-store.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-store.c"
                 line="397">a #CamelOfflineStore</doc>
            <type name="OfflineStore" c:type="CamelOfflineStore*"/>
          </instance-parameter>
          <parameter name="online" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-store.c"
                 line="398">%TRUE for online, %FALSE for offline</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-store.c"
                 line="399">the I/O priority for the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-store.c"
                 line="400">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-store.c"
                 line="401">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-store.c"
                 line="402">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_online_finish"
              c:identifier="camel_offline_store_set_online_finish"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-offline-store.c"
             line="432">Finishes the operation started with camel_offline_store_set_online().</doc>
        <source-position filename="src/camel/camel-offline-store.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-offline-store.c"
               line="440">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-store.c"
                 line="434">a #CamelOfflineStore</doc>
            <type name="OfflineStore" c:type="CamelOfflineStore*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-store.c"
                 line="435">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_online_sync"
              c:identifier="camel_offline_store_set_online_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-offline-store.c"
             line="241">Sets the online/offline state of @store according to @online.</doc>
        <source-position filename="src/camel/camel-offline-store.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-offline-store.c"
               line="250">Whether succeeded.

See: camel_offline_store_set_online</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-store.c"
                 line="243">a #CamelOfflineStore</doc>
            <type name="OfflineStore" c:type="CamelOfflineStore*"/>
          </instance-parameter>
          <parameter name="online" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-store.c"
                 line="244">%TRUE for online, %FALSE for offline</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-store.c"
                 line="245">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <property name="online"
                transfer-ownership="none"
                getter="get_online"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="Store" c:type="CamelStore"/>
      </field>
      <field name="priv">
        <type name="OfflineStorePrivate" c:type="CamelOfflineStorePrivate*"/>
      </field>
    </class>
    <record name="OfflineStoreClass"
            c:type="CamelOfflineStoreClass"
            glib:is-gtype-struct-for="OfflineStore">
      <source-position filename="src/camel/camel-offline-store.h" line="66"/>
      <field name="parent_class">
        <type name="StoreClass" c:type="CamelStoreClass"/>
      </field>
      <field name="dup_downsync_folders">
        <callback name="dup_downsync_folders">
          <source-position filename="src/camel/camel-offline-store.h"
                           line="62"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-offline-store.c"
                 line="599">an array with folders
  to be checked for offline synchronization.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="Folder"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="store" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-offline-store.c"
                   line="588">a #CamelOfflineStore</doc>
              <type name="OfflineStore" c:type="CamelOfflineStore*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="19">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="OfflineStorePrivate"
            c:type="CamelOfflineStorePrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-offline-store.h" line="52"/>
    </record>
    <class name="Operation"
           c:symbol-prefix="operation"
           c:type="CamelOperation"
           parent="Gio.Cancellable"
           glib:type-name="CamelOperation"
           glib:get-type="camel_operation_get_type"
           glib:type-struct="OperationClass">
      <source-position filename="src/camel/camel-operation.h" line="67"/>
      <constructor name="new" c:identifier="camel_operation_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-operation.c"
             line="236">Create a new camel operation handle.  Camel operation handles can
be used in a multithreaded application (or a single operation
handle can be used in a non threaded appliation) to cancel running
operations and to obtain notification messages of the internal
status of messages.</doc>
        <source-position filename="src/camel/camel-operation.h" line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-operation.c"
               line="245">A new operation handle.</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </return-value>
      </constructor>
      <constructor name="new_proxy"
                   c:identifier="camel_operation_new_proxy"
                   version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-operation.c"
             line="253">Proxies the @cancellable in a way that if it is cancelled,
then the returned cancellable is also cancelled, but when
the returned cancellable is cancelled, then it doesn't
influence the original cancellable. Other CamelOperation
actions being done on the returned cancellable are also
propagated to the @cancellable.

The passed-in @cancellable can be %NULL, in which case
a plain CamelOperation is returned.

This is useful when some operation can be cancelled from
elsewhere (like by a user), but also by the code on its own,
when it doesn't make sense to cancel also any larger operation
to which the passed-in cancellable belongs.</doc>
        <source-position filename="src/camel/camel-operation.h" line="71"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-operation.c"
               line="272">A new operation handle, proxying @cancellable.</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </return-value>
        <parameters>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-operation.c"
                 line="255">a #GCancellable to proxy</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="cancel_all" c:identifier="camel_operation_cancel_all">
        <doc xml:space="preserve"
             filename="src/camel/camel-operation.c"
             line="303">Cancel all outstanding operations.</doc>
        <source-position filename="src/camel/camel-operation.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="pop_message" c:identifier="camel_operation_pop_message">
        <doc xml:space="preserve"
             filename="src/camel/camel-operation.c"
             line="397">Pops the most recently pushed message.

This function only works if @cancellable is a #CamelOperation cast as a
#GCancellable.  If @cancellable is a plain #GCancellable or %NULL, the
function does nothing and returns silently.</doc>
        <source-position filename="src/camel/camel-operation.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-operation.c"
                 line="399">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </function>
      <function name="progress" c:identifier="camel_operation_progress">
        <doc xml:space="preserve"
             filename="src/camel/camel-operation.c"
             line="458">Report progress on the current operation.  @percent reports the current
percentage of completion, which should be in the range of 0 to 100.

This function only works if @cancellable is a #CamelOperation cast as a
#GCancellable.  If @cancellable is a plain #GCancellable or %NULL, the
function does nothing and returns silently.</doc>
        <source-position filename="src/camel/camel-operation.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-operation.c"
                 line="460">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="percent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-operation.c"
                 line="461">percent complete, 0 to 100.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="push_message"
                c:identifier="camel_operation_push_message"
                introspectable="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-operation.c"
             line="328">Call this function to describe an operation being performed.
Call camel_operation_progress() to report progress on the operation.
Call camel_operation_pop_message() when the operation is complete.

This function only works if @cancellable is a #CamelOperation cast as a
#GCancellable.  If @cancellable is a plain #GCancellable or %NULL, the
function does nothing and returns silently.</doc>
        <source-position filename="src/camel/camel-operation.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-operation.c"
                 line="330">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-operation.c"
                 line="331">a standard printf() format string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-operation.c"
                 line="332">the parameters to insert into the format string</doc>
            <varargs/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="status">
        <source-position filename="src/camel/camel-operation.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="operation" transfer-ownership="none">
            <type name="Operation" c:type="CamelOperation*"/>
          </instance-parameter>
          <parameter name="what" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="pc" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <field name="parent">
        <type name="Gio.Cancellable" c:type="GCancellable"/>
      </field>
      <field name="priv">
        <type name="OperationPrivate" c:type="CamelOperationPrivate*"/>
      </field>
      <glib:signal name="pop-message" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="progress" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="push-message" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="status" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="OperationClass"
            c:type="CamelOperationClass"
            glib:is-gtype-struct-for="Operation">
      <source-position filename="src/camel/camel-operation.h" line="67"/>
      <field name="parent_class">
        <type name="Gio.CancellableClass" c:type="GCancellableClass"/>
      </field>
      <field name="status">
        <callback name="status">
          <source-position filename="src/camel/camel-operation.h" line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="operation" transfer-ownership="none">
              <type name="Operation" c:type="CamelOperation*"/>
            </parameter>
            <parameter name="what" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="pc" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="OperationPrivate"
            c:type="CamelOperationPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-operation.h" line="50"/>
    </record>
    <function-macro name="PARTITION_TABLE"
                    c:identifier="CAMEL_PARTITION_TABLE"
                    introspectable="0">
      <source-position filename="src/camel/camel-partition-table.h" line="30"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_TABLE_CLASS"
                    c:identifier="CAMEL_PARTITION_TABLE_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-partition-table.h" line="33"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_TABLE_GET_CLASS"
                    c:identifier="CAMEL_PARTITION_TABLE_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-partition-table.h" line="42"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PROVIDER"
                    c:identifier="CAMEL_PROVIDER"
                    introspectable="0">
      <source-position filename="src/camel/camel-provider.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PROVIDER_ALLOWS"
                    c:identifier="CAMEL_PROVIDER_ALLOWS"
                    introspectable="0">
      <source-position filename="src/camel/camel-provider.h" line="69"/>
      <parameters>
        <parameter name="prov">
        </parameter>
        <parameter name="flags">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PROVIDER_HIDDEN"
                    c:identifier="CAMEL_PROVIDER_HIDDEN"
                    introspectable="0">
      <source-position filename="src/camel/camel-provider.h" line="73"/>
      <parameters>
        <parameter name="prov">
        </parameter>
        <parameter name="flags">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PROVIDER_IS_STORE_AND_TRANSPORT"
                    c:identifier="CAMEL_PROVIDER_IS_STORE_AND_TRANSPORT"
                    introspectable="0">
      <source-position filename="src/camel/camel-provider.h" line="104"/>
      <parameters>
        <parameter name="provider">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PROVIDER_NEEDS"
                    c:identifier="CAMEL_PROVIDER_NEEDS"
                    introspectable="0">
      <source-position filename="src/camel/camel-provider.h" line="71"/>
      <parameters>
        <parameter name="prov">
        </parameter>
        <parameter name="flags">
        </parameter>
      </parameters>
    </function-macro>
    <bitfield name="ParamFlags" version="2.32" c:type="CamelParamFlags">
      <doc xml:space="preserve"
           filename="src/camel/camel-object.h"
           line="67">These flags extend #GParamFlags.  Most of the time you will use them
in conjunction with g_object_class_install_property().</doc>
      <source-position filename="src/camel/camel-object.h" line="81"/>
      <member name="param_persistent"
              value="256"
              c:identifier="CAMEL_PARAM_PERSISTENT">
        <doc xml:space="preserve"
             filename="src/camel/camel-object.h"
             line="69">The parameter is persistent, which means its value is saved to
    #CamelObject:state-filename during camel_object_state_write(),
    and restored during camel_object_state_read().</doc>
      </member>
    </bitfield>
    <record name="PartitionKey" c:type="CamelPartitionKey">
      <source-position filename="src/camel/camel-partition-table.h" line="85"/>
      <field name="hashid" writable="1">
        <type name="_hash_t" c:type="camel_hash_t"/>
      </field>
      <field name="keyid" writable="1">
        <type name="_key_t" c:type="camel_key_t"/>
      </field>
    </record>
    <record name="PartitionKeyBlock" c:type="CamelPartitionKeyBlock">
      <source-position filename="src/camel/camel-partition-table.h" line="90"/>
      <field name="used" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="keys" writable="1">
        <array zero-terminated="0" fixed-size="0">
          <type name="gpointer" c:type="_CamelPartitionKey"/>
        </array>
      </field>
    </record>
    <record name="PartitionMap" c:type="CamelPartitionMap">
      <source-position filename="src/camel/camel-partition-table.h" line="95"/>
      <field name="hashid" writable="1">
        <type name="_hash_t" c:type="camel_hash_t"/>
      </field>
      <field name="blockid" writable="1">
        <type name="_block_t" c:type="camel_block_t"/>
      </field>
    </record>
    <record name="PartitionMapBlock" c:type="CamelPartitionMapBlock">
      <source-position filename="src/camel/camel-partition-table.h"
                       line="101"/>
      <field name="next" writable="1">
        <type name="_block_t" c:type="camel_block_t"/>
      </field>
      <field name="used" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="partition" writable="1">
        <array zero-terminated="0" fixed-size="0">
          <type name="gpointer" c:type="_CamelPartitionMap"/>
        </array>
      </field>
    </record>
    <class name="PartitionTable"
           c:symbol-prefix="partition_table"
           c:type="CamelPartitionTable"
           parent="GObject.Object"
           glib:type-name="CamelPartitionTable"
           glib:get-type="camel_partition_table_get_type"
           glib:type-struct="PartitionTableClass">
      <source-position filename="src/camel/camel-partition-table.h"
                       line="113"/>
      <constructor name="new" c:identifier="camel_partition_table_new">
        <source-position filename="src/camel/camel-partition-table.h"
                         line="117"/>
        <return-value transfer-ownership="full">
          <type name="PartitionTable" c:type="CamelPartitionTable*"/>
        </return-value>
        <parameters>
          <parameter name="bs" transfer-ownership="none">
            <type name="BlockFile" c:type="CamelBlockFile*"/>
          </parameter>
          <parameter name="root" transfer-ownership="none">
            <type name="_block_t" c:type="camel_block_t"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add" c:identifier="camel_partition_table_add">
        <source-position filename="src/camel/camel-partition-table.h"
                         line="120"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cpi" transfer-ownership="none">
            <type name="PartitionTable" c:type="CamelPartitionTable*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="keyid" transfer-ownership="none">
            <type name="_key_t" c:type="camel_key_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup" c:identifier="camel_partition_table_lookup">
        <source-position filename="src/camel/camel-partition-table.h"
                         line="123"/>
        <return-value transfer-ownership="none">
          <type name="_key_t" c:type="camel_key_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="cpi" transfer-ownership="none">
            <type name="PartitionTable" c:type="CamelPartitionTable*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="camel_partition_table_remove">
        <source-position filename="src/camel/camel-partition-table.h"
                         line="125"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="cpi" transfer-ownership="none">
            <type name="PartitionTable" c:type="CamelPartitionTable*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sync" c:identifier="camel_partition_table_sync">
        <source-position filename="src/camel/camel-partition-table.h"
                         line="119"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cpi" transfer-ownership="none">
            <type name="PartitionTable" c:type="CamelPartitionTable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="PartitionTablePrivate"
              c:type="CamelPartitionTablePrivate*"/>
      </field>
    </class>
    <record name="PartitionTableClass"
            c:type="CamelPartitionTableClass"
            glib:is-gtype-struct-for="PartitionTable">
      <source-position filename="src/camel/camel-partition-table.h"
                       line="113"/>
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="PartitionTablePrivate"
            c:type="CamelPartitionTablePrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-partition-table.h" line="80"/>
    </record>
    <record name="Provider"
            c:type="CamelProvider"
            glib:type-name="CamelProvider"
            glib:get-type="camel_provider_get_type"
            c:symbol-prefix="provider">
      <source-position filename="src/camel/camel-provider.h" line="205"/>
      <field name="protocol" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="name" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="description" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="domain" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="flags" writable="1">
        <type name="ProviderFlags" c:type="CamelProviderFlags"/>
      </field>
      <field name="url_flags" writable="1">
        <type name="ProviderURLFlags" c:type="CamelProviderURLFlags"/>
      </field>
      <field name="extra_conf" writable="1">
        <type name="ProviderConfEntry" c:type="CamelProviderConfEntry*"/>
      </field>
      <field name="port_entries" writable="1">
        <type name="ProviderPortEntry" c:type="CamelProviderPortEntry*"/>
      </field>
      <field name="auto_detect" writable="1">
        <type name="ProviderAutoDetectFunc"
              c:type="CamelProviderAutoDetectFunc"/>
      </field>
      <field name="object_types" writable="1">
        <array zero-terminated="0">
          <type name="GType" c:type="GType"/>
        </array>
      </field>
      <field name="authtypes" writable="1">
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="url_hash" writable="1">
        <type name="GLib.HashFunc" c:type="GHashFunc"/>
      </field>
      <field name="url_equal" writable="1">
        <type name="GLib.EqualFunc" c:type="GEqualFunc"/>
      </field>
      <field name="translation_domain" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="priv" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <method name="auto_detect"
              c:identifier="camel_provider_auto_detect"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-provider.c"
             line="507">After filling in the standard Username/Hostname/Port/Path settings
(which must be set in @url), if the provider supports it, you
may wish to have the provider auto-detect further settings based on
the aformentioned settings.

If the provider does not support auto-detection, @auto_detected
will be set to %NULL. Otherwise the provider will attempt to
auto-detect whatever it can and file them into @auto_detected. If
for some reason it cannot auto-detect anything (not enough
information provided in @url?) then @auto_detected will be
set to %NULL and an exception may be set to explain why it failed.</doc>
        <source-position filename="src/camel/camel-provider.h" line="229"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-provider.c"
               line="527">0 on success or -1 on fail.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-provider.c"
                 line="509">camel provider</doc>
            <type name="Provider" c:type="CamelProvider*"/>
          </instance-parameter>
          <parameter name="url" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-provider.c"
                 line="510">a #CamelURL</doc>
            <type name="URL" c:type="CamelURL*"/>
          </parameter>
          <parameter name="auto_detected"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-provider.c"
                 line="511">output
#GHashTable of auto-detected values</doc>
            <type name="GLib.HashTable" c:type="GHashTable**">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="register" c:identifier="camel_provider_register">
        <doc xml:space="preserve"
             filename="src/camel/camel-provider.c"
             line="364">Registers a provider.</doc>
        <source-position filename="src/camel/camel-provider.h" line="221"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-provider.c"
                 line="366">provider object</doc>
            <type name="Provider" c:type="CamelProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="get" c:identifier="camel_provider_get" throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-provider.c"
             line="456">Returns the registered #CamelProvider for @protocol, loading it
from disk if necessary.  If no #CamelProvider can be found for
@protocol, or the provider module fails to load, the function
sets @error and returns %NULL.

The returned #CamelProvider is owned by Camel and should not be
modified or freed.</doc>
        <source-position filename="src/camel/camel-provider.h" line="223"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-provider.c"
               line="469">a #CamelProvider for @protocol, or %NULL on error</doc>
          <type name="Provider" c:type="CamelProvider*"/>
        </return-value>
        <parameters>
          <parameter name="protocol" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-provider.c"
                 line="458">a #CamelProvider protocol name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="init" c:identifier="camel_provider_init">
        <doc xml:space="preserve"
             filename="src/camel/camel-provider.c"
             line="254">Initialize the Camel provider system by reading in the .urls
files in the provider directory and creating a hash table mapping
URLs to module names.

A .urls file has the same initial prefix as the shared library it
correspond to, and consists of a series of lines containing the URL
protocols that that library handles.

TODO: This should be pathed?
TODO: This should be plugin-d?</doc>
        <source-position filename="src/camel/camel-provider.h" line="218"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="list" c:identifier="camel_provider_list">
        <doc xml:space="preserve"
             filename="src/camel/camel-provider.c"
             line="398">This returns a list of available providers. If @load is %TRUE, it will
first load in all available providers that haven't yet been loaded.

Free the returned list with g_list_free().  The #CamelProvider structs
in the list are owned by Camel and should not be modified or freed.</doc>
        <source-position filename="src/camel/camel-provider.h" line="222"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="src/camel/camel-provider.c"
               line="408">a #GList of #CamelProvider structs</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Provider"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="load" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-provider.c"
                 line="400">whether or not to load in providers that are not already loaded</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="load" c:identifier="camel_provider_load" throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-provider.c"
             line="312">Loads the provider at @path, and calls its initialization function,
passing @session as an argument. The provider should then register
itself with @session.</doc>
        <source-position filename="src/camel/camel-provider.h" line="219"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-provider.c"
               line="321">%TRUE on success, %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-provider.c"
                 line="314">the path to a shared library</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <callback name="ProviderAutoDetectFunc"
              c:type="CamelProviderAutoDetectFunc"
              throws="1">
      <doc xml:space="preserve"
           filename="src/camel/camel-provider.h"
           line="132">Function used in camel_provider_auto_detect().</doc>
      <source-position filename="src/camel/camel-provider.h" line="143"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-provider.h"
             line="141">0 on success or -1 on fail.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="url" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-provider.h"
               line="134">a #CamelURL</doc>
          <type name="URL" c:type="CamelURL*"/>
        </parameter>
        <parameter name="auto_detected"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-provider.h"
               line="135">output
#GHashTable of auto-detected values</doc>
          <type name="GLib.HashTable" c:type="GHashTable**">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </parameter>
      </parameters>
    </callback>
    <record name="ProviderConfEntry" c:type="CamelProviderConfEntry">
      <source-position filename="src/camel/camel-provider.h" line="116"/>
      <field name="type" writable="1">
        <type name="ProviderConfType" c:type="CamelProviderConfType"/>
      </field>
      <field name="name" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="depname" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="text" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="value" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
    </record>
    <enumeration name="ProviderConfType"
                 glib:type-name="CamelProviderConfType"
                 glib:get-type="camel_provider_conf_type_get_type"
                 c:type="CamelProviderConfType">
      <member name="end"
              value="0"
              c:identifier="CAMEL_PROVIDER_CONF_END"
              glib:nick="end"
              glib:name="CAMEL_PROVIDER_CONF_END">
      </member>
      <member name="section_start"
              value="1"
              c:identifier="CAMEL_PROVIDER_CONF_SECTION_START"
              glib:nick="section-start"
              glib:name="CAMEL_PROVIDER_CONF_SECTION_START">
      </member>
      <member name="section_end"
              value="2"
              c:identifier="CAMEL_PROVIDER_CONF_SECTION_END"
              glib:nick="section-end"
              glib:name="CAMEL_PROVIDER_CONF_SECTION_END">
      </member>
      <member name="checkbox"
              value="3"
              c:identifier="CAMEL_PROVIDER_CONF_CHECKBOX"
              glib:nick="checkbox"
              glib:name="CAMEL_PROVIDER_CONF_CHECKBOX">
      </member>
      <member name="checkspin"
              value="4"
              c:identifier="CAMEL_PROVIDER_CONF_CHECKSPIN"
              glib:nick="checkspin"
              glib:name="CAMEL_PROVIDER_CONF_CHECKSPIN">
      </member>
      <member name="entry"
              value="5"
              c:identifier="CAMEL_PROVIDER_CONF_ENTRY"
              glib:nick="entry"
              glib:name="CAMEL_PROVIDER_CONF_ENTRY">
      </member>
      <member name="label"
              value="6"
              c:identifier="CAMEL_PROVIDER_CONF_LABEL"
              glib:nick="label"
              glib:name="CAMEL_PROVIDER_CONF_LABEL">
      </member>
      <member name="hidden"
              value="7"
              c:identifier="CAMEL_PROVIDER_CONF_HIDDEN"
              glib:nick="hidden"
              glib:name="CAMEL_PROVIDER_CONF_HIDDEN">
      </member>
      <member name="options"
              value="8"
              c:identifier="CAMEL_PROVIDER_CONF_OPTIONS"
              glib:nick="options"
              glib:name="CAMEL_PROVIDER_CONF_OPTIONS">
      </member>
      <member name="placeholder"
              value="9"
              c:identifier="CAMEL_PROVIDER_CONF_PLACEHOLDER"
              glib:nick="placeholder"
              glib:name="CAMEL_PROVIDER_CONF_PLACEHOLDER">
      </member>
      <member name="advanced_section_start"
              value="10"
              c:identifier="CAMEL_PROVIDER_CONF_ADVANCED_SECTION_START"
              glib:nick="advanced-section-start"
              glib:name="CAMEL_PROVIDER_CONF_ADVANCED_SECTION_START">
      </member>
    </enumeration>
    <bitfield name="ProviderFlags"
              glib:type-name="CamelProviderFlags"
              glib:get-type="camel_provider_flags_get_type"
              c:type="CamelProviderFlags">
      <member name="is_remote"
              value="1"
              c:identifier="CAMEL_PROVIDER_IS_REMOTE"
              glib:nick="is-remote"
              glib:name="CAMEL_PROVIDER_IS_REMOTE">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="371">Provider works with remote data.</doc>
      </member>
      <member name="is_local"
              value="2"
              c:identifier="CAMEL_PROVIDER_IS_LOCAL"
              glib:nick="is-local"
              glib:name="CAMEL_PROVIDER_IS_LOCAL">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="373">Provider can be used as a backend for local folder tree folders.
  (Not just the opposite of #CAMEL_PROVIDER_IS_REMOTE.)</doc>
      </member>
      <member name="is_external"
              value="4"
              c:identifier="CAMEL_PROVIDER_IS_EXTERNAL"
              glib:nick="is-external"
              glib:name="CAMEL_PROVIDER_IS_EXTERNAL">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="381">Provider appears in the folder tree but is not created by the
  mail component.</doc>
      </member>
      <member name="is_source"
              value="8"
              c:identifier="CAMEL_PROVIDER_IS_SOURCE"
              glib:nick="is-source"
              glib:name="CAMEL_PROVIDER_IS_SOURCE">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="376">Mail arrives there, so it should be offered as an option in the
  mail config dialog.</doc>
      </member>
      <member name="is_storage"
              value="16"
              c:identifier="CAMEL_PROVIDER_IS_STORAGE"
              glib:nick="is-storage"
              glib:name="CAMEL_PROVIDER_IS_STORAGE">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="379">Mail is stored there.  It will appear in the folder tree.</doc>
      </member>
      <member name="supports_ssl"
              value="32"
              c:identifier="CAMEL_PROVIDER_SUPPORTS_SSL"
              glib:nick="supports-ssl"
              glib:name="CAMEL_PROVIDER_SUPPORTS_SSL">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="393">Provider supports SSL/TLS connections.</doc>
      </member>
      <member name="has_license"
              value="64"
              c:identifier="CAMEL_PROVIDER_HAS_LICENSE"
              glib:nick="has-license"
              glib:name="CAMEL_PROVIDER_HAS_LICENSE">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="384">Provider configuration first needs the license to be accepted.
  (No longer used.)</doc>
      </member>
      <member name="disable_sent_folder"
              value="128"
              c:identifier="CAMEL_PROVIDER_DISABLE_SENT_FOLDER"
              glib:nick="disable-sent-folder"
              glib:name="CAMEL_PROVIDER_DISABLE_SENT_FOLDER">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="391">Provider requests to not use the Sent folder when sending with it.</doc>
      </member>
      <member name="allow_real_trash_folder"
              value="256"
              c:identifier="CAMEL_PROVIDER_ALLOW_REAL_TRASH_FOLDER"
              glib:nick="allow-real-trash-folder"
              glib:name="CAMEL_PROVIDER_ALLOW_REAL_TRASH_FOLDER">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="387">Provider may use a real trash folder instead of a virtual folder.</doc>
      </member>
      <member name="allow_real_junk_folder"
              value="512"
              c:identifier="CAMEL_PROVIDER_ALLOW_REAL_JUNK_FOLDER"
              glib:nick="allow-real-junk-folder"
              glib:name="CAMEL_PROVIDER_ALLOW_REAL_JUNK_FOLDER">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="389">Provider may use a real junk folder instead of a virtual folder.</doc>
      </member>
      <member name="supports_mobile_devices"
              value="1024"
              c:identifier="CAMEL_PROVIDER_SUPPORTS_MOBILE_DEVICES"
              glib:nick="supports-mobile-devices"
              glib:name="CAMEL_PROVIDER_SUPPORTS_MOBILE_DEVICES">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="395">Download limited set of emails instead of operating on full cache.</doc>
      </member>
      <member name="supports_batch_fetch"
              value="2048"
              c:identifier="CAMEL_PROVIDER_SUPPORTS_BATCH_FETCH"
              glib:nick="supports-batch-fetch"
              glib:name="CAMEL_PROVIDER_SUPPORTS_BATCH_FETCH">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="397">Support to fetch messages in batch.</doc>
      </member>
      <member name="supports_purge_message_cache"
              value="4096"
              c:identifier="CAMEL_PROVIDER_SUPPORTS_PURGE_MESSAGE_CACHE"
              glib:nick="supports-purge-message-cache"
              glib:name="CAMEL_PROVIDER_SUPPORTS_PURGE_MESSAGE_CACHE">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="399">Support to remove oldest downloaded messages to conserve space.</doc>
      </member>
    </bitfield>
    <record name="ProviderModule" c:type="CamelProviderModule">
      <source-position filename="src/camel/camel-provider.h" line="213"/>
      <field name="path" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="types" writable="1">
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="loaded" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <function name="init" c:identifier="camel_provider_module_init">
        <source-position filename="src/camel/camel-provider.h" line="227"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
    </record>
    <record name="ProviderPortEntry"
            c:type="CamelProviderPortEntry"
            version="3.2">
      <source-position filename="src/camel/camel-provider.h" line="130"/>
      <field name="port" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-provider.h"
             line="120">port number</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="desc" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-provider.h"
             line="121">human description of the port</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="is_ssl" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-provider.h"
             line="122">a boolean whether the port is used together with TLS/SSL</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </record>
    <enumeration name="ProviderType"
                 glib:type-name="CamelProviderType"
                 glib:get-type="camel_provider_type_get_type"
                 c:type="CamelProviderType">
      <member name="store"
              value="0"
              c:identifier="CAMEL_PROVIDER_STORE"
              glib:nick="store"
              glib:name="CAMEL_PROVIDER_STORE">
      </member>
      <member name="transport"
              value="1"
              c:identifier="CAMEL_PROVIDER_TRANSPORT"
              glib:nick="transport"
              glib:name="CAMEL_PROVIDER_TRANSPORT">
      </member>
    </enumeration>
    <bitfield name="ProviderURLFlags" c:type="CamelProviderURLFlags">
      <source-position filename="src/camel/camel-provider.h" line="103"/>
      <member name="allow_user" value="1" c:identifier="CAMEL_URL_ALLOW_USER">
      </member>
      <member name="allow_auth" value="2" c:identifier="CAMEL_URL_ALLOW_AUTH">
      </member>
      <member name="allow_password"
              value="4"
              c:identifier="CAMEL_URL_ALLOW_PASSWORD">
      </member>
      <member name="allow_host" value="8" c:identifier="CAMEL_URL_ALLOW_HOST">
      </member>
      <member name="allow_port" value="16" c:identifier="CAMEL_URL_ALLOW_PORT">
      </member>
      <member name="allow_path" value="32" c:identifier="CAMEL_URL_ALLOW_PATH">
      </member>
      <member name="need_user" value="256" c:identifier="CAMEL_URL_NEED_USER">
      </member>
      <member name="need_auth" value="512" c:identifier="CAMEL_URL_NEED_AUTH">
      </member>
      <member name="need_password"
              value="1024"
              c:identifier="CAMEL_URL_NEED_PASSWORD">
      </member>
      <member name="need_host" value="2048" c:identifier="CAMEL_URL_NEED_HOST">
      </member>
      <member name="need_port" value="4096" c:identifier="CAMEL_URL_NEED_PORT">
      </member>
      <member name="need_path" value="8192" c:identifier="CAMEL_URL_NEED_PATH">
      </member>
      <member name="need_path_dir"
              value="16384"
              c:identifier="CAMEL_URL_NEED_PATH_DIR">
      </member>
      <member name="hidden_user"
              value="65536"
              c:identifier="CAMEL_URL_HIDDEN_USER">
      </member>
      <member name="hidden_auth"
              value="131072"
              c:identifier="CAMEL_URL_HIDDEN_AUTH">
      </member>
      <member name="hidden_password"
              value="262144"
              c:identifier="CAMEL_URL_HIDDEN_PASSWORD">
      </member>
      <member name="hidden_host"
              value="524288"
              c:identifier="CAMEL_URL_HIDDEN_HOST">
      </member>
      <member name="hidden_port"
              value="1048576"
              c:identifier="CAMEL_URL_HIDDEN_PORT">
      </member>
      <member name="hidden_path"
              value="2097152"
              c:identifier="CAMEL_URL_HIDDEN_PATH">
      </member>
      <member name="fragment_is_path"
              value="1073741824"
              c:identifier="CAMEL_URL_FRAGMENT_IS_PATH">
      </member>
      <member name="path_is_absolute"
              value="2147483648"
              c:identifier="CAMEL_URL_PATH_IS_ABSOLUTE">
      </member>
    </bitfield>
    <constant name="RECIPIENT_TYPE_BCC"
              value="Bcc"
              c:type="CAMEL_RECIPIENT_TYPE_BCC">
      <source-position filename="src/camel/camel-mime-message.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RECIPIENT_TYPE_CC"
              value="Cc"
              c:type="CAMEL_RECIPIENT_TYPE_CC">
      <source-position filename="src/camel/camel-mime-message.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RECIPIENT_TYPE_RESENT_BCC"
              value="Resent-Bcc"
              c:type="CAMEL_RECIPIENT_TYPE_RESENT_BCC">
      <source-position filename="src/camel/camel-mime-message.h" line="58"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RECIPIENT_TYPE_RESENT_CC"
              value="Resent-Cc"
              c:type="CAMEL_RECIPIENT_TYPE_RESENT_CC">
      <source-position filename="src/camel/camel-mime-message.h" line="57"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RECIPIENT_TYPE_RESENT_TO"
              value="Resent-To"
              c:type="CAMEL_RECIPIENT_TYPE_RESENT_TO">
      <source-position filename="src/camel/camel-mime-message.h" line="56"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RECIPIENT_TYPE_TO"
              value="To"
              c:type="CAMEL_RECIPIENT_TYPE_TO">
      <source-position filename="src/camel/camel-mime-message.h" line="52"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <bitfield name="RecipientCertificateFlags"
              version="3.30"
              glib:type-name="CamelRecipientCertificateFlags"
              glib:get-type="camel_recipient_certificate_flags_get_type"
              c:type="CamelRecipientCertificateFlags">
      <doc xml:space="preserve"
           filename="src/camel/camel-enums.h"
           line="431">Flags used to camel_session_get_recipient_certificates_sync() call.</doc>
      <member name="smime"
              value="1"
              c:identifier="CAMEL_RECIPIENT_CERTIFICATE_SMIME"
              glib:nick="smime"
              glib:name="CAMEL_RECIPIENT_CERTIFICATE_SMIME">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="433">Retrieve S/MIME certificates; this cannot be used
   together with @CAMEL_RECIPIENT_CERTIFICATE_PGP</doc>
      </member>
      <member name="pgp"
              value="2"
              c:identifier="CAMEL_RECIPIENT_CERTIFICATE_PGP"
              glib:nick="pgp"
              glib:name="CAMEL_RECIPIENT_CERTIFICATE_PGP">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="435">Retrieve PGP keys; this cannot be used
   together with @CAMEL_RECIPIENT_CERTIFICATE_SMIME.</doc>
      </member>
    </bitfield>
    <function-macro name="SASL" c:identifier="CAMEL_SASL" introspectable="0">
      <source-position filename="src/camel/camel-sasl.h" line="31"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_ANONYMOUS"
                    c:identifier="CAMEL_SASL_ANONYMOUS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-anonymous.h" line="32"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_ANONYMOUS_CLASS"
                    c:identifier="CAMEL_SASL_ANONYMOUS_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-anonymous.h" line="35"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_ANONYMOUS_GET_CLASS"
                    c:identifier="CAMEL_SASL_ANONYMOUS_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-anonymous.h" line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_CLASS"
                    c:identifier="CAMEL_SASL_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl.h" line="34"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_CRAM_MD5"
                    c:identifier="CAMEL_SASL_CRAM_MD5"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-cram-md5.h" line="31"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_CRAM_MD5_CLASS"
                    c:identifier="CAMEL_SASL_CRAM_MD5_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-cram-md5.h" line="34"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_CRAM_MD5_GET_CLASS"
                    c:identifier="CAMEL_SASL_CRAM_MD5_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-cram-md5.h" line="43"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_DIGEST_MD5"
                    c:identifier="CAMEL_SASL_DIGEST_MD5"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-digest-md5.h" line="32"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_DIGEST_MD5_CLASS"
                    c:identifier="CAMEL_SASL_DIGEST_MD5_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-digest-md5.h" line="35"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_DIGEST_MD5_GET_CLASS"
                    c:identifier="CAMEL_SASL_DIGEST_MD5_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-digest-md5.h" line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_GET_CLASS"
                    c:identifier="CAMEL_SASL_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl.h" line="43"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_GSSAPI"
                    c:identifier="CAMEL_SASL_GSSAPI"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-gssapi.h" line="32"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_GSSAPI_CLASS"
                    c:identifier="CAMEL_SASL_GSSAPI_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-gssapi.h" line="35"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_GSSAPI_GET_CLASS"
                    c:identifier="CAMEL_SASL_GSSAPI_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-gssapi.h" line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_LOGIN"
                    c:identifier="CAMEL_SASL_LOGIN"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-login.h" line="31"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_LOGIN_CLASS"
                    c:identifier="CAMEL_SASL_LOGIN_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-login.h" line="34"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_LOGIN_GET_CLASS"
                    c:identifier="CAMEL_SASL_LOGIN_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-login.h" line="43"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_NTLM"
                    c:identifier="CAMEL_SASL_NTLM"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-ntlm.h" line="30"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_NTLM_CLASS"
                    c:identifier="CAMEL_SASL_NTLM_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-ntlm.h" line="33"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_NTLM_GET_CLASS"
                    c:identifier="CAMEL_SASL_NTLM_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-ntlm.h" line="42"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_PLAIN"
                    c:identifier="CAMEL_SASL_PLAIN"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-plain.h" line="31"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_PLAIN_CLASS"
                    c:identifier="CAMEL_SASL_PLAIN_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-plain.h" line="34"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_PLAIN_GET_CLASS"
                    c:identifier="CAMEL_SASL_PLAIN_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-plain.h" line="43"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_POPB4SMTP"
                    c:identifier="CAMEL_SASL_POPB4SMTP"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-popb4smtp.h" line="31"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_POPB4SMTP_CLASS"
                    c:identifier="CAMEL_SASL_POPB4SMTP_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-popb4smtp.h" line="34"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_POPB4SMTP_GET_CLASS"
                    c:identifier="CAMEL_SASL_POPB4SMTP_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-popb4smtp.h" line="43"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_XOAUTH2"
                    c:identifier="CAMEL_SASL_XOAUTH2"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-xoauth2.h" line="27"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_XOAUTH2_CLASS"
                    c:identifier="CAMEL_SASL_XOAUTH2_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-xoauth2.h" line="30"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_XOAUTH2_GET_CLASS"
                    c:identifier="CAMEL_SASL_XOAUTH2_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-xoauth2.h" line="39"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_XOAUTH2_GOOGLE"
                    c:identifier="CAMEL_SASL_XOAUTH2_GOOGLE"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-xoauth2-google.h"
                       line="27"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_XOAUTH2_GOOGLE_CLASS"
                    c:identifier="CAMEL_SASL_XOAUTH2_GOOGLE_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-xoauth2-google.h"
                       line="30"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_XOAUTH2_GOOGLE_GET_CLASS"
                    c:identifier="CAMEL_SASL_XOAUTH2_GOOGLE_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-xoauth2-google.h"
                       line="39"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_XOAUTH2_OUTLOOK"
                    c:identifier="CAMEL_SASL_XOAUTH2_OUTLOOK"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-xoauth2-outlook.h"
                       line="27"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_XOAUTH2_OUTLOOK_CLASS"
                    c:identifier="CAMEL_SASL_XOAUTH2_OUTLOOK_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-xoauth2-outlook.h"
                       line="30"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_XOAUTH2_OUTLOOK_GET_CLASS"
                    c:identifier="CAMEL_SASL_XOAUTH2_OUTLOOK_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-xoauth2-outlook.h"
                       line="39"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_XOAUTH2_YAHOO"
                    c:identifier="CAMEL_SASL_XOAUTH2_YAHOO"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-xoauth2-yahoo.h"
                       line="27"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_XOAUTH2_YAHOO_CLASS"
                    c:identifier="CAMEL_SASL_XOAUTH2_YAHOO_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-xoauth2-yahoo.h"
                       line="30"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SASL_XOAUTH2_YAHOO_GET_CLASS"
                    c:identifier="CAMEL_SASL_XOAUTH2_YAHOO_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sasl-xoauth2-yahoo.h"
                       line="39"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SERVICE"
                    c:identifier="CAMEL_SERVICE"
                    introspectable="0">
      <source-position filename="src/camel/camel-service.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SERVICE_CLASS"
                    c:identifier="CAMEL_SERVICE_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-service.h" line="41"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SERVICE_GET_CLASS"
                    c:identifier="CAMEL_SERVICE_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-service.h" line="50"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION"
                    c:identifier="CAMEL_SESSION"
                    introspectable="0">
      <source-position filename="src/camel/camel-session.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="SESSION_BOOK_UID_ANY"
              value="*any"
              c:type="CAMEL_SESSION_BOOK_UID_ANY"
              version="3.44">
      <doc xml:space="preserve"
           filename="src/camel/camel-session.c"
           line="1332">Can be used with camel_session_addressbook_contains_sync() as the book UID,
meaning to check in all configured address books.</doc>
      <source-position filename="src/camel/camel-session.h" line="56"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SESSION_BOOK_UID_COMPLETION"
              value="*completion"
              c:type="CAMEL_SESSION_BOOK_UID_COMPLETION"
              version="3.44">
      <doc xml:space="preserve"
           filename="src/camel/camel-session.c"
           line="1341">Can be used with camel_session_addressbook_contains_sync() as the book UID,
meaning to check in all address books enabled for auto-completion.</doc>
      <source-position filename="src/camel/camel-session.h" line="57"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="SESSION_CLASS"
                    c:identifier="CAMEL_SESSION_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-session.h" line="41"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_GET_CLASS"
                    c:identifier="CAMEL_SESSION_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-session.h" line="50"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SETTINGS"
                    c:identifier="CAMEL_SETTINGS"
                    introspectable="0">
      <source-position filename="src/camel/camel-settings.h" line="30"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SETTINGS_CLASS"
                    c:identifier="CAMEL_SETTINGS_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-settings.h" line="33"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SETTINGS_GET_CLASS"
                    c:identifier="CAMEL_SETTINGS_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-settings.h" line="42"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SEXP" c:identifier="CAMEL_SEXP" introspectable="0">
      <source-position filename="src/camel/camel-sexp.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SEXP_CLASS"
                    c:identifier="CAMEL_SEXP_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sexp.h" line="36"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SEXP_GET_CLASS"
                    c:identifier="CAMEL_SEXP_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-sexp.h" line="45"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="SExp"
           c:symbol-prefix="sexp"
           c:type="CamelSExp"
           version="3.4"
           parent="GObject.Object"
           glib:type-name="CamelSExp"
           glib:get-type="camel_sexp_get_type"
           glib:type-struct="SExpClass">
      <source-position filename="src/camel/camel-sexp.h" line="229"/>
      <constructor name="new" c:identifier="camel_sexp_new" version="3.4">
        <source-position filename="src/camel/camel-sexp.h" line="232"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-sexp.c"
               line="1590">a new #CamelSExp</doc>
          <type name="SExp" c:type="CamelSExp*"/>
        </return-value>
      </constructor>
      <function name="encode_bool"
                c:identifier="camel_sexp_encode_bool"
                version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.c"
             line="1880">Encode a bool into an s-expression @string.  Bools are
encoded using #t #f syntax.</doc>
        <source-position filename="src/camel/camel-sexp.h" line="275"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="1882">Destination #GString</doc>
            <type name="GLib.String" c:type="GString*"/>
          </parameter>
          <parameter name="v_bool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="1883">the value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="encode_string"
                c:identifier="camel_sexp_encode_string"
                version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.c"
             line="1900">Add a c string @v_string to the s-expression stored in
the gstring @s.  Quotes are added, and special characters
are escaped appropriately.</doc>
        <source-position filename="src/camel/camel-sexp.h" line="277"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="1902">Destination #GString</doc>
            <type name="GLib.String" c:type="GString*"/>
          </parameter>
          <parameter name="v_string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="1903">String expression.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_sql_sexp"
                c:identifier="camel_sexp_to_sql_sexp"
                version="2.26">
        <doc xml:space="preserve"
             filename="src/camel/camel-search-sql-sexp.c"
             line="830">Converts a search expression to an SQL 'WHERE' part statement,
without the 'WHERE' keyword.</doc>
        <source-position filename="src/camel/camel-search-sql-sexp.h"
                         line="32"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-search-sql-sexp.c"
               line="837">a newly allocated string, an SQL
   'WHERE' part statement, or %NULL, when could not convert it. Free it with
   g_free(), when done with it.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="sexp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-search-sql-sexp.c"
                 line="832">a search expression to convert</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <method name="add_function"
              c:identifier="camel_sexp_add_function"
              version="3.4"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.c"
             line="1600">Adds a function symbol which can not perform short evaluation.
Use camel_sexp_add_ifunction() for functions which can.</doc>
        <source-position filename="src/camel/camel-sexp.h" line="233"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sexp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="1602">a #CamelSExp</doc>
            <type name="SExp" c:type="CamelSExp*"/>
          </instance-parameter>
          <parameter name="scope" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="1603">a scope</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="1604">a function name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="1605">a function callback</doc>
            <type name="SExpFunc" c:type="CamelSExpFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="1606">user data for @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_ifunction"
              c:identifier="camel_sexp_add_ifunction"
              version="3.4"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.c"
             line="1636">Adds a function symbol which can perform short evaluation,
or doesn't execute everything. Use camel_sexp_add_function()
for any other types of the function symbols.</doc>
        <source-position filename="src/camel/camel-sexp.h" line="238"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sexp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="1638">a #CamelSExp</doc>
            <type name="SExp" c:type="CamelSExp*"/>
          </instance-parameter>
          <parameter name="scope" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="1639">a scope</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="1640">a function name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="ifunc"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="1641">a function callback</doc>
            <type name="SExpIFunc" c:type="CamelSExpIFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="1642">user data for @ifunc</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_variable"
              c:identifier="camel_sexp_add_variable"
              version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.c"
             line="1673">Adds a variable named @name to the given @scope, set to the given @value.</doc>
        <source-position filename="src/camel/camel-sexp.h" line="243"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sexp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="1675">a #CamelSExp</doc>
            <type name="SExp" c:type="CamelSExp*"/>
          </instance-parameter>
          <parameter name="scope" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="1676">a scope</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="1677">a variable name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="1678">a variable value, as a #CamelSExpTerm</doc>
            <type name="SExpTerm" c:type="CamelSExpTerm*"/>
          </parameter>
        </parameters>
      </method>
      <method name="error" c:identifier="camel_sexp_error" version="3.4">
        <source-position filename="src/camel/camel-sexp.h" line="286"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-sexp.c"
               line="199">Set error string on the @sexp, or %NULL, when none is set</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sexp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="197">a #CamelSExp</doc>
            <type name="SExp" c:type="CamelSExp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="eval"
              c:identifier="camel_sexp_eval"
              version="3.4"
              introspectable="0">
        <source-position filename="src/camel/camel-sexp.h" line="259"/>
        <return-value>
          <type name="SExpResult" c:type="CamelSExpResult*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sexp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="1819">a #CamelSExp</doc>
            <type name="SExp" c:type="CamelSExp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="evaluate_occur_times"
              c:identifier="camel_sexp_evaluate_occur_times">
        <source-position filename="src/camel/camel-sexp.h" line="290"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sexp" transfer-ownership="none">
            <type name="SExp" c:type="CamelSExp*"/>
          </instance-parameter>
          <parameter name="start" transfer-ownership="none">
            <type name="glong" c:type="time_t*"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <type name="glong" c:type="time_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fatal_error"
              c:identifier="camel_sexp_fatal_error"
              version="3.4"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.c"
             line="165">Sets an error from the given format and stops execution.
Int replaces previously set error, if any.</doc>
        <source-position filename="src/camel/camel-sexp.h" line="281"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sexp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="167">a #CamelSExp</doc>
            <type name="SExp" c:type="CamelSExp*"/>
          </instance-parameter>
          <parameter name="why" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="168">a string format to use</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="169">parameters for the format</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="input_file"
              c:identifier="camel_sexp_input_file"
              version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.c"
             line="1775">Prepares to scan a file.</doc>
        <source-position filename="src/camel/camel-sexp.h" line="255"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sexp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="1777">a #CamelSExp</doc>
            <type name="SExp" c:type="CamelSExp*"/>
          </instance-parameter>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="1778">a file descriptor</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="input_text"
              c:identifier="camel_sexp_input_text"
              version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.c"
             line="1754">Prepares to scan a text buffer.</doc>
        <source-position filename="src/camel/camel-sexp.h" line="252"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sexp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="1756">a #CamelSExp</doc>
            <type name="SExp" c:type="CamelSExp*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="1757">a text buffer to scan</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="1758">the length of the text buffer</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="parse" c:identifier="camel_sexp_parse" version="3.4">
        <source-position filename="src/camel/camel-sexp.h" line="257"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="sexp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="1795">a #CamelSExp</doc>
            <type name="SExp" c:type="CamelSExp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="parse_value"
              c:identifier="camel_sexp_parse_value"
              version="3.4"
              introspectable="0">
        <source-position filename="src/camel/camel-sexp.h" line="288"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-sexp.c"
               line="1335">a #CamelSExpTerm of the next token, or %NULL when there is none.</doc>
          <type name="SExpTerm" c:type="CamelSExpTerm*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sexp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="1333">a #CamelSExp</doc>
            <type name="SExp" c:type="CamelSExp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_symbol"
              c:identifier="camel_sexp_remove_symbol"
              version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.c"
             line="1703">Revoes a symbol from a scope.</doc>
        <source-position filename="src/camel/camel-sexp.h" line="247"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sexp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="1705">a #CamelSExp</doc>
            <type name="SExp" c:type="CamelSExp*"/>
          </instance-parameter>
          <parameter name="scope" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="1706">a scope</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="1707">a symbol name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="result_free"
              c:identifier="camel_sexp_result_free"
              version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.c"
             line="234">Frees the @result and its internal data. Does nothing,
when the @result is %NULL.</doc>
        <source-position filename="src/camel/camel-sexp.h" line="266"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sexp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="236">a #CamelSExp</doc>
            <type name="SExp" c:type="CamelSExp*"/>
          </instance-parameter>
          <parameter name="result"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="237">a #CamelSExpResult to free</doc>
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="result_new"
              c:identifier="camel_sexp_result_new"
              version="3.4"
              introspectable="0">
        <source-position filename="src/camel/camel-sexp.h" line="264"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-sexp.c"
               line="214">A new #CamelSExpResult result structure, associated with @sexp.
   Free with camel_sexp_result_free(), when no longer needed.</doc>
          <type name="SExpResult" c:type="CamelSExpResult*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sexp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="211">a #CamelSExp</doc>
            <type name="SExp" c:type="CamelSExp*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="212">type of the result, one of #CamelSExpResultType</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="resultv_free"
              c:identifier="camel_sexp_resultv_free"
              version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.c"
             line="270">Frees an array of results.</doc>
        <source-position filename="src/camel/camel-sexp.h" line="270"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sexp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="272">a #CamelSExp</doc>
            <type name="SExp" c:type="CamelSExp*"/>
          </instance-parameter>
          <parameter name="argc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="273">a count of the @argv</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="argv" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="274">an array of #CamelSExpResult to free</doc>
            <array length="0" zero-terminated="0" c:type="CamelSExpResult**">
              <type name="SExpResult" c:type="CamelSExpResult*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_scope"
              c:identifier="camel_sexp_set_scope"
              version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.c"
             line="1734">sets the current scope for the scanner.</doc>
        <source-position filename="src/camel/camel-sexp.h" line="250"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-sexp.c"
               line="1741">the previous scope id</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="sexp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="1736">a #CamelSExp</doc>
            <type name="SExp" c:type="CamelSExp*"/>
          </instance-parameter>
          <parameter name="scope" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="1737">a scope to set</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="term_eval"
              c:identifier="camel_sexp_term_eval"
              version="3.4"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.c"
             line="792">Evaluates a part of the expression.</doc>
        <source-position filename="src/camel/camel-sexp.h" line="261"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-sexp.c"
               line="799">a newly allocated result of the evaluation. Free
   the returned pointer with camel_sexp_result_free(), when no longer needed.</doc>
          <type name="SExpResult" c:type="CamelSExpResult*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sexp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="794">a #CamelSExp</doc>
            <type name="SExp" c:type="CamelSExp*"/>
          </instance-parameter>
          <parameter name="term" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sexp.c"
                 line="795">a #CamelSExpTerm to evaluate</doc>
            <type name="SExpTerm" c:type="CamelSExpTerm*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SExpPrivate" c:type="CamelSExpPrivate*"/>
      </field>
    </class>
    <record name="SExpClass"
            c:type="CamelSExpClass"
            glib:is-gtype-struct-for="SExp">
      <source-position filename="src/camel/camel-sexp.h" line="229"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <callback name="SExpFunc"
              c:type="CamelSExpFunc"
              version="3.4"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/camel/camel-sexp.h"
           line="106">Callback type for function symbols used with camel_sexp_add_function().</doc>
      <source-position filename="src/camel/camel-sexp.h" line="120"/>
      <return-value>
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.h"
             line="115">Result of the function call, allocated by camel_sexp_result_new().</doc>
        <type name="SExpResult" c:type="CamelSExpResult*"/>
      </return-value>
      <parameters>
        <parameter name="sexp" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-sexp.h"
               line="108">a #CamelSExp</doc>
          <type name="SExp" c:type="CamelSExp*"/>
        </parameter>
        <parameter name="argc" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-sexp.h"
               line="109">count of arguments</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="argv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-sexp.h"
               line="110">array of values of the arguments</doc>
          <array length="1" zero-terminated="0" c:type="CamelSExpResult**">
            <type name="SExpResult" c:type="CamelSExpResult*"/>
          </array>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="src/camel/camel-sexp.h"
               line="111">user data as passed to camel_sexp_add_function()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="SExpIFunc"
              c:type="CamelSExpIFunc"
              version="3.4"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/camel/camel-sexp.h"
           line="125">Callback type for function symbols used with camel_sexp_add_ifunction().</doc>
      <source-position filename="src/camel/camel-sexp.h" line="139"/>
      <return-value>
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.h"
             line="134">Result of the function call, allocated by camel_sexp_result_new().</doc>
        <type name="SExpResult" c:type="CamelSExpResult*"/>
      </return-value>
      <parameters>
        <parameter name="sexp" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-sexp.h"
               line="127">a #CamelSExp</doc>
          <type name="SExp" c:type="CamelSExp*"/>
        </parameter>
        <parameter name="argc" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-sexp.h"
               line="128">count of arguments</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="argv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-sexp.h"
               line="129">array of values of the arguments</doc>
          <array length="1" zero-terminated="0" c:type="CamelSExpTerm**">
            <type name="SExpTerm" c:type="CamelSExpTerm*"/>
          </array>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="src/camel/camel-sexp.h"
               line="130">user data as passed to camel_sexp_add_ifunction()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="SExpPrivate"
            c:type="CamelSExpPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-sexp.h" line="54"/>
    </record>
    <record name="SExpResult" c:type="CamelSExpResult" version="3.4">
      <source-position filename="src/camel/camel-sexp.h" line="104"/>
      <field name="type" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.h"
             line="84">a #CamelSExpResultType, defining the @value type</doc>
        <type name="SExpResultType" c:type="CamelSExpResultType"/>
      </field>
      <union name="value" c:type="value">
        <source-position filename="src/camel/camel-sexp.h" line="100"/>
        <field name="ptrarray" writable="1">
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </field>
        <field name="number" writable="1">
          <type name="gint" c:type="gint"/>
        </field>
        <field name="string" writable="1">
          <type name="utf8" c:type="gchar*"/>
        </field>
        <field name="boolean" writable="1">
          <type name="gint" c:type="gint"/>
        </field>
        <field name="time" writable="1">
          <type name="glong" c:type="time_t"/>
        </field>
      </union>
      <field name="time_generator" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.h"
             line="86">a boolean whether the occuring times are used</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="occuring_start" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.h"
             line="87">start time</doc>
        <type name="glong" c:type="time_t"/>
      </field>
      <field name="occuring_end" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.h"
             line="88">end time</doc>
        <type name="glong" c:type="time_t"/>
      </field>
    </record>
    <enumeration name="SExpResultType"
                 version="3.4"
                 glib:type-name="CamelSExpResultType"
                 glib:get-type="camel_sexp_result_type_get_type"
                 c:type="CamelSExpResultType">
      <doc xml:space="preserve"
           filename="src/camel/camel-sexp.h"
           line="60">Defines type of a #CamelSExpResult.</doc>
      <member name="array_ptr"
              value="0"
              c:identifier="CAMEL_SEXP_RES_ARRAY_PTR"
              glib:nick="array-ptr"
              glib:name="CAMEL_SEXP_RES_ARRAY_PTR">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.h"
             line="62">type is a ptrarray, what it points to is implementation dependant</doc>
      </member>
      <member name="int"
              value="1"
              c:identifier="CAMEL_SEXP_RES_INT"
              glib:nick="int"
              glib:name="CAMEL_SEXP_RES_INT">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.h"
             line="63">type is a number</doc>
      </member>
      <member name="string"
              value="2"
              c:identifier="CAMEL_SEXP_RES_STRING"
              glib:nick="string"
              glib:name="CAMEL_SEXP_RES_STRING">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.h"
             line="64">type is a pointer to a single string</doc>
      </member>
      <member name="bool"
              value="3"
              c:identifier="CAMEL_SEXP_RES_BOOL"
              glib:nick="bool"
              glib:name="CAMEL_SEXP_RES_BOOL">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.h"
             line="65">boolean type</doc>
      </member>
      <member name="time"
              value="4"
              c:identifier="CAMEL_SEXP_RES_TIME"
              glib:nick="time"
              glib:name="CAMEL_SEXP_RES_TIME">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.h"
             line="66">time_t type</doc>
      </member>
      <member name="undefined"
              value="5"
              c:identifier="CAMEL_SEXP_RES_UNDEFINED"
              glib:nick="undefined"
              glib:name="CAMEL_SEXP_RES_UNDEFINED">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.h"
             line="67">unknown type</doc>
      </member>
    </enumeration>
    <record name="SExpSymbol" c:type="CamelSExpSymbol" version="3.4">
      <doc xml:space="preserve"
           filename="src/camel/camel-sexp.h"
           line="168">Describes a function or a variable symbol</doc>
      <source-position filename="src/camel/camel-sexp.h" line="188"/>
      <field name="type" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.h"
             line="170">a type of the symbol, either CAMEL_SEXP_TERM_FUNC or CAMEL_SEXP_TERM_VAR</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="name" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.h"
             line="171">name of the symbol</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="data" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.h"
             line="172">user data for the callback
@f.func: a #CamelSExpFunc callback
@f.ifunc: a #CamelSExpIFunc callback</doc>
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <union name="f" c:type="f">
        <source-position filename="src/camel/camel-sexp.h" line="187"/>
        <field name="func" introspectable="0" writable="1">
          <type name="SExpFunc" c:type="CamelSExpFunc"/>
        </field>
        <field name="ifunc" introspectable="0" writable="1">
          <type name="SExpIFunc" c:type="CamelSExpIFunc"/>
        </field>
      </union>
    </record>
    <record name="SExpTerm" c:type="CamelSExpTerm" version="3.4">
      <source-position filename="src/camel/camel-sexp.h" line="211"/>
      <field name="type" writable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.h"
             line="192">a type of the term; one of #CamelSExpTermType</doc>
        <type name="SExpTermType" c:type="CamelSExpTermType"/>
      </field>
      <union name="value" c:type="value">
        <source-position filename="src/camel/camel-sexp.h" line="210"/>
        <field name="string" writable="1">
          <type name="utf8" c:type="gchar*"/>
        </field>
        <field name="number" writable="1">
          <type name="gint" c:type="gint"/>
        </field>
        <field name="boolean" writable="1">
          <type name="gint" c:type="gint"/>
        </field>
        <field name="time" writable="1">
          <type name="glong" c:type="time_t"/>
        </field>
        <record name="func" c:type="func">
          <source-position filename="src/camel/camel-sexp.h" line="208"/>
          <field name="sym" writable="1">
            <type name="SExpSymbol" c:type="CamelSExpSymbol*"/>
          </field>
          <field name="terms" writable="1">
            <type name="SExpTerm" c:type="CamelSExpTerm**"/>
          </field>
          <field name="termcount" writable="1">
            <type name="gint" c:type="gint"/>
          </field>
        </record>
        <field name="var" writable="1">
          <type name="SExpSymbol" c:type="CamelSExpSymbol*"/>
        </field>
      </union>
    </record>
    <enumeration name="SExpTermType"
                 version="3.4"
                 glib:type-name="CamelSExpTermType"
                 glib:get-type="camel_sexp_term_type_get_type"
                 c:type="CamelSExpTermType">
      <doc xml:space="preserve"
           filename="src/camel/camel-sexp.h"
           line="144">Defines type of a #CamelSExpTerm and partly also #CamelSExpSymbol</doc>
      <member name="int"
              value="0"
              c:identifier="CAMEL_SEXP_TERM_INT"
              glib:nick="int"
              glib:name="CAMEL_SEXP_TERM_INT">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.h"
             line="146">integer literal</doc>
      </member>
      <member name="bool"
              value="1"
              c:identifier="CAMEL_SEXP_TERM_BOOL"
              glib:nick="bool"
              glib:name="CAMEL_SEXP_TERM_BOOL">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.h"
             line="147">boolean literal</doc>
      </member>
      <member name="string"
              value="2"
              c:identifier="CAMEL_SEXP_TERM_STRING"
              glib:nick="string"
              glib:name="CAMEL_SEXP_TERM_STRING">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.h"
             line="148">string literal</doc>
      </member>
      <member name="time"
              value="3"
              c:identifier="CAMEL_SEXP_TERM_TIME"
              glib:nick="time"
              glib:name="CAMEL_SEXP_TERM_TIME">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.h"
             line="149">time_t literal (number of seconds past the epoch)</doc>
      </member>
      <member name="func"
              value="4"
              c:identifier="CAMEL_SEXP_TERM_FUNC"
              glib:nick="func"
              glib:name="CAMEL_SEXP_TERM_FUNC">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.h"
             line="150">normal function, arguments are evaluated before calling</doc>
      </member>
      <member name="ifunc"
              value="5"
              c:identifier="CAMEL_SEXP_TERM_IFUNC"
              glib:nick="ifunc"
              glib:name="CAMEL_SEXP_TERM_IFUNC">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.h"
             line="151">immediate function, raw terms are arguments</doc>
      </member>
      <member name="var"
              value="6"
              c:identifier="CAMEL_SEXP_TERM_VAR"
              glib:nick="var"
              glib:name="CAMEL_SEXP_TERM_VAR">
        <doc xml:space="preserve"
             filename="src/camel/camel-sexp.h"
             line="152">variable reference</doc>
      </member>
    </enumeration>
    <class name="SMIMEContext"
           c:symbol-prefix="smime_context"
           c:type="CamelSMIMEContext"
           parent="CipherContext"
           glib:type-name="CamelSMIMEContext"
           glib:get-type="camel_smime_context_get_type"
           glib:type-struct="SMIMEContextClass">
      <source-position filename="src/camel/camel-smime-context.h" line="77"/>
      <constructor name="new" c:identifier="camel_smime_context_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-smime-context.c"
             line="1776">Creates a new sm cipher context object.</doc>
        <source-position filename="src/camel/camel-smime-context.h" line="81"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-smime-context.c"
               line="1782">a new sm cipher context object.</doc>
          <type name="CipherContext" c:type="CamelCipherContext*"/>
        </return-value>
        <parameters>
          <parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-smime-context.c"
                 line="1778">session</doc>
            <type name="Session" c:type="CamelSession*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="describe_part"
              c:identifier="camel_smime_context_describe_part">
        <source-position filename="src/camel/camel-smime-context.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <type name="SMIMEContext" c:type="CamelSMIMEContext*"/>
          </instance-parameter>
          <parameter name="part"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="_CamelMimePart*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_encrypt_key"
              c:identifier="camel_smime_context_set_encrypt_key">
        <source-position filename="src/camel/camel-smime-context.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <type name="SMIMEContext" c:type="CamelSMIMEContext*"/>
          </instance-parameter>
          <parameter name="use" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sign_mode"
              c:identifier="camel_smime_context_set_sign_mode">
        <source-position filename="src/camel/camel-smime-context.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <type name="SMIMEContext" c:type="CamelSMIMEContext*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="SMIMESign" c:type="CamelSMIMESign"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="CipherContext" c:type="CamelCipherContext"/>
      </field>
      <field name="priv">
        <type name="SMIMEContextPrivate" c:type="CamelSMIMEContextPrivate*"/>
      </field>
    </class>
    <record name="SMIMEContextClass"
            c:type="CamelSMIMEContextClass"
            glib:is-gtype-struct-for="SMIMEContext">
      <source-position filename="src/camel/camel-smime-context.h" line="77"/>
      <field name="parent_class">
        <type name="CipherContextClass" c:type="CamelCipherContextClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="SMIMEContextPrivate"
            c:type="CamelSMIMEContextPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-smime-context.h" line="65"/>
    </record>
    <bitfield name="SMIMEDescribe" c:type="CamelSMIMEDescribe">
      <source-position filename="src/camel/camel-smime-context.h" line="61"/>
      <member name="signed" value="1" c:identifier="CAMEL_SMIME_SIGNED">
      </member>
      <member name="encrypted" value="2" c:identifier="CAMEL_SMIME_ENCRYPTED">
      </member>
      <member name="certs" value="4" c:identifier="CAMEL_SMIME_CERTS">
      </member>
      <member name="crls" value="8" c:identifier="CAMEL_SMIME_CRLS">
      </member>
    </bitfield>
    <enumeration name="SMIMESign" c:type="CamelSMIMESign">
      <source-position filename="src/camel/camel-smime-context.h" line="54"/>
      <member name="clearsign"
              value="0"
              c:identifier="CAMEL_SMIME_SIGN_CLEARSIGN">
      </member>
      <member name="enveloped"
              value="1"
              c:identifier="CAMEL_SMIME_SIGN_ENVELOPED">
      </member>
    </enumeration>
    <function-macro name="SMIME_CONTEXT"
                    c:identifier="CAMEL_SMIME_CONTEXT"
                    introspectable="0">
      <source-position filename="src/camel/camel-smime-context.h" line="32"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SMIME_CONTEXT_CLASS"
                    c:identifier="CAMEL_SMIME_CONTEXT_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-smime-context.h" line="35"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SMIME_CONTEXT_GET_CLASS"
                    c:identifier="CAMEL_SMIME_CONTEXT_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-smime-context.h" line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STORE" c:identifier="CAMEL_STORE" introspectable="0">
      <source-position filename="src/camel/camel-store.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STORE_CLASS"
                    c:identifier="CAMEL_STORE_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-store.h" line="40"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STORE_GET_CLASS"
                    c:identifier="CAMEL_STORE_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-store.h" line="49"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="STORE_INFO_FOLDER_TYPE_BIT"
              value="10"
              c:type="CAMEL_STORE_INFO_FOLDER_TYPE_BIT">
      <doc xml:space="preserve"
           filename="src/camel/camel-enums.h"
           line="219">The folder store info type bitshift value.</doc>
      <source-position filename="src/camel/camel-enums.h" line="223"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="STORE_INFO_FOLDER_TYPE_MASK"
              value="64512"
              c:type="CAMEL_STORE_INFO_FOLDER_TYPE_MASK">
      <doc xml:space="preserve"
           filename="src/camel/camel-enums.h"
           line="260">The folder store info type mask value.</doc>
      <source-position filename="src/camel/camel-enums.h" line="264"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="STORE_INFO_FOLDER_UNKNOWN"
              value="-1"
              c:type="CAMEL_STORE_INFO_FOLDER_UNKNOWN">
      <source-position filename="src/camel/camel-store-summary.h" line="60"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="STORE_SETTINGS"
                    c:identifier="CAMEL_STORE_SETTINGS"
                    introspectable="0">
      <source-position filename="src/camel/camel-store-settings.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STORE_SETTINGS_CLASS"
                    c:identifier="CAMEL_STORE_SETTINGS_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-store-settings.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STORE_SETTINGS_GET_CLASS"
                    c:identifier="CAMEL_STORE_SETTINGS_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-store-settings.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="STORE_SETUP_ARCHIVE_FOLDER"
              value="Account:Mail Account:archive-folder:f"
              c:type="CAMEL_STORE_SETUP_ARCHIVE_FOLDER">
      <source-position filename="src/camel/camel-store.h" line="89"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STORE_SETUP_DRAFTS_FOLDER"
              value="Submission:Mail Composition:drafts-folder:f"
              c:type="CAMEL_STORE_SETUP_DRAFTS_FOLDER">
      <source-position filename="src/camel/camel-store.h" line="90"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STORE_SETUP_SENT_FOLDER"
              value="Submission:Mail Submission:sent-folder:f"
              c:type="CAMEL_STORE_SETUP_SENT_FOLDER">
      <source-position filename="src/camel/camel-store.h" line="91"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STORE_SETUP_TEMPLATES_FOLDER"
              value="Submission:Mail Composition:templates-folder:f"
              c:type="CAMEL_STORE_SETUP_TEMPLATES_FOLDER">
      <source-position filename="src/camel/camel-store.h" line="92"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="STORE_SUMMARY"
                    c:identifier="CAMEL_STORE_SUMMARY"
                    introspectable="0">
      <source-position filename="src/camel/camel-store-summary.h" line="34"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STORE_SUMMARY_CLASS"
                    c:identifier="CAMEL_STORE_SUMMARY_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-store-summary.h" line="37"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STORE_SUMMARY_GET_CLASS"
                    c:identifier="CAMEL_STORE_SUMMARY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-store-summary.h" line="46"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STREAM"
                    c:identifier="CAMEL_STREAM"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STREAM_BUFFER"
                    c:identifier="CAMEL_STREAM_BUFFER"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream-buffer.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STREAM_BUFFER_CLASS"
                    c:identifier="CAMEL_STREAM_BUFFER_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream-buffer.h" line="36"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STREAM_BUFFER_GET_CLASS"
                    c:identifier="CAMEL_STREAM_BUFFER_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream-buffer.h" line="45"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STREAM_CLASS"
                    c:identifier="CAMEL_STREAM_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STREAM_FILTER"
                    c:identifier="CAMEL_STREAM_FILTER"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream-filter.h" line="32"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STREAM_FILTER_CLASS"
                    c:identifier="CAMEL_STREAM_FILTER_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream-filter.h" line="35"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STREAM_FILTER_GET_CLASS"
                    c:identifier="CAMEL_STREAM_FILTER_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream-filter.h" line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STREAM_FS"
                    c:identifier="CAMEL_STREAM_FS"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream-fs.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STREAM_FS_CLASS"
                    c:identifier="CAMEL_STREAM_FS_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream-fs.h" line="40"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STREAM_FS_GET_CLASS"
                    c:identifier="CAMEL_STREAM_FS_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream-fs.h" line="49"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STREAM_GET_CLASS"
                    c:identifier="CAMEL_STREAM_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream.h" line="47"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STREAM_MEM"
                    c:identifier="CAMEL_STREAM_MEM"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream-mem.h" line="34"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STREAM_MEM_CLASS"
                    c:identifier="CAMEL_STREAM_MEM_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream-mem.h" line="37"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STREAM_MEM_GET_CLASS"
                    c:identifier="CAMEL_STREAM_MEM_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream-mem.h" line="46"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STREAM_NULL"
                    c:identifier="CAMEL_STREAM_NULL"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream-null.h" line="31"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STREAM_NULL_CLASS"
                    c:identifier="CAMEL_STREAM_NULL_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream-null.h" line="34"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STREAM_NULL_GET_CLASS"
                    c:identifier="CAMEL_STREAM_NULL_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream-null.h" line="43"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STREAM_PROCESS"
                    c:identifier="CAMEL_STREAM_PROCESS"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream-process.h" line="31"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STREAM_PROCESS_CLASS"
                    c:identifier="CAMEL_STREAM_PROCESS_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream-process.h" line="34"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STREAM_PROCESS_GET_CLASS"
                    c:identifier="CAMEL_STREAM_PROCESS_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-stream-process.h" line="43"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SUBSCRIBABLE"
                    c:identifier="CAMEL_SUBSCRIBABLE"
                    introspectable="0">
      <source-position filename="src/camel/camel-subscribable.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SUBSCRIBABLE_GET_INTERFACE"
                    c:identifier="CAMEL_SUBSCRIBABLE_GET_INTERFACE"
                    introspectable="0">
      <source-position filename="src/camel/camel-subscribable.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SUBSCRIBABLE_INTERFACE"
                    c:identifier="CAMEL_SUBSCRIBABLE_INTERFACE"
                    introspectable="0">
      <source-position filename="src/camel/camel-subscribable.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Sasl"
           c:symbol-prefix="sasl"
           c:type="CamelSasl"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="CamelSasl"
           glib:get-type="camel_sasl_get_type"
           glib:type-struct="SaslClass">
      <source-position filename="src/camel/camel-sasl.h" line="77"/>
      <constructor name="new" c:identifier="camel_sasl_new">
        <source-position filename="src/camel/camel-sasl.h" line="80"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-sasl.c"
               line="343">a new #CamelSasl object for the given @service_name,
@mechanism, and @service, or %NULL if the mechanism is not
supported.</doc>
          <type name="Sasl" c:type="CamelSasl*"/>
        </return-value>
        <parameters>
          <parameter name="service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="339">the SASL service name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="mechanism" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="340">the SASL mechanism</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="341">the CamelService that will be using this SASL</doc>
            <type name="Service" c:type="CamelService*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="authtype" c:identifier="camel_sasl_authtype">
        <source-position filename="src/camel/camel-sasl.h" line="134"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-sasl.c"
               line="934">a #CamelServiceAuthType for the given mechanism, if
it is supported.</doc>
          <type name="ServiceAuthType" c:type="CamelServiceAuthType*"/>
        </return-value>
        <parameters>
          <parameter name="mechanism" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="932">the SASL mechanism to get an authtype for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="authtype_list" c:identifier="camel_sasl_authtype_list">
        <source-position filename="src/camel/camel-sasl.h" line="132"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="src/camel/camel-sasl.c"
               line="883">a #GList of SASL-supported authtypes. The caller must
free the list, but not the contents.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ServiceAuthType"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="include_plain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="881">whether or not to include the PLAIN mechanism</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="is_xoauth2_alias"
                c:identifier="camel_sasl_is_xoauth2_alias"
                version="3.28">
        <doc xml:space="preserve"
             filename="src/camel/camel-sasl.c"
             line="954">Checks whether exists a #CamelSasl method for the @mechanism and
whether it derives from #CamelSaslXOAuth2. Such mechanisms are
also treated as XOAUTH2, even their real name is different.</doc>
        <source-position filename="src/camel/camel-sasl.h" line="135"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-sasl.c"
               line="962">whether exists #CamelSasl for the given @mechanism,
   which also derives from #CamelSaslXOAuth2.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="mechanism"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="956">an authentication mechanism</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="challenge_sync"
                      invoker="challenge_sync"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-sasl.c"
             line="575">If @token is %NULL, generate the initial SASL message to send to
the server.  (This will be %NULL if the client doesn't initiate the
exchange.)  Otherwise, @token is a challenge from the server, and
the return value is the response.

Free the returned #GByteArray with g_byte_array_free().</doc>
        <source-position filename="src/camel/camel-sasl.h" line="70"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-sasl.c"
               line="589">the SASL response or %NULL. If an error
occurred, @error will also be set.</doc>
          <array name="GLib.ByteArray" c:type="GByteArray*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="sasl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="577">a #CamelSasl</doc>
            <type name="Sasl" c:type="CamelSasl*"/>
          </instance-parameter>
          <parameter name="token"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="578">a token, or %NULL</doc>
            <array name="GLib.ByteArray" c:type="GByteArray*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="579">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="try_empty_password_sync"
                      invoker="try_empty_password_sync"
                      version="3.2"
                      throws="1">
        <source-position filename="src/camel/camel-sasl.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-sasl.c"
               line="399">whether or not @sasl can attempt to authenticate without a
password being provided by the caller. This will be %TRUE for an
authentication method which can attempt to use single-sign-on
credentials, but which can fall back to using a provided password
so it still has the @need_password flag set in its description.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sasl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="395">a #CamelSasl object</doc>
            <type name="Sasl" c:type="CamelSasl*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="396">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="challenge"
              c:identifier="camel_sasl_challenge"
              version="3.0">
        <doc xml:space="preserve"
             filename="src/camel/camel-sasl.c"
             line="643">If @token is %NULL, asynchronously generate the initial SASL message
to send to the server.  (This will be %NULL if the client doesn't
initiate the exchange.)  Otherwise, @token is a challenge from the
server, and the asynchronous result is the response.

When the operation is finished, @callback will be called.  You can then
call camel_sasl_challenge_finish() to get the result of the operation.</doc>
        <source-position filename="src/camel/camel-sasl.h" line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sasl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="645">a #CamelSasl</doc>
            <type name="Sasl" c:type="CamelSasl*"/>
          </instance-parameter>
          <parameter name="token"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="646">a token, or %NULL</doc>
            <array name="GLib.ByteArray" c:type="GByteArray*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="647">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="648">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="649">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="650">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="challenge_base64"
              c:identifier="camel_sasl_challenge_base64"
              version="3.0">
        <doc xml:space="preserve"
             filename="src/camel/camel-sasl.c"
             line="805">As with camel_sasl_challenge(), but the challenge @token and the
response are both base64-encoded.

When the operation is finished, @callback will be called.  You can
then call camel_sasl_challenge_base64_finish() to get the result of
the operation.</doc>
        <source-position filename="src/camel/camel-sasl.h" line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sasl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="807">a #CamelSasl</doc>
            <type name="Sasl" c:type="CamelSasl*"/>
          </instance-parameter>
          <parameter name="token" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="808">a base64-encoded token</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="809">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="810">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="811">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="812">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="challenge_base64_finish"
              c:identifier="camel_sasl_challenge_base64_finish"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-sasl.c"
             line="852">Finishes the operation started with camel_sasl_challenge_base64().</doc>
        <source-position filename="src/camel/camel-sasl.h" line="127"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-sasl.c"
               line="860">the base64-encoded response</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sasl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="854">a #CamelSasl</doc>
            <type name="Sasl" c:type="CamelSasl*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="855">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="challenge_base64_sync"
              c:identifier="camel_sasl_challenge_base64_sync"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-sasl.c"
             line="722">As with camel_sasl_challenge_sync(), but the challenge @token and the
response are both base64-encoded.</doc>
        <source-position filename="src/camel/camel-sasl.h" line="116"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-sasl.c"
               line="732">the base64-encoded response</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sasl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="724">a #CamelSasl</doc>
            <type name="Sasl" c:type="CamelSasl*"/>
          </instance-parameter>
          <parameter name="token" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="725">a base64-encoded token</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="726">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="challenge_finish"
              c:identifier="camel_sasl_challenge_finish"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-sasl.c"
             line="693">Finishes the operation started with camel_sasl_challenge().  Free the
returned #GByteArray with g_byte_array_free().</doc>
        <source-position filename="src/camel/camel-sasl.h" line="113"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-sasl.c"
               line="702">the SASL response or %NULL.  If an
error occurred, @error will also be set.</doc>
          <array name="GLib.ByteArray" c:type="GByteArray*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="sasl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="695">a #CamelSasl</doc>
            <type name="Sasl" c:type="CamelSasl*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="696">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="challenge_sync"
              c:identifier="camel_sasl_challenge_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-sasl.c"
             line="575">If @token is %NULL, generate the initial SASL message to send to
the server.  (This will be %NULL if the client doesn't initiate the
exchange.)  Otherwise, @token is a challenge from the server, and
the return value is the response.

Free the returned #GByteArray with g_byte_array_free().</doc>
        <source-position filename="src/camel/camel-sasl.h" line="103"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-sasl.c"
               line="589">the SASL response or %NULL. If an error
occurred, @error will also be set.</doc>
          <array name="GLib.ByteArray" c:type="GByteArray*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="sasl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="577">a #CamelSasl</doc>
            <type name="Sasl" c:type="CamelSasl*"/>
          </instance-parameter>
          <parameter name="token"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="578">a token, or %NULL</doc>
            <array name="GLib.ByteArray" c:type="GByteArray*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="579">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_authenticated"
              c:identifier="camel_sasl_get_authenticated"
              glib:get-property="authenticated">
        <source-position filename="src/camel/camel-sasl.h" line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-sasl.c"
               line="380">whether or not @sasl has successfully authenticated the
user. This will be %TRUE after it returns the last needed response.
The caller must still pass that information on to the server and
verify that it has accepted it.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sasl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="378">a #CamelSasl</doc>
            <type name="Sasl" c:type="CamelSasl*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mechanism"
              c:identifier="camel_sasl_get_mechanism"
              glib:get-property="mechanism"
              version="2.32">
        <source-position filename="src/camel/camel-sasl.h" line="99"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sasl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="533">a #CamelSasl</doc>
            <type name="Sasl" c:type="CamelSasl*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_service"
              c:identifier="camel_sasl_get_service"
              glib:get-property="service"
              version="2.32">
        <source-position filename="src/camel/camel-sasl.h" line="100"/>
        <return-value transfer-ownership="none">
          <type name="Service" c:type="CamelService*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sasl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="547">a #CamelSasl</doc>
            <type name="Sasl" c:type="CamelSasl*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_service_name"
              c:identifier="camel_sasl_get_service_name"
              glib:get-property="service-name"
              version="2.32">
        <source-position filename="src/camel/camel-sasl.h" line="101"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sasl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="563">a #CamelSasl</doc>
            <type name="Sasl" c:type="CamelSasl*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_authenticated"
              c:identifier="camel_sasl_set_authenticated"
              glib:set-property="authenticated"
              version="2.32">
        <source-position filename="src/camel/camel-sasl.h" line="97"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sasl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="512">a #CamelSasl</doc>
            <type name="Sasl" c:type="CamelSasl*"/>
          </instance-parameter>
          <parameter name="authenticated" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="513">whether we have successfully authenticated</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="try_empty_password"
              c:identifier="camel_sasl_try_empty_password"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-sasl.c"
             line="446">Asynchronously determine whether @sasl can be used for password-less
authentication, for example single-sign-on using system credentials.

When the operation is finished, @callback will be called.  You can then
call camel_sasl_try_empty_password_finish() to get the result of the
operation.</doc>
        <source-position filename="src/camel/camel-sasl.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sasl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="448">a #CamelSasl</doc>
            <type name="Sasl" c:type="CamelSasl*"/>
          </instance-parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="449">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="450">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="451">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="452">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="try_empty_password_finish"
              c:identifier="camel_sasl_try_empty_password_finish"
              version="3.2"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-sasl.c"
             line="483">Finishes the operation started with camel_sasl_try_empty_password().</doc>
        <source-position filename="src/camel/camel-sasl.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-sasl.c"
               line="491">the SASL response.  If an error occurred, @error will also be set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sasl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="485">a #CamelSasl</doc>
            <type name="Sasl" c:type="CamelSasl*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="486">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="try_empty_password_sync"
              c:identifier="camel_sasl_try_empty_password_sync"
              version="3.2"
              throws="1">
        <source-position filename="src/camel/camel-sasl.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-sasl.c"
               line="399">whether or not @sasl can attempt to authenticate without a
password being provided by the caller. This will be %TRUE for an
authentication method which can attempt to use single-sign-on
credentials, but which can fall back to using a provided password
so it still has the @need_password flag set in its description.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sasl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="395">a #CamelSasl object</doc>
            <type name="Sasl" c:type="CamelSasl*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="396">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <property name="authenticated"
                writable="1"
                transfer-ownership="none"
                setter="set_authenticated"
                getter="get_authenticated"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="mechanism"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_mechanism"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="service"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_service">
        <type name="Service"/>
      </property>
      <property name="service-name"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_service_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="SaslPrivate" c:type="CamelSaslPrivate*"/>
      </field>
    </class>
    <enumeration name="SaslAnonTraceType"
                 glib:type-name="CamelSaslAnonTraceType"
                 glib:get-type="camel_sasl_anon_trace_type_get_type"
                 c:type="CamelSaslAnonTraceType">
      <member name="email"
              value="0"
              c:identifier="CAMEL_SASL_ANON_TRACE_EMAIL"
              glib:nick="email"
              glib:name="CAMEL_SASL_ANON_TRACE_EMAIL">
      </member>
      <member name="opaque"
              value="1"
              c:identifier="CAMEL_SASL_ANON_TRACE_OPAQUE"
              glib:nick="opaque"
              glib:name="CAMEL_SASL_ANON_TRACE_OPAQUE">
      </member>
      <member name="empty"
              value="2"
              c:identifier="CAMEL_SASL_ANON_TRACE_EMPTY"
              glib:nick="empty"
              glib:name="CAMEL_SASL_ANON_TRACE_EMPTY">
      </member>
    </enumeration>
    <class name="SaslAnonymous"
           c:symbol-prefix="sasl_anonymous"
           c:type="CamelSaslAnonymous"
           parent="Sasl"
           glib:type-name="CamelSaslAnonymous"
           glib:get-type="camel_sasl_anonymous_get_type"
           glib:type-struct="SaslAnonymousClass">
      <source-position filename="src/camel/camel-sasl-anonymous.h" line="65"/>
      <constructor name="new" c:identifier="camel_sasl_anonymous_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-sasl-anonymous.c"
             line="143">Create a new #CamelSaslAnonymous object.</doc>
        <source-position filename="src/camel/camel-sasl-anonymous.h"
                         line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-sasl-anonymous.c"
               line="150">a new #CamelSasl object</doc>
          <type name="Sasl" c:type="CamelSasl*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl-anonymous.c"
                 line="145">trace type</doc>
            <type name="SaslAnonTraceType" c:type="CamelSaslAnonTraceType"/>
          </parameter>
          <parameter name="trace_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl-anonymous.c"
                 line="146">trace info</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent">
        <type name="Sasl" c:type="CamelSasl"/>
      </field>
      <field name="priv">
        <type name="SaslAnonymousPrivate" c:type="CamelSaslAnonymousPrivate*"/>
      </field>
    </class>
    <record name="SaslAnonymousClass"
            c:type="CamelSaslAnonymousClass"
            glib:is-gtype-struct-for="SaslAnonymous">
      <source-position filename="src/camel/camel-sasl-anonymous.h" line="65"/>
      <field name="parent_class">
        <type name="SaslClass" c:type="CamelSaslClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="SaslAnonymousPrivate"
            c:type="CamelSaslAnonymousPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-sasl-anonymous.h" line="53"/>
    </record>
    <record name="SaslClass"
            c:type="CamelSaslClass"
            glib:is-gtype-struct-for="Sasl">
      <source-position filename="src/camel/camel-sasl.h" line="77"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="auth_type">
        <type name="ServiceAuthType" c:type="CamelServiceAuthType*"/>
      </field>
      <field name="try_empty_password_sync">
        <callback name="try_empty_password_sync" throws="1">
          <source-position filename="src/camel/camel-sasl.h" line="66"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="399">whether or not @sasl can attempt to authenticate without a
password being provided by the caller. This will be %TRUE for an
authentication method which can attempt to use single-sign-on
credentials, but which can fall back to using a provided password
so it still has the @need_password flag set in its description.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="sasl" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-sasl.c"
                   line="395">a #CamelSasl object</doc>
              <type name="Sasl" c:type="CamelSasl*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-sasl.c"
                   line="396">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="challenge_sync">
        <callback name="challenge_sync" throws="1">
          <source-position filename="src/camel/camel-sasl.h" line="70"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl.c"
                 line="589">the SASL response or %NULL. If an error
occurred, @error will also be set.</doc>
            <array name="GLib.ByteArray" c:type="GByteArray*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="sasl" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-sasl.c"
                   line="577">a #CamelSasl</doc>
              <type name="Sasl" c:type="CamelSasl*"/>
            </parameter>
            <parameter name="token"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-sasl.c"
                   line="578">a token, or %NULL</doc>
              <array name="GLib.ByteArray" c:type="GByteArray*">
                <type name="guint8" c:type="guint8"/>
              </array>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-sasl.c"
                   line="579">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="SaslCramMd5"
           c:symbol-prefix="sasl_cram_md5"
           c:type="CamelSaslCramMd5"
           parent="Sasl"
           glib:type-name="CamelSaslCramMd5"
           glib:get-type="camel_sasl_cram_md5_get_type"
           glib:type-struct="SaslCramMd5Class">
      <source-position filename="src/camel/camel-sasl-cram-md5.h" line="64"/>
      <field name="parent">
        <type name="Sasl" c:type="CamelSasl"/>
      </field>
      <field name="priv">
        <type name="SaslCramMd5Private" c:type="CamelSaslCramMd5Private*"/>
      </field>
    </class>
    <record name="SaslCramMd5Class"
            c:type="CamelSaslCramMd5Class"
            glib:is-gtype-struct-for="SaslCramMd5">
      <source-position filename="src/camel/camel-sasl-cram-md5.h" line="64"/>
      <field name="parent_class">
        <type name="SaslClass" c:type="CamelSaslClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="SaslCramMd5Private"
            c:type="CamelSaslCramMd5Private"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-sasl-cram-md5.h" line="52"/>
    </record>
    <class name="SaslDigestMd5"
           c:symbol-prefix="sasl_digest_md5"
           c:type="CamelSaslDigestMd5"
           parent="Sasl"
           glib:type-name="CamelSaslDigestMd5"
           glib:get-type="camel_sasl_digest_md5_get_type"
           glib:type-struct="SaslDigestMd5Class">
      <source-position filename="src/camel/camel-sasl-digest-md5.h" line="65"/>
      <field name="parent">
        <type name="Sasl" c:type="CamelSasl"/>
      </field>
      <field name="priv">
        <type name="SaslDigestMd5Private" c:type="CamelSaslDigestMd5Private*"/>
      </field>
    </class>
    <record name="SaslDigestMd5Class"
            c:type="CamelSaslDigestMd5Class"
            glib:is-gtype-struct-for="SaslDigestMd5">
      <source-position filename="src/camel/camel-sasl-digest-md5.h" line="65"/>
      <field name="parent_class">
        <type name="SaslClass" c:type="CamelSaslClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="SaslDigestMd5Private"
            c:type="CamelSaslDigestMd5Private"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-sasl-digest-md5.h" line="53"/>
    </record>
    <class name="SaslGssapi"
           c:symbol-prefix="sasl_gssapi"
           c:type="CamelSaslGssapi"
           parent="Sasl"
           glib:type-name="CamelSaslGssapi"
           glib:get-type="camel_sasl_gssapi_get_type"
           glib:type-struct="SaslGssapiClass">
      <source-position filename="src/camel/camel-sasl-gssapi.h" line="65"/>
      <function name="is_available"
                c:identifier="camel_sasl_gssapi_is_available"
                version="3.12">
        <source-position filename="src/camel/camel-sasl-gssapi.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-sasl-gssapi.c"
               line="602">Whether the GSSAPI/KRB5 sasl authentication mechanism is available,
   which means whether Camel was built with KRB5 enabled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </function>
      <method name="override_host_and_user"
              c:identifier="camel_sasl_gssapi_override_host_and_user"
              version="3.12">
        <doc xml:space="preserve"
             filename="src/camel/camel-sasl-gssapi.c"
             line="617">Set host and user to use, instead of those in CamelService's settings.
It's both or none, aka either set both, or the settings values are used.
This is used to not require CamelService instance at all.</doc>
        <source-position filename="src/camel/camel-sasl-gssapi.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sasl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl-gssapi.c"
                 line="619">a #CamelSaslGssapi</doc>
            <type name="SaslGssapi" c:type="CamelSaslGssapi*"/>
          </instance-parameter>
          <parameter name="override_host"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl-gssapi.c"
                 line="620">Host name to use during challenge processing; can be %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="override_user"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-sasl-gssapi.c"
                 line="621">User name to use during challenge processing; can be %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Sasl" c:type="CamelSasl"/>
      </field>
      <field name="priv">
        <type name="SaslGssapiPrivate" c:type="CamelSaslGssapiPrivate*"/>
      </field>
    </class>
    <record name="SaslGssapiClass"
            c:type="CamelSaslGssapiClass"
            glib:is-gtype-struct-for="SaslGssapi">
      <source-position filename="src/camel/camel-sasl-gssapi.h" line="65"/>
      <field name="parent_class">
        <type name="SaslClass" c:type="CamelSaslClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="SaslGssapiPrivate"
            c:type="CamelSaslGssapiPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-sasl-gssapi.h" line="53"/>
    </record>
    <class name="SaslLogin"
           c:symbol-prefix="sasl_login"
           c:type="CamelSaslLogin"
           parent="Sasl"
           glib:type-name="CamelSaslLogin"
           glib:get-type="camel_sasl_login_get_type"
           glib:type-struct="SaslLoginClass">
      <source-position filename="src/camel/camel-sasl-login.h" line="64"/>
      <field name="parent">
        <type name="Sasl" c:type="CamelSasl"/>
      </field>
      <field name="priv">
        <type name="SaslLoginPrivate" c:type="CamelSaslLoginPrivate*"/>
      </field>
    </class>
    <record name="SaslLoginClass"
            c:type="CamelSaslLoginClass"
            glib:is-gtype-struct-for="SaslLogin">
      <source-position filename="src/camel/camel-sasl-login.h" line="64"/>
      <field name="parent_class">
        <type name="SaslClass" c:type="CamelSaslClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="SaslLoginPrivate"
            c:type="CamelSaslLoginPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-sasl-login.h" line="52"/>
    </record>
    <class name="SaslNTLM"
           c:symbol-prefix="sasl_ntlm"
           c:type="CamelSaslNTLM"
           parent="Sasl"
           glib:type-name="CamelSaslNTLM"
           glib:get-type="camel_sasl_ntlm_get_type"
           glib:type-struct="SaslNTLMClass">
      <source-position filename="src/camel/camel-sasl-ntlm.h" line="63"/>
      <field name="parent">
        <type name="Sasl" c:type="CamelSasl"/>
      </field>
      <field name="priv">
        <type name="SaslNTLMPrivate" c:type="CamelSaslNTLMPrivate*"/>
      </field>
    </class>
    <record name="SaslNTLMClass"
            c:type="CamelSaslNTLMClass"
            glib:is-gtype-struct-for="SaslNTLM">
      <source-position filename="src/camel/camel-sasl-ntlm.h" line="63"/>
      <field name="parent_class">
        <type name="SaslClass" c:type="CamelSaslClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="SaslNTLMPrivate"
            c:type="CamelSaslNTLMPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-sasl-ntlm.h" line="51"/>
    </record>
    <class name="SaslPOPB4SMTP"
           c:symbol-prefix="sasl_popb4smtp"
           c:type="CamelSaslPOPB4SMTP"
           parent="Sasl"
           glib:type-name="CamelSaslPOPB4SMTP"
           glib:get-type="camel_sasl_popb4smtp_get_type"
           glib:type-struct="SaslPOPB4SMTPClass">
      <source-position filename="src/camel/camel-sasl-popb4smtp.h" line="64"/>
      <field name="parent">
        <type name="Sasl" c:type="CamelSasl"/>
      </field>
      <field name="priv">
        <type name="SaslPOPB4SMTPPrivate" c:type="CamelSaslPOPB4SMTPPrivate*"/>
      </field>
    </class>
    <record name="SaslPOPB4SMTPClass"
            c:type="CamelSaslPOPB4SMTPClass"
            glib:is-gtype-struct-for="SaslPOPB4SMTP">
      <source-position filename="src/camel/camel-sasl-popb4smtp.h" line="64"/>
      <field name="parent_class">
        <type name="SaslClass" c:type="CamelSaslClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="SaslPOPB4SMTPPrivate"
            c:type="CamelSaslPOPB4SMTPPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-sasl-popb4smtp.h" line="52"/>
    </record>
    <class name="SaslPlain"
           c:symbol-prefix="sasl_plain"
           c:type="CamelSaslPlain"
           parent="Sasl"
           glib:type-name="CamelSaslPlain"
           glib:get-type="camel_sasl_plain_get_type"
           glib:type-struct="SaslPlainClass">
      <source-position filename="src/camel/camel-sasl-plain.h" line="64"/>
      <field name="parent">
        <type name="Sasl" c:type="CamelSasl"/>
      </field>
      <field name="priv">
        <type name="SaslPlainPrivate" c:type="CamelSaslPlainPrivate*"/>
      </field>
    </class>
    <record name="SaslPlainClass"
            c:type="CamelSaslPlainClass"
            glib:is-gtype-struct-for="SaslPlain">
      <source-position filename="src/camel/camel-sasl-plain.h" line="64"/>
      <field name="parent_class">
        <type name="SaslClass" c:type="CamelSaslClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="SaslPlainPrivate"
            c:type="CamelSaslPlainPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-sasl-plain.h" line="52"/>
    </record>
    <record name="SaslPrivate"
            c:type="CamelSaslPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-sasl.h" line="52"/>
    </record>
    <class name="SaslXOAuth2"
           c:symbol-prefix="sasl_xoauth2"
           c:type="CamelSaslXOAuth2"
           parent="Sasl"
           glib:type-name="CamelSaslXOAuth2"
           glib:get-type="camel_sasl_xoauth2_get_type"
           glib:type-struct="SaslXOAuth2Class">
      <source-position filename="src/camel/camel-sasl-xoauth2.h" line="57"/>
      <field name="parent">
        <type name="Sasl" c:type="CamelSasl"/>
      </field>
      <field name="priv">
        <type name="SaslXOAuth2Private" c:type="CamelSaslXOAuth2Private*"/>
      </field>
    </class>
    <record name="SaslXOAuth2Class"
            c:type="CamelSaslXOAuth2Class"
            glib:is-gtype-struct-for="SaslXOAuth2">
      <source-position filename="src/camel/camel-sasl-xoauth2.h" line="57"/>
      <field name="parent_class">
        <type name="SaslClass" c:type="CamelSaslClass"/>
      </field>
    </record>
    <class name="SaslXOAuth2Google"
           c:symbol-prefix="sasl_xoauth2_google"
           c:type="CamelSaslXOAuth2Google"
           parent="SaslXOAuth2"
           glib:type-name="CamelSaslXOAuth2Google"
           glib:get-type="camel_sasl_xoauth2_google_get_type"
           glib:type-struct="SaslXOAuth2GoogleClass">
      <source-position filename="src/camel/camel-sasl-xoauth2-google.h"
                       line="57"/>
      <field name="parent">
        <type name="SaslXOAuth2" c:type="CamelSaslXOAuth2"/>
      </field>
      <field name="priv">
        <type name="SaslXOAuth2GooglePrivate"
              c:type="CamelSaslXOAuth2GooglePrivate*"/>
      </field>
    </class>
    <record name="SaslXOAuth2GoogleClass"
            c:type="CamelSaslXOAuth2GoogleClass"
            glib:is-gtype-struct-for="SaslXOAuth2Google">
      <source-position filename="src/camel/camel-sasl-xoauth2-google.h"
                       line="57"/>
      <field name="parent_class">
        <type name="SaslXOAuth2Class" c:type="CamelSaslXOAuth2Class"/>
      </field>
    </record>
    <record name="SaslXOAuth2GooglePrivate"
            c:type="CamelSaslXOAuth2GooglePrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-sasl-xoauth2-google.h"
                       line="48"/>
    </record>
    <class name="SaslXOAuth2Outlook"
           c:symbol-prefix="sasl_xoauth2_outlook"
           c:type="CamelSaslXOAuth2Outlook"
           parent="SaslXOAuth2"
           glib:type-name="CamelSaslXOAuth2Outlook"
           glib:get-type="camel_sasl_xoauth2_outlook_get_type"
           glib:type-struct="SaslXOAuth2OutlookClass">
      <source-position filename="src/camel/camel-sasl-xoauth2-outlook.h"
                       line="57"/>
      <field name="parent">
        <type name="SaslXOAuth2" c:type="CamelSaslXOAuth2"/>
      </field>
      <field name="priv">
        <type name="SaslXOAuth2OutlookPrivate"
              c:type="CamelSaslXOAuth2OutlookPrivate*"/>
      </field>
    </class>
    <record name="SaslXOAuth2OutlookClass"
            c:type="CamelSaslXOAuth2OutlookClass"
            glib:is-gtype-struct-for="SaslXOAuth2Outlook">
      <source-position filename="src/camel/camel-sasl-xoauth2-outlook.h"
                       line="57"/>
      <field name="parent_class">
        <type name="SaslXOAuth2Class" c:type="CamelSaslXOAuth2Class"/>
      </field>
    </record>
    <record name="SaslXOAuth2OutlookPrivate"
            c:type="CamelSaslXOAuth2OutlookPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-sasl-xoauth2-outlook.h"
                       line="48"/>
    </record>
    <record name="SaslXOAuth2Private"
            c:type="CamelSaslXOAuth2Private"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-sasl-xoauth2.h" line="48"/>
    </record>
    <class name="SaslXOAuth2Yahoo"
           c:symbol-prefix="sasl_xoauth2_yahoo"
           c:type="CamelSaslXOAuth2Yahoo"
           parent="SaslXOAuth2"
           glib:type-name="CamelSaslXOAuth2Yahoo"
           glib:get-type="camel_sasl_xoauth2_yahoo_get_type"
           glib:type-struct="SaslXOAuth2YahooClass">
      <source-position filename="src/camel/camel-sasl-xoauth2-yahoo.h"
                       line="57"/>
      <field name="parent">
        <type name="SaslXOAuth2" c:type="CamelSaslXOAuth2"/>
      </field>
      <field name="priv">
        <type name="SaslXOAuth2YahooPrivate"
              c:type="CamelSaslXOAuth2YahooPrivate*"/>
      </field>
    </class>
    <record name="SaslXOAuth2YahooClass"
            c:type="CamelSaslXOAuth2YahooClass"
            glib:is-gtype-struct-for="SaslXOAuth2Yahoo">
      <source-position filename="src/camel/camel-sasl-xoauth2-yahoo.h"
                       line="57"/>
      <field name="parent_class">
        <type name="SaslXOAuth2Class" c:type="CamelSaslXOAuth2Class"/>
      </field>
    </record>
    <record name="SaslXOAuth2YahooPrivate"
            c:type="CamelSaslXOAuth2YahooPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-sasl-xoauth2-yahoo.h"
                       line="48"/>
    </record>
    <class name="Service"
           c:symbol-prefix="service"
           c:type="CamelService"
           parent="Object"
           abstract="1"
           glib:type-name="CamelService"
           glib:get-type="camel_service_get_type"
           glib:type-struct="ServiceClass">
      <source-position filename="src/camel/camel-service.h" line="125"/>
      <implements name="Gio.Initable"/>
      <virtual-method name="authenticate_sync"
                      invoker="authenticate_sync"
                      version="3.4"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="2055">Attempts to authenticate @service using @mechanism and, if necessary,
@service's #CamelService:password property.  The function makes only
ONE attempt at authentication and does not loop.

If the authentication attempt completed and the server accepted the
credentials, the function returns #CAMEL_AUTHENTICATION_ACCEPTED.

If the authentication attempt completed but the server rejected the
credentials, the function returns #CAMEL_AUTHENTICATION_REJECTED.

If the authentication attempt failed to complete due to a network
communication issue or some other mishap, the function sets @error
and returns #CAMEL_AUTHENTICATION_ERROR.

Generally this function should only be called from a #CamelSession
subclass in order to implement its own authentication loop.</doc>
        <source-position filename="src/camel/camel-service.h" line="114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-service.c"
               line="2079">the authentication result</doc>
          <type name="AuthenticationResult"
                c:type="CamelAuthenticationResult"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="2057">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
          <parameter name="mechanism"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="2058">a SASL mechanism name, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="2059">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="connect_sync"
                      invoker="connect_sync"
                      version="3.6"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="1713">Connects @service to a remote server using the information in its
#CamelService:settings instance.

If a connect operation is already in progress when this function is
called, its results will be reflected in this connect operation.</doc>
        <source-position filename="src/camel/camel-service.h" line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-service.c"
               line="1725">%TRUE if the connection is made or %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1715">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1716">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="disconnect_sync"
                      invoker="disconnect_sync"
                      version="3.6"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="1878">Disconnect from the service. If @clean is %FALSE, it should not
try to do any synchronizing or other cleanup of the connection.

If a disconnect operation is already in progress when this function is
called, its results will be reflected in this disconnect operation.

If any connect operations are in progress when this function is called,
they will be cancelled.</doc>
        <source-position filename="src/camel/camel-service.h" line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-service.c"
               line="1894">%TRUE if the connection was severed or %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1880">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
          <parameter name="clean" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1881">whether or not to try to disconnect cleanly</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1882">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_name" invoker="get_name">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="1418">This gets the name of the service in a "friendly" (suitable for
humans) form. If @brief is %TRUE, this should be a brief description
such as for use in the folder tree. If @brief is %FALSE, it should
be a more complete and mostly unambiguous description.</doc>
        <source-position filename="src/camel/camel-service.h" line="102"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-service.c"
               line="1428">a description of the service which the caller must free</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1420">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
          <parameter name="brief" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1421">whether or not to use a briefer form</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="query_auth_types_sync"
                      invoker="query_auth_types_sync"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="2237">Obtains a list of authentication types supported by @service.
Free the returned list with g_list_free().</doc>
        <source-position filename="src/camel/camel-service.h" line="118"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="src/camel/camel-service.c"
               line="2246">a list of #CamelServiceAuthType structs</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ServiceAuthType"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="2239">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="2240">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="authenticate"
              c:identifier="camel_service_authenticate"
              version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="2134">Asynchronously attempts to authenticate @service using @mechanism and,
if necessary, @service's #CamelService:password property.  The function
makes only ONE attempt at authentication and does not loop.

Generally this function should only be called from a #CamelSession
subclass in order to implement its own authentication loop.

When the operation is finished, @callback will be called.  You can
then call camel_service_authenticate_finish() to get the result of
the operation.</doc>
        <source-position filename="src/camel/camel-service.h" line="201"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="2136">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
          <parameter name="mechanism"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="2137">a SASL mechanism name, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="2138">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="2139">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="2140">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="2141">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="authenticate_finish"
              c:identifier="camel_service_authenticate_finish"
              version="3.4"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="2185">Finishes the operation started with camel_service_authenticate().

If the authentication attempt completed and the server accepted the
credentials, the function returns #CAMEL_AUTHENTICATION_ACCEPTED.

If the authentication attempt completed but the server rejected the
credentials, the function returns #CAMEL_AUTHENTICATION_REJECTED.

If the authentication attempt failed to complete due to a network
communication issue or some other mishap, the function sets @error
and returns #CAMEL_AUTHENTICATION_ERROR.</doc>
        <source-position filename="src/camel/camel-service.h" line="208"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-service.c"
               line="2203">the authentication result</doc>
          <type name="AuthenticationResult"
                c:type="CamelAuthenticationResult"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="2187">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="2188">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="authenticate_sync"
              c:identifier="camel_service_authenticate_sync"
              version="3.4"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="2055">Attempts to authenticate @service using @mechanism and, if necessary,
@service's #CamelService:password property.  The function makes only
ONE attempt at authentication and does not loop.

If the authentication attempt completed and the server accepted the
credentials, the function returns #CAMEL_AUTHENTICATION_ACCEPTED.

If the authentication attempt completed but the server rejected the
credentials, the function returns #CAMEL_AUTHENTICATION_REJECTED.

If the authentication attempt failed to complete due to a network
communication issue or some other mishap, the function sets @error
and returns #CAMEL_AUTHENTICATION_ERROR.

Generally this function should only be called from a #CamelSession
subclass in order to implement its own authentication loop.</doc>
        <source-position filename="src/camel/camel-service.h" line="197"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-service.c"
               line="2079">the authentication result</doc>
          <type name="AuthenticationResult"
                c:type="CamelAuthenticationResult"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="2057">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
          <parameter name="mechanism"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="2058">a SASL mechanism name, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="2059">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect"
              c:identifier="camel_service_connect"
              version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="1755">Asynchronously connects @service to a remote server using the information
in its #CamelService:settings instance.

If a connect operation is already in progress when this function is
called, its results will be reflected in this connect operation.

If any disconnect operations are in progress when this function is
called, they will be cancelled.

When the operation is finished, @callback will be called.  You can
then call camel_service_connect_finish() to get the result of the
operation.</doc>
        <source-position filename="src/camel/camel-service.h" line="175"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1757">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1758">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1759">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1760">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1761">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_finish"
              c:identifier="camel_service_connect_finish"
              version="3.6"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="1851">Finishes the operation started with camel_service_connect().</doc>
        <source-position filename="src/camel/camel-service.h" line="180"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-service.c"
               line="1859">%TRUE if the connection was made or %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1853">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1854">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_sync"
              c:identifier="camel_service_connect_sync"
              version="3.6"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="1713">Connects @service to a remote server using the information in its
#CamelService:settings instance.

If a connect operation is already in progress when this function is
called, its results will be reflected in this connect operation.</doc>
        <source-position filename="src/camel/camel-service.h" line="172"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-service.c"
               line="1725">%TRUE if the connection is made or %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1715">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1716">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect"
              c:identifier="camel_service_disconnect"
              version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="1925">If a disconnect operation is already in progress when this function is
called, its results will be reflected in this disconnect operation.

If any connect operations are in progress when this function is called,
they will be cancelled.

When the operation is finished, @callback will be called.  You can
then call camel_service_disconnect_finish() to get the result of the
operation.</doc>
        <source-position filename="src/camel/camel-service.h" line="187"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1927">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
          <parameter name="clean" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1928">whether or not to try to disconnect cleanly</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1929">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1930">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1931">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1932">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect_finish"
              c:identifier="camel_service_disconnect_finish"
              version="3.6"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="2028">Finishes the operation started with camel_service_disconnect().</doc>
        <source-position filename="src/camel/camel-service.h" line="193"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-service.c"
               line="2036">%TRUE if the connection was severed or %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="2030">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="2031">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect_sync"
              c:identifier="camel_service_disconnect_sync"
              version="3.6"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="1878">Disconnect from the service. If @clean is %FALSE, it should not
try to do any synchronizing or other cleanup of the connection.

If a disconnect operation is already in progress when this function is
called, its results will be reflected in this disconnect operation.

If any connect operations are in progress when this function is called,
they will be cancelled.</doc>
        <source-position filename="src/camel/camel-service.h" line="183"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-service.c"
               line="1894">%TRUE if the connection was severed or %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1880">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
          <parameter name="clean" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1881">whether or not to try to disconnect cleanly</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1882">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_display_name"
              c:identifier="camel_service_dup_display_name"
              version="3.12">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="1225">Thread-safe variation of camel_service_get_display_name().
Use this function when accessing @service from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="src/camel/camel-service.h" line="144"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-service.c"
               line="1234">a newly-allocated copy of #CamelService:display-name</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1227">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_password"
              c:identifier="camel_service_dup_password"
              version="3.12">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="1313">Thread-safe variation of camel_service_get_password().
Use this function when accessing @service from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="src/camel/camel-service.h" line="148"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-service.c"
               line="1322">a newly-allocated copy of #CamelService:password</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1315">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connection_status"
              c:identifier="camel_service_get_connection_status"
              glib:get-property="connection-status"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="1182">Returns the connection status for @service.</doc>
        <source-position filename="src/camel/camel-service.h" line="141"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-service.c"
               line="1188">the connection status</doc>
          <type name="ServiceConnectionStatus"
                c:type="CamelServiceConnectionStatus"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1184">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display_name"
              c:identifier="camel_service_get_display_name"
              glib:get-property="display-name"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="1202">Returns the display name for @service, or %NULL if @service has not
been given a display name.  The display name is intended for use in
a user interface and should generally be given a user-defined name.

Compare this with camel_service_get_name(), which returns a built-in
description of the type of service (IMAP, SMTP, etc.).</doc>
        <source-position filename="src/camel/camel-service.h" line="143"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-service.c"
               line="1213">the display name for @service, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1204">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="camel_service_get_name">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="1418">This gets the name of the service in a "friendly" (suitable for
humans) form. If @brief is %TRUE, this should be a brief description
such as for use in the folder tree. If @brief is %FALSE, it should
be a more complete and mostly unambiguous description.</doc>
        <source-position filename="src/camel/camel-service.h" line="154"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-service.c"
               line="1428">a description of the service which the caller must free</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1420">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
          <parameter name="brief" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1421">whether or not to use a briefer form</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_password"
              c:identifier="camel_service_get_password"
              glib:get-property="password"
              version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="1294">Returns the password for @service.  Some SASL mechanisms use this
when attempting to authenticate.</doc>
        <source-position filename="src/camel/camel-service.h" line="147"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-service.c"
               line="1301">the password for @service</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1296">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_provider"
              c:identifier="camel_service_get_provider"
              glib:get-property="provider">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="1445">Gets the #CamelProvider associated with the service.</doc>
        <source-position filename="src/camel/camel-service.h" line="156"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-service.c"
               line="1451">the #CamelProvider</doc>
          <type name="Provider" c:type="CamelProvider*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1447">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uid"
              c:identifier="camel_service_get_uid"
              glib:get-property="uid"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="1648">Gets the unique identifier string associated with the service.</doc>
        <source-position filename="src/camel/camel-service.h" line="168"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-service.c"
               line="1654">the UID string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1650">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user_cache_dir"
              c:identifier="camel_service_get_user_cache_dir"
              version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="1397">Returns the base directory under which to store cache data
for @service.  The directory is formed by appending the directory
returned by camel_session_get_user_cache_dir() with the service's
#CamelService:uid value.</doc>
        <source-position filename="src/camel/camel-service.h" line="152"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-service.c"
               line="1406">the base cache directory for @service</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1399">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user_data_dir"
              c:identifier="camel_service_get_user_data_dir"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="1376">Returns the base directory under which to store user-specific data
for @service.  The directory is formed by appending the directory
returned by camel_session_get_user_data_dir() with the service's
#CamelService:uid value.</doc>
        <source-position filename="src/camel/camel-service.h" line="151"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-service.c"
               line="1385">the base directory for @service</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1378">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="migrate_files"
              c:identifier="camel_service_migrate_files"
              version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="1086">Performs any necessary file migrations for @service.  This should be
called after installing or configuring the @service's #CamelSettings,
since it requires building a URL string for @service.</doc>
        <source-position filename="src/camel/camel-service.h" line="138"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1088">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="new_camel_url"
              c:identifier="camel_service_new_camel_url"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="1119">Returns a new #CamelURL representing @service.
Free the returned #CamelURL with camel_url_free().</doc>
        <source-position filename="src/camel/camel-service.h" line="139"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-service.c"
               line="1126">a new #CamelURL</doc>
          <type name="URL" c:type="CamelURL*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1121">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="query_auth_types"
              c:identifier="camel_service_query_auth_types"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="2288">Asynchronously obtains a list of authentication types supported by
@service.

When the operation is finished, @callback will be called.  You can
then call camel_service_query_auth_types_finish() to get the result
of the operation.</doc>
        <source-position filename="src/camel/camel-service.h" line="216"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="2290">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="2291">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="2292">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="2293">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="2294">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="query_auth_types_finish"
              c:identifier="camel_service_query_auth_types_finish"
              version="3.2"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="2325">Finishes the operation started with camel_service_query_auth_types().
Free the returned list with g_list_free().</doc>
        <source-position filename="src/camel/camel-service.h" line="221"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="src/camel/camel-service.c"
               line="2334">a list of #CamelServiceAuthType structs</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ServiceAuthType"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="2327">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="2328">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="query_auth_types_sync"
              c:identifier="camel_service_query_auth_types_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="2237">Obtains a list of authentication types supported by @service.
Free the returned list with g_list_free().</doc>
        <source-position filename="src/camel/camel-service.h" line="212"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="src/camel/camel-service.c"
               line="2246">a list of #CamelServiceAuthType structs</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ServiceAuthType"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="2239">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="2240">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="queue_task"
              c:identifier="camel_service_queue_task"
              version="3.12">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="1666">Adds @task to a queue of waiting tasks with the same source object.
Queued tasks execute one at a time in the order they were added.  When
@task reaches the front of the queue, it will be dispatched by invoking
@task_func in a separate thread.  If @task is cancelled while queued,
it will complete immediately with an appropriate error.

This is primarily intended for use by #CamelStore, #CamelTransport and
#CamelFolder to achieve ordered invocation of synchronous class methods.</doc>
        <source-position filename="src/camel/camel-service.h" line="169"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1668">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
          <parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1669">a #GTask</doc>
            <type name="Gio.Task" c:type="GTask*"/>
          </parameter>
          <parameter name="task_func" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1670">function to call when @task is dispatched</doc>
            <type name="Gio.TaskThreadFunc" c:type="GTaskThreadFunc"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref_proxy_resolver"
              c:identifier="camel_service_ref_proxy_resolver"
              version="3.12">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="1461">Returns the #GProxyResolver for @service.  If an application needs to
override this, it should do so prior to calling functions on @service
that may require a network connection.

The returned #GProxyResolver is referenced for thread-safety and must
be unreferenced with g_object_unref() when finished with it.</doc>
        <source-position filename="src/camel/camel-service.h" line="158"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-service.c"
               line="1472">a #GProxyResolver, or %NULL</doc>
          <type name="Gio.ProxyResolver" c:type="GProxyResolver*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1463">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_session"
              c:identifier="camel_service_ref_session"
              version="3.8">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="1538">Returns the #CamelSession associated with the service.

The returned #CamelSession is referenced for thread-safety.  Unreference
the #CamelSession with g_object_unref() when finished with it.</doc>
        <source-position filename="src/camel/camel-service.h" line="164"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-service.c"
               line="1547">the #CamelSession</doc>
          <type name="Session" c:type="_CamelSession*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1540">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_settings"
              c:identifier="camel_service_ref_settings"
              version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="1559">Returns the #CamelSettings instance associated with the service.

The returned #CamelSettings is referenced for thread-safety and must
be unreferenced with g_object_unref() when finished with it.</doc>
        <source-position filename="src/camel/camel-service.h" line="165"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-service.c"
               line="1568">the #CamelSettings</doc>
          <type name="Settings" c:type="CamelSettings*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1561">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_display_name"
              c:identifier="camel_service_set_display_name"
              glib:set-property="display-name"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="1256">Assigns a UTF-8 display name to @service.  The display name is intended
for use in a user interface and should generally be given a user-defined
name.

Compare this with camel_service_get_name(), which returns a built-in
description of the type of service (IMAP, SMTP, etc.).</doc>
        <source-position filename="src/camel/camel-service.h" line="145"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1258">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
          <parameter name="display_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1259">a valid UTF-8 string, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_password"
              c:identifier="camel_service_set_password"
              glib:set-property="password"
              version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="1344">Sets the password for @service.  Use this function to cache the password
in memory after obtaining it through camel_session_get_password().  Some
SASL mechanisms use this when attempting to authenticate.</doc>
        <source-position filename="src/camel/camel-service.h" line="149"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1346">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1347">the password for @service</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_proxy_resolver"
              c:identifier="camel_service_set_proxy_resolver"
              glib:set-property="proxy-resolver"
              version="3.12">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="1493">Sets the #GProxyResolver for @service.  If an application needs to
override this, it should do so prior to calling functions on @service
that may require a network connection.</doc>
        <source-position filename="src/camel/camel-service.h" line="160"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1495">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
          <parameter name="proxy_resolver"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1496">a #GProxyResolver, or %NULL for the default</doc>
            <type name="Gio.ProxyResolver" c:type="GProxyResolver*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_settings"
              c:identifier="camel_service_set_settings"
              glib:set-property="settings"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="1591">Associates a new #CamelSettings instance with the service.
The @settings instance must match the settings type defined in
#CamelServiceClass.  If @settings is %NULL, a new #CamelSettings
instance of the appropriate type is created with all properties
set to defaults.</doc>
        <source-position filename="src/camel/camel-service.h" line="166"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1593">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </instance-parameter>
          <parameter name="settings"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1594">an instance derviced from #CamelSettings, or %NULL</doc>
            <type name="Settings" c:type="CamelSettings*"/>
          </parameter>
        </parameters>
      </method>
      <property name="connection-status"
                transfer-ownership="none"
                getter="get_connection_status"
                default-value="CAMEL_SERVICE_DISCONNECTED">
        <type name="ServiceConnectionStatus"/>
      </property>
      <property name="display-name"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_display_name"
                getter="get_display_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="password"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_password"
                getter="get_password"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="provider"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_provider">
        <type name="Provider"/>
      </property>
      <property name="proxy-resolver"
                writable="1"
                transfer-ownership="none"
                setter="set_proxy_resolver">
        <type name="Gio.ProxyResolver"/>
      </property>
      <property name="session"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Session"/>
      </property>
      <property name="settings"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_settings">
        <type name="Settings"/>
      </property>
      <property name="uid"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_uid"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Object" c:type="CamelObject"/>
      </field>
      <field name="priv">
        <type name="ServicePrivate" c:type="CamelServicePrivate*"/>
      </field>
    </class>
    <record name="ServiceAuthType"
            c:type="CamelServiceAuthType"
            glib:type-name="CamelServiceAuthType"
            glib:get-type="camel_service_auth_type_get_type"
            c:symbol-prefix="service_auth_type">
      <source-position filename="src/camel/camel-service.h" line="134"/>
      <field name="name" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="description" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="authproto" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="need_password" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <method name="copy"
              c:identifier="camel_service_auth_type_copy"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="2353">Copies the @service_auth_type struct.
Does nothing and returns the given object in reality, needed for the introspection.</doc>
        <source-position filename="src/camel/camel-service.h" line="228"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-service.c"
               line="2360">the copy of @service_auth_type</doc>
          <type name="ServiceAuthType" c:type="CamelServiceAuthType*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service_auth_type"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="2355">a #CamelServiceAuthType</doc>
            <type name="ServiceAuthType" c:type="const CamelServiceAuthType*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free"
              c:identifier="camel_service_auth_type_free"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.c"
             line="2373">Frees the @service_auth_type struct.
Does nothing in reality, needed for the introspection.</doc>
        <source-position filename="src/camel/camel-service.h" line="229"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service_auth_type"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="2375">a #CamelServiceAuthType</doc>
            <type name="ServiceAuthType" c:type="CamelServiceAuthType*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="ServiceClass"
            c:type="CamelServiceClass"
            glib:is-gtype-struct-for="Service">
      <source-position filename="src/camel/camel-service.h" line="125"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="CamelObjectClass"/>
      </field>
      <field name="settings_type">
        <type name="GType" c:type="GType"/>
      </field>
      <field name="get_name">
        <callback name="get_name">
          <source-position filename="src/camel/camel-service.h" line="102"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1428">a description of the service which the caller must free</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-service.c"
                   line="1420">a #CamelService</doc>
              <type name="Service" c:type="CamelService*"/>
            </parameter>
            <parameter name="brief" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-service.c"
                   line="1421">whether or not to use a briefer form</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="connect_sync">
        <callback name="connect_sync" throws="1">
          <source-position filename="src/camel/camel-service.h" line="106"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1725">%TRUE if the connection is made or %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-service.c"
                   line="1715">a #CamelService</doc>
              <type name="Service" c:type="CamelService*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-service.c"
                   line="1716">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="disconnect_sync">
        <callback name="disconnect_sync" throws="1">
          <source-position filename="src/camel/camel-service.h" line="109"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="1894">%TRUE if the connection was severed or %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-service.c"
                   line="1880">a #CamelService</doc>
              <type name="Service" c:type="CamelService*"/>
            </parameter>
            <parameter name="clean" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-service.c"
                   line="1881">whether or not to try to disconnect cleanly</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-service.c"
                   line="1882">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="authenticate_sync">
        <callback name="authenticate_sync" throws="1">
          <source-position filename="src/camel/camel-service.h" line="114"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="2079">the authentication result</doc>
            <type name="AuthenticationResult"
                  c:type="CamelAuthenticationResult"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-service.c"
                   line="2057">a #CamelService</doc>
              <type name="Service" c:type="CamelService*"/>
            </parameter>
            <parameter name="mechanism"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-service.c"
                   line="2058">a SASL mechanism name, or %NULL</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-service.c"
                   line="2059">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="query_auth_types_sync">
        <callback name="query_auth_types_sync" throws="1">
          <source-position filename="src/camel/camel-service.h" line="118"/>
          <return-value transfer-ownership="container">
            <doc xml:space="preserve"
                 filename="src/camel/camel-service.c"
                 line="2246">a list of #CamelServiceAuthType structs</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="ServiceAuthType"/>
            </type>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-service.c"
                   line="2239">a #CamelService</doc>
              <type name="Service" c:type="CamelService*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-service.c"
                   line="2240">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="ServiceConnectionStatus"
                 version="3.6"
                 glib:type-name="CamelServiceConnectionStatus"
                 glib:get-type="camel_service_connection_status_get_type"
                 c:type="CamelServiceConnectionStatus">
      <doc xml:space="preserve"
           filename="src/camel/camel-enums.h"
           line="447">Connection status returned by camel_service_get_connection_status().</doc>
      <member name="disconnected"
              value="0"
              c:identifier="CAMEL_SERVICE_DISCONNECTED"
              glib:nick="disconnected"
              glib:name="CAMEL_SERVICE_DISCONNECTED">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="449">#CamelService is disconnected from a remote server.</doc>
      </member>
      <member name="connecting"
              value="1"
              c:identifier="CAMEL_SERVICE_CONNECTING"
              glib:nick="connecting"
              glib:name="CAMEL_SERVICE_CONNECTING">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="451">#CamelService is connecting to a remote server.</doc>
      </member>
      <member name="connected"
              value="2"
              c:identifier="CAMEL_SERVICE_CONNECTED"
              glib:nick="connected"
              glib:name="CAMEL_SERVICE_CONNECTED">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="453">#CamelService is connected to a remote server.</doc>
      </member>
      <member name="disconnecting"
              value="3"
              c:identifier="CAMEL_SERVICE_DISCONNECTING"
              glib:nick="disconnecting"
              glib:name="CAMEL_SERVICE_DISCONNECTING">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="455">#CamelService is disconnecting from a remote server.</doc>
      </member>
    </enumeration>
    <enumeration name="ServiceError"
                 version="2.32"
                 glib:type-name="CamelServiceError"
                 glib:get-type="camel_service_error_get_type"
                 c:type="CamelServiceError"
                 glib:error-domain="camel-service-error-quark">
      <member name="invalid"
              value="0"
              c:identifier="CAMEL_SERVICE_ERROR_INVALID"
              glib:nick="invalid"
              glib:name="CAMEL_SERVICE_ERROR_INVALID">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.h"
             line="75">a generic service error code</doc>
      </member>
      <member name="url_invalid"
              value="1"
              c:identifier="CAMEL_SERVICE_ERROR_URL_INVALID"
              glib:nick="url-invalid"
              glib:name="CAMEL_SERVICE_ERROR_URL_INVALID">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.h"
             line="76">the URL for the service is invalid</doc>
      </member>
      <member name="unavailable"
              value="2"
              c:identifier="CAMEL_SERVICE_ERROR_UNAVAILABLE"
              glib:nick="unavailable"
              glib:name="CAMEL_SERVICE_ERROR_UNAVAILABLE">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.h"
             line="77">the service is unavailable</doc>
      </member>
      <member name="cant_authenticate"
              value="3"
              c:identifier="CAMEL_SERVICE_ERROR_CANT_AUTHENTICATE"
              glib:nick="cant-authenticate"
              glib:name="CAMEL_SERVICE_ERROR_CANT_AUTHENTICATE">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.h"
             line="78">failed to authenitcate</doc>
      </member>
      <member name="not_connected"
              value="4"
              c:identifier="CAMEL_SERVICE_ERROR_NOT_CONNECTED"
              glib:nick="not-connected"
              glib:name="CAMEL_SERVICE_ERROR_NOT_CONNECTED">
        <doc xml:space="preserve"
             filename="src/camel/camel-service.h"
             line="79">the service is not connected</doc>
      </member>
      <function name="quark" c:identifier="camel_service_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <record name="ServicePrivate"
            c:type="CamelServicePrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-service.h" line="71"/>
    </record>
    <class name="Session"
           c:symbol-prefix="session"
           c:type="CamelSession"
           parent="GObject.Object"
           glib:type-name="CamelSession"
           glib:get-type="camel_session_get_type"
           glib:type-struct="SessionClass">
      <source-position filename="src/camel/camel-session.h" line="175"/>
      <virtual-method name="add_service"
                      invoker="add_service"
                      version="3.2"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="875">Instantiates a new #CamelService for @session.  The @uid identifies the
service for future lookup.  The @protocol indicates which #CamelProvider
holds the #GType of the #CamelService subclass to instantiate.  The @type
explicitly designates the service as a #CamelStore or #CamelTransport.

If the given @uid has already been added, the existing #CamelService
with that @uid is returned regardless of whether it agrees with the
given @protocol and @type.

If no #CamelProvider is available to handle the given @protocol, or
if the #CamelProvider does not specify a valid #GType for @type, the
function sets @error and returns %NULL.

The returned #CamelService is referenced for thread-safety and must be
unreferenced with g_object_unref() when finished with it.</doc>
        <source-position filename="src/camel/camel-session.h" line="97"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="899">a #CamelService instance, or %NULL on error</doc>
          <type name="Service" c:type="CamelService*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="877">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="878">a unique identifier string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="protocol" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="879">the service protocol</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="880">the service type</doc>
            <type name="ProviderType" c:type="CamelProviderType"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="addressbook_contains_sync"
                      invoker="addressbook_contains_sync"
                      version="3.44"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="1350">Look up in an address book @book_uid for an address @email_address
and returns whether any such contact exists.

The @book_uid can be either one of the special constants
%CAMEL_SESSION_BOOK_UID_ANY or %CAMEL_SESSION_BOOK_UID_COMPLETION,
or it can be a UID of a configured address book.

The @email_address can contain multiple addresses, then the function
checks whether any of the given addresses is in the address book.</doc>
        <source-position filename="src/camel/camel-session.h" line="152"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="1368">%TRUE, when the @email_address could be found in the @book_uid</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1352">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="book_uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1353">an address book UID</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="email_address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1354">an email address to check for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1355">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="authenticate_sync"
                      invoker="authenticate_sync"
                      version="3.4"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="1680">Authenticates @service, which may involve repeated calls to
camel_service_authenticate() or camel_service_authenticate_sync().
A #CamelSession subclass is largely responsible for implementing this,
and should handle things like user prompts and secure password storage.
These issues are out-of-scope for Camel.

If an error occurs, or if authentication is aborted, the function sets
@error and returns %FALSE.</doc>
        <source-position filename="src/camel/camel-session.h" line="127"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="1697">%TRUE on success, %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1682">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1683">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </parameter>
          <parameter name="mechanism"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1684">a SASL mechanism name, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1685">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="forget_password"
                      invoker="forget_password"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="1186">This function is used by a #CamelService to tell the application
that the authentication information it provided via
camel_session_get_password() was rejected by the service. If the
application was caching this information, it should stop,
and if the service asks for it again, it should ask the user.

@service and @item identify the rejected authentication information,
as with camel_session_get_password().</doc>
        <source-position filename="src/camel/camel-session.h" line="110"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="1202">%TRUE on success, %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1188">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1189">the #CamelService rejecting the password</doc>
            <type name="Service" c:type="CamelService*"/>
          </parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1190">an identifier, unique within this service, for the information</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="forward_to_sync"
                      invoker="forward_to_sync"
                      version="3.6"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="1835">Forwards @message in @folder to the email address(es) given by @address.

If an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="src/camel/camel-session.h" line="132"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="1848">%TRUE on success, %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1837">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1838">the #CamelFolder where @message is located</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1839">the #CamelMimeMessage to forward</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1840">the recipient's email address</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1841">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_filter_driver"
                      invoker="get_filter_driver"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="1429">The optional @for_folder can be used to determine which filters
to add and which not.</doc>
        <source-position filename="src/camel/camel-session.h" line="119"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="1439">a filter driver, loaded with applicable rules</doc>
          <type name="FilterDriver" c:type="CamelFilterDriver*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1431">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1432">the type of filter (eg, "incoming")</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="for_folder"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1433">an optional #CamelFolder, for which the filter driver will run, or %NULL</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_oauth2_access_token_sync"
                      invoker="get_oauth2_access_token_sync"
                      version="3.28"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="1991">Obtains the OAuth 2.0 access token for @service along with its expiry
in seconds from the current time (or 0 if unknown).

Free the returned access token with g_free() when no longer needed.</doc>
        <source-position filename="src/camel/camel-session.h" line="138"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="2005">whether succeeded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1993">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1994">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </parameter>
          <parameter name="out_access_token"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1995">return location for the access token, or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_expires_in"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1996">return location for the token expiry, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1997">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_password" invoker="get_password" throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="1129">This function is used by a #CamelService to ask the application and
the user for a password or other authentication data.

@service and @item together uniquely identify the piece of data the
caller is concerned with.

@prompt is a question to ask the user (if the application doesn't
already have the answer cached). If %CAMEL_SESSION_PASSWORD_SECRET
is set, the user's input will not be echoed back.

If %CAMEL_SESSION_PASSWORD_STATIC is set, it means the password returned
will be stored statically by the caller automatically, for the current
session.

The authenticator should set @error to %G_IO_ERROR_CANCELLED if
the user did not provide the information. The caller must g_free()
the information returned when it is done with it.</doc>
        <source-position filename="src/camel/camel-session.h" line="104"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="1158">the authentication information or %NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1131">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1132">the #CamelService this query is being made by</doc>
            <type name="Service" c:type="CamelService*"/>
          </parameter>
          <parameter name="prompt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1133">prompt to provide to user</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1134">an identifier, unique within this service, for the information</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1135">%CAMEL_SESSION_PASSWORD_REPROMPT, the prompt should force a reprompt
%CAMEL_SESSION_PASSWORD_SECRET, whether the password is secret
%CAMEL_SESSION_PASSWORD_STATIC, the password is remembered externally</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_recipient_certificates_sync"
                      invoker="get_recipient_certificates_sync"
                      version="3.30"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="2028">Searches for S/MIME certificates or PGP keys for the given @recipients,
which are returned as base64 encoded strings in @out_certificates.
This is used when encrypting messages. The @flags influence what
the @out_certificates will contain. The order of items in @out_certificates
should match the order of items in @recipients, with %NULL data for those
which could not be found.

The function should return failure only if some fatal error happened.
It's not an error when certificates for some, or all, recipients
could not be found.

This method is optional and the default implementation returns %TRUE
and sets the @out_certificates to %NULL. It's the only exception
when the length of @recipients and @out_certificates can differ.
In all other cases the length of the two should match.

The @out_certificates will be freed with g_slist_free_full (certificates, g_free);
when done with it.</doc>
        <source-position filename="src/camel/camel-session.h" line="145"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="2056">Whether succeeded, or better whether no fatal error happened.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="2030">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="2031">bit-or of #CamelRecipientCertificateFlags</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="recipients" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="2032">a #GPtrArray of recipients</doc>
            <array name="GLib.PtrArray" c:type="const GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="out_certificates"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="2033">a #GSList of gathered certificates</doc>
            <type name="GLib.SList" c:type="GSList**">
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="2034">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="job_finished">
        <source-position filename="src/camel/camel-session.h" line="165"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <type name="GLib.Error" c:type="const GError*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="job_started">
        <source-position filename="src/camel/camel-session.h" line="163"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="lookup_addressbook"
                      invoker="lookup_addressbook"
                      version="2.22">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="1305">Looks up for the @name in address books.</doc>
        <source-position filename="src/camel/camel-session.h" line="123"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="1312">whether found the @name in any address book.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1307">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1308">a name/address to lookup for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove_service"
                      invoker="remove_service"
                      version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="927">Removes a #CamelService previously added by camel_session_add_service().</doc>
        <source-position filename="src/camel/camel-session.h" line="102"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="929">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="930">the #CamelService to remove</doc>
            <type name="Service" c:type="CamelService*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="trust_prompt" invoker="trust_prompt" version="3.8">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="1226">Prompts the user whether to accept @certificate for @service.  The
set of flags given in @errors indicate why the @certificate failed
validation.

If an error occurs during prompting or if the user declines to respond,
the function returns #CAMEL_CERT_TRUST_UNKNOWN and the certificate will
be rejected.</doc>
        <source-position filename="src/camel/camel-session.h" line="114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="1241">the user's trust level for @certificate</doc>
          <type name="CertTrust" c:type="CamelCertTrust"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1228">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1229">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </parameter>
          <parameter name="certificate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1230">the peer's #GTlsCertificate</doc>
            <type name="Gio.TlsCertificate" c:type="GTlsCertificate*"/>
          </parameter>
          <parameter name="errors" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1231">the problems with @certificate</doc>
            <type name="Gio.TlsCertificateFlags"
                  c:type="GTlsCertificateFlags"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="user_alert" invoker="user_alert" version="3.12">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="1264">Emits a #CamelSession:user_alert signal from an idle source on the main
loop.  The idle source's priority is #G_PRIORITY_LOW.

The purpose of the signal is to propagate a server-issued alert message
from @service to a user interface.  The @type hints at the nature of the
alert message.</doc>
        <source-position filename="src/camel/camel-session.h" line="168"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1266">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1267">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1268">a #CamelSessionAlertType</doc>
            <type name="SessionAlertType" c:type="CamelSessionAlertType"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1269">the message for the user</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_service"
              c:identifier="camel_session_add_service"
              version="3.2"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="875">Instantiates a new #CamelService for @session.  The @uid identifies the
service for future lookup.  The @protocol indicates which #CamelProvider
holds the #GType of the #CamelService subclass to instantiate.  The @type
explicitly designates the service as a #CamelStore or #CamelTransport.

If the given @uid has already been added, the existing #CamelService
with that @uid is returned regardless of whether it agrees with the
given @protocol and @type.

If no #CamelProvider is available to handle the given @protocol, or
if the #CamelProvider does not specify a valid #GType for @type, the
function sets @error and returns %NULL.

The returned #CamelService is referenced for thread-safety and must be
unreferenced with g_object_unref() when finished with it.</doc>
        <source-position filename="src/camel/camel-session.h" line="188"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="899">a #CamelService instance, or %NULL on error</doc>
          <type name="Service" c:type="CamelService*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="877">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="878">a unique identifier string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="protocol" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="879">the service protocol</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="880">the service type</doc>
            <type name="ProviderType" c:type="CamelProviderType"/>
          </parameter>
        </parameters>
      </method>
      <method name="addressbook_contains_sync"
              c:identifier="camel_session_addressbook_contains_sync"
              version="3.44"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="1350">Look up in an address book @book_uid for an address @email_address
and returns whether any such contact exists.

The @book_uid can be either one of the special constants
%CAMEL_SESSION_BOOK_UID_ANY or %CAMEL_SESSION_BOOK_UID_COMPLETION,
or it can be a UID of a configured address book.

The @email_address can contain multiple addresses, then the function
checks whether any of the given addresses is in the address book.</doc>
        <source-position filename="src/camel/camel-session.h" line="251"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="1368">%TRUE, when the @email_address could be found in the @book_uid</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1352">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="book_uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1353">an address book UID</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="email_address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1354">an email address to check for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1355">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="authenticate"
              c:identifier="camel_session_authenticate"
              version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="1751">Asynchronously authenticates @service, which may involve repeated calls
to camel_service_authenticate() or camel_service_authenticate_sync().
A #CamelSession subclass is largely responsible for implementing this,
and should handle things like user prompts and secure password storage.
These issues are out-of-scope for Camel.

When the operation is finished, @callback will be called.  You can
then call camel_session_authenticate_finish() to get the result of
the operation.</doc>
        <source-position filename="src/camel/camel-session.h" line="263"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1753">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1754">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </parameter>
          <parameter name="mechanism"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1755">a SASL mechanism name, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1756">the I/O priority for the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1757">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1758">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1759">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="authenticate_finish"
              c:identifier="camel_session_authenticate_finish"
              version="3.4"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="1805">Finishes the operation started with camel_session_authenticate().

If an error occurred, or if authentication was aborted, the function
sets @error and returns %FALSE.</doc>
        <source-position filename="src/camel/camel-session.h" line="270"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="1816">%TRUE on success, %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1807">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1808">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="authenticate_sync"
              c:identifier="camel_session_authenticate_sync"
              version="3.4"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="1680">Authenticates @service, which may involve repeated calls to
camel_service_authenticate() or camel_service_authenticate_sync().
A #CamelSession subclass is largely responsible for implementing this,
and should handle things like user prompts and secure password storage.
These issues are out-of-scope for Camel.

If an error occurs, or if authentication is aborted, the function sets
@error and returns %FALSE.</doc>
        <source-position filename="src/camel/camel-session.h" line="258"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="1697">%TRUE on success, %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1682">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1683">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </parameter>
          <parameter name="mechanism"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1684">a SASL mechanism name, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1685">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="forget_password"
              c:identifier="camel_session_forget_password"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="1186">This function is used by a #CamelService to tell the application
that the authentication information it provided via
camel_session_get_password() was rejected by the service. If the
application was caching this information, it should stop,
and if the service asks for it again, it should ask the user.

@service and @item identify the rejected authentication information,
as with camel_session_get_password().</doc>
        <source-position filename="src/camel/camel-session.h" line="209"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="1202">%TRUE on success, %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1188">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1189">the #CamelService rejecting the password</doc>
            <type name="Service" c:type="CamelService*"/>
          </parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1190">an identifier, unique within this service, for the information</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="forward_to"
              c:identifier="camel_session_forward_to"
              version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="1906">Asynchronously forwards @message in @folder to the email address(s)
given by @address.

When the operation is finished, @callback will be called.  You can
then call camel_session_forward_to_finish() to get the result of the
operation.</doc>
        <source-position filename="src/camel/camel-session.h" line="280"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1908">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1909">the #CamelFolder where @message is located</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1910">the #CamelMimeMessage to forward</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1911">the recipient's email address</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1912">the I/O priority for the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1913">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1914">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1915">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="forward_to_finish"
              c:identifier="camel_session_forward_to_finish"
              version="3.6"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="1962">Finishes the operation started with camel_session_forward_to().

If an error occurred, the function sets @error and returns %FALSE.</doc>
        <source-position filename="src/camel/camel-session.h" line="288"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="1972">%TRUE on success, %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1964">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1965">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="forward_to_sync"
              c:identifier="camel_session_forward_to_sync"
              version="3.6"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="1835">Forwards @message in @folder to the email address(es) given by @address.

If an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="src/camel/camel-session.h" line="274"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="1848">%TRUE on success, %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1837">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1838">the #CamelFolder where @message is located</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1839">the #CamelMimeMessage to forward</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1840">the recipient's email address</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1841">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_filter_driver"
              c:identifier="camel_session_get_filter_driver"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="1429">The optional @for_folder can be used to determine which filters
to add and which not.</doc>
        <source-position filename="src/camel/camel-session.h" line="225"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="1439">a filter driver, loaded with applicable rules</doc>
          <type name="FilterDriver" c:type="CamelFilterDriver*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1431">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1432">the type of filter (eg, "incoming")</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="for_folder"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1433">an optional #CamelFolder, for which the filter driver will run, or %NULL</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_junk_filter"
              c:identifier="camel_session_get_junk_filter"
              glib:get-property="junk-filter"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="1463">Returns the #CamelJunkFilter instance used to classify messages as
junk or not junk during filtering.

Note that #CamelJunkFilter itself is just an interface.  The application
must implement the interface and install a #CamelJunkFilter instance for
junk filtering to take place.</doc>
        <source-position filename="src/camel/camel-session.h" line="230"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="1474">a #CamelJunkFilter, or %NULL</doc>
          <type name="JunkFilter" c:type="CamelJunkFilter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1465">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_junk_headers"
              c:identifier="camel_session_get_junk_headers"
              version="2.22">
        <source-position filename="src/camel/camel-session.h" line="244"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="1667">Currently used junk
   headers as a hash table, previously set by camel_session_set_junk_headers().</doc>
          <type name="GLib.HashTable" c:type="const GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1665">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_oauth2_access_token_sync"
              c:identifier="camel_session_get_oauth2_access_token_sync"
              version="3.28"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="1991">Obtains the OAuth 2.0 access token for @service along with its expiry
in seconds from the current time (or 0 if unknown).

Free the returned access token with g_free() when no longer needed.</doc>
        <source-position filename="src/camel/camel-session.h" line="291"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="2005">whether succeeded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1993">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1994">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </parameter>
          <parameter name="out_access_token"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1995">return location for the access token, or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_expires_in"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1996">return location for the token expiry, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1997">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_online"
              c:identifier="camel_session_get_online"
              glib:get-property="online">
        <source-position filename="src/camel/camel-session.h" line="221"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="1398">whether or not @session is online</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1396">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_password"
              c:identifier="camel_session_get_password"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="1129">This function is used by a #CamelService to ask the application and
the user for a password or other authentication data.

@service and @item together uniquely identify the piece of data the
caller is concerned with.

@prompt is a question to ask the user (if the application doesn't
already have the answer cached). If %CAMEL_SESSION_PASSWORD_SECRET
is set, the user's input will not be echoed back.

If %CAMEL_SESSION_PASSWORD_STATIC is set, it means the password returned
will be stored statically by the caller automatically, for the current
session.

The authenticator should set @error to %G_IO_ERROR_CANCELLED if
the user did not provide the information. The caller must g_free()
the information returned when it is done with it.</doc>
        <source-position filename="src/camel/camel-session.h" line="203"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="1158">the authentication information or %NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1131">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1132">the #CamelService this query is being made by</doc>
            <type name="Service" c:type="CamelService*"/>
          </parameter>
          <parameter name="prompt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1133">prompt to provide to user</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1134">an identifier, unique within this service, for the information</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1135">%CAMEL_SESSION_PASSWORD_REPROMPT, the prompt should force a reprompt
%CAMEL_SESSION_PASSWORD_SECRET, whether the password is secret
%CAMEL_SESSION_PASSWORD_STATIC, the password is remembered externally</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_recipient_certificates_sync"
              c:identifier="camel_session_get_recipient_certificates_sync"
              version="3.30"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="2028">Searches for S/MIME certificates or PGP keys for the given @recipients,
which are returned as base64 encoded strings in @out_certificates.
This is used when encrypting messages. The @flags influence what
the @out_certificates will contain. The order of items in @out_certificates
should match the order of items in @recipients, with %NULL data for those
which could not be found.

The function should return failure only if some fatal error happened.
It's not an error when certificates for some, or all, recipients
could not be found.

This method is optional and the default implementation returns %TRUE
and sets the @out_certificates to %NULL. It's the only exception
when the length of @recipients and @out_certificates can differ.
In all other cases the length of the two should match.

The @out_certificates will be freed with g_slist_free_full (certificates, g_free);
when done with it.</doc>
        <source-position filename="src/camel/camel-session.h" line="298"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="2056">Whether succeeded, or better whether no fatal error happened.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="2030">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="2031">bit-or of #CamelRecipientCertificateFlags</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="recipients" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="2032">a #GPtrArray of recipients</doc>
            <array name="GLib.PtrArray" c:type="const GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="out_certificates"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="2033">a #GSList of gathered certificates</doc>
            <type name="GLib.SList" c:type="GSList**">
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="2034">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user_cache_dir"
              c:identifier="camel_session_get_user_cache_dir"
              glib:get-property="user-cache-dir"
              version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="789">Returns the base directory under which to store user-specific mail cache.</doc>
        <source-position filename="src/camel/camel-session.h" line="180"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="795">the base directory for mail cache</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="791">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user_data_dir"
              c:identifier="camel_session_get_user_data_dir"
              glib:get-property="user-data-dir"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="771">Returns the base directory under which to store user-specific mail data.</doc>
        <source-position filename="src/camel/camel-session.h" line="179"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="777">the base directory for mail data</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="773">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="idle_add"
              c:identifier="camel_session_idle_add"
              version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="1519">Adds a function to be called whenever there are no higher priority events
pending.  If @function returns %FALSE it is automatically removed from the
list of event sources and will not be called again.

This internally creates a main loop source using g_idle_source_new()
and attaches it to @session's own #CamelSession:main-context using
g_source_attach().

The @priority is typically in the range between %G_PRIORITY_DEFAULT_IDLE
and %G_PRIORITY_HIGH_IDLE.</doc>
        <source-position filename="src/camel/camel-session.h" line="233"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="1538">the ID (greater than 0) of the event source</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1521">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1522">the priority of the idle source</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="function"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2"
                     destroy="3">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1523">a function to call</doc>
            <type name="GLib.SourceFunc" c:type="GSourceFunc"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1524">data to pass to @function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1525">function to call when the idle is removed, or %NULL</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_services"
              c:identifier="camel_session_list_services"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="1066">Returns a list of all #CamelService objects previously added using
camel_session_add_service().

The services returned in the list are referenced for thread-safety.
They must each be unreferenced with g_object_unref() when finished
with them.  Free the returned list itself with g_list_free().

An easy way to free the list property in one step is as follows:

|[
  g_list_free_full (list, g_object_unref);
]|</doc>
        <source-position filename="src/camel/camel-session.h" line="201"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="1083">an unsorted list of #CamelService objects</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Service"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1068">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="lookup_addressbook"
              c:identifier="camel_session_lookup_addressbook"
              version="2.22">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="1305">Looks up for the @name in address books.</doc>
        <source-position filename="src/camel/camel-session.h" line="249"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="1312">whether found the @name in any address book.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1307">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1308">a name/address to lookup for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref_main_context"
              c:identifier="camel_session_ref_main_context"
              version="3.8">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="752">Returns the #GMainContext on which event sources for @session are to
be attached.</doc>
        <source-position filename="src/camel/camel-session.h" line="178"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="759">a #GMainContext</doc>
          <type name="GLib.MainContext" c:type="GMainContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="754">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_network_monitor"
              c:identifier="camel_session_ref_network_monitor"
              version="3.22">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="843">References a #GNetworkMonitor instance, which had been previously set
by camel_session_set_network_monitor(). If none is set, then the default
#GNetworkMonitor is returned, as provided by g_network_monitor_get_default().
The returned pointer is referenced for thread safety, unref it with
g_object_unref() when no longer needed.</doc>
        <source-position filename="src/camel/camel-session.h" line="186"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="853">A referenced #GNetworkMonitor instance to use
  for network availability tests.</doc>
          <type name="Gio.NetworkMonitor" c:type="GNetworkMonitor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="845">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_service"
              c:identifier="camel_session_ref_service"
              version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="952">Looks up a #CamelService by its unique identifier string.  The service
must have been previously added using camel_session_add_service().

The returned #CamelService is referenced for thread-safety and must be
unreferenced with g_object_unref() when finished with it.</doc>
        <source-position filename="src/camel/camel-session.h" line="195"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="963">a #CamelService instance, or %NULL</doc>
          <type name="Service" c:type="CamelService*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="954">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="955">a unique identifier string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref_service_by_url"
              c:identifier="camel_session_ref_service_by_url"
              version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="988">Looks up a #CamelService by trying to match its #CamelURL against the
given @url and then checking that the object is of the desired @type.
The service must have been previously added using
camel_session_add_service().

The returned #CamelService is referenced for thread-safety and must be
unreferenced with g_object_unref() when finished with it.

Note this function is significantly slower than camel_session_ref_service().</doc>
        <source-position filename="src/camel/camel-session.h" line="197"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="1004">a #CamelService instance, or %NULL</doc>
          <type name="Service" c:type="CamelService*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="990">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="url" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="991">a #CamelURL</doc>
            <type name="URL" c:type="CamelURL*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="992">a #CamelProviderType</doc>
            <type name="ProviderType" c:type="CamelProviderType"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_service"
              c:identifier="camel_session_remove_service"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="927">Removes a #CamelService previously added by camel_session_add_service().</doc>
        <source-position filename="src/camel/camel-session.h" line="193"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="929">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="930">the #CamelService to remove</doc>
            <type name="Service" c:type="CamelService*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_services"
              c:identifier="camel_session_remove_services"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="1105">Removes all #CamelService instances added by camel_session_add_service().

This can be useful during application shutdown to ensure all #CamelService
instances are freed properly, especially since #CamelSession instances are
prone to reference cycles.</doc>
        <source-position filename="src/camel/camel-session.h" line="202"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1107">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_junk_filter"
              c:identifier="camel_session_set_junk_filter"
              glib:set-property="junk-filter"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="1486">Installs the #CamelJunkFilter instance used to classify messages as
junk or not junk during filtering.

Note that #CamelJunkFilter itself is just an interface.  The application
must implement the interface and install a #CamelJunkFilter instance for
junk filtering to take place.</doc>
        <source-position filename="src/camel/camel-session.h" line="231"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1488">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="junk_filter"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1489">a #CamelJunkFilter, or %NULL</doc>
            <type name="JunkFilter" c:type="CamelJunkFilter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_junk_headers"
              c:identifier="camel_session_set_junk_headers"
              version="2.22">
        <source-position filename="src/camel/camel-session.h" line="245"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1634">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="headers" transfer-ownership="none">
            <array length="2" zero-terminated="0" c:type="const gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <array zero-terminated="0" c:type="const gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1637">the length of the headers and values arrays</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_network_monitor"
              c:identifier="camel_session_set_network_monitor"
              glib:set-property="network-monitor"
              version="3.22">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="807">Sets a network monitor instance for the @session. This can be used
to override which #GNetworkMonitor should be used to check network
availability and whether a server is reachable.</doc>
        <source-position filename="src/camel/camel-session.h" line="182"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="809">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="network_monitor"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="810">a #GNetworkMonitor or %NULL</doc>
            <type name="Gio.NetworkMonitor" c:type="GNetworkMonitor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_online"
              c:identifier="camel_session_set_online"
              glib:set-property="online">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="1408">Sets the online status of @session to @online.</doc>
        <source-position filename="src/camel/camel-session.h" line="222"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1410">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="online" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1411">whether or not the session should be online</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="submit_job"
              c:identifier="camel_session_submit_job"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="1574">This function provides a simple mechanism for providers to initiate
low-priority background jobs.  Jobs can be submitted from any thread,
but execution of the jobs is always as follows:

1) The #CamelSession:job-started signal is emitted from the thread
   in which @session was created.  This is typically the same thread
   that hosts the global default #GMainContext, or "main" thread.

2) The @callback function is invoked from a different thread where
   it's safe to call synchronous functions.

3) Once @callback has returned, the #CamelSesson:job-finished signal
   is emitted from the same thread as #CamelSession:job-started was
   emitted.

4) Finally if a @notify function was provided, it is invoked and
   passed @user_data so that @user_data can be freed.</doc>
        <source-position filename="src/camel/camel-session.h" line="238"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1576">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="description" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1577">human readable description of the job, shown to a user</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2"
                     destroy="3">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1578">a #CamelSessionCallback</doc>
            <type name="SessionCallback" c:type="CamelSessionCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1579">user data passed to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1580">a #GDestroyNotify function</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="trust_prompt"
              c:identifier="camel_session_trust_prompt"
              version="3.8">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="1226">Prompts the user whether to accept @certificate for @service.  The
set of flags given in @errors indicate why the @certificate failed
validation.

If an error occurs during prompting or if the user declines to respond,
the function returns #CAMEL_CERT_TRUST_UNKNOWN and the certificate will
be rejected.</doc>
        <source-position filename="src/camel/camel-session.h" line="213"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.c"
               line="1241">the user's trust level for @certificate</doc>
          <type name="CertTrust" c:type="CamelCertTrust"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1228">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1229">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </parameter>
          <parameter name="certificate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1230">the peer's #GTlsCertificate</doc>
            <type name="Gio.TlsCertificate" c:type="GTlsCertificate*"/>
          </parameter>
          <parameter name="errors" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1231">the problems with @certificate</doc>
            <type name="Gio.TlsCertificateFlags"
                  c:type="GTlsCertificateFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="user_alert"
              c:identifier="camel_session_user_alert"
              version="3.12">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="1264">Emits a #CamelSession:user_alert signal from an idle source on the main
loop.  The idle source's priority is #G_PRIORITY_LOW.

The purpose of the signal is to propagate a server-issued alert message
from @service to a user interface.  The @type hints at the nature of the
alert message.</doc>
        <source-position filename="src/camel/camel-session.h" line="217"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1266">a #CamelSession</doc>
            <type name="Session" c:type="CamelSession*"/>
          </instance-parameter>
          <parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1267">a #CamelService</doc>
            <type name="Service" c:type="CamelService*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1268">a #CamelSessionAlertType</doc>
            <type name="SessionAlertType" c:type="CamelSessionAlertType"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1269">the message for the user</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="junk-filter"
                writable="1"
                transfer-ownership="none"
                setter="set_junk_filter"
                getter="get_junk_filter">
        <type name="JunkFilter"/>
      </property>
      <property name="main-context" transfer-ownership="none">
        <type name="GLib.MainContext"/>
      </property>
      <property name="network-monitor"
                writable="1"
                transfer-ownership="none"
                setter="set_network_monitor">
        <type name="Gio.NetworkMonitor"/>
      </property>
      <property name="online"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_online"
                getter="get_online"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="user-cache-dir"
                writable="1"
                construct="1"
                transfer-ownership="none"
                getter="get_user_cache_dir"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="user-data-dir"
                writable="1"
                construct="1"
                transfer-ownership="none"
                getter="get_user_data_dir"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="SessionPrivate" c:type="CamelSessionPrivate*"/>
      </field>
      <glib:signal name="job-finished" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="GLib.Error"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="job-started" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="user-alert" when="last">
        <doc xml:space="preserve"
             filename="src/camel/camel-session.c"
             line="708">This purpose of this signal is to propagate a server-issued alert
message from @service to a user interface.  The @type hints at the
severity of the alert message.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="711">the #CamelService issuing the alert</doc>
            <type name="Service"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="712">the #CamelSessionAlertType</doc>
            <type name="SessionAlertType"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="713">the alert message</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <enumeration name="SessionAlertType"
                 glib:type-name="CamelSessionAlertType"
                 glib:get-type="camel_session_alert_type_get_type"
                 c:type="CamelSessionAlertType">
      <member name="info"
              value="0"
              c:identifier="CAMEL_SESSION_ALERT_INFO"
              glib:nick="info"
              glib:name="CAMEL_SESSION_ALERT_INFO">
      </member>
      <member name="warning"
              value="1"
              c:identifier="CAMEL_SESSION_ALERT_WARNING"
              glib:nick="warning"
              glib:name="CAMEL_SESSION_ALERT_WARNING">
      </member>
      <member name="error"
              value="2"
              c:identifier="CAMEL_SESSION_ALERT_ERROR"
              glib:nick="error"
              glib:name="CAMEL_SESSION_ALERT_ERROR">
      </member>
    </enumeration>
    <callback name="SessionCallback"
              c:type="CamelSessionCallback"
              version="3.2"
              throws="1">
      <doc xml:space="preserve"
           filename="src/camel/camel-session.h"
           line="76">This is the callback signature for jobs submitted to the CamelSession
via camel_session_submit_job().  The @error pointer is always non-%NULL,
so it's safe to dereference to check if a #GError has been set.</doc>
      <source-position filename="src/camel/camel-session.h" line="89"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="session" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.h"
               line="78">a #CamelSession</doc>
          <type name="Session" c:type="CamelSession*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.h"
               line="79">a #CamelOperation cast as a #GCancellable</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="src/camel/camel-session.h"
               line="80">data passed to camel_session_submit_job()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="SessionClass"
            c:type="CamelSessionClass"
            glib:is-gtype-struct-for="Session">
      <source-position filename="src/camel/camel-session.h" line="175"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="add_service">
        <callback name="add_service" throws="1">
          <source-position filename="src/camel/camel-session.h" line="97"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="899">a #CamelService instance, or %NULL on error</doc>
            <type name="Service" c:type="CamelService*"/>
          </return-value>
          <parameters>
            <parameter name="session" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="877">a #CamelSession</doc>
              <type name="Session" c:type="CamelSession*"/>
            </parameter>
            <parameter name="uid" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="878">a unique identifier string</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="protocol" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="879">the service protocol</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="880">the service type</doc>
              <type name="ProviderType" c:type="CamelProviderType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove_service">
        <callback name="remove_service">
          <source-position filename="src/camel/camel-session.h" line="102"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="session" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="929">a #CamelSession</doc>
              <type name="Session" c:type="CamelSession*"/>
            </parameter>
            <parameter name="service" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="930">the #CamelService to remove</doc>
              <type name="Service" c:type="CamelService*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_password">
        <callback name="get_password" throws="1">
          <source-position filename="src/camel/camel-session.h" line="104"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1158">the authentication information or %NULL on error</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="session" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1131">a #CamelSession</doc>
              <type name="Session" c:type="CamelSession*"/>
            </parameter>
            <parameter name="service" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1132">the #CamelService this query is being made by</doc>
              <type name="Service" c:type="CamelService*"/>
            </parameter>
            <parameter name="prompt" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1133">prompt to provide to user</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="item" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1134">an identifier, unique within this service, for the information</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="flags" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1135">%CAMEL_SESSION_PASSWORD_REPROMPT, the prompt should force a reprompt
%CAMEL_SESSION_PASSWORD_SECRET, whether the password is secret
%CAMEL_SESSION_PASSWORD_STATIC, the password is remembered externally</doc>
              <type name="guint32" c:type="guint32"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="forget_password">
        <callback name="forget_password" throws="1">
          <source-position filename="src/camel/camel-session.h" line="110"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1202">%TRUE on success, %FALSE on failure</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="session" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1188">a #CamelSession</doc>
              <type name="Session" c:type="CamelSession*"/>
            </parameter>
            <parameter name="service" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1189">the #CamelService rejecting the password</doc>
              <type name="Service" c:type="CamelService*"/>
            </parameter>
            <parameter name="item" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1190">an identifier, unique within this service, for the information</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="trust_prompt">
        <callback name="trust_prompt">
          <source-position filename="src/camel/camel-session.h" line="114"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1241">the user's trust level for @certificate</doc>
            <type name="CertTrust" c:type="CamelCertTrust"/>
          </return-value>
          <parameters>
            <parameter name="session" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1228">a #CamelSession</doc>
              <type name="Session" c:type="CamelSession*"/>
            </parameter>
            <parameter name="service" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1229">a #CamelService</doc>
              <type name="Service" c:type="CamelService*"/>
            </parameter>
            <parameter name="certificate" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1230">the peer's #GTlsCertificate</doc>
              <type name="Gio.TlsCertificate" c:type="GTlsCertificate*"/>
            </parameter>
            <parameter name="errors" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1231">the problems with @certificate</doc>
              <type name="Gio.TlsCertificateFlags"
                    c:type="GTlsCertificateFlags"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_filter_driver">
        <callback name="get_filter_driver" throws="1">
          <source-position filename="src/camel/camel-session.h" line="119"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1439">a filter driver, loaded with applicable rules</doc>
            <type name="FilterDriver" c:type="CamelFilterDriver*"/>
          </return-value>
          <parameters>
            <parameter name="session" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1431">a #CamelSession</doc>
              <type name="Session" c:type="CamelSession*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1432">the type of filter (eg, "incoming")</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="for_folder"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1433">an optional #CamelFolder, for which the filter driver will run, or %NULL</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="lookup_addressbook">
        <callback name="lookup_addressbook">
          <source-position filename="src/camel/camel-session.h" line="123"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1312">whether found the @name in any address book.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="session" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1307">a #CamelSession</doc>
              <type name="Session" c:type="CamelSession*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1308">a name/address to lookup for</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="authenticate_sync">
        <callback name="authenticate_sync" throws="1">
          <source-position filename="src/camel/camel-session.h" line="127"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1697">%TRUE on success, %FALSE on failure</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="session" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1682">a #CamelSession</doc>
              <type name="Session" c:type="CamelSession*"/>
            </parameter>
            <parameter name="service" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1683">a #CamelService</doc>
              <type name="Service" c:type="CamelService*"/>
            </parameter>
            <parameter name="mechanism"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1684">a SASL mechanism name, or %NULL</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1685">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="forward_to_sync">
        <callback name="forward_to_sync" throws="1">
          <source-position filename="src/camel/camel-session.h" line="132"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1848">%TRUE on success, %FALSE on failure</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="session" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1837">a #CamelSession</doc>
              <type name="Session" c:type="CamelSession*"/>
            </parameter>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1838">the #CamelFolder where @message is located</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1839">the #CamelMimeMessage to forward</doc>
              <type name="MimeMessage" c:type="CamelMimeMessage*"/>
            </parameter>
            <parameter name="address" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1840">the recipient's email address</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1841">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_oauth2_access_token_sync">
        <callback name="get_oauth2_access_token_sync" throws="1">
          <source-position filename="src/camel/camel-session.h" line="138"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="2005">whether succeeded</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="session" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1993">a #CamelSession</doc>
              <type name="Session" c:type="CamelSession*"/>
            </parameter>
            <parameter name="service" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1994">a #CamelService</doc>
              <type name="Service" c:type="CamelService*"/>
            </parameter>
            <parameter name="out_access_token"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       nullable="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1995">return location for the access token, or %NULL</doc>
              <type name="utf8" c:type="gchar**"/>
            </parameter>
            <parameter name="out_expires_in"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       nullable="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1996">return location for the token expiry, or %NULL</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1997">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_recipient_certificates_sync">
        <callback name="get_recipient_certificates_sync" throws="1">
          <source-position filename="src/camel/camel-session.h" line="145"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="2056">Whether succeeded, or better whether no fatal error happened.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="session" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="2030">a #CamelSession</doc>
              <type name="Session" c:type="CamelSession*"/>
            </parameter>
            <parameter name="flags" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="2031">bit-or of #CamelRecipientCertificateFlags</doc>
              <type name="guint32" c:type="guint32"/>
            </parameter>
            <parameter name="recipients" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="2032">a #GPtrArray of recipients</doc>
              <array name="GLib.PtrArray" c:type="const GPtrArray*">
                <type name="utf8"/>
              </array>
            </parameter>
            <parameter name="out_certificates"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="2033">a #GSList of gathered certificates</doc>
              <type name="GLib.SList" c:type="GSList**">
                <type name="utf8"/>
              </type>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="2034">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="addressbook_contains_sync">
        <callback name="addressbook_contains_sync" throws="1">
          <source-position filename="src/camel/camel-session.h" line="152"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-session.c"
                 line="1368">%TRUE, when the @email_address could be found in the @book_uid</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="session" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1352">a #CamelSession</doc>
              <type name="Session" c:type="CamelSession*"/>
            </parameter>
            <parameter name="book_uid" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1353">an address book UID</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="email_address" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1354">an email address to check for</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1355">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved_methods">
        <array zero-terminated="0" fixed-size="18">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="job_started">
        <callback name="job_started">
          <source-position filename="src/camel/camel-session.h" line="163"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="session" transfer-ownership="none">
              <type name="Session" c:type="CamelSession*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="job_finished">
        <callback name="job_finished">
          <source-position filename="src/camel/camel-session.h" line="165"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="session" transfer-ownership="none">
              <type name="Session" c:type="CamelSession*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="GLib.Error" c:type="const GError*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="user_alert">
        <callback name="user_alert">
          <source-position filename="src/camel/camel-session.h" line="168"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="session" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1266">a #CamelSession</doc>
              <type name="Session" c:type="CamelSession*"/>
            </parameter>
            <parameter name="service" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1267">a #CamelService</doc>
              <type name="Service" c:type="CamelService*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1268">a #CamelSessionAlertType</doc>
              <type name="SessionAlertType" c:type="CamelSessionAlertType"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-session.c"
                   line="1269">the message for the user</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved_signals">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="SessionPrivate"
            c:type="CamelSessionPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-session.h" line="62"/>
    </record>
    <class name="Settings"
           c:symbol-prefix="settings"
           c:type="CamelSettings"
           version="3.2"
           parent="GObject.Object"
           glib:type-name="CamelSettings"
           glib:get-type="camel_settings_get_type"
           glib:type-struct="SettingsClass">
      <doc xml:space="preserve"
           filename="src/camel/camel-settings.h"
           line="49">Contains only private data that should be read and manipulated using the
functions below.</doc>
      <source-position filename="src/camel/camel-settings.h" line="79"/>
      <virtual-method name="clone" invoker="clone" version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-settings.c"
             line="165">Creates a copy of @settings, such that passing @settings and the
copied instance to camel_settings_equal() would return %TRUE.

By default, this creates a new settings instance with the same #GType
as @settings, and copies all #GObject property values from @settings
to the new instance.</doc>
        <source-position filename="src/camel/camel-settings.h" line="73"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-settings.c"
               line="176">a newly-created copy of @settings</doc>
          <type name="Settings" c:type="CamelSettings*"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-settings.c"
                 line="167">a #CamelSettings</doc>
            <type name="Settings" c:type="CamelSettings*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="equal" invoker="equal" version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-settings.c"
             line="200">Returns %TRUE if @settings_a and @settings_b are equal.

By default, equality requires both instances to have the same #GType
with the same set of #GObject properties, and each property value in
@settings_a is equal to the corresponding value in @settings_b.</doc>
        <source-position filename="src/camel/camel-settings.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-settings.c"
               line="211">%TRUE if @settings_a and @settings_b are equal</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings_a" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-settings.c"
                 line="202">a #CamelSettings</doc>
            <type name="Settings" c:type="CamelSettings*"/>
          </instance-parameter>
          <parameter name="settings_b" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-settings.c"
                 line="203">another #CamelSettings</doc>
            <type name="Settings" c:type="CamelSettings*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="clone" c:identifier="camel_settings_clone" version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-settings.c"
             line="165">Creates a copy of @settings, such that passing @settings and the
copied instance to camel_settings_equal() would return %TRUE.

By default, this creates a new settings instance with the same #GType
as @settings, and copies all #GObject property values from @settings
to the new instance.</doc>
        <source-position filename="src/camel/camel-settings.h" line="85"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-settings.c"
               line="176">a newly-created copy of @settings</doc>
          <type name="Settings" c:type="CamelSettings*"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-settings.c"
                 line="167">a #CamelSettings</doc>
            <type name="Settings" c:type="CamelSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="camel_settings_equal" version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-settings.c"
             line="200">Returns %TRUE if @settings_a and @settings_b are equal.

By default, equality requires both instances to have the same #GType
with the same set of #GObject properties, and each property value in
@settings_a is equal to the corresponding value in @settings_b.</doc>
        <source-position filename="src/camel/camel-settings.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-settings.c"
               line="211">%TRUE if @settings_a and @settings_b are equal</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings_a" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-settings.c"
                 line="202">a #CamelSettings</doc>
            <type name="Settings" c:type="CamelSettings*"/>
          </instance-parameter>
          <parameter name="settings_b" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-settings.c"
                 line="203">another #CamelSettings</doc>
            <type name="Settings" c:type="CamelSettings*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SettingsPrivate" c:type="CamelSettingsPrivate*"/>
      </field>
    </class>
    <record name="SettingsClass"
            c:type="CamelSettingsClass"
            glib:is-gtype-struct-for="Settings">
      <source-position filename="src/camel/camel-settings.h" line="79"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="list_settings" introspectable="0">
        <callback name="list_settings" introspectable="0">
          <source-position filename="src/camel/camel-settings.h" line="70"/>
          <return-value>
            <type name="GObject.ParamSpec" c:type="GParamSpec**"/>
          </return-value>
          <parameters>
            <parameter name="klass" transfer-ownership="none">
              <type name="SettingsClass" c:type="CamelSettingsClass*"/>
            </parameter>
            <parameter name="n_settings" transfer-ownership="none">
              <type name="guint" c:type="guint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="clone">
        <callback name="clone">
          <source-position filename="src/camel/camel-settings.h" line="73"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-settings.c"
                 line="176">a newly-created copy of @settings</doc>
            <type name="Settings" c:type="CamelSettings*"/>
          </return-value>
          <parameters>
            <parameter name="settings" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-settings.c"
                   line="167">a #CamelSettings</doc>
              <type name="Settings" c:type="CamelSettings*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="equal">
        <callback name="equal">
          <source-position filename="src/camel/camel-settings.h" line="74"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-settings.c"
                 line="211">%TRUE if @settings_a and @settings_b are equal</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="settings_a" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-settings.c"
                   line="202">a #CamelSettings</doc>
              <type name="Settings" c:type="CamelSettings*"/>
            </parameter>
            <parameter name="settings_b" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-settings.c"
                   line="203">another #CamelSettings</doc>
              <type name="Settings" c:type="CamelSettings*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <method name="list_settings"
              c:identifier="camel_settings_class_list_settings"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-settings.c"
             line="141">Returns an array of #GParamSpec for properties of @class which are
considered to be settings.  By default all properties are considered
to be settings, but subclasses may wish to exclude certain properties.
Free the returned array with g_free().</doc>
        <source-position filename="src/camel/camel-settings.h" line="82"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-settings.c"
               line="151">an array of #GParamSpec which should be freed after use</doc>
          <type name="GObject.ParamSpec" c:type="GParamSpec**"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings_class" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-settings.c"
                 line="143">a #CamelSettingsClass</doc>
            <type name="SettingsClass" c:type="CamelSettingsClass*"/>
          </instance-parameter>
          <parameter name="n_settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-settings.c"
                 line="144">return location for the length of the returned array</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="SettingsPrivate"
            c:type="CamelSettingsPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-settings.h" line="59"/>
    </record>
    <enumeration name="SortType"
                 version="3.2"
                 glib:type-name="CamelSortType"
                 glib:get-type="camel_sort_type_get_type"
                 c:type="CamelSortType">
      <doc xml:space="preserve"
           filename="src/camel/camel-enums.h"
           line="475">Determines the direction of a sort.</doc>
      <member name="ascending"
              value="0"
              c:identifier="CAMEL_SORT_ASCENDING"
              glib:nick="ascending"
              glib:name="CAMEL_SORT_ASCENDING">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="477">Sorting is in ascending order.</doc>
      </member>
      <member name="descending"
              value="1"
              c:identifier="CAMEL_SORT_DESCENDING"
              glib:nick="descending"
              glib:name="CAMEL_SORT_DESCENDING">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="479">Sorting is in descending order.</doc>
      </member>
    </enumeration>
    <class name="Store"
           c:symbol-prefix="store"
           c:type="CamelStore"
           parent="Service"
           abstract="1"
           glib:type-name="CamelStore"
           glib:get-type="camel_store_get_type"
           glib:type-struct="StoreClass">
      <source-position filename="src/camel/camel-store.h" line="229"/>
      <implements name="Gio.Initable"/>
      <virtual-method name="can_refresh_folder"
                      invoker="can_refresh_folder"
                      version="2.22"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="1298">Returns if this folder (param info) should be checked for new mail or not.
It should not look into sub infos (info-&gt;child) or next infos, it should
return value only for the actual folder info.
Default behavior is that all Inbox folders are intended to be refreshed.</doc>
        <source-position filename="src/camel/camel-store.h" line="159"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="1309">whether folder should be checked for new mails</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1300">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1301">a #CamelFolderInfo</doc>
            <type name="FolderInfo" c:type="CamelFolderInfo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="create_folder_sync"
                      invoker="create_folder_sync"
                      version="3.0"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="2320">Creates a new folder as a child of an existing folder.
@parent_name can be %NULL to create a new top-level folder.
The returned #CamelFolderInfo struct should be freed with
camel_folder_info_free().</doc>
        <source-position filename="src/camel/camel-store.h" line="187"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="2333">info about the created folder, or %NULL on error</doc>
          <type name="FolderInfo" c:type="CamelFolderInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2322">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="parent_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2323">name of the new folder's parent, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2324">name of the folder to create</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2325">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="delete_folder_sync"
                      invoker="delete_folder_sync"
                      version="3.0"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="2514">Deletes the folder described by @folder_name.  The folder must be empty.</doc>
        <source-position filename="src/camel/camel-store.h" line="192"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="2523">%TRUE on success, %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2516">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2517">name of the folder to delete</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2518">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="folder_created"
                      invoker="folder_created"
                      version="2.32">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="811">Emits the #CamelStore::folder-created signal from an idle source on
the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.

This function is only intended for Camel providers.</doc>
        <source-position filename="src/camel/camel-store.h" line="216"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="813">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="folder_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="814">information about the created folder</doc>
            <type name="FolderInfo" c:type="CamelFolderInfo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="folder_deleted"
                      invoker="folder_deleted"
                      version="2.32">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="851">Emits the #CamelStore::folder-deleted signal from an idle source on
the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.

This function is only intended for Camel providers.</doc>
        <source-position filename="src/camel/camel-store.h" line="218"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="853">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="folder_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="854">information about the deleted folder</doc>
            <type name="FolderInfo" c:type="CamelFolderInfo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="folder_info_stale"
                      invoker="folder_info_stale"
                      version="3.10">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="975">Emits the #CamelStore::folder-info-stale signal from an idle source
on the main loop.  The idle source's priority is #G_PRIORITY_LOW.

See the #CamelStore::folder-info-stale documentation for details on
when to use this signal.

This function is only intended for Camel providers.</doc>
        <source-position filename="src/camel/camel-store.h" line="225"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="977">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="folder_opened"
                      invoker="folder_opened"
                      version="3.0">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="891">Emits the #CamelStore::folder-opened signal from an idle source on
the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.

This function is only intended for Camel providers.</doc>
        <source-position filename="src/camel/camel-store.h" line="220"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="893">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="894">the #CamelFolder that was opened</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="folder_renamed"
                      invoker="folder_renamed"
                      version="2.32">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="931">Emits the #CamelStore::folder-renamed signal from an idle source on
the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.

This function is only intended for Camel providers.</doc>
        <source-position filename="src/camel/camel-store.h" line="222"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="933">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="old_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="934">the old name of the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="folder_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="935">information about the renamed folder</doc>
            <type name="FolderInfo" c:type="CamelFolderInfo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_can_auto_save_changes"
                      invoker="get_can_auto_save_changes"
                      version="3.40">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="3338">Returns whether there can be done automatic save of folder changes.
Default is TRUE. The descendants can overwrite it with CamelStoreClass::get_can_auto_save_changes().</doc>
        <source-position filename="src/camel/camel-store.h" line="209"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="3345">Whether there can be done automatic save of folder changes.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="3340">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_folder_info_sync"
                      invoker="get_folder_info_sync"
                      version="3.0"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="1653">This fetches information about the folder structure of @store,
starting with @top, and returns a tree of #CamelFolderInfo
structures. If @flags includes %CAMEL_STORE_FOLDER_INFO_SUBSCRIBED,
only subscribed folders will be listed.   If the store doesn't support
subscriptions, then it will list all folders.  If @flags includes
%CAMEL_STORE_FOLDER_INFO_RECURSIVE, the returned tree will include
all levels of hierarchy below @top. If not, it will only include
the immediate subfolders of @top. If @flags includes
%CAMEL_STORE_FOLDER_INFO_FAST, the unread_message_count fields of
some or all of the structures may be set to -1, if the store cannot
determine that information quickly.  If @flags includes
%CAMEL_STORE_FOLDER_INFO_NO_VIRTUAL, don't include special virtual
folders (such as vTrash or vJunk).

The returned #CamelFolderInfo tree should be freed with
camel_folder_info_free().

The CAMEL_STORE_FOLDER_INFO_FAST flag should be considered
deprecated; most backends will behave the same whether it is
supplied or not.  The only guaranteed way to get updated folder
counts is to both open the folder and invoke camel_folder_refresh_info() it.</doc>
        <source-position filename="src/camel/camel-store.h" line="170"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="1683">a #CamelFolderInfo tree, or %NULL on error</doc>
          <type name="FolderInfo" c:type="CamelFolderInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1655">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="top"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1656">the name of the folder to start from</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1657">various CAMEL_STORE_FOLDER_INFO_* flags to control behavior</doc>
            <type name="StoreGetFolderInfoFlags"
                  c:type="CamelStoreGetFolderInfoFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1658">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_folder_sync"
                      invoker="get_folder_sync"
                      version="3.0"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="1330">Gets a specific folder object from @store by name.</doc>
        <source-position filename="src/camel/camel-store.h" line="164"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="1340">the requested #CamelFolder object, or
%NULL on error</doc>
          <type name="Folder" c:type="CamelFolder*"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1332">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1333">name of the folder to get</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1334">folder flags (create, save body index, etc)</doc>
            <type name="StoreGetFolderFlags"
                  c:type="CamelStoreGetFolderFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1335">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_inbox_folder_sync"
                      invoker="get_inbox_folder_sync"
                      version="3.0"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="1943">Gets the folder in @store into which new mail is delivered.</doc>
        <source-position filename="src/camel/camel-store.h" line="175"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="1951">the inbox folder for @store, or %NULL on
error or if no such folder exists</doc>
          <type name="Folder" c:type="CamelFolder*"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1945">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1946">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_junk_folder_sync"
                      invoker="get_junk_folder_sync"
                      version="3.0"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="2065">Gets the folder in @store into which junk is delivered.</doc>
        <source-position filename="src/camel/camel-store.h" line="179"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="2073">the junk folder for @store, or %NULL on
error or if no such folder exists</doc>
          <type name="Folder" c:type="CamelFolder*"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2067">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2068">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_trash_folder_sync"
                      invoker="get_trash_folder_sync"
                      version="3.0"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="2192">Gets the folder in @store into which trash is delivered.</doc>
        <source-position filename="src/camel/camel-store.h" line="182"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="2200">the trash folder for @store, or %NULL on
error or if no such folder exists</doc>
          <type name="Folder" c:type="CamelFolder*"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2194">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2195">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="initial_setup_sync"
                      invoker="initial_setup_sync"
                      version="3.20"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="3089">Runs initial setup for the @store. It's meant to preset some
values the first time the account connects to the server after
it had been created. The function should return %TRUE even if
it didn't populate anything. The default implementation does
just that.

The save_setup result, if not %NULL, should be freed using
g_hash_table_destroy(). It's not an error to have it %NULL,
it only means the @store doesn't have anything to save.
Both the key and the value in the hash are newly allocated
UTF-8 strings, owned by the hash table.

The @store advertises support of this function by including
CAMEL_STORE_SUPPORTS_INITIAL_SETUP in CamelStore::flags.</doc>
        <source-position filename="src/camel/camel-store.h" line="205"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="3111">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="3091">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="out_save_setup"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="3092">setup values to save</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="3093">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="rename_folder_sync"
                      invoker="rename_folder_sync"
                      version="3.0"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="2691">Renames the folder described by @old_name to @new_name.</doc>
        <source-position filename="src/camel/camel-store.h" line="196"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="2701">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2693">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="old_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2694">the current name of the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="new_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2695">the new name of the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2696">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="synchronize_sync"
                      invoker="synchronize_sync"
                      version="3.0"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="2956">Synchronizes any changes that have been made to @store and its folders
with the real store.</doc>
        <source-position filename="src/camel/camel-store.h" line="201"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="2966">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2958">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="expunge" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2959">whether to expunge after synchronizing</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2960">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="can_refresh_folder"
              c:identifier="camel_store_can_refresh_folder"
              version="2.22"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="1298">Returns if this folder (param info) should be checked for new mail or not.
It should not look into sub infos (info-&gt;child) or next infos, it should
return value only for the actual folder info.
Default behavior is that all Inbox folders are intended to be refreshed.</doc>
        <source-position filename="src/camel/camel-store.h" line="263"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="1309">whether folder should be checked for new mails</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1300">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1301">a #CamelFolderInfo</doc>
            <type name="FolderInfo" c:type="CamelFolderInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_folder"
              c:identifier="camel_store_create_folder"
              version="3.0">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="2431">Asynchronously creates a new folder as a child of an existing folder.
@parent_name can be %NULL to create a new top-level folder.

When the operation is finished, @callback will be called.  You can then
call camel_store_create_folder_finish() to get the result of the operation.</doc>
        <source-position filename="src/camel/camel-store.h" line="346"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2433">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="parent_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2434">name of the new folder's parent, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2435">name of the folder to create</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2436">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2437">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2438">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2439">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_folder_finish"
              c:identifier="camel_store_create_folder_finish"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="2485">Finishes the operation started with camel_store_create_folder().
The returned #CamelFolderInfo struct should be freed with
camel_folder_info_free().</doc>
        <source-position filename="src/camel/camel-store.h" line="354"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="2495">info about the created folder, or %NULL on error</doc>
          <type name="FolderInfo" c:type="CamelFolderInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2487">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2488">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_folder_sync"
              c:identifier="camel_store_create_folder_sync"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="2320">Creates a new folder as a child of an existing folder.
@parent_name can be %NULL to create a new top-level folder.
The returned #CamelFolderInfo struct should be freed with
camel_folder_info_free().</doc>
        <source-position filename="src/camel/camel-store.h" line="341"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="2333">info about the created folder, or %NULL on error</doc>
          <type name="FolderInfo" c:type="CamelFolderInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2322">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="parent_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2323">name of the new folder's parent, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2324">name of the folder to create</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2325">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_cached_folder"
              c:identifier="camel_store_delete_cached_folder"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="3286">Deletes local data for the given @folder_name. The folder should
be part of the opened folders.

It doesn't delete the folder in the store (server) as such.
Use camel_store_delete_folder(), or its synchronous variant,
if you want to do that instead.</doc>
        <source-position filename="src/camel/camel-store.h" line="418"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="3288">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="3289">a folder full name to delete from the cache</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_folder"
              c:identifier="camel_store_delete_folder"
              version="3.0">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="2613">Asynchronously deletes the folder described by @folder_name.  The
folder must be empty.

When the operation is finished, @callback will be called.  You can then
call camel_store_delete_folder_finish() to get the result of the operation.</doc>
        <source-position filename="src/camel/camel-store.h" line="362"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2615">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2616">name of the folder to delete</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2617">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2618">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2619">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2620">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_folder_finish"
              c:identifier="camel_store_delete_folder_finish"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="2664">Finishes the operation started with camel_store_delete_folder().</doc>
        <source-position filename="src/camel/camel-store.h" line="368"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="2672">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2666">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2667">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_folder_sync"
              c:identifier="camel_store_delete_folder_sync"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="2514">Deletes the folder described by @folder_name.  The folder must be empty.</doc>
        <source-position filename="src/camel/camel-store.h" line="358"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="2523">%TRUE on success, %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2516">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2517">name of the folder to delete</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2518">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_opened_folders"
              c:identifier="camel_store_dup_opened_folders"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="717">Returns a #GPtrArray of all the opened folders for the @store. The caller owns
both the array and the folder references, so to free the array use:

|[
    g_ptr_array_foreach (array, (GFunc) g_object_unref, NULL);
    g_ptr_array_free (array, TRUE);
]|</doc>
        <source-position filename="src/camel/camel-store.h" line="235"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="729">an array with all currently
  opened folders for the @store.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Folder"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="719">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="folder_created"
              c:identifier="camel_store_folder_created"
              version="2.32">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="811">Emits the #CamelStore::folder-created signal from an idle source on
the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.

This function is only intended for Camel providers.</doc>
        <source-position filename="src/camel/camel-store.h" line="242"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="813">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="folder_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="814">information about the created folder</doc>
            <type name="FolderInfo" c:type="CamelFolderInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="folder_deleted"
              c:identifier="camel_store_folder_deleted"
              version="2.32">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="851">Emits the #CamelStore::folder-deleted signal from an idle source on
the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.

This function is only intended for Camel providers.</doc>
        <source-position filename="src/camel/camel-store.h" line="244"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="853">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="folder_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="854">information about the deleted folder</doc>
            <type name="FolderInfo" c:type="CamelFolderInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="folder_info_stale"
              c:identifier="camel_store_folder_info_stale"
              version="3.10">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="975">Emits the #CamelStore::folder-info-stale signal from an idle source
on the main loop.  The idle source's priority is #G_PRIORITY_LOW.

See the #CamelStore::folder-info-stale documentation for details on
when to use this signal.

This function is only intended for Camel providers.</doc>
        <source-position filename="src/camel/camel-store.h" line="251"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="977">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="folder_opened"
              c:identifier="camel_store_folder_opened"
              version="3.0">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="891">Emits the #CamelStore::folder-opened signal from an idle source on
the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.

This function is only intended for Camel providers.</doc>
        <source-position filename="src/camel/camel-store.h" line="246"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="893">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="894">the #CamelFolder that was opened</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
        </parameters>
      </method>
      <method name="folder_renamed"
              c:identifier="camel_store_folder_renamed"
              version="2.32">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="931">Emits the #CamelStore::folder-renamed signal from an idle source on
the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.

This function is only intended for Camel providers.</doc>
        <source-position filename="src/camel/camel-store.h" line="248"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="933">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="old_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="934">the old name of the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="folder_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="935">information about the renamed folder</doc>
            <type name="FolderInfo" c:type="CamelFolderInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_can_auto_save_changes"
              c:identifier="camel_store_get_can_auto_save_changes"
              version="3.40">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="3338">Returns whether there can be done automatic save of folder changes.
Default is TRUE. The descendants can overwrite it with CamelStoreClass::get_can_auto_save_changes().</doc>
        <source-position filename="src/camel/camel-store.h" line="421"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="3345">Whether there can be done automatic save of folder changes.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="3340">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_db" c:identifier="camel_store_get_db" version="3.24">
        <source-position filename="src/camel/camel-store.h" line="233"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="689">A #CamelDB instance associated with this @store.</doc>
          <type name="DB" c:type="CamelDB*"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="687">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags"
              c:identifier="camel_store_get_flags"
              version="3.24">
        <source-position filename="src/camel/camel-store.h" line="236"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="747">bit-or of #CamelStoreFlags set for the @store</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="745">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_folder"
              c:identifier="camel_store_get_folder"
              version="3.0">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="1576">Asynchronously gets a specific folder object from @store by name.

When the operation is finished, @callback will be called.  You can then
call camel_store_get_folder_finish() to get the result of the operation.</doc>
        <source-position filename="src/camel/camel-store.h" line="272"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1578">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1579">name of the folder to get</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1580">folder flags (create, save body index, etc)</doc>
            <type name="StoreGetFolderFlags"
                  c:type="CamelStoreGetFolderFlags"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1581">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1582">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1583">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1584">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_folder_finish"
              c:identifier="camel_store_get_folder_finish"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="1625">Finishes the operation started with camel_store_get_folder().</doc>
        <source-position filename="src/camel/camel-store.h" line="279"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="1633">the requested #CamelFolder object, or
%NULL on error</doc>
          <type name="Folder" c:type="CamelFolder*"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1627">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1628">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_folder_info"
              c:identifier="camel_store_get_folder_info"
              version="3.0">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="1863">Asynchronously fetches information about the folder structure of @store,
starting with @top.  For details of the behavior, see
camel_store_get_folder_info_sync().

When the operation is finished, @callback will be called.  You can
then call camel_store_get_folder_info_finish() to get the result of
the operation.</doc>
        <source-position filename="src/camel/camel-store.h" line="289"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1865">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="top"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1866">the name of the folder to start from</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1867">various CAMEL_STORE_FOLDER_INFO_* flags to control behavior</doc>
            <type name="StoreGetFolderInfoFlags"
                  c:type="CamelStoreGetFolderInfoFlags"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1868">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1869">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1870">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1871">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_folder_info_finish"
              c:identifier="camel_store_get_folder_info_finish"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="1914">Finishes the operation started with camel_store_get_folder_info().
The returned #CamelFolderInfo tree should be freed with
camel_folder_info_free().</doc>
        <source-position filename="src/camel/camel-store.h" line="297"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="1924">a #CamelFolderInfo tree, or %NULL on error</doc>
          <type name="FolderInfo" c:type="CamelFolderInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1916">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1917">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_folder_info_sync"
              c:identifier="camel_store_get_folder_info_sync"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="1653">This fetches information about the folder structure of @store,
starting with @top, and returns a tree of #CamelFolderInfo
structures. If @flags includes %CAMEL_STORE_FOLDER_INFO_SUBSCRIBED,
only subscribed folders will be listed.   If the store doesn't support
subscriptions, then it will list all folders.  If @flags includes
%CAMEL_STORE_FOLDER_INFO_RECURSIVE, the returned tree will include
all levels of hierarchy below @top. If not, it will only include
the immediate subfolders of @top. If @flags includes
%CAMEL_STORE_FOLDER_INFO_FAST, the unread_message_count fields of
some or all of the structures may be set to -1, if the store cannot
determine that information quickly.  If @flags includes
%CAMEL_STORE_FOLDER_INFO_NO_VIRTUAL, don't include special virtual
folders (such as vTrash or vJunk).

The returned #CamelFolderInfo tree should be freed with
camel_folder_info_free().

The CAMEL_STORE_FOLDER_INFO_FAST flag should be considered
deprecated; most backends will behave the same whether it is
supplied or not.  The only guaranteed way to get updated folder
counts is to both open the folder and invoke camel_folder_refresh_info() it.</doc>
        <source-position filename="src/camel/camel-store.h" line="283"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="1683">a #CamelFolderInfo tree, or %NULL on error</doc>
          <type name="FolderInfo" c:type="CamelFolderInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1655">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="top"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1656">the name of the folder to start from</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1657">various CAMEL_STORE_FOLDER_INFO_* flags to control behavior</doc>
            <type name="StoreGetFolderInfoFlags"
                  c:type="CamelStoreGetFolderInfoFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1658">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_folder_sync"
              c:identifier="camel_store_get_folder_sync"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="1330">Gets a specific folder object from @store by name.</doc>
        <source-position filename="src/camel/camel-store.h" line="267"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="1340">the requested #CamelFolder object, or
%NULL on error</doc>
          <type name="Folder" c:type="CamelFolder*"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1332">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1333">name of the folder to get</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1334">folder flags (create, save body index, etc)</doc>
            <type name="StoreGetFolderFlags"
                  c:type="CamelStoreGetFolderFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1335">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_folders_bag"
              c:identifier="camel_store_get_folders_bag"
              version="3.24">
        <source-position filename="src/camel/camel-store.h" line="234"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="705">a #CamelObjectBag of opened #CamelFolder&lt;!-- --&gt;s</doc>
          <type name="ObjectBag" c:type="CamelObjectBag*"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="703">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_inbox_folder"
              c:identifier="camel_store_get_inbox_folder"
              version="3.0">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="2001">Asynchronously gets the folder in @store into which new mail is delivered.

When the operation is finished, @callback will be called.  You can
then call camel_store_get_inbox_folder_finish() to get the result of
the operation.</doc>
        <source-position filename="src/camel/camel-store.h" line="305"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2003">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2004">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2005">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2006">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2007">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_inbox_folder_finish"
              c:identifier="camel_store_get_inbox_folder_finish"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="2037">Finishes the operation started with camel_store_get_inbox_folder().</doc>
        <source-position filename="src/camel/camel-store.h" line="310"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="2045">the inbox folder for @store, or %NULL on
error or if no such folder exists</doc>
          <type name="Folder" c:type="CamelFolder*"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2039">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2040">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_inbox_folder_sync"
              c:identifier="camel_store_get_inbox_folder_sync"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="1943">Gets the folder in @store into which new mail is delivered.</doc>
        <source-position filename="src/camel/camel-store.h" line="301"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="1951">the inbox folder for @store, or %NULL on
error or if no such folder exists</doc>
          <type name="Folder" c:type="CamelFolder*"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1945">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1946">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_junk_folder"
              c:identifier="camel_store_get_junk_folder"
              version="3.0">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="2128">Asynchronously gets the folder in @store into which junk is delivered.

When the operation is finished, @callback will be called.  You can
then call camel_store_get_junk_folder_finish() to get the result of
the operation.</doc>
        <source-position filename="src/camel/camel-store.h" line="318"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2130">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2131">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2132">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2133">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2134">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_junk_folder_finish"
              c:identifier="camel_store_get_junk_folder_finish"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="2164">Finishes the operation started with camel_store_get_junk_folder().</doc>
        <source-position filename="src/camel/camel-store.h" line="323"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="2172">the junk folder for @store, or %NULL on
error or if no such folder exists</doc>
          <type name="Folder" c:type="CamelFolder*"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2166">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2167">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_junk_folder_sync"
              c:identifier="camel_store_get_junk_folder_sync"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="2065">Gets the folder in @store into which junk is delivered.</doc>
        <source-position filename="src/camel/camel-store.h" line="314"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="2073">the junk folder for @store, or %NULL on
error or if no such folder exists</doc>
          <type name="Folder" c:type="CamelFolder*"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2067">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2068">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_permissions"
              c:identifier="camel_store_get_permissions"
              version="3.24">
        <source-position filename="src/camel/camel-store.h" line="239"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="781">Permissions of the @store, a bit-or of #CamelStorePermissionFlags</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="779">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_trash_folder"
              c:identifier="camel_store_get_trash_folder"
              version="3.0">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="2256">Asynchronously gets the folder in @store into which trash is delivered.

When the operation is finished, @callback will be called.  You can
then call camel_store_get_trash_folder_finish() to get the result of
the operation.</doc>
        <source-position filename="src/camel/camel-store.h" line="331"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2258">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2259">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2260">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2261">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2262">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_trash_folder_finish"
              c:identifier="camel_store_get_trash_folder_finish"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="2292">Finishes the operation started with camel_store_get_trash_folder().</doc>
        <source-position filename="src/camel/camel-store.h" line="336"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="2300">the trash folder for @store, or %NULL on
error or if no such folder exists</doc>
          <type name="Folder" c:type="CamelFolder*"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2294">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2295">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_trash_folder_sync"
              c:identifier="camel_store_get_trash_folder_sync"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="2192">Gets the folder in @store into which trash is delivered.</doc>
        <source-position filename="src/camel/camel-store.h" line="327"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="2200">the trash folder for @store, or %NULL on
error or if no such folder exists</doc>
          <type name="Folder" c:type="CamelFolder*"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2194">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2195">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="initial_setup"
              c:identifier="camel_store_initial_setup"
              version="3.20">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="3174">Runs initial setup for the @store asynchronously.

When the operation is finished, @callback will be called. You can then
call camel_store_initial_setup_finish() to get the result of the operation.

The @store advertises support of this function by including
CAMEL_STORE_SUPPORTS_INITIAL_SETUP in CamelStore::flags.</doc>
        <source-position filename="src/camel/camel-store.h" line="405"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="3176">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="3177">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="3178">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="3179">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="3180">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="initial_setup_finish"
              c:identifier="camel_store_initial_setup_finish"
              version="3.20"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="3219">Finishes the operation started with camel_store_initial_setup().

The save_setup result, if not %NULL, should be freed using
g_hash_table_destroy(). It's not an error to have it %NULL,
it only means the @store doesn't have anything to save.</doc>
        <source-position filename="src/camel/camel-store.h" line="410"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="3232">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="3221">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="3222">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="out_save_setup"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="3223">setup values to save</doc>
            <type name="GLib.HashTable" c:type="GHashTable**">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="initial_setup_sync"
              c:identifier="camel_store_initial_setup_sync"
              version="3.20"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="3089">Runs initial setup for the @store. It's meant to preset some
values the first time the account connects to the server after
it had been created. The function should return %TRUE even if
it didn't populate anything. The default implementation does
just that.

The save_setup result, if not %NULL, should be freed using
g_hash_table_destroy(). It's not an error to have it %NULL,
it only means the @store doesn't have anything to save.
Both the key and the value in the hash are newly allocated
UTF-8 strings, owned by the hash table.

The @store advertises support of this function by including
CAMEL_STORE_SUPPORTS_INITIAL_SETUP in CamelStore::flags.</doc>
        <source-position filename="src/camel/camel-store.h" line="401"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="3111">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="3091">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="out_save_setup"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="3092">setup values to save</doc>
            <type name="GLib.HashTable" c:type="GHashTable**">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="3093">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="maybe_run_db_maintenance"
              c:identifier="camel_store_maybe_run_db_maintenance"
              version="3.16"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="3259">Checks the state of the current CamelDB used for the @store and eventually
runs maintenance routines on it.</doc>
        <source-position filename="src/camel/camel-store.h" line="415"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="3267">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="3261">a #CamelStore instance</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="rename_folder"
              c:identifier="camel_store_rename_folder"
              version="3.0">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="2875">Asynchronously renames the folder described by @old_name to @new_name.

When the operation is finished, @callback will be called.  You can then
call camel_store_rename_folder_finish() to get the result of the operation.</doc>
        <source-position filename="src/camel/camel-store.h" line="377"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2877">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="old_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2878">the current name of the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="new_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2879">the new name of the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2880">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2881">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2882">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2883">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="rename_folder_finish"
              c:identifier="camel_store_rename_folder_finish"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="2929">Finishes the operation started with camel_store_rename_folder().</doc>
        <source-position filename="src/camel/camel-store.h" line="384"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="2937">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2931">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2932">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="rename_folder_sync"
              c:identifier="camel_store_rename_folder_sync"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="2691">Renames the folder described by @old_name to @new_name.</doc>
        <source-position filename="src/camel/camel-store.h" line="372"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="2701">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2693">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="old_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2694">the current name of the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="new_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2695">the new name of the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2696">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_flags"
              c:identifier="camel_store_set_flags"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="759">Sets flags for the @store, a bit-or of #CamelStoreFlags.</doc>
        <source-position filename="src/camel/camel-store.h" line="237"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="761">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="762">bit-or of #CamelStoreFlags</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_permissions"
              c:identifier="camel_store_set_permissions"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="793">Sets permissions for the @store, a bit-or of #CamelStorePermissionFlags</doc>
        <source-position filename="src/camel/camel-store.h" line="240"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="795">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="permissions" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="796">permissions of the @store, a bit-or of #CamelStorePermissionFlags</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="synchronize"
              c:identifier="camel_store_synchronize"
              version="3.0">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="3016">Synchronizes any changes that have been made to @store and its folders
with the real store asynchronously.

When the operation is finished, @callback will be called.  You can then
call camel_store_synchronize_finish() to get the result of the operation.</doc>
        <source-position filename="src/camel/camel-store.h" line="392"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="3018">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="expunge" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="3019">whether to expunge after synchronizing</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="3020">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="3021">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="3022">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="3023">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="synchronize_finish"
              c:identifier="camel_store_synchronize_finish"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="3062">Finishes the operation started with camel_store_synchronize().</doc>
        <source-position filename="src/camel/camel-store.h" line="398"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="3070">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="3064">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="3065">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="synchronize_sync"
              c:identifier="camel_store_synchronize_sync"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="2956">Synchronizes any changes that have been made to @store and its folders
with the real store.</doc>
        <source-position filename="src/camel/camel-store.h" line="388"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="2966">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2958">a #CamelStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </instance-parameter>
          <parameter name="expunge" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2959">whether to expunge after synchronizing</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2960">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Service" c:type="CamelService"/>
      </field>
      <field name="priv">
        <type name="StorePrivate" c:type="CamelStorePrivate*"/>
      </field>
      <glib:signal name="folder-created" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="FolderInfo"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="folder-deleted" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="FolderInfo"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="folder-info-stale" when="first">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="609">This signal indicates significant changes have occurred to
the folder hierarchy of @store, and that previously fetched
#CamelFolderInfo data should be considered stale.

Applications should handle this signal by replacing cached
#CamelFolderInfo data for @store with fresh data by way of
camel_store_get_folder_info().

More often than not this signal will be emitted as a result of
user preference changes rather than actual server-side changes.
For example, a user may change a preference that reveals a set
of folders previously hidden from view, or that alters whether
to augment the @store with virtual Junk and Trash folders.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="folder-opened" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Folder"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="folder-renamed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="FolderInfo"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="StoreClass"
            c:type="CamelStoreClass"
            glib:is-gtype-struct-for="Store">
      <source-position filename="src/camel/camel-store.h" line="229"/>
      <field name="parent_class">
        <type name="ServiceClass" c:type="CamelServiceClass"/>
      </field>
      <field name="hash_folder_name">
        <type name="GLib.HashFunc" c:type="GHashFunc"/>
      </field>
      <field name="equal_folder_name">
        <type name="GLib.EqualFunc" c:type="GEqualFunc"/>
      </field>
      <field name="can_refresh_folder">
        <callback name="can_refresh_folder" throws="1">
          <source-position filename="src/camel/camel-store.h" line="159"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1309">whether folder should be checked for new mails</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="store" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="1300">a #CamelStore</doc>
              <type name="Store" c:type="CamelStore*"/>
            </parameter>
            <parameter name="info" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="1301">a #CamelFolderInfo</doc>
              <type name="FolderInfo" c:type="CamelFolderInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_folder_sync">
        <callback name="get_folder_sync" throws="1">
          <source-position filename="src/camel/camel-store.h" line="164"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1340">the requested #CamelFolder object, or
%NULL on error</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </return-value>
          <parameters>
            <parameter name="store" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="1332">a #CamelStore</doc>
              <type name="Store" c:type="CamelStore*"/>
            </parameter>
            <parameter name="folder_name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="1333">name of the folder to get</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="flags" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="1334">folder flags (create, save body index, etc)</doc>
              <type name="StoreGetFolderFlags"
                    c:type="CamelStoreGetFolderFlags"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="1335">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_folder_info_sync">
        <callback name="get_folder_info_sync" throws="1">
          <source-position filename="src/camel/camel-store.h" line="170"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1683">a #CamelFolderInfo tree, or %NULL on error</doc>
            <type name="FolderInfo" c:type="CamelFolderInfo*"/>
          </return-value>
          <parameters>
            <parameter name="store" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="1655">a #CamelStore</doc>
              <type name="Store" c:type="CamelStore*"/>
            </parameter>
            <parameter name="top"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="1656">the name of the folder to start from</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="flags" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="1657">various CAMEL_STORE_FOLDER_INFO_* flags to control behavior</doc>
              <type name="StoreGetFolderInfoFlags"
                    c:type="CamelStoreGetFolderInfoFlags"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="1658">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_inbox_folder_sync">
        <callback name="get_inbox_folder_sync" throws="1">
          <source-position filename="src/camel/camel-store.h" line="175"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="1951">the inbox folder for @store, or %NULL on
error or if no such folder exists</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </return-value>
          <parameters>
            <parameter name="store" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="1945">a #CamelStore</doc>
              <type name="Store" c:type="CamelStore*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="1946">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_junk_folder_sync">
        <callback name="get_junk_folder_sync" throws="1">
          <source-position filename="src/camel/camel-store.h" line="179"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2073">the junk folder for @store, or %NULL on
error or if no such folder exists</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </return-value>
          <parameters>
            <parameter name="store" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="2067">a #CamelStore</doc>
              <type name="Store" c:type="CamelStore*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="2068">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_trash_folder_sync">
        <callback name="get_trash_folder_sync" throws="1">
          <source-position filename="src/camel/camel-store.h" line="182"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2200">the trash folder for @store, or %NULL on
error or if no such folder exists</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </return-value>
          <parameters>
            <parameter name="store" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="2194">a #CamelStore</doc>
              <type name="Store" c:type="CamelStore*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="2195">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create_folder_sync">
        <callback name="create_folder_sync" throws="1">
          <source-position filename="src/camel/camel-store.h" line="187"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2333">info about the created folder, or %NULL on error</doc>
            <type name="FolderInfo" c:type="CamelFolderInfo*"/>
          </return-value>
          <parameters>
            <parameter name="store" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="2322">a #CamelStore</doc>
              <type name="Store" c:type="CamelStore*"/>
            </parameter>
            <parameter name="parent_name"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="2323">name of the new folder's parent, or %NULL</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="folder_name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="2324">name of the folder to create</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="2325">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="delete_folder_sync">
        <callback name="delete_folder_sync" throws="1">
          <source-position filename="src/camel/camel-store.h" line="192"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2523">%TRUE on success, %FALSE on failure</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="store" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="2516">a #CamelStore</doc>
              <type name="Store" c:type="CamelStore*"/>
            </parameter>
            <parameter name="folder_name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="2517">name of the folder to delete</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="2518">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="rename_folder_sync">
        <callback name="rename_folder_sync" throws="1">
          <source-position filename="src/camel/camel-store.h" line="196"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2701">%TRUE on success, %FALSE on error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="store" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="2693">a #CamelStore</doc>
              <type name="Store" c:type="CamelStore*"/>
            </parameter>
            <parameter name="old_name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="2694">the current name of the folder</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="new_name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="2695">the new name of the folder</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="2696">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="synchronize_sync">
        <callback name="synchronize_sync" throws="1">
          <source-position filename="src/camel/camel-store.h" line="201"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="2966">%TRUE on success, %FALSE on error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="store" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="2958">a #CamelStore</doc>
              <type name="Store" c:type="CamelStore*"/>
            </parameter>
            <parameter name="expunge" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="2959">whether to expunge after synchronizing</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="2960">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="initial_setup_sync">
        <callback name="initial_setup_sync" throws="1">
          <source-position filename="src/camel/camel-store.h" line="205"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="3111">%TRUE on success, %FALSE on error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="store" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="3091">a #CamelStore</doc>
              <type name="Store" c:type="CamelStore*"/>
            </parameter>
            <parameter name="out_save_setup"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="container">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="3092">setup values to save</doc>
              <type name="GLib.HashTable" c:type="GHashTable*">
                <type name="utf8"/>
                <type name="utf8"/>
              </type>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="3093">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_can_auto_save_changes">
        <callback name="get_can_auto_save_changes">
          <source-position filename="src/camel/camel-store.h" line="209"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store.c"
                 line="3345">Whether there can be done automatic save of folder changes.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="store" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="3340">a #CamelStore</doc>
              <type name="Store" c:type="CamelStore*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved_methods">
        <array zero-terminated="0" fixed-size="19">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="folder_created">
        <callback name="folder_created">
          <source-position filename="src/camel/camel-store.h" line="216"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="store" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="813">a #CamelStore</doc>
              <type name="Store" c:type="CamelStore*"/>
            </parameter>
            <parameter name="folder_info" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="814">information about the created folder</doc>
              <type name="FolderInfo" c:type="CamelFolderInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="folder_deleted">
        <callback name="folder_deleted">
          <source-position filename="src/camel/camel-store.h" line="218"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="store" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="853">a #CamelStore</doc>
              <type name="Store" c:type="CamelStore*"/>
            </parameter>
            <parameter name="folder_info" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="854">information about the deleted folder</doc>
              <type name="FolderInfo" c:type="CamelFolderInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="folder_opened">
        <callback name="folder_opened">
          <source-position filename="src/camel/camel-store.h" line="220"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="store" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="893">a #CamelStore</doc>
              <type name="Store" c:type="CamelStore*"/>
            </parameter>
            <parameter name="folder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="894">the #CamelFolder that was opened</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="folder_renamed">
        <callback name="folder_renamed">
          <source-position filename="src/camel/camel-store.h" line="222"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="store" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="933">a #CamelStore</doc>
              <type name="Store" c:type="CamelStore*"/>
            </parameter>
            <parameter name="old_name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="934">the old name of the folder</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="folder_info" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="935">information about the renamed folder</doc>
              <type name="FolderInfo" c:type="CamelFolderInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="folder_info_stale">
        <callback name="folder_info_stale">
          <source-position filename="src/camel/camel-store.h" line="225"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="store" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-store.c"
                   line="977">a #CamelStore</doc>
              <type name="Store" c:type="CamelStore*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved_signals">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="StoreError"
                 version="2.32"
                 glib:type-name="CamelStoreError"
                 glib:get-type="camel_store_error_get_type"
                 c:type="CamelStoreError"
                 glib:error-domain="camel-store-error-quark">
      <member name="invalid"
              value="0"
              c:identifier="CAMEL_STORE_ERROR_INVALID"
              glib:nick="invalid"
              glib:name="CAMEL_STORE_ERROR_INVALID">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.h"
             line="101">an invalid store operation had been requested</doc>
      </member>
      <member name="no_folder"
              value="1"
              c:identifier="CAMEL_STORE_ERROR_NO_FOLDER"
              glib:nick="no-folder"
              glib:name="CAMEL_STORE_ERROR_NO_FOLDER">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.h"
             line="102">requested operation cannot be performed with the given folder</doc>
      </member>
      <function name="quark" c:identifier="camel_store_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <bitfield name="StoreFlags"
              glib:type-name="CamelStoreFlags"
              glib:get-type="camel_store_flags_get_type"
              c:type="CamelStoreFlags">
      <member name="vtrash"
              value="1"
              c:identifier="CAMEL_STORE_VTRASH"
              glib:nick="vtrash"
              glib:name="CAMEL_STORE_VTRASH">
      </member>
      <member name="vjunk"
              value="2"
              c:identifier="CAMEL_STORE_VJUNK"
              glib:nick="vjunk"
              glib:name="CAMEL_STORE_VJUNK">
      </member>
      <member name="proxy"
              value="4"
              c:identifier="CAMEL_STORE_PROXY"
              glib:nick="proxy"
              glib:name="CAMEL_STORE_PROXY">
      </member>
      <member name="is_migrating"
              value="8"
              c:identifier="CAMEL_STORE_IS_MIGRATING"
              glib:nick="is-migrating"
              glib:name="CAMEL_STORE_IS_MIGRATING">
      </member>
      <member name="real_junk_folder"
              value="16"
              c:identifier="CAMEL_STORE_REAL_JUNK_FOLDER"
              glib:nick="real-junk-folder"
              glib:name="CAMEL_STORE_REAL_JUNK_FOLDER">
      </member>
      <member name="can_edit_folders"
              value="32"
              c:identifier="CAMEL_STORE_CAN_EDIT_FOLDERS"
              glib:nick="can-edit-folders"
              glib:name="CAMEL_STORE_CAN_EDIT_FOLDERS">
      </member>
      <member name="use_cache_dir"
              value="64"
              c:identifier="CAMEL_STORE_USE_CACHE_DIR"
              glib:nick="use-cache-dir"
              glib:name="CAMEL_STORE_USE_CACHE_DIR">
      </member>
      <member name="can_delete_folders_at_once"
              value="128"
              c:identifier="CAMEL_STORE_CAN_DELETE_FOLDERS_AT_ONCE"
              glib:nick="can-delete-folders-at-once"
              glib:name="CAMEL_STORE_CAN_DELETE_FOLDERS_AT_ONCE">
      </member>
      <member name="supports_initial_setup"
              value="256"
              c:identifier="CAMEL_STORE_SUPPORTS_INITIAL_SETUP"
              glib:nick="supports-initial-setup"
              glib:name="CAMEL_STORE_SUPPORTS_INITIAL_SETUP">
      </member>
      <member name="is_builtin"
              value="512"
              c:identifier="CAMEL_STORE_IS_BUILTIN"
              glib:nick="is-builtin"
              glib:name="CAMEL_STORE_IS_BUILTIN">
      </member>
    </bitfield>
    <bitfield name="StoreGetFolderFlags"
              glib:type-name="CamelStoreGetFolderFlags"
              glib:get-type="camel_store_get_folder_flags_get_type"
              c:type="CamelStoreGetFolderFlags">
      <doc xml:space="preserve"
           filename="src/camel/camel-store.h"
           line="128">Open mode for folder.</doc>
      <member name="none"
              value="0"
              c:identifier="CAMEL_STORE_FOLDER_NONE"
              glib:nick="none"
              glib:name="CAMEL_STORE_FOLDER_NONE">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.h"
             line="130">no flags</doc>
      </member>
      <member name="create"
              value="1"
              c:identifier="CAMEL_STORE_FOLDER_CREATE"
              glib:nick="create"
              glib:name="CAMEL_STORE_FOLDER_CREATE">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.h"
             line="131">create the folder</doc>
      </member>
      <member name="excl"
              value="2"
              c:identifier="CAMEL_STORE_FOLDER_EXCL"
              glib:nick="excl"
              glib:name="CAMEL_STORE_FOLDER_EXCL">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.h"
             line="132">deprecated, not honored</doc>
      </member>
      <member name="body_index"
              value="4"
              c:identifier="CAMEL_STORE_FOLDER_BODY_INDEX"
              glib:nick="body-index"
              glib:name="CAMEL_STORE_FOLDER_BODY_INDEX">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.h"
             line="133">save the body index</doc>
      </member>
      <member name="private"
              value="8"
              c:identifier="CAMEL_STORE_FOLDER_PRIVATE"
              glib:nick="private"
              glib:name="CAMEL_STORE_FOLDER_PRIVATE">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.h"
             line="134">a private folder that should not show up in
 unmatched, folder info's, etc.</doc>
      </member>
    </bitfield>
    <bitfield name="StoreGetFolderInfoFlags"
              glib:type-name="CamelStoreGetFolderInfoFlags"
              glib:get-type="camel_store_get_folder_info_flags_get_type"
              c:type="CamelStoreGetFolderInfoFlags">
      <member name="fast"
              value="1"
              c:identifier="CAMEL_STORE_FOLDER_INFO_FAST"
              glib:nick="fast"
              glib:name="CAMEL_STORE_FOLDER_INFO_FAST">
      </member>
      <member name="recursive"
              value="2"
              c:identifier="CAMEL_STORE_FOLDER_INFO_RECURSIVE"
              glib:nick="recursive"
              glib:name="CAMEL_STORE_FOLDER_INFO_RECURSIVE">
      </member>
      <member name="subscribed"
              value="4"
              c:identifier="CAMEL_STORE_FOLDER_INFO_SUBSCRIBED"
              glib:nick="subscribed"
              glib:name="CAMEL_STORE_FOLDER_INFO_SUBSCRIBED">
      </member>
      <member name="no_virtual"
              value="8"
              c:identifier="CAMEL_STORE_FOLDER_INFO_NO_VIRTUAL"
              glib:nick="no-virtual"
              glib:name="CAMEL_STORE_FOLDER_INFO_NO_VIRTUAL">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="509">Do not include virtual trash or junk folders.</doc>
      </member>
      <member name="subscription_list"
              value="16"
              c:identifier="CAMEL_STORE_FOLDER_INFO_SUBSCRIPTION_LIST"
              glib:nick="subscription-list"
              glib:name="CAMEL_STORE_FOLDER_INFO_SUBSCRIPTION_LIST">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="511">Fetch only the subscription list. Clients should use this
  flag for requesting the list of folders available for
  subscription. Used in Exchange / IMAP connectors for public
  folder fetching.</doc>
      </member>
      <member name="refresh"
              value="32"
              c:identifier="CAMEL_STORE_FOLDER_INFO_REFRESH"
              glib:nick="refresh"
              glib:name="CAMEL_STORE_FOLDER_INFO_REFRESH">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="516">Treat this call as a request to refresh the folder summary;
  for remote accounts it can be to re-fetch fresh folder
  content from the server and update the local cache.</doc>
      </member>
    </bitfield>
    <record name="StoreInfo"
            c:type="CamelStoreInfo"
            glib:type-name="CamelStoreInfo"
            glib:get-type="camel_store_info_get_type"
            c:symbol-prefix="store_info">
      <source-position filename="src/camel/camel-store-summary.h" line="75"/>
      <field name="refcount" writable="1">
        <type name="gint" c:type="volatile gint"/>
      </field>
      <field name="summary" writable="1">
        <type name="StoreSummary" c:type="CamelStoreSummary*"/>
      </field>
      <field name="path" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="flags" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="unread" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="total" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <method name="get_name"
              c:identifier="camel_store_info_get_name"
              version="3.46">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-summary.c"
             line="890">Returns the last segment of the path string from @info.</doc>
        <source-position filename="src/camel/camel-store-summary.h"
                         line="176"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store-summary.c"
               line="896">the last segment of the path string from @info</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="892">a #CamelStoreInfo</doc>
            <type name="StoreInfo" c:type="CamelStoreInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path"
              c:identifier="camel_store_info_get_path"
              version="3.46">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-summary.c"
             line="873">Returns the path string from @info.</doc>
        <source-position filename="src/camel/camel-store-summary.h"
                         line="175"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store-summary.c"
               line="879">the path string from @info</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="875">a #CamelStoreInfo</doc>
            <type name="StoreInfo" c:type="CamelStoreInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="camel_store_info_ref" version="3.46">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-summary.c"
             line="827">Increase the reference count of @info.</doc>
        <source-position filename="src/camel/camel-store-summary.h"
                         line="170"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-store-summary.c"
               line="833">the @info argument</doc>
          <type name="StoreInfo" c:type="CamelStoreInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="829">a #CamelStoreInfo</doc>
            <type name="StoreInfo" c:type="CamelStoreInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_value"
              c:identifier="camel_store_info_set_value"
              version="3.46">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-summary.c"
             line="772">Set a specific string on the @info.</doc>
        <source-position filename="src/camel/camel-store-summary.h"
                         line="172"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="774">a #CamelStoreInfo</doc>
            <type name="StoreInfo" c:type="CamelStoreInfo*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="775">specific string being set</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="776">string value to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref"
              c:identifier="camel_store_info_unref"
              version="3.46">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-summary.c"
             line="848">Unref and potentially free @info, and all associated memory.</doc>
        <source-position filename="src/camel/camel-store-summary.h"
                         line="171"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="850">a #CamelStoreInfo</doc>
            <type name="StoreInfo" c:type="CamelStoreInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="name"
                c:identifier="camel_store_info_name"
                deprecated="1"
                deprecated-version="3.46">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-summary.c"
             line="933">Returns the last segment of the path string from @info.</doc>
        <doc-deprecated xml:space="preserve">Use camel_store_info_get_name() instead.</doc-deprecated>
        <source-position filename="src/camel/camel-store-summary.h"
                         line="184"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store-summary.c"
               line="940">the last segment of the path string from @info</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="935">a #CamelStoreSummary</doc>
            <type name="StoreSummary" c:type="CamelStoreSummary*"/>
          </parameter>
          <parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="936">a #CamelStoreInfo</doc>
            <type name="StoreInfo" c:type="CamelStoreInfo*"/>
          </parameter>
        </parameters>
      </function>
      <function name="path"
                c:identifier="camel_store_info_path"
                deprecated="1"
                deprecated-version="3.46">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-summary.c"
             line="911">Returns the path string from @info.</doc>
        <doc-deprecated xml:space="preserve">Use camel_store_info_get_path() instead.</doc-deprecated>
        <source-position filename="src/camel/camel-store-summary.h"
                         line="182"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store-summary.c"
               line="918">the path string from @info</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="913">a #CamelStoreSummary</doc>
            <type name="StoreSummary" c:type="CamelStoreSummary*"/>
          </parameter>
          <parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="914">a #CamelStoreInfo</doc>
            <type name="StoreInfo" c:type="CamelStoreInfo*"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_string"
                c:identifier="camel_store_info_set_string"
                deprecated="1"
                deprecated-version="3.46">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-summary.c"
             line="803">Set a specific string on the @info.</doc>
        <doc-deprecated xml:space="preserve">Use camel_store_info_set_value() instead.</doc-deprecated>
        <source-position filename="src/camel/camel-store-summary.h"
                         line="178"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="805">a #CamelStoreSummary object</doc>
            <type name="StoreSummary" c:type="CamelStoreSummary*"/>
          </parameter>
          <parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="806">a #CamelStoreInfo</doc>
            <type name="StoreInfo" c:type="CamelStoreInfo*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="807">specific string being set</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="808">string value to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <bitfield name="StoreInfoFlags"
              glib:type-name="CamelStoreInfoFlags"
              glib:get-type="camel_store_info_flags_get_type"
              c:type="CamelStoreInfoFlags">
      <member name="noselect"
              value="1"
              c:identifier="CAMEL_STORE_INFO_FOLDER_NOSELECT"
              glib:nick="noselect"
              glib:name="CAMEL_STORE_INFO_FOLDER_NOSELECT">
      </member>
      <member name="noinferiors"
              value="2"
              c:identifier="CAMEL_STORE_INFO_FOLDER_NOINFERIORS"
              glib:nick="noinferiors"
              glib:name="CAMEL_STORE_INFO_FOLDER_NOINFERIORS">
      </member>
      <member name="children"
              value="4"
              c:identifier="CAMEL_STORE_INFO_FOLDER_CHILDREN"
              glib:nick="children"
              glib:name="CAMEL_STORE_INFO_FOLDER_CHILDREN">
      </member>
      <member name="nochildren"
              value="8"
              c:identifier="CAMEL_STORE_INFO_FOLDER_NOCHILDREN"
              glib:nick="nochildren"
              glib:name="CAMEL_STORE_INFO_FOLDER_NOCHILDREN">
      </member>
      <member name="subscribed"
              value="16"
              c:identifier="CAMEL_STORE_INFO_FOLDER_SUBSCRIBED"
              glib:nick="subscribed"
              glib:name="CAMEL_STORE_INFO_FOLDER_SUBSCRIBED">
      </member>
      <member name="virtual"
              value="32"
              c:identifier="CAMEL_STORE_INFO_FOLDER_VIRTUAL"
              glib:nick="virtual"
              glib:name="CAMEL_STORE_INFO_FOLDER_VIRTUAL">
      </member>
      <member name="system"
              value="64"
              c:identifier="CAMEL_STORE_INFO_FOLDER_SYSTEM"
              glib:nick="system"
              glib:name="CAMEL_STORE_INFO_FOLDER_SYSTEM">
      </member>
      <member name="vtrash"
              value="128"
              c:identifier="CAMEL_STORE_INFO_FOLDER_VTRASH"
              glib:nick="vtrash"
              glib:name="CAMEL_STORE_INFO_FOLDER_VTRASH">
      </member>
      <member name="shared_to_me"
              value="256"
              c:identifier="CAMEL_STORE_INFO_FOLDER_SHARED_TO_ME"
              glib:nick="shared-to-me"
              glib:name="CAMEL_STORE_INFO_FOLDER_SHARED_TO_ME">
      </member>
      <member name="shared_by_me"
              value="512"
              c:identifier="CAMEL_STORE_INFO_FOLDER_SHARED_BY_ME"
              glib:nick="shared-by-me"
              glib:name="CAMEL_STORE_INFO_FOLDER_SHARED_BY_ME">
      </member>
      <member name="type_normal"
              value="0"
              c:identifier="CAMEL_STORE_INFO_FOLDER_TYPE_NORMAL"
              glib:nick="type-normal"
              glib:name="CAMEL_STORE_INFO_FOLDER_TYPE_NORMAL">
      </member>
      <member name="type_inbox"
              value="1024"
              c:identifier="CAMEL_STORE_INFO_FOLDER_TYPE_INBOX"
              glib:nick="type-inbox"
              glib:name="CAMEL_STORE_INFO_FOLDER_TYPE_INBOX">
      </member>
      <member name="type_outbox"
              value="2048"
              c:identifier="CAMEL_STORE_INFO_FOLDER_TYPE_OUTBOX"
              glib:nick="type-outbox"
              glib:name="CAMEL_STORE_INFO_FOLDER_TYPE_OUTBOX">
      </member>
      <member name="type_trash"
              value="3072"
              c:identifier="CAMEL_STORE_INFO_FOLDER_TYPE_TRASH"
              glib:nick="type-trash"
              glib:name="CAMEL_STORE_INFO_FOLDER_TYPE_TRASH">
      </member>
      <member name="type_junk"
              value="4096"
              c:identifier="CAMEL_STORE_INFO_FOLDER_TYPE_JUNK"
              glib:nick="type-junk"
              glib:name="CAMEL_STORE_INFO_FOLDER_TYPE_JUNK">
      </member>
      <member name="type_sent"
              value="5120"
              c:identifier="CAMEL_STORE_INFO_FOLDER_TYPE_SENT"
              glib:nick="type-sent"
              glib:name="CAMEL_STORE_INFO_FOLDER_TYPE_SENT">
      </member>
      <member name="type_contacts"
              value="6144"
              c:identifier="CAMEL_STORE_INFO_FOLDER_TYPE_CONTACTS"
              glib:nick="type-contacts"
              glib:name="CAMEL_STORE_INFO_FOLDER_TYPE_CONTACTS">
      </member>
      <member name="type_events"
              value="7168"
              c:identifier="CAMEL_STORE_INFO_FOLDER_TYPE_EVENTS"
              glib:nick="type-events"
              glib:name="CAMEL_STORE_INFO_FOLDER_TYPE_EVENTS">
      </member>
      <member name="type_memos"
              value="8192"
              c:identifier="CAMEL_STORE_INFO_FOLDER_TYPE_MEMOS"
              glib:nick="type-memos"
              glib:name="CAMEL_STORE_INFO_FOLDER_TYPE_MEMOS">
      </member>
      <member name="type_tasks"
              value="9216"
              c:identifier="CAMEL_STORE_INFO_FOLDER_TYPE_TASKS"
              glib:nick="type-tasks"
              glib:name="CAMEL_STORE_INFO_FOLDER_TYPE_TASKS">
      </member>
      <member name="type_all"
              value="10240"
              c:identifier="CAMEL_STORE_INFO_FOLDER_TYPE_ALL"
              glib:nick="type-all"
              glib:name="CAMEL_STORE_INFO_FOLDER_TYPE_ALL">
      </member>
      <member name="type_archive"
              value="11264"
              c:identifier="CAMEL_STORE_INFO_FOLDER_TYPE_ARCHIVE"
              glib:nick="type-archive"
              glib:name="CAMEL_STORE_INFO_FOLDER_TYPE_ARCHIVE">
      </member>
      <member name="type_drafts"
              value="12288"
              c:identifier="CAMEL_STORE_INFO_FOLDER_TYPE_DRAFTS"
              glib:nick="type-drafts"
              glib:name="CAMEL_STORE_INFO_FOLDER_TYPE_DRAFTS">
      </member>
      <member name="readonly"
              value="65536"
              c:identifier="CAMEL_STORE_INFO_FOLDER_READONLY"
              glib:nick="readonly"
              glib:name="CAMEL_STORE_INFO_FOLDER_READONLY">
      </member>
      <member name="writeonly"
              value="131072"
              c:identifier="CAMEL_STORE_INFO_FOLDER_WRITEONLY"
              glib:nick="writeonly"
              glib:name="CAMEL_STORE_INFO_FOLDER_WRITEONLY">
      </member>
      <member name="flagged"
              value="262144"
              c:identifier="CAMEL_STORE_INFO_FOLDER_FLAGGED"
              glib:nick="flagged"
              glib:name="CAMEL_STORE_INFO_FOLDER_FLAGGED">
      </member>
    </bitfield>
    <bitfield name="StorePermissionFlags"
              glib:type-name="CamelStorePermissionFlags"
              glib:get-type="camel_store_permission_flags_get_type"
              c:type="CamelStorePermissionFlags">
      <member name="read"
              value="1"
              c:identifier="CAMEL_STORE_READ"
              glib:nick="read"
              glib:name="CAMEL_STORE_READ">
      </member>
      <member name="write"
              value="2"
              c:identifier="CAMEL_STORE_WRITE"
              glib:nick="write"
              glib:name="CAMEL_STORE_WRITE">
      </member>
    </bitfield>
    <record name="StorePrivate"
            c:type="CamelStorePrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-store.h" line="126"/>
    </record>
    <class name="StoreSettings"
           c:symbol-prefix="store_settings"
           c:type="CamelStoreSettings"
           version="3.2"
           parent="Settings"
           glib:type-name="CamelStoreSettings"
           glib:get-type="camel_store_settings_get_type"
           glib:type-struct="StoreSettingsClass">
      <doc xml:space="preserve"
           filename="src/camel/camel-store-settings.h"
           line="48">Contains only private data that should be read and manipulated using the
functions below.</doc>
      <source-position filename="src/camel/camel-store-settings.h" line="71"/>
      <method name="get_filter_inbox"
              c:identifier="camel_store_settings_get_filter_inbox"
              glib:get-property="filter-inbox"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-settings.c"
             line="128">Returns whether to automatically apply filters to newly arrived messages
in the store's Inbox folder (assuming it has an Inbox folder).</doc>
        <source-position filename="src/camel/camel-store-settings.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store-settings.c"
               line="135">whether to filter new messages in Inbox</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-settings.c"
                 line="130">a #CamelStoreSettings</doc>
            <type name="StoreSettings" c:type="CamelStoreSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_store_changes_interval"
              c:identifier="camel_store_settings_get_store_changes_interval"
              glib:get-property="store-changes-interval"
              version="3.40">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-settings.c"
             line="171">Returns the interval, in seconds, for the changes in the folder being
saved automatically. 0 means immediately, while -1 means turning off
automatic folder change saving.</doc>
        <source-position filename="src/camel/camel-store-settings.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store-settings.c"
               line="179">the interval for automatic store of folder changes</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-settings.c"
                 line="173">a #CamelStoreSettings</doc>
            <type name="StoreSettings" c:type="CamelStoreSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_filter_inbox"
              c:identifier="camel_store_settings_set_filter_inbox"
              glib:set-property="filter-inbox"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-settings.c"
             line="147">Sets whether to automatically apply filters to newly arrived messages
in the store's Inbox folder (assuming it has an Inbox folder).</doc>
        <source-position filename="src/camel/camel-store-settings.h"
                         line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-settings.c"
                 line="149">a #CamelStoreSettings</doc>
            <type name="StoreSettings" c:type="CamelStoreSettings*"/>
          </instance-parameter>
          <parameter name="filter_inbox" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-settings.c"
                 line="150">whether to filter new messages in Inbox</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_store_changes_interval"
              c:identifier="camel_store_settings_set_store_changes_interval"
              glib:set-property="store-changes-interval"
              version="3.40">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-settings.c"
             line="191">Sets the interval, in seconds, for the changes in the folder being
saved automatically. 0 means immediately, while -1 means turning off
automatic folder change saving.</doc>
        <source-position filename="src/camel/camel-store-settings.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-settings.c"
                 line="193">a #CamelStoreSettings</doc>
            <type name="StoreSettings" c:type="CamelStoreSettings*"/>
          </instance-parameter>
          <parameter name="interval" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-settings.c"
                 line="194">the interval, in seconds</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="filter-inbox"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_filter_inbox"
                getter="get_filter_inbox"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="store-changes-interval"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_store_changes_interval"
                getter="get_store_changes_interval"
                default-value="3">
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="Settings" c:type="CamelSettings"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="StoreSettingsPrivate" c:type="CamelStoreSettingsPrivate*"/>
      </field>
    </class>
    <record name="StoreSettingsClass"
            c:type="CamelStoreSettingsClass"
            glib:is-gtype-struct-for="StoreSettings">
      <source-position filename="src/camel/camel-store-settings.h" line="71"/>
      <field name="parent_class">
        <type name="SettingsClass" c:type="CamelSettingsClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="StoreSettingsPrivate"
            c:type="CamelStoreSettingsPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-store-settings.h" line="58"/>
    </record>
    <class name="StoreSummary"
           c:symbol-prefix="store_summary"
           c:type="CamelStoreSummary"
           parent="GObject.Object"
           glib:type-name="CamelStoreSummary"
           glib:get-type="camel_store_summary_get_type"
           glib:type-struct="StoreSummaryClass">
      <source-position filename="src/camel/camel-store-summary.h" line="116"/>
      <constructor name="new" c:identifier="camel_store_summary_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-summary.c"
             line="279">Create a new #CamelStoreSummary object.</doc>
        <source-position filename="src/camel/camel-store-summary.h"
                         line="120"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-store-summary.c"
               line="284">a new #CamelStoreSummary object</doc>
          <type name="StoreSummary" c:type="CamelStoreSummary*"/>
        </return-value>
      </constructor>
      <virtual-method name="store_info_free">
        <source-position filename="src/camel/camel-store-summary.h"
                         line="104"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <type name="StoreSummary" c:type="CamelStoreSummary*"/>
          </instance-parameter>
          <parameter name="info" transfer-ownership="none">
            <type name="StoreInfo" c:type="CamelStoreInfo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="store_info_load">
        <source-position filename="src/camel/camel-store-summary.h" line="99"/>
        <return-value transfer-ownership="full">
          <type name="StoreInfo" c:type="CamelStoreInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <type name="StoreSummary" c:type="CamelStoreSummary*"/>
          </instance-parameter>
          <parameter name="file"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="FILE*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="store_info_new">
        <source-position filename="src/camel/camel-store-summary.h" line="96"/>
        <return-value transfer-ownership="full">
          <type name="StoreInfo" c:type="CamelStoreInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <type name="StoreSummary" c:type="CamelStoreSummary*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="store_info_save">
        <source-position filename="src/camel/camel-store-summary.h"
                         line="101"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <type name="StoreSummary" c:type="CamelStoreSummary*"/>
          </instance-parameter>
          <parameter name="file"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="FILE*"/>
          </parameter>
          <parameter name="info" transfer-ownership="none">
            <type name="StoreInfo" c:type="CamelStoreInfo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="store_info_set_value">
        <source-position filename="src/camel/camel-store-summary.h"
                         line="108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <type name="StoreSummary" c:type="CamelStoreSummary*"/>
          </instance-parameter>
          <parameter name="info" transfer-ownership="none">
            <type name="StoreInfo" c:type="CamelStoreInfo*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="summary_header_load">
        <source-position filename="src/camel/camel-store-summary.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <type name="StoreSummary" c:type="CamelStoreSummary*"/>
          </instance-parameter>
          <parameter name="file"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="FILE*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="summary_header_save">
        <source-position filename="src/camel/camel-store-summary.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <type name="StoreSummary" c:type="CamelStoreSummary*"/>
          </instance-parameter>
          <parameter name="file"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="FILE*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add" c:identifier="camel_store_summary_add">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-summary.c"
             line="561">The @info record should have been generated by calling one of the
info_new_*() functions, as it will be free'd based on the summary
class.  And MUST NOT be allocated directly using malloc.</doc>
        <source-position filename="src/camel/camel-store-summary.h"
                         line="133"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="563">a #CamelStoreSummary object</doc>
            <type name="StoreSummary" c:type="CamelStoreSummary*"/>
          </instance-parameter>
          <parameter name="info" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="564">a #CamelStoreInfo</doc>
            <type name="StoreInfo" c:type="CamelStoreInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_from_path"
              c:identifier="camel_store_summary_add_from_path">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-summary.c"
             line="594">Build a new info record based on the name, and add it to the summary.</doc>
        <source-position filename="src/camel/camel-store-summary.h"
                         line="138"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-store-summary.c"
               line="601">the newly added record or %NULL if the @path already exists</doc>
          <type name="StoreInfo" c:type="CamelStoreInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="596">a #CamelStoreSummary object</doc>
            <type name="StoreSummary" c:type="CamelStoreSummary*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="597">item path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="array" c:identifier="camel_store_summary_array">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-summary.c"
             line="329">Obtain a copy of the summary array.  This is done atomically,
so cannot contain empty entries.

It must be freed using g_ptr_array_unref().</doc>
        <source-position filename="src/camel/camel-store-summary.h"
                         line="164"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-store-summary.c"
               line="338">the summary array</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="StoreInfo"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="331">a #CamelStoreSummary object</doc>
            <type name="StoreSummary" c:type="CamelStoreSummary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="array_free"
              c:identifier="camel_store_summary_array_free"
              deprecated="1"
              deprecated-version="3.46">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-summary.c"
             line="356">Free the folder summary array.</doc>
        <doc-deprecated xml:space="preserve">Use g_ptr_array_unref() directly.</doc-deprecated>
        <source-position filename="src/camel/camel-store-summary.h"
                         line="165"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="358">a #CamelStoreSummary object</doc>
            <type name="StoreSummary" c:type="CamelStoreSummary*"/>
          </instance-parameter>
          <parameter name="array" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="359">the summary array as gotten from
camel_store_summary_array()</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="StoreInfo"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="connect_folder_summary"
              c:identifier="camel_store_summary_connect_folder_summary"
              version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-summary.c"
             line="1059">Connects listeners for count changes on @folder_summary to keep
CamelStoreInfo.total and CamelStoreInfo.unread in sync transparently.
The @folder_summary is stored in @summary as @path. Use
camel_store_summary_disconnect_folder_summary() to disconnect from
listening.</doc>
        <source-position filename="src/camel/camel-store-summary.h"
                         line="191"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store-summary.c"
               line="1071">Whether successfully connect callbacks for count change
notifications.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="1061">a #CamelStoreSummary object</doc>
            <type name="StoreSummary" c:type="CamelStoreSummary*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="1062">used path for @folder_summary</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="folder_summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="1063">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </parameter>
        </parameters>
      </method>
      <method name="count" c:identifier="camel_store_summary_count">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-summary.c"
             line="313">Get the number of summary items stored in this summary.</doc>
        <source-position filename="src/camel/camel-store-summary.h"
                         line="160"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store-summary.c"
               line="319">the number of items gint he summary.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="315">a #CamelStoreSummary object</doc>
            <type name="StoreSummary" c:type="CamelStoreSummary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="disconnect_folder_summary"
              c:identifier="camel_store_summary_disconnect_folder_summary"
              version="3.4">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-summary.c"
             line="1113">Diconnects count change listeners previously connected
by camel_store_summary_connect_folder_summary().</doc>
        <source-position filename="src/camel/camel-store-summary.h"
                         line="195"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store-summary.c"
               line="1121">Whether such connection existed and whether was successfully
removed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="1115">a #CamelStoreSummary object</doc>
            <type name="StoreSummary" c:type="CamelStoreSummary*"/>
          </instance-parameter>
          <parameter name="folder_summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="1116">a #CamelFolderSummary object</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </parameter>
        </parameters>
      </method>
      <method name="info_new" c:identifier="camel_store_summary_info_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-summary.c"
             line="744">Allocate a new #CamelStoreInfo, suitable for adding to this
summary.</doc>
        <source-position filename="src/camel/camel-store-summary.h"
                         line="144"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-store-summary.c"
               line="751">the newly allocated #CamelStoreInfo</doc>
          <type name="StoreInfo" c:type="CamelStoreInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="746">a #CamelStoreSummary object</doc>
            <type name="StoreSummary" c:type="CamelStoreSummary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="info_ref"
              c:identifier="camel_store_summary_info_ref"
              introspectable="0"
              deprecated="1"
              deprecated-version="3.46">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-summary.c"
             line="636">Add an extra reference to @info.</doc>
        <doc-deprecated xml:space="preserve">Use camel_store_info_ref() instead.</doc-deprecated>
        <source-position filename="src/camel/camel-store-summary.h"
                         line="147"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-store-summary.c"
               line="643">the @info argument</doc>
          <type name="StoreInfo" c:type="CamelStoreInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="638">a #CamelStoreSummary object</doc>
            <type name="StoreSummary" c:type="CamelStoreSummary*"/>
          </instance-parameter>
          <parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="639">a #CamelStoreInfo</doc>
            <type name="StoreInfo" c:type="CamelStoreInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="info_unref"
              c:identifier="camel_store_summary_info_unref"
              deprecated="1"
              deprecated-version="3.46">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-summary.c"
             line="657">Unref and potentially free @info, and all associated memory.</doc>
        <doc-deprecated xml:space="preserve">Use camel_store_info_unref() instead.</doc-deprecated>
        <source-position filename="src/camel/camel-store-summary.h"
                         line="149"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="659">a #CamelStoreSummary object</doc>
            <type name="StoreSummary" c:type="CamelStoreSummary*"/>
          </instance-parameter>
          <parameter name="info" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="660">a #CamelStoreInfo</doc>
            <type name="StoreInfo" c:type="CamelStoreInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load" c:identifier="camel_store_summary_load">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-summary.c"
             line="410">Load the summary off disk.</doc>
        <source-position filename="src/camel/camel-store-summary.h"
                         line="126"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store-summary.c"
               line="416">0 on success or -1 on fail</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="412">a #CamelStoreSummary object</doc>
            <type name="StoreSummary" c:type="CamelStoreSummary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="path"
              c:identifier="camel_store_summary_path"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-summary.c"
             line="376">Retrieve a summary item by path name.

The returned #CamelStoreInfo is referenced for thread-safety and should be
unreferenced with camel_store_info_unref() when finished with it.</doc>
        <source-position filename="src/camel/camel-store-summary.h"
                         line="162"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-store-summary.c"
               line="386">the summary item, or %NULL if the @path name is not
available</doc>
          <type name="StoreInfo" c:type="CamelStoreInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="378">a #CamelStoreSummary object</doc>
            <type name="StoreSummary" c:type="CamelStoreSummary*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="379">path to the item</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="camel_store_summary_remove">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-summary.c"
             line="694">Remove a specific @info record from the summary.</doc>
        <source-position filename="src/camel/camel-store-summary.h"
                         line="154"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="696">a #CamelStoreSummary object</doc>
            <type name="StoreSummary" c:type="CamelStoreSummary*"/>
          </instance-parameter>
          <parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="697">a #CamelStoreInfo</doc>
            <type name="StoreInfo" c:type="CamelStoreInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_path"
              c:identifier="camel_store_summary_remove_path">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-summary.c"
             line="715">Remove a specific info record from the summary, by @path.</doc>
        <source-position filename="src/camel/camel-store-summary.h"
                         line="156"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="717">a #CamelStoreSummary object</doc>
            <type name="StoreSummary" c:type="CamelStoreSummary*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="718">item path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save" c:identifier="camel_store_summary_save">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-summary.c"
             line="472">Writes the summary to disk.  The summary is only written if changes
have occurred.</doc>
        <source-position filename="src/camel/camel-store-summary.h"
                         line="127"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store-summary.c"
               line="479">0 on success or -1 on fail</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="474">a #CamelStoreSummary object</doc>
            <type name="StoreSummary" c:type="CamelStoreSummary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_filename"
              c:identifier="camel_store_summary_set_filename">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-summary.c"
             line="292">Set the filename where the summary will be loaded to/saved from.</doc>
        <source-position filename="src/camel/camel-store-summary.h"
                         line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="294">a #CamelStoreSummary</doc>
            <type name="StoreSummary" c:type="CamelStoreSummary*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="295">a filename</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sort"
              c:identifier="camel_store_summary_sort"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-summary.c"
             line="955">Sorts the array of the folders using the @compare_func.</doc>
        <source-position filename="src/camel/camel-store-summary.h"
                         line="187"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="957">a #CamelStoreSummary</doc>
            <type name="StoreSummary" c:type="CamelStoreSummary*"/>
          </instance-parameter>
          <parameter name="compare_func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="958">a compare function</doc>
            <type name="GLib.CompareDataFunc" c:type="GCompareDataFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="959">user data passed to the @compare_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="touch" c:identifier="camel_store_summary_touch">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-summary.c"
             line="677">Mark the summary as changed, so that a save will force it to be
written back to disk.</doc>
        <source-position filename="src/camel/camel-store-summary.h"
                         line="130"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-store-summary.c"
                 line="679">a #CamelStoreSummary object</doc>
            <type name="StoreSummary" c:type="CamelStoreSummary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="StoreSummaryPrivate" c:type="CamelStoreSummaryPrivate*"/>
      </field>
    </class>
    <record name="StoreSummaryClass"
            c:type="CamelStoreSummaryClass"
            glib:is-gtype-struct-for="StoreSummary">
      <source-position filename="src/camel/camel-store-summary.h" line="116"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="store_info_size">
        <type name="gsize" c:type="gsize"/>
      </field>
      <field name="summary_header_load">
        <callback name="summary_header_load">
          <source-position filename="src/camel/camel-store-summary.h"
                           line="89"/>
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="summary" transfer-ownership="none">
              <type name="StoreSummary" c:type="CamelStoreSummary*"/>
            </parameter>
            <parameter name="file"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="gpointer" c:type="FILE*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="summary_header_save">
        <callback name="summary_header_save">
          <source-position filename="src/camel/camel-store-summary.h"
                           line="91"/>
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="summary" transfer-ownership="none">
              <type name="StoreSummary" c:type="CamelStoreSummary*"/>
            </parameter>
            <parameter name="file"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="gpointer" c:type="FILE*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="store_info_new">
        <callback name="store_info_new">
          <source-position filename="src/camel/camel-store-summary.h"
                           line="96"/>
          <return-value transfer-ownership="full">
            <type name="StoreInfo" c:type="CamelStoreInfo*"/>
          </return-value>
          <parameters>
            <parameter name="summary" transfer-ownership="none">
              <type name="StoreSummary" c:type="CamelStoreSummary*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="store_info_load">
        <callback name="store_info_load">
          <source-position filename="src/camel/camel-store-summary.h"
                           line="99"/>
          <return-value transfer-ownership="full">
            <type name="StoreInfo" c:type="CamelStoreInfo*"/>
          </return-value>
          <parameters>
            <parameter name="summary" transfer-ownership="none">
              <type name="StoreSummary" c:type="CamelStoreSummary*"/>
            </parameter>
            <parameter name="file"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="gpointer" c:type="FILE*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="store_info_save">
        <callback name="store_info_save">
          <source-position filename="src/camel/camel-store-summary.h"
                           line="101"/>
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="summary" transfer-ownership="none">
              <type name="StoreSummary" c:type="CamelStoreSummary*"/>
            </parameter>
            <parameter name="file"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="gpointer" c:type="FILE*"/>
            </parameter>
            <parameter name="info" transfer-ownership="none">
              <type name="StoreInfo" c:type="CamelStoreInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="store_info_free">
        <callback name="store_info_free">
          <source-position filename="src/camel/camel-store-summary.h"
                           line="104"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="summary" transfer-ownership="none">
              <type name="StoreSummary" c:type="CamelStoreSummary*"/>
            </parameter>
            <parameter name="info" transfer-ownership="none">
              <type name="StoreInfo" c:type="CamelStoreInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="store_info_set_value">
        <callback name="store_info_set_value">
          <source-position filename="src/camel/camel-store-summary.h"
                           line="108"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="summary" transfer-ownership="none">
              <type name="StoreSummary" c:type="CamelStoreSummary*"/>
            </parameter>
            <parameter name="info" transfer-ownership="none">
              <type name="StoreInfo" c:type="CamelStoreInfo*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="StoreSummaryPrivate"
            c:type="CamelStoreSummaryPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-store-summary.h" line="57"/>
    </record>
    <class name="Stream"
           c:symbol-prefix="stream"
           c:type="CamelStream"
           parent="GObject.Object"
           glib:type-name="CamelStream"
           glib:get-type="camel_stream_get_type"
           glib:type-struct="StreamClass">
      <source-position filename="src/camel/camel-stream.h" line="86"/>
      <implements name="Gio.Seekable"/>
      <constructor name="new" c:identifier="camel_stream_new" version="3.12">
        <doc xml:space="preserve"
             filename="src/camel/camel-stream.c"
             line="397">Creates a #CamelStream as a thin wrapper for @base_stream.</doc>
        <source-position filename="src/camel/camel-stream.h" line="89"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-stream.c"
               line="403">a #CamelStream</doc>
          <type name="Stream" c:type="CamelStream*"/>
        </return-value>
        <parameters>
          <parameter name="base_stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="399">a #GIOStream</doc>
            <type name="Gio.IOStream" c:type="GIOStream*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="close" invoker="close" throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-stream.c"
             line="579">Closes the stream.</doc>
        <source-position filename="src/camel/camel-stream.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-stream.c"
               line="587">0 on success or -1 on error.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="581">a #CamelStream object</doc>
            <type name="Stream" c:type="CamelStream*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="582">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="eos" invoker="eos">
        <doc xml:space="preserve"
             filename="src/camel/camel-stream.c"
             line="609">Tests if there are bytes left to read on the @stream object.</doc>
        <source-position filename="src/camel/camel-stream.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-stream.c"
               line="615">%TRUE on EOS or %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="611">a #CamelStream object</doc>
            <type name="Stream" c:type="CamelStream*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="flush" invoker="flush" throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-stream.c"
             line="548">Flushes any buffered data to the stream's backing store.  Only
meaningful for writable streams.</doc>
        <source-position filename="src/camel/camel-stream.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-stream.c"
               line="557">0 on success or -1 on fail along with setting @error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="550">a #CamelStream object</doc>
            <type name="Stream" c:type="CamelStream*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="551">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="read" invoker="read" throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-stream.c"
             line="476">Attempts to read up to @n bytes from @stream into @buffer.</doc>
        <source-position filename="src/camel/camel-stream.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-stream.c"
               line="486">the number of bytes actually read, or -1 on error and set
errno.</doc>
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="478">a #CamelStream object.</doc>
            <type name="Stream" c:type="CamelStream*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="479">output buffer</doc>
            <array length="1" zero-terminated="0" c:type="gchar*">
              <type name="gchar" c:type="gchar"/>
            </array>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="480">max number of bytes to read.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="481">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="write" invoker="write" throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-stream.c"
             line="512">Attempts to write up to @n bytes of @buffer into @stream.</doc>
        <source-position filename="src/camel/camel-stream.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-stream.c"
               line="522">the number of bytes written to the stream, or -1 on error
along with setting errno.</doc>
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="514">a #CamelStream object</doc>
            <type name="Stream" c:type="CamelStream*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="515">buffer to write.</doc>
            <array length="1" zero-terminated="0" c:type="const gchar*">
              <type name="gchar" c:type="gchar"/>
            </array>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="516">number of bytes to write</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="517">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="close" c:identifier="camel_stream_close" throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-stream.c"
             line="579">Closes the stream.</doc>
        <source-position filename="src/camel/camel-stream.h" line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-stream.c"
               line="587">0 on success or -1 on error.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="581">a #CamelStream object</doc>
            <type name="Stream" c:type="CamelStream*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="582">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="eos" c:identifier="camel_stream_eos">
        <doc xml:space="preserve"
             filename="src/camel/camel-stream.c"
             line="609">Tests if there are bytes left to read on the @stream object.</doc>
        <source-position filename="src/camel/camel-stream.h" line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-stream.c"
               line="615">%TRUE on EOS or %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="611">a #CamelStream object</doc>
            <type name="Stream" c:type="CamelStream*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="flush" c:identifier="camel_stream_flush" throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-stream.c"
             line="548">Flushes any buffered data to the stream's backing store.  Only
meaningful for writable streams.</doc>
        <source-position filename="src/camel/camel-stream.h" line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-stream.c"
               line="557">0 on success or -1 on fail along with setting @error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="550">a #CamelStream object</doc>
            <type name="Stream" c:type="CamelStream*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="551">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="read" c:identifier="camel_stream_read" throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-stream.c"
             line="476">Attempts to read up to @n bytes from @stream into @buffer.</doc>
        <source-position filename="src/camel/camel-stream.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-stream.c"
               line="486">the number of bytes actually read, or -1 on error and set
errno.</doc>
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="478">a #CamelStream object.</doc>
            <type name="Stream" c:type="CamelStream*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="479">output buffer</doc>
            <array length="1" zero-terminated="0" c:type="gchar*">
              <type name="gchar" c:type="gchar"/>
            </array>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="480">max number of bytes to read.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="481">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref_base_stream"
              c:identifier="camel_stream_ref_base_stream"
              version="3.12">
        <doc xml:space="preserve"
             filename="src/camel/camel-stream.c"
             line="416">Returns the #GIOStream for @stream.  This is only valid if @stream was
created with camel_stream_new().  For all other #CamelStream subclasses
this function returns %NULL.

The returned #GIOStream is referenced for thread-safety and should be
unreferenced with g_object_unref() when finished with it.</doc>
        <source-position filename="src/camel/camel-stream.h" line="90"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-stream.c"
               line="427">a #GIOStream, or %NULL</doc>
          <type name="Gio.IOStream" c:type="GIOStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="418">a #CamelStream</doc>
            <type name="Stream" c:type="CamelStream*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_base_stream"
              c:identifier="camel_stream_set_base_stream"
              glib:set-property="base-stream"
              version="3.12">
        <doc xml:space="preserve"
             filename="src/camel/camel-stream.c"
             line="448">Replaces the #GIOStream passed to camel_stream_new() with @base_stream.
The new @base_stream should wrap the original #GIOStream, such as when
adding Transport Layer Security after issuing a STARTTLS command.</doc>
        <source-position filename="src/camel/camel-stream.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="450">a #CamelStream</doc>
            <type name="Stream" c:type="CamelStream*"/>
          </instance-parameter>
          <parameter name="base_stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="451">a #GIOStream</doc>
            <type name="Gio.IOStream" c:type="GIOStream*"/>
          </parameter>
        </parameters>
      </method>
      <method name="write" c:identifier="camel_stream_write" throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-stream.c"
             line="512">Attempts to write up to @n bytes of @buffer into @stream.</doc>
        <source-position filename="src/camel/camel-stream.h" line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-stream.c"
               line="522">the number of bytes written to the stream, or -1 on error
along with setting errno.</doc>
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="514">a #CamelStream object</doc>
            <type name="Stream" c:type="CamelStream*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="515">buffer to write.</doc>
            <array length="1" zero-terminated="0" c:type="const gchar*">
              <type name="gchar" c:type="gchar"/>
            </array>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="516">number of bytes to write</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="517">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_string"
              c:identifier="camel_stream_write_string"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-stream.c"
             line="633">Writes the string to the stream.</doc>
        <source-position filename="src/camel/camel-stream.h" line="112"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-stream.c"
               line="642">the number of characters written or -1 on error.</doc>
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="635">a #CamelStream object</doc>
            <type name="Stream" c:type="CamelStream*"/>
          </instance-parameter>
          <parameter name="string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="636">a string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="637">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_to_stream"
              c:identifier="camel_stream_write_to_stream"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-stream.c"
             line="657">Write all of a stream (until eos) into another stream, in a
blocking fashion.</doc>
        <source-position filename="src/camel/camel-stream.h" line="119"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-stream.c"
               line="667">-1 on error, or the number of bytes successfully
copied across streams.</doc>
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="659">source #CamelStream object</doc>
            <type name="Stream" c:type="CamelStream*"/>
          </instance-parameter>
          <parameter name="output_stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="660">destination #CamelStream object</doc>
            <type name="Stream" c:type="CamelStream*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="661">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <property name="base-stream"
                writable="1"
                transfer-ownership="none"
                setter="set_base_stream">
        <type name="Gio.IOStream"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="StreamPrivate" c:type="CamelStreamPrivate*"/>
      </field>
    </class>
    <class name="StreamBuffer"
           c:symbol-prefix="stream_buffer"
           c:type="CamelStreamBuffer"
           parent="Stream"
           glib:type-name="CamelStreamBuffer"
           glib:get-type="camel_stream_buffer_get_type"
           glib:type-struct="StreamBufferClass">
      <source-position filename="src/camel/camel-stream-buffer.h" line="83"/>
      <implements name="Gio.Seekable"/>
      <constructor name="new" c:identifier="camel_stream_buffer_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-stream-buffer.c"
             line="342">Create a new buffered stream of another stream.  A default
buffer size (1024 bytes), automatically managed will be used
for buffering.

The following values are available for @mode:

#CAMEL_STREAM_BUFFER_BUFFER, Buffer the input/output in blocks.
#CAMEL_STREAM_BUFFER_NEWLINE, Buffer on newlines (for output).
#CAMEL_STREAM_BUFFER_NONE, Perform no buffering.

Note that currently this is ignored and #CAMEL_STREAM_BUFFER_BUFFER
is always used.

In addition, one of the following mode options should be or'd
together with the buffering mode:

#CAMEL_STREAM_BUFFER_WRITE, Buffer in write mode.
#CAMEL_STREAM_BUFFER_READ, Buffer in read mode.

Buffering can only be done in one direction for any
buffer instance.</doc>
        <source-position filename="src/camel/camel-stream-buffer.h" line="86"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-stream-buffer.c"
               line="369">a newly created buffered stream.</doc>
          <type name="Stream" c:type="CamelStream*"/>
        </return-value>
        <parameters>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream-buffer.c"
                 line="344">a #CamelStream object to buffer</doc>
            <type name="Stream" c:type="CamelStream*"/>
          </parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream-buffer.c"
                 line="345">Operational mode of buffered stream.</doc>
            <type name="StreamBufferMode" c:type="CamelStreamBufferMode"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="init">
        <source-position filename="src/camel/camel-stream-buffer.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream_buffer" transfer-ownership="none">
            <type name="StreamBuffer" c:type="CamelStreamBuffer*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <type name="Stream" c:type="CamelStream*"/>
          </parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="StreamBufferMode" c:type="CamelStreamBufferMode"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="init_vbuf">
        <source-position filename="src/camel/camel-stream-buffer.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream_buffer" transfer-ownership="none">
            <type name="StreamBuffer" c:type="CamelStreamBuffer*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <type name="Stream" c:type="CamelStream*"/>
          </parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="StreamBufferMode" c:type="CamelStreamBufferMode"/>
          </parameter>
          <parameter name="buf" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="discard_cache"
              c:identifier="camel_stream_buffer_discard_cache"
              version="3.38">
        <doc xml:space="preserve"
             filename="src/camel/camel-stream-buffer.c"
             line="518">Discards any cached data in the @sbf. The next read reads
from the stream.</doc>
        <source-position filename="src/camel/camel-stream-buffer.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sbf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream-buffer.c"
                 line="520">a #CamelStreamBuffer</doc>
            <type name="StreamBuffer" c:type="CamelStreamBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="gets" c:identifier="camel_stream_buffer_gets" throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-stream-buffer.c"
             line="390">Read a line of characters up to the next newline character or
@max-1 characters.

If the newline character is encountered, then it will be
included in the buffer @buf.  The buffer will be %NULL terminated.</doc>
        <source-position filename="src/camel/camel-stream-buffer.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-stream-buffer.c"
               line="404">the number of characters read, or 0 for end of file,
and -1 on error.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="sbf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream-buffer.c"
                 line="392">a #CamelStreamBuffer object</doc>
            <type name="StreamBuffer" c:type="CamelStreamBuffer*"/>
          </instance-parameter>
          <parameter name="buf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream-buffer.c"
                 line="393">Memory to write the string to.</doc>
            <array length="1" zero-terminated="0" c:type="gchar*">
              <type name="gchar" c:type="gchar"/>
            </array>
          </parameter>
          <parameter name="max" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream-buffer.c"
                 line="394">Maxmimum number of characters to store.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream-buffer.c"
                 line="395">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="read_line"
              c:identifier="camel_stream_buffer_read_line"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-stream-buffer.c"
             line="461">This function reads a complete newline-terminated line from the stream
and returns it in allocated memory. The trailing newline (and carriage
return if any) are not included in the returned string.</doc>
        <source-position filename="src/camel/camel-stream-buffer.h" line="93"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-stream-buffer.c"
               line="471">the line read, which the caller must free when done with,
or %NULL on eof. If an error occurs, @error will be set.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sbf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream-buffer.c"
                 line="463">a #CamelStreamBuffer object</doc>
            <type name="StreamBuffer" c:type="CamelStreamBuffer*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream-buffer.c"
                 line="464">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Stream" c:type="CamelStream"/>
      </field>
      <field name="priv">
        <type name="StreamBufferPrivate" c:type="CamelStreamBufferPrivate*"/>
      </field>
    </class>
    <record name="StreamBufferClass"
            c:type="CamelStreamBufferClass"
            glib:is-gtype-struct-for="StreamBuffer">
      <source-position filename="src/camel/camel-stream-buffer.h" line="83"/>
      <field name="parent_class">
        <type name="StreamClass" c:type="CamelStreamClass"/>
      </field>
      <field name="init">
        <callback name="init">
          <source-position filename="src/camel/camel-stream-buffer.h"
                           line="72"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="stream_buffer" transfer-ownership="none">
              <type name="StreamBuffer" c:type="CamelStreamBuffer*"/>
            </parameter>
            <parameter name="stream" transfer-ownership="none">
              <type name="Stream" c:type="CamelStream*"/>
            </parameter>
            <parameter name="mode" transfer-ownership="none">
              <type name="StreamBufferMode" c:type="CamelStreamBufferMode"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="init_vbuf">
        <callback name="init_vbuf">
          <source-position filename="src/camel/camel-stream-buffer.h"
                           line="75"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="stream_buffer" transfer-ownership="none">
              <type name="StreamBuffer" c:type="CamelStreamBuffer*"/>
            </parameter>
            <parameter name="stream" transfer-ownership="none">
              <type name="Stream" c:type="CamelStream*"/>
            </parameter>
            <parameter name="mode" transfer-ownership="none">
              <type name="StreamBufferMode" c:type="CamelStreamBufferMode"/>
            </parameter>
            <parameter name="buf" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="size" transfer-ownership="none">
              <type name="guint32" c:type="guint32"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="StreamBufferMode" c:type="CamelStreamBufferMode">
      <source-position filename="src/camel/camel-stream-buffer.h" line="62"/>
      <member name="buffer"
              value="0"
              c:identifier="CAMEL_STREAM_BUFFER_BUFFER">
      </member>
      <member name="none" value="1" c:identifier="CAMEL_STREAM_BUFFER_NONE">
      </member>
      <member name="read" value="0" c:identifier="CAMEL_STREAM_BUFFER_READ">
      </member>
      <member name="write"
              value="128"
              c:identifier="CAMEL_STREAM_BUFFER_WRITE">
      </member>
      <member name="mode" value="128" c:identifier="CAMEL_STREAM_BUFFER_MODE">
      </member>
    </enumeration>
    <record name="StreamBufferPrivate"
            c:type="CamelStreamBufferPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-stream-buffer.h" line="54"/>
    </record>
    <record name="StreamClass"
            c:type="CamelStreamClass"
            glib:is-gtype-struct-for="Stream">
      <source-position filename="src/camel/camel-stream.h" line="86"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="read">
        <callback name="read" throws="1">
          <source-position filename="src/camel/camel-stream.h" line="66"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="486">the number of bytes actually read, or -1 on error and set
errno.</doc>
            <type name="gssize" c:type="gssize"/>
          </return-value>
          <parameters>
            <parameter name="stream" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-stream.c"
                   line="478">a #CamelStream object.</doc>
              <type name="Stream" c:type="CamelStream*"/>
            </parameter>
            <parameter name="buffer" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-stream.c"
                   line="479">output buffer</doc>
              <array length="2" zero-terminated="0" c:type="gchar*">
                <type name="gchar" c:type="gchar"/>
              </array>
            </parameter>
            <parameter name="n" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-stream.c"
                   line="480">max number of bytes to read.</doc>
              <type name="gsize" c:type="gsize"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-stream.c"
                   line="481">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="write">
        <callback name="write" throws="1">
          <source-position filename="src/camel/camel-stream.h" line="71"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="522">the number of bytes written to the stream, or -1 on error
along with setting errno.</doc>
            <type name="gssize" c:type="gssize"/>
          </return-value>
          <parameters>
            <parameter name="stream" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-stream.c"
                   line="514">a #CamelStream object</doc>
              <type name="Stream" c:type="CamelStream*"/>
            </parameter>
            <parameter name="buffer" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-stream.c"
                   line="515">buffer to write.</doc>
              <array length="2" zero-terminated="0" c:type="const gchar*">
                <type name="gchar" c:type="gchar"/>
              </array>
            </parameter>
            <parameter name="n" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-stream.c"
                   line="516">number of bytes to write</doc>
              <type name="gsize" c:type="gsize"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-stream.c"
                   line="517">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="close">
        <callback name="close" throws="1">
          <source-position filename="src/camel/camel-stream.h" line="76"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="587">0 on success or -1 on error.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="stream" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-stream.c"
                   line="581">a #CamelStream object</doc>
              <type name="Stream" c:type="CamelStream*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-stream.c"
                   line="582">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="flush">
        <callback name="flush" throws="1">
          <source-position filename="src/camel/camel-stream.h" line="79"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="557">0 on success or -1 on fail along with setting @error</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="stream" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-stream.c"
                   line="550">a #CamelStream object</doc>
              <type name="Stream" c:type="CamelStream*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-stream.c"
                   line="551">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eos">
        <callback name="eos">
          <source-position filename="src/camel/camel-stream.h" line="82"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream.c"
                 line="615">%TRUE on EOS or %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="stream" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-stream.c"
                   line="611">a #CamelStream object</doc>
              <type name="Stream" c:type="CamelStream*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="StreamFilter"
           c:symbol-prefix="stream_filter"
           c:type="CamelStreamFilter"
           parent="Stream"
           glib:type-name="CamelStreamFilter"
           glib:get-type="camel_stream_filter_get_type"
           glib:type-struct="StreamFilterClass">
      <source-position filename="src/camel/camel-stream-filter.h" line="65"/>
      <implements name="Gio.Seekable"/>
      <constructor name="new"
                   c:identifier="camel_stream_filter_new"
                   version="2.32">
        <doc xml:space="preserve"
             filename="src/camel/camel-stream-filter.c"
             line="414">Create a new #CamelStreamFilter object. The @source stream
is referenced, thus the caller can unref it, if not needed.</doc>
        <source-position filename="src/camel/camel-stream-filter.h" line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-stream-filter.c"
               line="421">a new #CamelStreamFilter object.</doc>
          <type name="Stream" c:type="CamelStream*"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream-filter.c"
                 line="416">a #CamelStream to filter</doc>
            <type name="Stream" c:type="CamelStream*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add" c:identifier="camel_stream_filter_add">
        <doc xml:space="preserve"
             filename="src/camel/camel-stream-filter.c"
             line="457">Add a new #CamelMimeFilter to execute during the processing of this
stream.  Each filter added is processed after the previous one.

Note that a filter should only be added to a single stream
at a time, otherwise unpredictable results may occur.</doc>
        <source-position filename="src/camel/camel-stream-filter.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-stream-filter.c"
               line="468">a filter id for the added @filter.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream-filter.c"
                 line="459">a #CamelStreamFilter object</doc>
            <type name="StreamFilter" c:type="CamelStreamFilter*"/>
          </instance-parameter>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream-filter.c"
                 line="460">a #CamelMimeFilter object</doc>
            <type name="MimeFilter" c:type="CamelMimeFilter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_source"
              c:identifier="camel_stream_filter_get_source"
              version="2.32">
        <source-position filename="src/camel/camel-stream-filter.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="Stream" c:type="CamelStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream-filter.c"
                 line="443">a #CamelStreamFilter</doc>
            <type name="StreamFilter" c:type="CamelStreamFilter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="camel_stream_filter_remove">
        <doc xml:space="preserve"
             filename="src/camel/camel-stream-filter.c"
             line="495">Remove a processing filter from the stream by id.</doc>
        <source-position filename="src/camel/camel-stream-filter.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream-filter.c"
                 line="497">a #CamelStreamFilter object</doc>
            <type name="StreamFilter" c:type="CamelStreamFilter*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream-filter.c"
                 line="498">Filter id, as returned from camel_stream_filter_add()</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Stream" c:type="CamelStream"/>
      </field>
      <field name="priv">
        <type name="StreamFilterPrivate" c:type="CamelStreamFilterPrivate*"/>
      </field>
    </class>
    <record name="StreamFilterClass"
            c:type="CamelStreamFilterClass"
            glib:is-gtype-struct-for="StreamFilter">
      <source-position filename="src/camel/camel-stream-filter.h" line="65"/>
      <field name="parent_class">
        <type name="StreamClass" c:type="CamelStreamClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="StreamFilterPrivate"
            c:type="CamelStreamFilterPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-stream-filter.h" line="53"/>
    </record>
    <class name="StreamFs"
           c:symbol-prefix="stream_fs"
           c:type="CamelStreamFs"
           parent="Stream"
           glib:type-name="CamelStreamFs"
           glib:get-type="camel_stream_fs_get_type"
           glib:type-struct="StreamFsClass">
      <source-position filename="src/camel/camel-stream-fs.h" line="70"/>
      <implements name="Gio.Seekable"/>
      <constructor name="new_with_fd"
                   c:identifier="camel_stream_fs_new_with_fd">
        <doc xml:space="preserve"
             filename="src/camel/camel-stream-fs.c"
             line="270">Creates a new fs stream using the given file descriptor @fd as the
backing store. When the stream is destroyed, the file descriptor
will be closed.</doc>
        <source-position filename="src/camel/camel-stream-fs.h" line="77"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-stream-fs.c"
               line="278">a new #CamelStreamFs</doc>
          <type name="Stream" c:type="CamelStream*"/>
        </return-value>
        <parameters>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream-fs.c"
                 line="272">a file descriptor</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_name"
                   c:identifier="camel_stream_fs_new_with_name"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-stream-fs.c"
             line="297">Creates a new #CamelStreamFs corresponding to the named file, flags,
and mode.</doc>
        <source-position filename="src/camel/camel-stream-fs.h" line="73"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-stream-fs.c"
               line="307">the new stream, or %NULL on error</doc>
          <type name="Stream" c:type="CamelStream*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream-fs.c"
                 line="299">a local filename</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream-fs.c"
                 line="300">flags as in open(2)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream-fs.c"
                 line="301">a file mode</doc>
            <type name="guint32" c:type="mode_t"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_fd"
              c:identifier="camel_stream_fs_get_fd"
              version="2.32">
        <source-position filename="src/camel/camel-stream-fs.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream-fs.c"
                 line="331">a #CamelStream</doc>
            <type name="StreamFs" c:type="CamelStreamFs*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Stream" c:type="CamelStream"/>
      </field>
      <field name="priv">
        <type name="StreamFsPrivate" c:type="CamelStreamFsPrivate*"/>
      </field>
    </class>
    <record name="StreamFsClass"
            c:type="CamelStreamFsClass"
            glib:is-gtype-struct-for="StreamFs">
      <source-position filename="src/camel/camel-stream-fs.h" line="70"/>
      <field name="parent_class">
        <type name="StreamClass" c:type="CamelStreamClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="StreamFsPrivate"
            c:type="CamelStreamFsPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-stream-fs.h" line="58"/>
    </record>
    <class name="StreamMem"
           c:symbol-prefix="stream_mem"
           c:type="CamelStreamMem"
           parent="Stream"
           glib:type-name="CamelStreamMem"
           glib:get-type="camel_stream_mem_get_type"
           glib:type-struct="StreamMemClass">
      <source-position filename="src/camel/camel-stream-mem.h" line="67"/>
      <implements name="Gio.Seekable"/>
      <constructor name="new" c:identifier="camel_stream_mem_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-stream-mem.c"
             line="250">Create a new #CamelStreamMem object.</doc>
        <source-position filename="src/camel/camel-stream-mem.h" line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-stream-mem.c"
               line="255">a new #CamelStreamMem</doc>
          <type name="Stream" c:type="CamelStream*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_buffer"
                   c:identifier="camel_stream_mem_new_with_buffer">
        <doc xml:space="preserve"
             filename="src/camel/camel-stream-mem.c"
             line="263">Create a new memory stream using @buffer as the stream data.

Note: @buffer will be copied into an internal #GByteArray structure
for use as the stream backing. This may have resource implications
you may wish to consider.</doc>
        <source-position filename="src/camel/camel-stream-mem.h" line="73"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-stream-mem.c"
               line="274">a new #CamelStreamMem</doc>
          <type name="Stream" c:type="CamelStream*"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream-mem.c"
                 line="265">a memory buffer to use as the stream data</doc>
            <array length="1" zero-terminated="0" c:type="const gchar*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream-mem.c"
                 line="266">length of @buffer</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_byte_array"
                   c:identifier="camel_stream_mem_new_with_byte_array">
        <doc xml:space="preserve"
             filename="src/camel/camel-stream-mem.c"
             line="290">Create a new #CamelStreamMem using @buffer as the stream data.

Note: The newly created #CamelStreamMem will destroy @buffer
when destroyed.</doc>
        <source-position filename="src/camel/camel-stream-mem.h" line="71"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-stream-mem.c"
               line="299">a new #CamelStreamMem</doc>
          <type name="Stream" c:type="CamelStream*"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream-mem.c"
                 line="292">a #GByteArray to use as the stream data</doc>
            <array name="GLib.ByteArray" c:type="GByteArray*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_byte_array"
              c:identifier="camel_stream_mem_get_byte_array"
              version="2.32">
        <source-position filename="src/camel/camel-stream-mem.h" line="76"/>
        <return-value transfer-ownership="none">
          <array name="GLib.ByteArray" c:type="GByteArray*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="mem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream-mem.c"
                 line="338">a #CamelStreamMem</doc>
            <type name="StreamMem" c:type="CamelStreamMem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_buffer" c:identifier="camel_stream_mem_set_buffer">
        <doc xml:space="preserve"
             filename="src/camel/camel-stream-mem.c"
             line="380">Set @buffer to be the backing data to the existing #CamelStreamMem, @mem.

Note: @buffer will be copied into an internal #GByteArray structure
and so may have resource implications to consider.</doc>
        <source-position filename="src/camel/camel-stream-mem.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream-mem.c"
                 line="382">a #CamelStreamMem object</doc>
            <type name="StreamMem" c:type="CamelStreamMem*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream-mem.c"
                 line="383">a memory buffer</doc>
            <array length="1" zero-terminated="0" c:type="const gchar*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream-mem.c"
                 line="384">length of @buffer</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_byte_array"
              c:identifier="camel_stream_mem_set_byte_array">
        <doc xml:space="preserve"
             filename="src/camel/camel-stream-mem.c"
             line="352">Set @buffer to be the backing data to the existing #CamelStreamMem, @mem.

Note: @mem will not take ownership of @buffer and so will need to
be freed separately from @mem.</doc>
        <source-position filename="src/camel/camel-stream-mem.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream-mem.c"
                 line="354">a #CamelStreamMem object</doc>
            <type name="StreamMem" c:type="CamelStreamMem*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream-mem.c"
                 line="355">a #GByteArray</doc>
            <array name="GLib.ByteArray" c:type="GByteArray*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_secure" c:identifier="camel_stream_mem_set_secure">
        <doc xml:space="preserve"
             filename="src/camel/camel-stream-mem.c"
             line="318">Mark the memory stream as secure.  At the very least this means the
data in the buffer will be cleared when the buffer is finalized.
This only applies to buffers owned by the stream.</doc>
        <source-position filename="src/camel/camel-stream-mem.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream-mem.c"
                 line="320">a #CamelStreamMem object</doc>
            <type name="StreamMem" c:type="CamelStreamMem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Stream" c:type="CamelStream"/>
      </field>
      <field name="priv">
        <type name="StreamMemPrivate" c:type="CamelStreamMemPrivate*"/>
      </field>
    </class>
    <record name="StreamMemClass"
            c:type="CamelStreamMemClass"
            glib:is-gtype-struct-for="StreamMem">
      <source-position filename="src/camel/camel-stream-mem.h" line="67"/>
      <field name="parent_class">
        <type name="StreamClass" c:type="CamelStreamClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="StreamMemPrivate"
            c:type="CamelStreamMemPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-stream-mem.h" line="55"/>
    </record>
    <class name="StreamNull"
           c:symbol-prefix="stream_null"
           c:type="CamelStreamNull"
           parent="Stream"
           glib:type-name="CamelStreamNull"
           glib:get-type="camel_stream_null_get_type"
           glib:type-struct="StreamNullClass">
      <source-position filename="src/camel/camel-stream-null.h" line="64"/>
      <implements name="Gio.Seekable"/>
      <constructor name="new" c:identifier="camel_stream_null_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-stream-null.c"
             line="146">Returns a null stream.  A null stream is always at eof, and
always returns success for all reads and writes.</doc>
        <source-position filename="src/camel/camel-stream-null.h" line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-stream-null.c"
               line="152">a new #CamelStreamNull</doc>
          <type name="Stream" c:type="CamelStream*"/>
        </return-value>
      </constructor>
      <method name="get_bytes_written"
              c:identifier="camel_stream_null_get_bytes_written"
              version="3.24">
        <source-position filename="src/camel/camel-stream-null.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-stream-null.c"
               line="164">how many bytes had been written to the @stream_null since
  it was created or rewind to the beginning.</doc>
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream_null" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream-null.c"
                 line="162">a #CamelStreamNull</doc>
            <type name="StreamNull" c:type="CamelStreamNull*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ends_with_crlf"
              c:identifier="camel_stream_null_get_ends_with_crlf"
              version="3.30">
        <source-position filename="src/camel/camel-stream-null.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-stream-null.c"
               line="181">Whether the data being written to @stream_null ended with CRLF.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream_null" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-stream-null.c"
                 line="179">a #CamelStreamNull</doc>
            <type name="StreamNull" c:type="CamelStreamNull*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Stream" c:type="CamelStream"/>
      </field>
      <field name="priv">
        <type name="StreamNullPrivate" c:type="CamelStreamNullPrivate*"/>
      </field>
    </class>
    <record name="StreamNullClass"
            c:type="CamelStreamNullClass"
            glib:is-gtype-struct-for="StreamNull">
      <source-position filename="src/camel/camel-stream-null.h" line="64"/>
      <field name="parent_class">
        <type name="StreamClass" c:type="CamelStreamClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="StreamNullPrivate"
            c:type="CamelStreamNullPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-stream-null.h" line="52"/>
    </record>
    <record name="StreamPrivate"
            c:type="CamelStreamPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-stream.h" line="56"/>
    </record>
    <class name="StreamProcess"
           c:symbol-prefix="stream_process"
           c:type="CamelStreamProcess"
           parent="Stream"
           glib:type-name="CamelStreamProcess"
           glib:get-type="camel_stream_process_get_type"
           glib:type-struct="StreamProcessClass">
      <source-position filename="src/camel/camel-stream-process.h" line="64"/>
      <implements name="Gio.Seekable"/>
      <constructor name="new" c:identifier="camel_stream_process_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-stream-process.c"
             line="178">Returns a PROCESS stream.</doc>
        <source-position filename="src/camel/camel-stream-process.h"
                         line="67"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-stream-process.c"
               line="183">the stream</doc>
          <type name="Stream" c:type="CamelStream*"/>
        </return-value>
      </constructor>
      <method name="connect"
              c:identifier="camel_stream_process_connect"
              throws="1">
        <source-position filename="src/camel/camel-stream-process.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <type name="StreamProcess" c:type="CamelStreamProcess*"/>
          </instance-parameter>
          <parameter name="command" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="env" transfer-ownership="none">
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Stream" c:type="CamelStream"/>
      </field>
      <field name="priv">
        <type name="StreamProcessPrivate" c:type="CamelStreamProcessPrivate*"/>
      </field>
    </class>
    <record name="StreamProcessClass"
            c:type="CamelStreamProcessClass"
            glib:is-gtype-struct-for="StreamProcess">
      <source-position filename="src/camel/camel-stream-process.h" line="64"/>
      <field name="parent_class">
        <type name="StreamClass" c:type="CamelStreamClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="StreamProcessPrivate"
            c:type="CamelStreamProcessPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-stream-process.h" line="52"/>
    </record>
    <interface name="Subscribable"
               c:symbol-prefix="subscribable"
               c:type="CamelSubscribable"
               version="3.2"
               glib:type-name="CamelSubscribable"
               glib:get-type="camel_subscribable_get_type"
               glib:type-struct="SubscribableInterface">
      <source-position filename="src/camel/camel-subscribable.h" line="89"/>
      <prerequisite name="Store"/>
      <virtual-method name="folder_is_subscribed"
                      invoker="folder_is_subscribed"
                      version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-subscribable.c"
             line="134">Find out if a folder has been subscribed to.</doc>
        <source-position filename="src/camel/camel-subscribable.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-subscribable.c"
               line="141">%TRUE if the folder has been subscribed to or %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="subscribable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="136">a #CamelSubscribable</doc>
            <type name="Subscribable" c:type="CamelSubscribable*"/>
          </instance-parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="137">full path of the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="folder_subscribed"
                      invoker="folder_subscribed"
                      version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-subscribable.c"
             line="501">Emits the #CamelSubscribable::folder-subscribed signal from an idle source
on the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.

This function is only intended for Camel providers.</doc>
        <source-position filename="src/camel/camel-subscribable.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="subscribable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="503">a #CamelSubscribable</doc>
            <type name="Subscribable" c:type="CamelSubscribable*"/>
          </instance-parameter>
          <parameter name="folder_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="504">information about the subscribed folder</doc>
            <type name="FolderInfo" c:type="CamelFolderInfo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="folder_unsubscribed"
                      invoker="folder_unsubscribed"
                      version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-subscribable.c"
             line="544">Emits the #CamelSubscribable::folder-unsubscribed signal from an idle source
on the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.

This function is only intended for Camel providers.</doc>
        <source-position filename="src/camel/camel-subscribable.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="subscribable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="546">a #CamelSubscribable</doc>
            <type name="Subscribable" c:type="CamelSubscribable*"/>
          </instance-parameter>
          <parameter name="folder_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="547">information about the unsubscribed folder</doc>
            <type name="FolderInfo" c:type="CamelFolderInfo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="subscribe_folder_sync"
                      invoker="subscribe_folder_sync"
                      version="3.2"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-subscribable.c"
             line="160">Subscribes to the folder described by @folder_name.</doc>
        <source-position filename="src/camel/camel-subscribable.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-subscribable.c"
               line="169">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="subscribable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="162">a #CamelSubscribable</doc>
            <type name="Subscribable" c:type="CamelSubscribable*"/>
          </instance-parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="163">full path of the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="164">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unsubscribe_folder_sync"
                      invoker="unsubscribe_folder_sync"
                      version="3.2"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-subscribable.c"
             line="329">Unsubscribes from the folder described by @folder_name.</doc>
        <source-position filename="src/camel/camel-subscribable.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-subscribable.c"
               line="338">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="subscribable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="331">a #CamelSubscribable</doc>
            <type name="Subscribable" c:type="CamelSubscribable*"/>
          </instance-parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="332">full path of the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="333">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="folder_is_subscribed"
              c:identifier="camel_subscribable_folder_is_subscribed"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-subscribable.c"
             line="134">Find out if a folder has been subscribed to.</doc>
        <source-position filename="src/camel/camel-subscribable.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-subscribable.c"
               line="141">%TRUE if the folder has been subscribed to or %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="subscribable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="136">a #CamelSubscribable</doc>
            <type name="Subscribable" c:type="CamelSubscribable*"/>
          </instance-parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="137">full path of the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="folder_subscribed"
              c:identifier="camel_subscribable_folder_subscribed"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-subscribable.c"
             line="501">Emits the #CamelSubscribable::folder-subscribed signal from an idle source
on the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.

This function is only intended for Camel providers.</doc>
        <source-position filename="src/camel/camel-subscribable.h" line="128"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="subscribable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="503">a #CamelSubscribable</doc>
            <type name="Subscribable" c:type="CamelSubscribable*"/>
          </instance-parameter>
          <parameter name="folder_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="504">information about the subscribed folder</doc>
            <type name="FolderInfo" c:type="CamelFolderInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="folder_unsubscribed"
              c:identifier="camel_subscribable_folder_unsubscribed"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-subscribable.c"
             line="544">Emits the #CamelSubscribable::folder-unsubscribed signal from an idle source
on the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.

This function is only intended for Camel providers.</doc>
        <source-position filename="src/camel/camel-subscribable.h" line="131"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="subscribable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="546">a #CamelSubscribable</doc>
            <type name="Subscribable" c:type="CamelSubscribable*"/>
          </instance-parameter>
          <parameter name="folder_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="547">information about the unsubscribed folder</doc>
            <type name="FolderInfo" c:type="CamelFolderInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="subscribe_folder"
              c:identifier="camel_subscribable_subscribe_folder"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-subscribable.c"
             line="251">Asynchronously subscribes to the folder described by @folder_name.

When the operation is finished, @callback will be called.  You can then
call camel_subscribable_subscribe_folder_finish() to get the result of
the operation.</doc>
        <source-position filename="src/camel/camel-subscribable.h" line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="subscribable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="253">a #CamelSubscribable</doc>
            <type name="Subscribable" c:type="CamelSubscribable*"/>
          </instance-parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="254">full path of the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="255">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="256">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="257">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="258">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="subscribe_folder_finish"
              c:identifier="camel_subscribable_subscribe_folder_finish"
              version="3.2"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-subscribable.c"
             line="302">Finishes the operation started with camel_subscribable_subscribe_folder().</doc>
        <source-position filename="src/camel/camel-subscribable.h" line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-subscribable.c"
               line="310">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="subscribable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="304">a #CamelSubscribable</doc>
            <type name="Subscribable" c:type="CamelSubscribable*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="305">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="subscribe_folder_sync"
              c:identifier="camel_subscribable_subscribe_folder_sync"
              version="3.2"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-subscribable.c"
             line="160">Subscribes to the folder described by @folder_name.</doc>
        <source-position filename="src/camel/camel-subscribable.h" line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-subscribable.c"
               line="169">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="subscribable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="162">a #CamelSubscribable</doc>
            <type name="Subscribable" c:type="CamelSubscribable*"/>
          </instance-parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="163">full path of the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="164">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unsubscribe_folder"
              c:identifier="camel_subscribable_unsubscribe_folder"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-subscribable.c"
             line="423">Asynchronously unsubscribes from the folder described by @folder_name.

When the operation is finished, @callback will be called.  You can then
call camel_subscribable_unsubscribe_folder_finish() to get the result of
the operation.</doc>
        <source-position filename="src/camel/camel-subscribable.h" line="117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="subscribable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="425">a #CamelSubscribable</doc>
            <type name="Subscribable" c:type="CamelSubscribable*"/>
          </instance-parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="426">full path of the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="427">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="428">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="429">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="430">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="unsubscribe_folder_finish"
              c:identifier="camel_subscribable_unsubscribe_folder_finish"
              version="3.2"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-subscribable.c"
             line="474">Finishes the operation started with camel_subscribable_unsubscribe_folder().</doc>
        <source-position filename="src/camel/camel-subscribable.h" line="124"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-subscribable.c"
               line="482">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="subscribable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="476">a #CamelSubscribable</doc>
            <type name="Subscribable" c:type="CamelSubscribable*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="477">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unsubscribe_folder_sync"
              c:identifier="camel_subscribable_unsubscribe_folder_sync"
              version="3.2"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-subscribable.c"
             line="329">Unsubscribes from the folder described by @folder_name.</doc>
        <source-position filename="src/camel/camel-subscribable.h" line="112"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-subscribable.c"
               line="338">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="subscribable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="331">a #CamelSubscribable</doc>
            <type name="Subscribable" c:type="CamelSubscribable*"/>
          </instance-parameter>
          <parameter name="folder_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="332">full path of the folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="333">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="folder-subscribed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="FolderInfo"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="folder-unsubscribed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="FolderInfo"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="SubscribableInterface"
            c:type="CamelSubscribableInterface"
            glib:is-gtype-struct-for="Subscribable">
      <source-position filename="src/camel/camel-subscribable.h" line="89"/>
      <field name="parent_interface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="folder_is_subscribed">
        <callback name="folder_is_subscribed">
          <source-position filename="src/camel/camel-subscribable.h"
                           line="60"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="141">%TRUE if the folder has been subscribed to or %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="subscribable" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-subscribable.c"
                   line="136">a #CamelSubscribable</doc>
              <type name="Subscribable" c:type="CamelSubscribable*"/>
            </parameter>
            <parameter name="folder_name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-subscribable.c"
                   line="137">full path of the folder</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="subscribe_folder_sync">
        <callback name="subscribe_folder_sync" throws="1">
          <source-position filename="src/camel/camel-subscribable.h"
                           line="65"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="169">%TRUE on success, %FALSE on error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="subscribable" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-subscribable.c"
                   line="162">a #CamelSubscribable</doc>
              <type name="Subscribable" c:type="CamelSubscribable*"/>
            </parameter>
            <parameter name="folder_name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-subscribable.c"
                   line="163">full path of the folder</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-subscribable.c"
                   line="164">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unsubscribe_folder_sync">
        <callback name="unsubscribe_folder_sync" throws="1">
          <source-position filename="src/camel/camel-subscribable.h"
                           line="70"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-subscribable.c"
                 line="338">%TRUE on success, %FALSE on error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="subscribable" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-subscribable.c"
                   line="331">a #CamelSubscribable</doc>
              <type name="Subscribable" c:type="CamelSubscribable*"/>
            </parameter>
            <parameter name="folder_name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-subscribable.c"
                   line="332">full path of the folder</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-subscribable.c"
                   line="333">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved_methods">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="folder_subscribed">
        <callback name="folder_subscribed">
          <source-position filename="src/camel/camel-subscribable.h"
                           line="80"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="subscribable" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-subscribable.c"
                   line="503">a #CamelSubscribable</doc>
              <type name="Subscribable" c:type="CamelSubscribable*"/>
            </parameter>
            <parameter name="folder_info" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-subscribable.c"
                   line="504">information about the subscribed folder</doc>
              <type name="FolderInfo" c:type="CamelFolderInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="folder_unsubscribed">
        <callback name="folder_unsubscribed">
          <source-position filename="src/camel/camel-subscribable.h"
                           line="83"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="subscribable" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-subscribable.c"
                   line="546">a #CamelSubscribable</doc>
              <type name="Subscribable" c:type="CamelSubscribable*"/>
            </parameter>
            <parameter name="folder_info" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-subscribable.c"
                   line="547">information about the unsubscribed folder</doc>
              <type name="FolderInfo" c:type="CamelFolderInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved_signals">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="SummaryMessageID" c:type="CamelSummaryMessageID">
      <source-position filename="src/camel/camel-message-info.h" line="65"/>
      <union name="id" c:type="id">
        <source-position filename="src/camel/camel-message-info.h" line="64"/>
        <field name="id" writable="1">
          <type name="guint64" c:type="guint64"/>
        </field>
        <field name="hash" writable="1">
          <array zero-terminated="0" fixed-size="8">
            <type name="guint8" c:type="guchar"/>
          </array>
        </field>
        <record name="part" c:type="part">
          <source-position filename="src/camel/camel-message-info.h"
                           line="63"/>
          <field name="hi" writable="1">
            <type name="guint32" c:type="guint32"/>
          </field>
          <field name="lo" writable="1">
            <type name="guint32" c:type="guint32"/>
          </field>
        </record>
      </union>
    </record>
    <function-macro name="TEXT_INDEX"
                    c:identifier="CAMEL_TEXT_INDEX"
                    introspectable="0">
      <source-position filename="src/camel/camel-text-index.h" line="30"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TEXT_INDEX_CLASS"
                    c:identifier="CAMEL_TEXT_INDEX_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-text-index.h" line="33"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TEXT_INDEX_CURSOR"
                    c:identifier="CAMEL_TEXT_INDEX_CURSOR"
                    introspectable="0">
      <source-position filename="src/camel/camel-text-index.h" line="64"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TEXT_INDEX_CURSOR_CLASS"
                    c:identifier="CAMEL_TEXT_INDEX_CURSOR_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-text-index.h" line="67"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TEXT_INDEX_CURSOR_GET_CLASS"
                    c:identifier="CAMEL_TEXT_INDEX_CURSOR_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-text-index.h" line="76"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TEXT_INDEX_GET_CLASS"
                    c:identifier="CAMEL_TEXT_INDEX_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-text-index.h" line="42"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TEXT_INDEX_KEY_CURSOR"
                    c:identifier="CAMEL_TEXT_INDEX_KEY_CURSOR"
                    introspectable="0">
      <source-position filename="src/camel/camel-text-index.h" line="81"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TEXT_INDEX_KEY_CURSOR_CLASS"
                    c:identifier="CAMEL_TEXT_INDEX_KEY_CURSOR_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-text-index.h" line="84"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TEXT_INDEX_KEY_CURSOR_GET_CLASS"
                    c:identifier="CAMEL_TEXT_INDEX_KEY_CURSOR_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-text-index.h" line="93"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TEXT_INDEX_NAME"
                    c:identifier="CAMEL_TEXT_INDEX_NAME"
                    introspectable="0">
      <source-position filename="src/camel/camel-text-index.h" line="47"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TEXT_INDEX_NAME_CLASS"
                    c:identifier="CAMEL_TEXT_INDEX_NAME_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-text-index.h" line="50"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TEXT_INDEX_NAME_GET_CLASS"
                    c:identifier="CAMEL_TEXT_INDEX_NAME_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-text-index.h" line="59"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TRANSPORT"
                    c:identifier="CAMEL_TRANSPORT"
                    introspectable="0">
      <source-position filename="src/camel/camel-transport.h" line="34"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TRANSPORT_CLASS"
                    c:identifier="CAMEL_TRANSPORT_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-transport.h" line="37"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TRANSPORT_GET_CLASS"
                    c:identifier="CAMEL_TRANSPORT_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-transport.h" line="46"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="TextIndex"
           c:symbol-prefix="text_index"
           c:type="CamelTextIndex"
           parent="Index"
           glib:type-name="CamelTextIndex"
           glib:get-type="camel_text_index_get_type"
           glib:type-struct="TextIndexClass">
      <source-position filename="src/camel/camel-text-index.h" line="181"/>
      <constructor name="new" c:identifier="camel_text_index_new">
        <source-position filename="src/camel/camel-text-index.h" line="184"/>
        <return-value transfer-ownership="full">
          <type name="TextIndex" c:type="CamelTextIndex*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="check" c:identifier="camel_text_index_check">
        <source-position filename="src/camel/camel-text-index.h" line="188"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="remove" c:identifier="camel_text_index_remove">
        <source-position filename="src/camel/camel-text-index.h" line="191"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="old" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="rename" c:identifier="camel_text_index_rename">
        <source-position filename="src/camel/camel-text-index.h" line="189"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="old" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="new_" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <method name="dump" c:identifier="camel_text_index_dump">
        <source-position filename="src/camel/camel-text-index.h" line="193"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="idx" transfer-ownership="none">
            <type name="TextIndex" c:type="CamelTextIndex*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="info" c:identifier="camel_text_index_info">
        <source-position filename="src/camel/camel-text-index.h" line="194"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="idx" transfer-ownership="none">
            <type name="TextIndex" c:type="CamelTextIndex*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="validate" c:identifier="camel_text_index_validate">
        <source-position filename="src/camel/camel-text-index.h" line="195"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="idx" transfer-ownership="none">
            <type name="TextIndex" c:type="CamelTextIndex*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Index" c:type="CamelIndex"/>
      </field>
      <field name="priv">
        <type name="TextIndexPrivate" c:type="CamelTextIndexPrivate*"/>
      </field>
    </class>
    <record name="TextIndexClass"
            c:type="CamelTextIndexClass"
            glib:is-gtype-struct-for="TextIndex">
      <source-position filename="src/camel/camel-text-index.h" line="181"/>
      <field name="parent_class">
        <type name="IndexClass" c:type="CamelIndexClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="TextIndexCursor"
           c:symbol-prefix="text_index_cursor"
           c:type="CamelTextIndexCursor"
           parent="IndexCursor"
           glib:type-name="CamelTextIndexCursor"
           glib:get-type="camel_text_index_cursor_get_type"
           glib:type-struct="TextIndexCursorClass">
      <source-position filename="src/camel/camel-text-index.h" line="133"/>
      <field name="parent">
        <type name="IndexCursor" c:type="CamelIndexCursor"/>
      </field>
      <field name="priv">
        <type name="TextIndexCursorPrivate"
              c:type="CamelTextIndexCursorPrivate*"/>
      </field>
    </class>
    <record name="TextIndexCursorClass"
            c:type="CamelTextIndexCursorClass"
            glib:is-gtype-struct-for="TextIndexCursor">
      <source-position filename="src/camel/camel-text-index.h" line="133"/>
      <field name="parent_class">
        <type name="IndexCursorClass" c:type="CamelIndexCursorClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="TextIndexCursorPrivate"
            c:type="CamelTextIndexCursorPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-text-index.h" line="113"/>
    </record>
    <callback name="TextIndexFunc" c:type="CamelTextIndexFunc">
      <source-position filename="src/camel/camel-text-index.h" line="119"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="idx" transfer-ownership="none">
          <type name="TextIndex" c:type="CamelTextIndex*"/>
        </parameter>
        <parameter name="word" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="buffer" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="TextIndexKeyCursor"
           c:symbol-prefix="text_index_key_cursor"
           c:type="CamelTextIndexKeyCursor"
           parent="IndexCursor"
           glib:type-name="CamelTextIndexKeyCursor"
           glib:get-type="camel_text_index_key_cursor_get_type"
           glib:type-struct="TextIndexKeyCursorClass">
      <source-position filename="src/camel/camel-text-index.h" line="149"/>
      <field name="parent">
        <type name="IndexCursor" c:type="CamelIndexCursor"/>
      </field>
      <field name="priv">
        <type name="TextIndexKeyCursorPrivate"
              c:type="CamelTextIndexKeyCursorPrivate*"/>
      </field>
    </class>
    <record name="TextIndexKeyCursorClass"
            c:type="CamelTextIndexKeyCursorClass"
            glib:is-gtype-struct-for="TextIndexKeyCursor">
      <source-position filename="src/camel/camel-text-index.h" line="149"/>
      <field name="parent_class">
        <type name="IndexCursorClass" c:type="CamelIndexCursorClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="TextIndexKeyCursorPrivate"
            c:type="CamelTextIndexKeyCursorPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-text-index.h" line="117"/>
    </record>
    <class name="TextIndexName"
           c:symbol-prefix="text_index_name"
           c:type="CamelTextIndexName"
           parent="IndexName"
           glib:type-name="CamelTextIndexName"
           glib:get-type="camel_text_index_name_get_type"
           glib:type-struct="TextIndexNameClass">
      <source-position filename="src/camel/camel-text-index.h" line="165"/>
      <field name="parent">
        <type name="IndexName" c:type="CamelIndexName"/>
      </field>
      <field name="priv">
        <type name="TextIndexNamePrivate" c:type="CamelTextIndexNamePrivate*"/>
      </field>
    </class>
    <record name="TextIndexNameClass"
            c:type="CamelTextIndexNameClass"
            glib:is-gtype-struct-for="TextIndexName">
      <source-position filename="src/camel/camel-text-index.h" line="165"/>
      <field name="parent_class">
        <type name="IndexNameClass" c:type="CamelIndexNameClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="TextIndexNamePrivate"
            c:type="CamelTextIndexNamePrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-text-index.h" line="109"/>
    </record>
    <record name="TextIndexPrivate"
            c:type="CamelTextIndexPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-text-index.h" line="105"/>
    </record>
    <enumeration name="ThreeState"
                 version="3.22"
                 glib:type-name="CamelThreeState"
                 glib:get-type="camel_three_state_get_type"
                 c:type="CamelThreeState">
      <doc xml:space="preserve"
           filename="src/camel/camel-enums.h"
           line="548">Describes a three-state value, which can be either Off, On or Inconsistent.</doc>
      <member name="off"
              value="0"
              c:identifier="CAMEL_THREE_STATE_OFF"
              glib:nick="off"
              glib:name="CAMEL_THREE_STATE_OFF">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="550">the three-state value is Off</doc>
      </member>
      <member name="on"
              value="1"
              c:identifier="CAMEL_THREE_STATE_ON"
              glib:nick="on"
              glib:name="CAMEL_THREE_STATE_ON">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="551">the three-state value is On</doc>
      </member>
      <member name="inconsistent"
              value="2"
              c:identifier="CAMEL_THREE_STATE_INCONSISTENT"
              glib:nick="inconsistent"
              glib:name="CAMEL_THREE_STATE_INCONSISTENT">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="552">the three-state value is neither On, nor Off</doc>
      </member>
    </enumeration>
    <enumeration name="TimeUnit"
                 version="3.24"
                 glib:type-name="CamelTimeUnit"
                 glib:get-type="camel_time_unit_get_type"
                 c:type="CamelTimeUnit">
      <doc xml:space="preserve"
           filename="src/camel/camel-enums.h"
           line="578">Declares time unit, which serves to interpret the time value,
like in #CamelOfflineSettings.</doc>
      <member name="days"
              value="1"
              c:identifier="CAMEL_TIME_UNIT_DAYS"
              glib:nick="days"
              glib:name="CAMEL_TIME_UNIT_DAYS">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="580">days</doc>
      </member>
      <member name="weeks"
              value="2"
              c:identifier="CAMEL_TIME_UNIT_WEEKS"
              glib:nick="weeks"
              glib:name="CAMEL_TIME_UNIT_WEEKS">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="581">weeks</doc>
      </member>
      <member name="months"
              value="3"
              c:identifier="CAMEL_TIME_UNIT_MONTHS"
              glib:nick="months"
              glib:name="CAMEL_TIME_UNIT_MONTHS">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="582">months</doc>
      </member>
      <member name="years"
              value="4"
              c:identifier="CAMEL_TIME_UNIT_YEARS"
              glib:nick="years"
              glib:name="CAMEL_TIME_UNIT_YEARS">
        <doc xml:space="preserve"
             filename="src/camel/camel-enums.h"
             line="583">years</doc>
      </member>
    </enumeration>
    <enumeration name="TransferEncoding"
                 glib:type-name="CamelTransferEncoding"
                 glib:get-type="camel_transfer_encoding_get_type"
                 c:type="CamelTransferEncoding">
      <member name="encoding_default"
              value="0"
              c:identifier="CAMEL_TRANSFER_ENCODING_DEFAULT"
              glib:nick="encoding-default"
              glib:name="CAMEL_TRANSFER_ENCODING_DEFAULT">
      </member>
      <member name="encoding_7bit"
              value="1"
              c:identifier="CAMEL_TRANSFER_ENCODING_7BIT"
              glib:nick="encoding-7bit"
              glib:name="CAMEL_TRANSFER_ENCODING_7BIT">
      </member>
      <member name="encoding_8bit"
              value="2"
              c:identifier="CAMEL_TRANSFER_ENCODING_8BIT"
              glib:nick="encoding-8bit"
              glib:name="CAMEL_TRANSFER_ENCODING_8BIT">
      </member>
      <member name="encoding_base64"
              value="3"
              c:identifier="CAMEL_TRANSFER_ENCODING_BASE64"
              glib:nick="encoding-base64"
              glib:name="CAMEL_TRANSFER_ENCODING_BASE64">
      </member>
      <member name="encoding_quotedprintable"
              value="4"
              c:identifier="CAMEL_TRANSFER_ENCODING_QUOTEDPRINTABLE"
              glib:nick="encoding-quotedprintable"
              glib:name="CAMEL_TRANSFER_ENCODING_QUOTEDPRINTABLE">
      </member>
      <member name="encoding_binary"
              value="5"
              c:identifier="CAMEL_TRANSFER_ENCODING_BINARY"
              glib:nick="encoding-binary"
              glib:name="CAMEL_TRANSFER_ENCODING_BINARY">
      </member>
      <member name="encoding_uuencode"
              value="6"
              c:identifier="CAMEL_TRANSFER_ENCODING_UUENCODE"
              glib:nick="encoding-uuencode"
              glib:name="CAMEL_TRANSFER_ENCODING_UUENCODE">
      </member>
      <member name="num_encodings"
              value="7"
              c:identifier="CAMEL_TRANSFER_NUM_ENCODINGS"
              glib:nick="num-encodings"
              glib:name="CAMEL_TRANSFER_NUM_ENCODINGS">
      </member>
      <function name="from_string"
                c:identifier="camel_transfer_encoding_from_string">
        <source-position filename="src/camel/camel-mime-utils.h" line="198"/>
        <return-value transfer-ownership="none">
          <type name="TransferEncoding" c:type="CamelTransferEncoding"/>
        </return-value>
        <parameters>
          <parameter name="string" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_string"
                c:identifier="camel_transfer_encoding_to_string">
        <source-position filename="src/camel/camel-mime-utils.h" line="197"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="encoding" transfer-ownership="none">
            <type name="TransferEncoding" c:type="CamelTransferEncoding"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <class name="Transport"
           c:symbol-prefix="transport"
           c:type="CamelTransport"
           parent="Service"
           abstract="1"
           glib:type-name="CamelTransport"
           glib:get-type="camel_transport_get_type"
           glib:type-struct="TransportClass">
      <source-position filename="src/camel/camel-transport.h" line="76"/>
      <implements name="Gio.Initable"/>
      <virtual-method name="send_to_sync"
                      invoker="send_to_sync"
                      version="3.0"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-transport.c"
             line="108">Sends the message to the given recipients, regardless of the contents
of @message.  If the message contains a "Bcc" header, the transport
is responsible for stripping it.</doc>
        <source-position filename="src/camel/camel-transport.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-transport.c"
               line="122">%TRUE on success or %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="transport" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-transport.c"
                 line="110">a #CamelTransport</doc>
            <type name="Transport" c:type="CamelTransport*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-transport.c"
                 line="111">a #CamelMimeMessage to send</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </parameter>
          <parameter name="from" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-transport.c"
                 line="112">a #CamelAddress to send from</doc>
            <type name="Address" c:type="CamelAddress*"/>
          </parameter>
          <parameter name="recipients" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-transport.c"
                 line="113">a #CamelAddress containing all recipients</doc>
            <type name="Address" c:type="CamelAddress*"/>
          </parameter>
          <parameter name="out_sent_message_saved"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-transport.c"
                 line="114">set to %TRUE, if the sent message was also saved</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-transport.c"
                 line="115">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_request_dsn"
              c:identifier="camel_transport_get_request_dsn"
              version="3.50">
        <doc xml:space="preserve"
             filename="src/camel/camel-transport.c"
             line="70">Returns whether should request Delivery Status Notification
in the "send_to" operation.</doc>
        <source-position filename="src/camel/camel-transport.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-transport.c"
               line="77">whether should request Delivery Status Notification</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="transport" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-transport.c"
                 line="72">a #CamelTransport</doc>
            <type name="Transport" c:type="CamelTransport*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="send_to"
              c:identifier="camel_transport_send_to"
              version="3.0">
        <doc xml:space="preserve"
             filename="src/camel/camel-transport.c"
             line="197">Sends the message asynchronously to the given recipients, regardless of
the contents of @message.  If the message contains a "Bcc" header, the
transport is responsible for stripping it.

When the operation is finished, @callback will be called.  You can then
call camel_transport_send_to_finish() to get the result of the operation.</doc>
        <source-position filename="src/camel/camel-transport.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="transport" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-transport.c"
                 line="199">a #CamelTransport</doc>
            <type name="Transport" c:type="CamelTransport*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-transport.c"
                 line="200">a #CamelMimeMessage to send</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </parameter>
          <parameter name="from" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-transport.c"
                 line="201">a #CamelAddress to send from</doc>
            <type name="Address" c:type="CamelAddress*"/>
          </parameter>
          <parameter name="recipients" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-transport.c"
                 line="202">a #CamelAddress containing all recipients</doc>
            <type name="Address" c:type="CamelAddress*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-transport.c"
                 line="203">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-transport.c"
                 line="204">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/camel/camel-transport.c"
                 line="205">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-transport.c"
                 line="206">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_to_finish"
              c:identifier="camel_transport_send_to_finish"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-transport.c"
             line="267">Finishes the operation started with camel_transport_send_to().</doc>
        <source-position filename="src/camel/camel-transport.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-transport.c"
               line="276">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="transport" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-transport.c"
                 line="269">a #CamelTransport</doc>
            <type name="Transport" c:type="CamelTransport*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-transport.c"
                 line="270">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="out_sent_message_saved"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-transport.c"
                 line="271">set to %TRUE, if the sent message was also saved</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_to_sync"
              c:identifier="camel_transport_send_to_sync"
              version="3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-transport.c"
             line="108">Sends the message to the given recipients, regardless of the contents
of @message.  If the message contains a "Bcc" header, the transport
is responsible for stripping it.</doc>
        <source-position filename="src/camel/camel-transport.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-transport.c"
               line="122">%TRUE on success or %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="transport" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-transport.c"
                 line="110">a #CamelTransport</doc>
            <type name="Transport" c:type="CamelTransport*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-transport.c"
                 line="111">a #CamelMimeMessage to send</doc>
            <type name="MimeMessage" c:type="CamelMimeMessage*"/>
          </parameter>
          <parameter name="from" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-transport.c"
                 line="112">a #CamelAddress to send from</doc>
            <type name="Address" c:type="CamelAddress*"/>
          </parameter>
          <parameter name="recipients" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-transport.c"
                 line="113">a #CamelAddress containing all recipients</doc>
            <type name="Address" c:type="CamelAddress*"/>
          </parameter>
          <parameter name="out_sent_message_saved"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-transport.c"
                 line="114">set to %TRUE, if the sent message was also saved</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-transport.c"
                 line="115">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_request_dsn"
              c:identifier="camel_transport_set_request_dsn"
              version="3.50">
        <doc xml:space="preserve"
             filename="src/camel/camel-transport.c"
             line="89">Sets whether should request Delivery Status Notification
during the "send_to" operation.</doc>
        <source-position filename="src/camel/camel-transport.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="transport" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-transport.c"
                 line="91">a #CamelTransport</doc>
            <type name="Transport" c:type="CamelTransport*"/>
          </instance-parameter>
          <parameter name="request_dsn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-transport.c"
                 line="92">a value to set</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Service" c:type="CamelService"/>
      </field>
      <field name="priv">
        <type name="TransportPrivate" c:type="CamelTransportPrivate*"/>
      </field>
    </class>
    <record name="TransportClass"
            c:type="CamelTransportClass"
            glib:is-gtype-struct-for="Transport">
      <source-position filename="src/camel/camel-transport.h" line="76"/>
      <field name="parent_class">
        <type name="ServiceClass" c:type="CamelServiceClass"/>
      </field>
      <field name="send_to_sync">
        <callback name="send_to_sync" throws="1">
          <source-position filename="src/camel/camel-transport.h" line="66"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-transport.c"
                 line="122">%TRUE on success or %FALSE on error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="transport" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-transport.c"
                   line="110">a #CamelTransport</doc>
              <type name="Transport" c:type="CamelTransport*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-transport.c"
                   line="111">a #CamelMimeMessage to send</doc>
              <type name="MimeMessage" c:type="CamelMimeMessage*"/>
            </parameter>
            <parameter name="from" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-transport.c"
                   line="112">a #CamelAddress to send from</doc>
              <type name="Address" c:type="CamelAddress*"/>
            </parameter>
            <parameter name="recipients" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-transport.c"
                   line="113">a #CamelAddress containing all recipients</doc>
              <type name="Address" c:type="CamelAddress*"/>
            </parameter>
            <parameter name="out_sent_message_saved"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="src/camel/camel-transport.c"
                   line="114">set to %TRUE, if the sent message was also saved</doc>
              <type name="gboolean" c:type="gboolean*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-transport.c"
                   line="115">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="TransportPrivate"
            c:type="CamelTransportPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-transport.h" line="55"/>
    </record>
    <record name="Trie"
            c:type="CamelTrie"
            disguised="1"
            opaque="1"
            version="2.24">
      <doc xml:space="preserve"
           filename="src/camel/camel-trie.c"
           line="43">A trie data structure.</doc>
      <source-position filename="src/camel/camel-trie.h" line="30"/>
      <method name="add"
              c:identifier="camel_trie_add"
              version="2.24"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-trie.c"
             line="239">Add a new pattern to the #CamelTrie @trie.</doc>
        <source-position filename="src/camel/camel-trie.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="trie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-trie.c"
                 line="241">The #CamelTrie to add a pattern to.</doc>
            <type name="Trie" c:type="CamelTrie*"/>
          </instance-parameter>
          <parameter name="pattern" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-trie.c"
                 line="242">The pattern to add.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="pattern_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-trie.c"
                 line="243">The id to use for the pattern.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="free"
              c:identifier="camel_trie_free"
              version="2.24"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-trie.c"
             line="139">Frees the memory associated with the #CamelTrie @trie.</doc>
        <source-position filename="src/camel/camel-trie.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="trie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-trie.c"
                 line="141">The #CamelTrie to free.</doc>
            <type name="Trie" c:type="CamelTrie*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="search"
              c:identifier="camel_trie_search"
              version="2.24"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-trie.c"
             line="336">Try to match the string @buffer with a pattern in @trie.</doc>
        <source-position filename="src/camel/camel-trie.h" line="37"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-trie.c"
               line="345">The matched pattern, or %NULL if no pattern is matched.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="trie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-trie.c"
                 line="338">The #CamelTrie to search in.</doc>
            <type name="Trie" c:type="CamelTrie*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-trie.c"
                 line="339">The string to match against a pattern in @trie.</doc>
            <array length="1" zero-terminated="0" c:type="const gchar*">
              <type name="gchar" c:type="gchar"/>
            </array>
          </parameter>
          <parameter name="buflen" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-trie.c"
                 line="340">The length of @buffer.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="matched_id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-trie.c"
                 line="341">An integer address to store the matched pattern id in.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <function name="new"
                c:identifier="camel_trie_new"
                version="2.24"
                introspectable="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-trie.c"
             line="108">Creates a new #CamelTrie. If @icase is %TRUE, then pattern matching
done by the CamelTrie will be case insensitive.</doc>
        <source-position filename="src/camel/camel-trie.h" line="32"/>
        <return-value>
          <doc xml:space="preserve"
               filename="src/camel/camel-trie.c"
               line="115">The newly-created #CamelTrie.</doc>
          <type name="Trie" c:type="CamelTrie*"/>
        </return-value>
        <parameters>
          <parameter name="icase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-trie.c"
                 line="110">Case sensitivity for the #CamelTrie.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="UIDCache" c:type="CamelUIDCache">
      <source-position filename="src/camel/camel-uid-cache.h" line="42"/>
      <field name="filename" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="uids" writable="1">
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="level" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="expired" writable="1">
        <type name="gsize" c:type="gsize"/>
      </field>
      <field name="size" writable="1">
        <type name="gsize" c:type="gsize"/>
      </field>
      <field name="fd" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <method name="destroy" c:identifier="camel_uid_cache_destroy">
        <doc xml:space="preserve"
             filename="src/camel/camel-uid-cache.c"
             line="235">Destroys @cache and frees its data.</doc>
        <source-position filename="src/camel/camel-uid-cache.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cache" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-uid-cache.c"
                 line="237">a CamelUIDCache</doc>
            <type name="UIDCache" c:type="CamelUIDCache*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_new_uids" c:identifier="camel_uid_cache_get_new_uids">
        <doc xml:space="preserve"
             filename="src/camel/camel-uid-cache.c"
             line="250">Returns an array of UIDs from @uids that are not in @cache, and
removes UIDs from @cache that aren't in @uids.</doc>
        <source-position filename="src/camel/camel-uid-cache.h" line="48"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-uid-cache.c"
               line="258">an array of new UIDs, which must be freed with
camel_uid_cache_free_uids().</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="cache" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-uid-cache.c"
                 line="252">a CamelUIDCache</doc>
            <type name="UIDCache" c:type="CamelUIDCache*"/>
          </instance-parameter>
          <parameter name="uids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-uid-cache.c"
                 line="253">an array of UIDs</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="save" c:identifier="camel_uid_cache_save">
        <doc xml:space="preserve"
             filename="src/camel/camel-uid-cache.c"
             line="136">Attempts to save @cache back to disk.</doc>
        <source-position filename="src/camel/camel-uid-cache.h" line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-uid-cache.c"
               line="142">success or failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="cache" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-uid-cache.c"
                 line="138">a CamelUIDCache</doc>
            <type name="UIDCache" c:type="CamelUIDCache*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="save_uid" c:identifier="camel_uid_cache_save_uid">
        <doc xml:space="preserve"
             filename="src/camel/camel-uid-cache.c"
             line="293">Marks a uid for saving.</doc>
        <source-position filename="src/camel/camel-uid-cache.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cache" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-uid-cache.c"
                 line="295">a CamelUIDCache</doc>
            <type name="UIDCache" c:type="CamelUIDCache*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-uid-cache.c"
                 line="296">a uid to save</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <function name="free_uids" c:identifier="camel_uid_cache_free_uids">
        <doc xml:space="preserve"
             filename="src/camel/camel-uid-cache.c"
             line="321">Frees the array of UIDs.</doc>
        <source-position filename="src/camel/camel-uid-cache.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="uids" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/camel/camel-uid-cache.c"
                 line="323">an array returned from camel_uid_cache_get_new_uids()</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="new"
                c:identifier="camel_uid_cache_new"
                introspectable="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-uid-cache.c"
             line="40">Creates a new UID cache, initialized from @filename. If @filename
doesn't already exist, the UID cache will be empty. Otherwise, if
it does exist but can't be read, the function will return %NULL.</doc>
        <source-position filename="src/camel/camel-uid-cache.h" line="44"/>
        <return-value nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-uid-cache.c"
               line="48">a new UID cache, or %NULL</doc>
          <type name="UIDCache" c:type="CamelUIDCache*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-uid-cache.c"
                 line="42">path to load the cache from</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <constant name="UNMATCHED_NAME"
              value="UNMATCHED"
              c:type="CAMEL_UNMATCHED_NAME">
      <source-position filename="src/camel/camel-vee-folder.h" line="88"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <record name="URL"
            c:type="CamelURL"
            glib:type-name="CamelURL"
            glib:get-type="camel_url_get_type"
            c:symbol-prefix="url">
      <source-position filename="src/camel/camel-url.h" line="48"/>
      <field name="protocol" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="user" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="authmech" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="host" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="port" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="path" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="params" writable="1">
        <type name="GLib.Data" c:type="GData*"/>
      </field>
      <field name="query" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="fragment" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <constructor name="new" c:identifier="camel_url_new" throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-url.c"
             line="301">Parses an absolute URL.</doc>
        <source-position filename="src/camel/camel-url.h" line="61"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-url.c"
               line="308">a #CamelURL if it can be parsed, or %NULL otherwise</doc>
          <type name="URL" c:type="CamelURL*"/>
        </return-value>
        <parameters>
          <parameter name="url_string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="303">a URL string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy" c:identifier="camel_url_copy">
        <doc xml:space="preserve"
             filename="src/camel/camel-url.c"
             line="760">Copy a #CamelURL.</doc>
        <source-position filename="src/camel/camel-url.h" line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-url.c"
               line="766">a duplicate copy of @in</doc>
          <type name="URL" c:type="CamelURL*"/>
        </return-value>
        <parameters>
          <instance-parameter name="in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="762">a #CamelURL to copy</doc>
            <type name="URL" c:type="CamelURL*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="camel_url_equal">
        <source-position filename="src/camel/camel-url.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-url.c"
               line="745">return %TRUE if the two urls are equal</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="u" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="742">the base URL</doc>
            <type name="URL" c:type="const CamelURL*"/>
          </instance-parameter>
          <parameter name="u2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="743">the URL to compare</doc>
            <type name="URL" c:type="const CamelURL*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="camel_url_free">
        <doc xml:space="preserve"
             filename="src/camel/camel-url.c"
             line="410">Frees @url.</doc>
        <source-position filename="src/camel/camel-url.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="url" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="412">a #CamelURL</doc>
            <type name="URL" c:type="CamelURL*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_param" c:identifier="camel_url_get_param">
        <doc xml:space="preserve"
             filename="src/camel/camel-url.c"
             line="593">Get the value of the specified param on the URL.</doc>
        <source-position filename="src/camel/camel-url.h" line="97"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-url.c"
               line="600">the value of a param if found or %NULL otherwise</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="url" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="595">a #CamelURL</doc>
            <type name="URL" c:type="CamelURL*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="596">name of the param</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="hash" c:identifier="camel_url_hash">
        <source-position filename="src/camel/camel-url.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-url.c"
               line="703">the url hash</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="u" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="701">the base URL</doc>
            <type name="URL" c:type="const CamelURL*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="new_with_base" c:identifier="camel_url_new_with_base">
        <doc xml:space="preserve"
             filename="src/camel/camel-url.c"
             line="56">Parses @url_string relative to @base.</doc>
        <source-position filename="src/camel/camel-url.h" line="59"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-url.c"
               line="63">a parsed #CamelURL</doc>
          <type name="URL" c:type="CamelURL*"/>
        </return-value>
        <parameters>
          <instance-parameter name="base" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="58">a base URL</doc>
            <type name="URL" c:type="CamelURL*"/>
          </instance-parameter>
          <parameter name="url_string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="59">the URL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_authmech" c:identifier="camel_url_set_authmech">
        <doc xml:space="preserve"
             filename="src/camel/camel-url.c"
             line="471">Set the authmech of a #CamelURL.</doc>
        <source-position filename="src/camel/camel-url.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="url" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="473">a #CamelURL</doc>
            <type name="URL" c:type="CamelURL*"/>
          </instance-parameter>
          <parameter name="authmech" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="474">authentication mechanism</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fragment" c:identifier="camel_url_set_fragment">
        <doc xml:space="preserve"
             filename="src/camel/camel-url.c"
             line="539">Set the fragment of a #CamelURL.</doc>
        <source-position filename="src/camel/camel-url.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="url" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="541">a #CamelURL</doc>
            <type name="URL" c:type="CamelURL*"/>
          </instance-parameter>
          <parameter name="fragment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="542">url fragment</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_host" c:identifier="camel_url_set_host">
        <doc xml:space="preserve"
             filename="src/camel/camel-url.c"
             line="488">Set the hostname of a #CamelURL.</doc>
        <source-position filename="src/camel/camel-url.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="url" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="490">a #CamelURL</doc>
            <type name="URL" c:type="CamelURL*"/>
          </instance-parameter>
          <parameter name="host" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="491">hostname</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_param" c:identifier="camel_url_set_param">
        <doc xml:space="preserve"
             filename="src/camel/camel-url.c"
             line="572">Set a param on the #CamelURL.</doc>
        <source-position filename="src/camel/camel-url.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="url" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="574">a #CamelURL</doc>
            <type name="URL" c:type="CamelURL*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="575">name of the param to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="576">value of the param to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_path" c:identifier="camel_url_set_path">
        <doc xml:space="preserve"
             filename="src/camel/camel-url.c"
             line="505">Set the path component of a #CamelURL.</doc>
        <source-position filename="src/camel/camel-url.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="url" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="507">a #CamelURL</doc>
            <type name="URL" c:type="CamelURL*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="508">path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_port" c:identifier="camel_url_set_port">
        <doc xml:space="preserve"
             filename="src/camel/camel-url.c"
             line="556">Set the port on a #CamelURL.</doc>
        <source-position filename="src/camel/camel-url.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="url" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="558">a #CamelURL</doc>
            <type name="URL" c:type="CamelURL*"/>
          </instance-parameter>
          <parameter name="port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="559">port</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_protocol" c:identifier="camel_url_set_protocol">
        <doc xml:space="preserve"
             filename="src/camel/camel-url.c"
             line="437">Set the protocol of a #CamelURL.</doc>
        <source-position filename="src/camel/camel-url.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="url" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="439">a #CamelURL</doc>
            <type name="URL" c:type="CamelURL*"/>
          </instance-parameter>
          <parameter name="protocol" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="440">protocol schema</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_query" c:identifier="camel_url_set_query">
        <doc xml:space="preserve"
             filename="src/camel/camel-url.c"
             line="522">Set the query of a #CamelURL.</doc>
        <source-position filename="src/camel/camel-url.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="url" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="524">a #CamelURL</doc>
            <type name="URL" c:type="CamelURL*"/>
          </instance-parameter>
          <parameter name="query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="525">url query</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_user" c:identifier="camel_url_set_user">
        <doc xml:space="preserve"
             filename="src/camel/camel-url.c"
             line="454">Set the user of a #CamelURL.</doc>
        <source-position filename="src/camel/camel-url.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="url" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="456">a #CamelURL</doc>
            <type name="URL" c:type="CamelURL*"/>
          </instance-parameter>
          <parameter name="user" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="457">username</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="camel_url_to_string">
        <doc xml:space="preserve"
             filename="src/camel/camel-url.c"
             line="331">Flatten a #CamelURL into a string.</doc>
        <source-position filename="src/camel/camel-url.h" line="63"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-url.c"
               line="338">a string representing @url, which the caller must free</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="url" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="333">a #CamelURL</doc>
            <type name="URL" c:type="CamelURL*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="334">additional translation options</doc>
            <type name="URLFlags" c:type="CamelURLFlags"/>
          </parameter>
        </parameters>
      </method>
      <function name="addrspec_end" c:identifier="camel_url_addrspec_end">
        <source-position filename="src/camel/camel-url-scanner.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="in" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="pos" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="inend" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="match" transfer-ownership="none">
            <type name="UrlMatch" c:type="CamelUrlMatch*"/>
          </parameter>
        </parameters>
      </function>
      <function name="addrspec_start" c:identifier="camel_url_addrspec_start">
        <source-position filename="src/camel/camel-url-scanner.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="in" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="pos" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="inend" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="match" transfer-ownership="none">
            <type name="UrlMatch" c:type="CamelUrlMatch*"/>
          </parameter>
        </parameters>
      </function>
      <function name="decode" c:identifier="camel_url_decode">
        <doc xml:space="preserve"
             filename="src/camel/camel-url.c"
             line="672">&amp;percnt;-decodes the passed-in URL *in place*. The decoded version is
never longer than the encoded version, so there does not need to
be any additional space at the end of the string.</doc>
        <source-position filename="src/camel/camel-url.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="674">a URL part</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="decode_path" c:identifier="camel_url_decode_path">
        <source-position filename="src/camel/camel-url.h" line="74"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="encode" c:identifier="camel_url_encode">
        <doc xml:space="preserve"
             filename="src/camel/camel-url.c"
             line="647">This &amp;percnt;-encodes the given URL part and returns the escaped version
in allocated memory, which the caller must free when it is done.</doc>
        <source-position filename="src/camel/camel-url.h" line="71"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-url.c"
               line="656">the encoded string</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="649">a URL part</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="escape_extra"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url.c"
                 line="650">additional characters beyond " \"%#&lt;&gt;{}|\^[]`"
to escape (or %NULL)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="file_end" c:identifier="camel_url_file_end">
        <source-position filename="src/camel/camel-url-scanner.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="in" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="pos" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="inend" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="match" transfer-ownership="none">
            <type name="UrlMatch" c:type="CamelUrlMatch*"/>
          </parameter>
        </parameters>
      </function>
      <function name="file_start" c:identifier="camel_url_file_start">
        <source-position filename="src/camel/camel-url-scanner.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="in" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="pos" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="inend" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="match" transfer-ownership="none">
            <type name="UrlMatch" c:type="CamelUrlMatch*"/>
          </parameter>
        </parameters>
      </function>
      <function name="web_end" c:identifier="camel_url_web_end">
        <source-position filename="src/camel/camel-url-scanner.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="in" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="pos" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="inend" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="match" transfer-ownership="none">
            <type name="UrlMatch" c:type="CamelUrlMatch*"/>
          </parameter>
        </parameters>
      </function>
      <function name="web_start" c:identifier="camel_url_web_start">
        <source-position filename="src/camel/camel-url-scanner.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="in" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="pos" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="inend" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="match" transfer-ownership="none">
            <type name="UrlMatch" c:type="CamelUrlMatch*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <bitfield name="URLFlags"
              glib:type-name="CamelURLFlags"
              glib:get-type="camel_url_flags_get_type"
              c:type="CamelURLFlags">
      <member name="params"
              value="1"
              c:identifier="CAMEL_URL_HIDE_PARAMS"
              glib:nick="params"
              glib:name="CAMEL_URL_HIDE_PARAMS">
      </member>
      <member name="auth"
              value="2"
              c:identifier="CAMEL_URL_HIDE_AUTH"
              glib:nick="auth"
              glib:name="CAMEL_URL_HIDE_AUTH">
      </member>
    </bitfield>
    <constant name="URL_HIDE_ALL" value="3" c:type="CAMEL_URL_HIDE_ALL">
      <source-position filename="src/camel/camel-url.h" line="55"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="URL_PART_AUTH" value="2" c:type="CAMEL_URL_PART_AUTH">
      <source-position filename="src/camel/camel-provider.h" line="58"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="URL_PART_HIDDEN" value="8" c:type="CAMEL_URL_PART_HIDDEN">
      <source-position filename="src/camel/camel-provider.h" line="66"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="URL_PART_HOST" value="8" c:type="CAMEL_URL_PART_HOST">
      <source-position filename="src/camel/camel-provider.h" line="60"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="URL_PART_NEED" value="8" c:type="CAMEL_URL_PART_NEED">
      <source-position filename="src/camel/camel-provider.h" line="65"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="URL_PART_PASSWORD"
              value="4"
              c:type="CAMEL_URL_PART_PASSWORD">
      <source-position filename="src/camel/camel-provider.h" line="59"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="URL_PART_PATH" value="32" c:type="CAMEL_URL_PART_PATH">
      <source-position filename="src/camel/camel-provider.h" line="62"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="URL_PART_PATH_DIR"
              value="64"
              c:type="CAMEL_URL_PART_PATH_DIR">
      <source-position filename="src/camel/camel-provider.h" line="63"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="URL_PART_PORT" value="16" c:type="CAMEL_URL_PART_PORT">
      <source-position filename="src/camel/camel-provider.h" line="61"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="URL_PART_USER" value="1" c:type="CAMEL_URL_PART_USER">
      <source-position filename="src/camel/camel-provider.h" line="57"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="UTILS_MAX_USER_HEADERS"
              value="3"
              c:type="CAMEL_UTILS_MAX_USER_HEADERS">
      <source-position filename="src/camel/camel-utils.h" line="31"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="UUDECODE_STATE_MASK"
              value="196608"
              c:type="CAMEL_UUDECODE_STATE_MASK">
      <source-position filename="src/camel/camel-mime-utils.h" line="48"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <bitfield name="UUDecodeState" c:type="CamelUUDecodeState">
      <source-position filename="src/camel/camel-mime-utils.h" line="46"/>
      <member name="init" value="0" c:identifier="CAMEL_UUDECODE_STATE_INIT">
      </member>
      <member name="begin"
              value="65536"
              c:identifier="CAMEL_UUDECODE_STATE_BEGIN">
      </member>
      <member name="end"
              value="131072"
              c:identifier="CAMEL_UUDECODE_STATE_END">
      </member>
    </bitfield>
    <record name="UrlMatch" c:type="CamelUrlMatch">
      <source-position filename="src/camel/camel-url-scanner.h" line="37"/>
      <field name="pattern" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="prefix" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="um_so" writable="1">
        <type name="gint64" c:type="goffset"/>
      </field>
      <field name="um_eo" writable="1">
        <type name="gint64" c:type="goffset"/>
      </field>
    </record>
    <record name="UrlPattern" c:type="CamelUrlPattern">
      <source-position filename="src/camel/camel-url-scanner.h" line="54"/>
      <field name="pattern" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="prefix" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="start" writable="1">
        <type name="UrlScanFunc" c:type="CamelUrlScanFunc"/>
      </field>
      <field name="end" writable="1">
        <type name="UrlScanFunc" c:type="CamelUrlScanFunc"/>
      </field>
    </record>
    <callback name="UrlScanFunc" c:type="CamelUrlScanFunc">
      <source-position filename="src/camel/camel-url-scanner.h" line="39"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="pos" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="inend" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="match" transfer-ownership="none">
          <type name="UrlMatch" c:type="CamelUrlMatch*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="UrlScanner"
            c:type="CamelUrlScanner"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-url-scanner.h" line="56"/>
      <method name="add"
              c:identifier="camel_url_scanner_add"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-url-scanner.c"
             line="68">Adds a new @pattern into the scanner</doc>
        <source-position filename="src/camel/camel-url-scanner.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="scanner" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url-scanner.c"
                 line="70">a #CamelUrlScanner</doc>
            <type name="UrlScanner" c:type="CamelUrlScanner*"/>
          </instance-parameter>
          <parameter name="pattern" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url-scanner.c"
                 line="71">a #CamelUrlPattern to add</doc>
            <type name="UrlPattern" c:type="CamelUrlPattern*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free"
              c:identifier="camel_url_scanner_free"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-url-scanner.c"
             line="52">Frees the @scanner.</doc>
        <source-position filename="src/camel/camel-url-scanner.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="scanner" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url-scanner.c"
                 line="54">a #CamelUrlScanner</doc>
            <type name="UrlScanner" c:type="CamelUrlScanner*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="scan"
              c:identifier="camel_url_scanner_scan"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/camel/camel-url-scanner.c"
             line="85">Scan the @in string with the @match criterias.</doc>
        <source-position filename="src/camel/camel-url-scanner.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-url-scanner.c"
               line="94">%TRUE if there is a result.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="scanner" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url-scanner.c"
                 line="87">a #CamelUrlScanner object.</doc>
            <type name="UrlScanner" c:type="CamelUrlScanner*"/>
          </instance-parameter>
          <parameter name="in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url-scanner.c"
                 line="88">the url to scan.</doc>
            <array length="1" zero-terminated="0" c:type="const gchar*">
              <type name="gchar" c:type="gchar"/>
            </array>
          </parameter>
          <parameter name="inlen" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url-scanner.c"
                 line="89">length of the in array.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="match" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-url-scanner.c"
                 line="90">the #CamelUrlMatch structure containing the criterias.</doc>
            <type name="UrlMatch" c:type="CamelUrlMatch*"/>
          </parameter>
        </parameters>
      </method>
      <function name="new"
                c:identifier="camel_url_scanner_new"
                introspectable="0">
        <source-position filename="src/camel/camel-url-scanner.h" line="58"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-url-scanner.c"
               line="38">Creates a new #CamelUrlScanner</doc>
          <type name="UrlScanner" c:type="CamelUrlScanner*"/>
        </return-value>
      </function>
    </record>
    <function-macro name="VEE_DATA_CACHE"
                    c:identifier="CAMEL_VEE_DATA_CACHE"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-data-cache.h" line="65"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VEE_DATA_CACHE_CLASS"
                    c:identifier="CAMEL_VEE_DATA_CACHE_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-data-cache.h" line="68"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VEE_DATA_CACHE_GET_CLASS"
                    c:identifier="CAMEL_VEE_DATA_CACHE_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-data-cache.h" line="77"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VEE_FOLDER"
                    c:identifier="CAMEL_VEE_FOLDER"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-folder.h" line="34"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VEE_FOLDER_CLASS"
                    c:identifier="CAMEL_VEE_FOLDER_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-folder.h" line="37"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VEE_FOLDER_GET_CLASS"
                    c:identifier="CAMEL_VEE_FOLDER_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-folder.h" line="46"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VEE_MESSAGE_INFO"
                    c:identifier="CAMEL_VEE_MESSAGE_INFO"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-message-info.h"
                       line="31"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VEE_MESSAGE_INFO_CLASS"
                    c:identifier="CAMEL_VEE_MESSAGE_INFO_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-message-info.h"
                       line="34"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VEE_MESSAGE_INFO_DATA"
                    c:identifier="CAMEL_VEE_MESSAGE_INFO_DATA"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-data-cache.h" line="48"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VEE_MESSAGE_INFO_DATA_CLASS"
                    c:identifier="CAMEL_VEE_MESSAGE_INFO_DATA_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-data-cache.h" line="51"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VEE_MESSAGE_INFO_DATA_GET_CLASS"
                    c:identifier="CAMEL_VEE_MESSAGE_INFO_DATA_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-data-cache.h" line="60"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VEE_MESSAGE_INFO_GET_CLASS"
                    c:identifier="CAMEL_VEE_MESSAGE_INFO_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-message-info.h"
                       line="43"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VEE_STORE"
                    c:identifier="CAMEL_VEE_STORE"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-store.h" line="32"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VEE_STORE_CLASS"
                    c:identifier="CAMEL_VEE_STORE_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-store.h" line="35"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VEE_STORE_GET_CLASS"
                    c:identifier="CAMEL_VEE_STORE_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-store.h" line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VEE_SUBFOLDER_DATA"
                    c:identifier="CAMEL_VEE_SUBFOLDER_DATA"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-data-cache.h" line="31"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VEE_SUBFOLDER_DATA_CLASS"
                    c:identifier="CAMEL_VEE_SUBFOLDER_DATA_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-data-cache.h" line="34"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VEE_SUBFOLDER_DATA_GET_CLASS"
                    c:identifier="CAMEL_VEE_SUBFOLDER_DATA_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-data-cache.h" line="43"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VEE_SUMMARY"
                    c:identifier="CAMEL_VEE_SUMMARY"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-summary.h" line="32"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VEE_SUMMARY_CLASS"
                    c:identifier="CAMEL_VEE_SUMMARY_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-summary.h" line="35"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VEE_SUMMARY_GET_CLASS"
                    c:identifier="CAMEL_VEE_SUMMARY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-vee-summary.h" line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="VJUNK_NAME"
              value=".#evolution/Junk"
              c:type="CAMEL_VJUNK_NAME">
      <source-position filename="src/camel/camel-vtrash-folder.h" line="49"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="VTRASH_FOLDER"
                    c:identifier="CAMEL_VTRASH_FOLDER"
                    introspectable="0">
      <source-position filename="src/camel/camel-vtrash-folder.h" line="32"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VTRASH_FOLDER_CLASS"
                    c:identifier="CAMEL_VTRASH_FOLDER_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-vtrash-folder.h" line="35"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VTRASH_FOLDER_GET_CLASS"
                    c:identifier="CAMEL_VTRASH_FOLDER_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/camel/camel-vtrash-folder.h" line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="VTRASH_NAME"
              value=".#evolution/Trash"
              c:type="CAMEL_VTRASH_NAME">
      <source-position filename="src/camel/camel-vtrash-folder.h" line="48"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="VTrashFolder"
           c:symbol-prefix="vtrash_folder"
           c:type="CamelVTrashFolder"
           parent="VeeFolder"
           glib:type-name="CamelVTrashFolder"
           glib:get-type="camel_vtrash_folder_get_type"
           glib:type-struct="VTrashFolderClass">
      <source-position filename="src/camel/camel-vtrash-folder.h" line="74"/>
      <constructor name="new" c:identifier="camel_vtrash_folder_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-vtrash-folder.c"
             line="237">Create a new CamelVTrashFolder object.</doc>
        <source-position filename="src/camel/camel-vtrash-folder.h" line="77"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-vtrash-folder.c"
               line="245">a new #CamelVTrashFolder object</doc>
          <type name="Folder" c:type="CamelFolder*"/>
        </return-value>
        <parameters>
          <parameter name="parent_store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vtrash-folder.c"
                 line="239">the parent #CamelVeeStore object</doc>
            <type name="Store" c:type="CamelStore*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vtrash-folder.c"
                 line="240">type of vfolder, #CAMEL_VTRASH_FOLDER_TRASH or
#CAMEL_VTRASH_FOLDER_JUNK currently.</doc>
            <type name="VTrashFolderType" c:type="CamelVTrashFolderType"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_folder_type"
              c:identifier="camel_vtrash_folder_get_folder_type"
              version="3.24">
        <source-position filename="src/camel/camel-vtrash-folder.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-vtrash-folder.c"
               line="278">a @vtrash_folder folder type (#CamelVTrashFolderType)</doc>
          <type name="VTrashFolderType" c:type="CamelVTrashFolderType"/>
        </return-value>
        <parameters>
          <instance-parameter name="vtrash_folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vtrash-folder.c"
                 line="276">a #CamelVTrashFolder</doc>
            <type name="VTrashFolder" c:type="CamelVTrashFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="VeeFolder" c:type="CamelVeeFolder"/>
      </field>
      <field name="priv">
        <type name="VTrashFolderPrivate" c:type="CamelVTrashFolderPrivate*"/>
      </field>
    </class>
    <record name="VTrashFolderClass"
            c:type="CamelVTrashFolderClass"
            glib:is-gtype-struct-for="VTrashFolder">
      <source-position filename="src/camel/camel-vtrash-folder.h" line="74"/>
      <field name="parent_class">
        <type name="VeeFolderClass" c:type="CamelVeeFolderClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="VTrashFolderPrivate"
            c:type="CamelVTrashFolderPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-vtrash-folder.h" line="56"/>
    </record>
    <enumeration name="VTrashFolderType" c:type="CamelVTrashFolderType">
      <source-position filename="src/camel/camel-vtrash-folder.h" line="62"/>
      <member name="trash" value="0" c:identifier="CAMEL_VTRASH_FOLDER_TRASH">
      </member>
      <member name="junk" value="1" c:identifier="CAMEL_VTRASH_FOLDER_JUNK">
      </member>
      <member name="last" value="2" c:identifier="CAMEL_VTRASH_FOLDER_LAST">
      </member>
    </enumeration>
    <class name="VeeDataCache"
           c:symbol-prefix="vee_data_cache"
           c:type="CamelVeeDataCache"
           version="3.6"
           parent="GObject.Object"
           glib:type-name="CamelVeeDataCache"
           glib:get-type="camel_vee_data_cache_get_type"
           glib:type-struct="VeeDataCacheClass">
      <doc xml:space="preserve"
           filename="src/camel/camel-vee-data-cache.h"
           line="177">Contains only private data that should be read and manipulated using the
functions below.</doc>
      <source-position filename="src/camel/camel-vee-data-cache.h" line="196"/>
      <constructor name="new"
                   c:identifier="camel_vee_data_cache_new"
                   version="3.6">
        <source-position filename="src/camel/camel-vee-data-cache.h"
                         line="200"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-vee-data-cache.c"
               line="439">a new #CamelVeeDataCache; unref it
   with g_object_unref(), when no longer needed.</doc>
          <type name="VeeDataCache" c:type="CamelVeeDataCache*"/>
        </return-value>
      </constructor>
      <method name="add_subfolder"
              c:identifier="camel_vee_data_cache_add_subfolder"
              version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-data-cache.c"
             line="450">Adds the @subfolder to the @data_cache to be tracked by it. The @subfolder
is referenced for later use. The function does nothing when the @subfolder
is already in the @data_cache. The subfolders can be removed with
camel_vee_data_cache_remove_subfolder().</doc>
        <source-position filename="src/camel/camel-vee-data-cache.h"
                         line="201"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_cache" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-data-cache.c"
                 line="452">a #CamelVeeDataCache</doc>
            <type name="VeeDataCache" c:type="CamelVeeDataCache*"/>
          </instance-parameter>
          <parameter name="subfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-data-cache.c"
                 line="453">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
        </parameters>
      </method>
      <method name="contains_message_info_data"
              c:identifier="camel_vee_data_cache_contains_message_info_data"
              version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-data-cache.c"
             line="617">Returns whether data_cache contains given @orig_message_uid for the given @folder.
Unlike camel_vee_data_cache_get_message_info_data(), this only
returns %FALSE if not, while camel_vee_data_cache_get_message_info_data()
auto-adds it to data_cache.</doc>
        <source-position filename="src/camel/camel-vee-data-cache.h"
                         line="211"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_cache" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-data-cache.c"
                 line="619">a #CamelVeeDataCache</doc>
            <type name="VeeDataCache" c:type="CamelVeeDataCache*"/>
          </instance-parameter>
          <parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-data-cache.c"
                 line="620">a #CamelFolder to which the @orig_message_uid belongs</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
          <parameter name="orig_message_uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-data-cache.c"
                 line="621">a message UID from the @folder to check</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="foreach_message_info_data"
              c:identifier="camel_vee_data_cache_foreach_message_info_data"
              version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-data-cache.c"
             line="789">Calls the @func for each message info data from the given @fromfolder</doc>
        <source-position filename="src/camel/camel-vee-data-cache.h"
                         line="224"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_cache" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-data-cache.c"
                 line="791">a #CamelVeeDataCache</doc>
            <type name="VeeDataCache" c:type="CamelVeeDataCache*"/>
          </instance-parameter>
          <parameter name="fromfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-data-cache.c"
                 line="792">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-data-cache.c"
                 line="793">a #CamelForeachInfoData function to call</doc>
            <type name="ForeachInfoData" c:type="CamelForeachInfoData"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-data-cache.c"
                 line="794">user data to pass to the @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_message_info_data"
              c:identifier="camel_vee_data_cache_get_message_info_data"
              version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-data-cache.c"
             line="657">Returns a referenced #CamelVeeMessageInfoData referencing the given @folder
and @orig_message_uid. If it's not part of the @data_cache, then it is
created and auto-added. Use camel_vee_data_cache_contains_message_info_data()
when you only want to check the existence, without adding it to the @data_cache.</doc>
        <source-position filename="src/camel/camel-vee-data-cache.h"
                         line="216"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-vee-data-cache.c"
               line="668">a referenced #CamelVeeMessageInfoData; unref it
   with g_object_unref(), when no longer needed.</doc>
          <type name="VeeMessageInfoData" c:type="CamelVeeMessageInfoData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_cache" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-data-cache.c"
                 line="659">a #CamelVeeDataCache</doc>
            <type name="VeeDataCache" c:type="CamelVeeDataCache*"/>
          </instance-parameter>
          <parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-data-cache.c"
                 line="660">a #CamelFolder to which the @orig_message_uid belongs</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
          <parameter name="orig_message_uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-data-cache.c"
                 line="661">a message UID from the @folder to return</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_message_info_data_by_vuid"
              c:identifier="camel_vee_data_cache_get_message_info_data_by_vuid"
              version="3.6">
        <source-position filename="src/camel/camel-vee-data-cache.h"
                         line="221"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-vee-data-cache.c"
               line="733">a referenced #CamelVeeMessageInfoData,
   which corresponds to the given @vee_message_uid, or %NULL, when no such
   message info with that virtual UID exists. Unref it with g_object_unref(),
   when no longer needed.</doc>
          <type name="VeeMessageInfoData" c:type="CamelVeeMessageInfoData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_cache" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-data-cache.c"
                 line="730">a #CamelVeeDataCache</doc>
            <type name="VeeDataCache" c:type="CamelVeeDataCache*"/>
          </instance-parameter>
          <parameter name="vee_message_uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-data-cache.c"
                 line="731">a message UID in the virtual folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_subfolder_data"
              c:identifier="camel_vee_data_cache_get_subfolder_data"
              version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-data-cache.c"
             line="581">Returns a #CamelVeeSubfolderData for the given @folder.</doc>
        <source-position filename="src/camel/camel-vee-data-cache.h"
                         line="208"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-vee-data-cache.c"
               line="588">a referenced #CamelVeeSubfolderData; unref it
   with g_object_unref(), when no longer needed.</doc>
          <type name="VeeSubfolderData" c:type="CamelVeeSubfolderData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_cache" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-data-cache.c"
                 line="583">a #CamelVeeDataCache</doc>
            <type name="VeeDataCache" c:type="CamelVeeDataCache*"/>
          </instance-parameter>
          <parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-data-cache.c"
                 line="584">a #CamelFolder for which to return subfolder data</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_message_info_data"
              c:identifier="camel_vee_data_cache_remove_message_info_data"
              version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-data-cache.c"
             line="822">Removes given @mi_data from the @data_cache.</doc>
        <source-position filename="src/camel/camel-vee-data-cache.h"
                         line="229"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_cache" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-data-cache.c"
                 line="824">a #CamelVeeDataCache</doc>
            <type name="VeeDataCache" c:type="CamelVeeDataCache*"/>
          </instance-parameter>
          <parameter name="mi_data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-data-cache.c"
                 line="825">a #CamelVeeMessageInfoData to remove</doc>
            <type name="VeeMessageInfoData" c:type="CamelVeeMessageInfoData*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_subfolder"
              c:identifier="camel_vee_data_cache_remove_subfolder"
              version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-data-cache.c"
             line="551">Removes given @subfolder from the @data_cache, which had been
previously added with camel_vee_data_cache_add_subfolder().
The function does nothing, when the @subfolder is not part
of the @data_cache.</doc>
        <source-position filename="src/camel/camel-vee-data-cache.h"
                         line="204"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_cache" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-data-cache.c"
                 line="553">a #CamelVeeDataCache</doc>
            <type name="VeeDataCache" c:type="CamelVeeDataCache*"/>
          </instance-parameter>
          <parameter name="subfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-data-cache.c"
                 line="554">a #CamelFolder to remove</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="VeeDataCachePrivate" c:type="CamelVeeDataCachePrivate*"/>
      </field>
    </class>
    <record name="VeeDataCacheClass"
            c:type="CamelVeeDataCacheClass"
            glib:is-gtype-struct-for="VeeDataCache">
      <source-position filename="src/camel/camel-vee-data-cache.h" line="196"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="VeeDataCachePrivate"
            c:type="CamelVeeDataCachePrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-vee-data-cache.h" line="96"/>
    </record>
    <class name="VeeFolder"
           c:symbol-prefix="vee_folder"
           c:type="CamelVeeFolder"
           parent="Folder"
           glib:type-name="CamelVeeFolder"
           glib:get-type="camel_vee_folder_get_type"
           glib:type-struct="VeeFolderClass">
      <source-position filename="src/camel/camel-vee-folder.h" line="87"/>
      <constructor name="new" c:identifier="camel_vee_folder_new">
        <source-position filename="src/camel/camel-vee-folder.h" line="92"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-vee-folder.c"
               line="1758">A new @CamelVeeFolder object. Unref it
   with g_object_unref() when no longer needed.</doc>
          <type name="Folder" c:type="CamelFolder*"/>
        </return-value>
        <parameters>
          <parameter name="parent_store" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="1754">the parent CamelVeeStore</doc>
            <type name="Store" c:type="CamelStore*"/>
          </parameter>
          <parameter name="full" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="1755">the full path to the vfolder.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="1756">flags of some kind</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="add_folder" invoker="add_folder">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-folder.c"
             line="1834">Adds @subfolder as a source folder to @vfolder.</doc>
        <source-position filename="src/camel/camel-vee-folder.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="1836">a #CamelVeeFolder</doc>
            <type name="VeeFolder" c:type="CamelVeeFolder*"/>
          </instance-parameter>
          <parameter name="subfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="1837">source CamelFolder to add to @vfolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="1838">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="folder_changed">
        <source-position filename="src/camel/camel-vee-folder.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vfolder" transfer-ownership="none">
            <type name="VeeFolder" c:type="CamelVeeFolder*"/>
          </instance-parameter>
          <parameter name="subfolder" transfer-ownership="none">
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
          <parameter name="changes" transfer-ownership="none">
            <type name="FolderChangeInfo" c:type="CamelFolderChangeInfo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="rebuild_folder" invoker="rebuild_folder">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-folder.c"
             line="1938">Rebuild the folder @subfolder, if it should be.</doc>
        <source-position filename="src/camel/camel-vee-folder.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="1940">a #CamelVeeFolder</doc>
            <type name="VeeFolder" c:type="CamelVeeFolder*"/>
          </instance-parameter>
          <parameter name="subfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="1941">source CamelFolder to add to @vfolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="1942">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove_folder" invoker="remove_folder">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-folder.c"
             line="1891">Removed the source folder, @subfolder, from the virtual folder, @vfolder.</doc>
        <source-position filename="src/camel/camel-vee-folder.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="1893">a #CamelVeeFolder</doc>
            <type name="VeeFolder" c:type="CamelVeeFolder*"/>
          </instance-parameter>
          <parameter name="subfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="1894">source CamelFolder to remove from @vfolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="1895">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_expression"
                      invoker="set_expression"
                      version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-folder.c"
             line="1794">Sets an SExp expression to be used for this @vfolder</doc>
        <source-position filename="src/camel/camel-vee-folder.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="1796">a #CamelVeeFolder</doc>
            <type name="VeeFolder" c:type="CamelVeeFolder*"/>
          </instance-parameter>
          <parameter name="expression" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="1797">an SExp expression to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_folder" c:identifier="camel_vee_folder_add_folder">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-folder.c"
             line="1834">Adds @subfolder as a source folder to @vfolder.</doc>
        <source-position filename="src/camel/camel-vee-folder.h" line="106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="1836">a #CamelVeeFolder</doc>
            <type name="VeeFolder" c:type="CamelVeeFolder*"/>
          </instance-parameter>
          <parameter name="subfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="1837">source CamelFolder to add to @vfolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="1838">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_vuid"
              c:identifier="camel_vee_folder_add_vuid"
              version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-folder.c"
             line="2063">Adds the @mi_data to the @vfolder. The @changes can be
updated with the made change and later used to notify others
with camel_folder_changed() on the @vfolder. This can be used
only for the Unmatched folder.</doc>
        <source-position filename="src/camel/camel-vee-folder.h" line="116"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="2065">a #CamelVeeFolder</doc>
            <type name="VeeFolder" c:type="CamelVeeFolder*"/>
          </instance-parameter>
          <parameter name="mi_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="2066">a #CamelVeeMessageInfoData to add</doc>
            <type name="gpointer" c:type="_CamelVeeMessageInfoData*"/>
          </parameter>
          <parameter name="changes"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="2067">an optional #CamelFolderChangeInfo to update with the made change, or %NULL</doc>
            <type name="FolderChangeInfo" c:type="CamelFolderChangeInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="construct" c:identifier="camel_vee_folder_construct">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-folder.c"
             line="1687">Initializes internal structures of the @vf. This is meant to be
called by the descendants of #CamelVeeFolder.</doc>
        <source-position filename="src/camel/camel-vee-folder.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="1689">a #CamelVeeFolder</doc>
            <type name="VeeFolder" c:type="CamelVeeFolder*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="1690">flags for the @vf</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_auto_update"
              c:identifier="camel_vee_folder_get_auto_update"
              glib:get-property="auto-update"
              version="3.6">
        <source-position filename="src/camel/camel-vee-folder.h" line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-vee-folder.c"
               line="2293">whether the @vfolder can automatically update when any
   of its subfolders changes.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="vfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="2291">a #CamelVeeFolder</doc>
            <type name="VeeFolder" c:type="CamelVeeFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_expression"
              c:identifier="camel_vee_folder_get_expression"
              version="3.6">
        <source-position filename="src/camel/camel-vee-folder.h" line="128"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-vee-folder.c"
               line="1822">a SExp expression used for this @vfolder</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="vfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="1820">a #CamelVeeFolder</doc>
            <type name="VeeFolder" c:type="CamelVeeFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags"
              c:identifier="camel_vee_folder_get_flags"
              version="3.24">
        <source-position filename="src/camel/camel-vee-folder.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-vee-folder.c"
               line="1740">flags of @vf, as set by camel_vee_folder_construct()</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="vf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="1738">a #CamelVeeFolder</doc>
            <type name="VeeFolder" c:type="CamelVeeFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_location" c:identifier="camel_vee_folder_get_location">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-folder.c"
             line="2182">Find the real folder (and message info UID) for the given @vinfo.
When the @realuid is not %NULL and it's set, then use g_free() to
free it, when no longer needed.</doc>
        <source-position filename="src/camel/camel-vee-folder.h" line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-vee-folder.c"
               line="2192">a real (not virtual) #CamelFolder, which the @vinfo is for.</doc>
          <type name="Folder" c:type="CamelFolder*"/>
        </return-value>
        <parameters>
          <instance-parameter name="vf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="2184">a #CamelVeeFolder</doc>
            <type name="VeeFolder" c:type="CamelVeeFolder*"/>
          </instance-parameter>
          <parameter name="vinfo" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="2185">a #CamelVeeMessageInfo to search for</doc>
            <type name="VeeMessageInfo" c:type="const CamelVeeMessageInfo*"/>
          </parameter>
          <parameter name="realuid"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="2186">if not %NULL, set to the UID of the real message info</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_vee_uid_folder"
              c:identifier="camel_vee_folder_get_vee_uid_folder"
              version="3.6">
        <source-position filename="src/camel/camel-vee-folder.h" line="101"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-vee-folder.c"
               line="2233">a #CamelFolder to which the @vee_message_uid
   belongs, or %NULL, when it could not be found.</doc>
          <type name="Folder" c:type="CamelFolder*"/>
        </return-value>
        <parameters>
          <instance-parameter name="vfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="2230">a #CamelVeeFolder</doc>
            <type name="VeeFolder" c:type="CamelVeeFolder*"/>
          </instance-parameter>
          <parameter name="vee_message_uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="2231">a virtual message info UID</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ignore_next_changed_event"
              c:identifier="camel_vee_folder_ignore_next_changed_event"
              version="3.2">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-folder.c"
             line="2306">The next @subfolder-'s 'changed' event will be silently ignored. This
is usually used in virtual folders when the change was done in them,
but it is neither vTrash nor vJunk folder. Doing this avoids unnecessary
removals of messages which don't satisfy search criteria anymore,
which could be done on asynchronous delivery of folder's 'changed' signal.
These ignored changes are accumulated and used on folder refresh.</doc>
        <source-position filename="src/camel/camel-vee-folder.h" line="130"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="2308">a #CamelVeeFolder</doc>
            <type name="VeeFolder" c:type="CamelVeeFolder*"/>
          </instance-parameter>
          <parameter name="subfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="2309">a #CamelFolder folder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
        </parameters>
      </method>
      <method name="propagate_skipped_changes"
              c:identifier="camel_vee_folder_propagate_skipped_changes"
              version="3.38">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-folder.c"
             line="719">Propagate any skipped changes into the @vf. The skipped changes are used to not
hide the messages from the search folder unexpectedly. The function does nothing
when there are no changes to be propagated.</doc>
        <source-position filename="src/camel/camel-vee-folder.h" line="136"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="721">a #CamelVeeFolder</doc>
            <type name="VeeFolder" c:type="CamelVeeFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="rebuild_folder"
              c:identifier="camel_vee_folder_rebuild_folder">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-folder.c"
             line="1938">Rebuild the folder @subfolder, if it should be.</doc>
        <source-position filename="src/camel/camel-vee-folder.h" line="123"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="1940">a #CamelVeeFolder</doc>
            <type name="VeeFolder" c:type="CamelVeeFolder*"/>
          </instance-parameter>
          <parameter name="subfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="1941">source CamelFolder to add to @vfolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="1942">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref_folders"
              c:identifier="camel_vee_folder_ref_folders"
              version="3.28">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-folder.c"
             line="2031">Returns a #GList of all folders of this @vfolder, which
are used to populate it. These are in no particular order.

Free the returned #GList with
g_list_free_full (folders, g_object_unref);
when no longer needed.</doc>
        <source-position filename="src/camel/camel-vee-folder.h" line="115"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-vee-folder.c"
               line="2042">a #GList of all
   folders of this @vfolder.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Folder"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="vfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="2033">a #CamelVeeFolder</doc>
            <type name="VeeFolder" c:type="CamelVeeFolder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_folder"
              c:identifier="camel_vee_folder_remove_folder">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-folder.c"
             line="1891">Removed the source folder, @subfolder, from the virtual folder, @vfolder.</doc>
        <source-position filename="src/camel/camel-vee-folder.h" line="109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="1893">a #CamelVeeFolder</doc>
            <type name="VeeFolder" c:type="CamelVeeFolder*"/>
          </instance-parameter>
          <parameter name="subfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="1894">source CamelFolder to remove from @vfolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="1895">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_from_ignore_changed_event"
              c:identifier="camel_vee_folder_remove_from_ignore_changed_event"
              version="3.12">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-folder.c"
             line="2332">Make sure the next @subfolder-'s 'changed' event will not be silently ignored.
This is a counter-part function of camel_vee_folder_ignore_next_changed_event(),
when there was expected a change, which did not happen, to take back the previous
ignore event request.</doc>
        <source-position filename="src/camel/camel-vee-folder.h" line="133"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="2334">a #CamelVeeFolder</doc>
            <type name="VeeFolder" c:type="CamelVeeFolder*"/>
          </instance-parameter>
          <parameter name="subfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="2335">a #CamelFolder folder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_vuid"
              c:identifier="camel_vee_folder_remove_vuid"
              version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-folder.c"
             line="2120">Removes given @mi_data from the @vfolder. The @changes can be
updated with the made change and later used to notify others
with camel_folder_changed() on the @vfolder. This can be used
only for the Unmatched folder.</doc>
        <source-position filename="src/camel/camel-vee-folder.h" line="119"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="2122">a #CamelVeeFolder</doc>
            <type name="VeeFolder" c:type="CamelVeeFolder*"/>
          </instance-parameter>
          <parameter name="mi_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="2123">a #CamelVeeMessageInfoData to remove</doc>
            <type name="gpointer" c:type="_CamelVeeMessageInfoData*"/>
          </parameter>
          <parameter name="changes"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="2124">an optional #CamelFolderChangeInfo to update with the made change, or %NULL</doc>
            <type name="FolderChangeInfo" c:type="CamelFolderChangeInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_auto_update"
              c:identifier="camel_vee_folder_set_auto_update"
              glib:set-property="auto-update"
              version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-folder.c"
             line="2265">Sets whether the @vfolder can automatically update when of its
subfolders changes.</doc>
        <source-position filename="src/camel/camel-vee-folder.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="2267">a #CamelVeeFolder</doc>
            <type name="VeeFolder" c:type="CamelVeeFolder*"/>
          </instance-parameter>
          <parameter name="auto_update" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="2268">a value to set</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_expression"
              c:identifier="camel_vee_folder_set_expression"
              version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-folder.c"
             line="1794">Sets an SExp expression to be used for this @vfolder</doc>
        <source-position filename="src/camel/camel-vee-folder.h" line="126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="1796">a #CamelVeeFolder</doc>
            <type name="VeeFolder" c:type="CamelVeeFolder*"/>
          </instance-parameter>
          <parameter name="expression" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="1797">an SExp expression to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_folders" c:identifier="camel_vee_folder_set_folders">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-folder.c"
             line="1973">Set the whole list of folder sources on a vee folder.</doc>
        <source-position filename="src/camel/camel-vee-folder.h" line="112"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="1975">a #CamelVeeFolder</doc>
            <type name="VeeFolder" c:type="CamelVeeFolder*"/>
          </instance-parameter>
          <parameter name="folders" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="1976">a #GList of #CamelFolder to add</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="Folder"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-folder.c"
                 line="1977">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <property name="auto-update"
                writable="1"
                transfer-ownership="none"
                setter="set_auto_update"
                getter="get_auto_update"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="Folder" c:type="CamelFolder"/>
      </field>
      <field name="priv">
        <type name="VeeFolderPrivate" c:type="CamelVeeFolderPrivate*"/>
      </field>
    </class>
    <record name="VeeFolderClass"
            c:type="CamelVeeFolderClass"
            glib:is-gtype-struct-for="VeeFolder">
      <source-position filename="src/camel/camel-vee-folder.h" line="87"/>
      <field name="parent_class">
        <type name="FolderClass" c:type="CamelFolderClass"/>
      </field>
      <field name="add_folder">
        <callback name="add_folder">
          <source-position filename="src/camel/camel-vee-folder.h" line="67"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="vfolder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-vee-folder.c"
                   line="1836">a #CamelVeeFolder</doc>
              <type name="VeeFolder" c:type="CamelVeeFolder*"/>
            </parameter>
            <parameter name="subfolder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-vee-folder.c"
                   line="1837">source CamelFolder to add to @vfolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-vee-folder.c"
                   line="1838">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove_folder">
        <callback name="remove_folder">
          <source-position filename="src/camel/camel-vee-folder.h" line="70"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="vfolder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-vee-folder.c"
                   line="1893">a #CamelVeeFolder</doc>
              <type name="VeeFolder" c:type="CamelVeeFolder*"/>
            </parameter>
            <parameter name="subfolder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-vee-folder.c"
                   line="1894">source CamelFolder to remove from @vfolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-vee-folder.c"
                   line="1895">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="rebuild_folder">
        <callback name="rebuild_folder">
          <source-position filename="src/camel/camel-vee-folder.h" line="73"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="vfolder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-vee-folder.c"
                   line="1940">a #CamelVeeFolder</doc>
              <type name="VeeFolder" c:type="CamelVeeFolder*"/>
            </parameter>
            <parameter name="subfolder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-vee-folder.c"
                   line="1941">source CamelFolder to add to @vfolder</doc>
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/camel/camel-vee-folder.c"
                   line="1942">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_expression">
        <callback name="set_expression">
          <source-position filename="src/camel/camel-vee-folder.h" line="77"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="vfolder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-vee-folder.c"
                   line="1796">a #CamelVeeFolder</doc>
              <type name="VeeFolder" c:type="CamelVeeFolder*"/>
            </parameter>
            <parameter name="expression" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/camel/camel-vee-folder.c"
                   line="1797">an SExp expression to set</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="folder_changed">
        <callback name="folder_changed">
          <source-position filename="src/camel/camel-vee-folder.h" line="81"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="vfolder" transfer-ownership="none">
              <type name="VeeFolder" c:type="CamelVeeFolder*"/>
            </parameter>
            <parameter name="subfolder" transfer-ownership="none">
              <type name="Folder" c:type="CamelFolder*"/>
            </parameter>
            <parameter name="changes" transfer-ownership="none">
              <type name="FolderChangeInfo" c:type="CamelFolderChangeInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="VeeFolderPrivate"
            c:type="CamelVeeFolderPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-vee-folder.h" line="55"/>
    </record>
    <class name="VeeMessageInfo"
           c:symbol-prefix="vee_message_info"
           c:type="CamelVeeMessageInfo"
           parent="MessageInfo"
           glib:type-name="CamelVeeMessageInfo"
           glib:get-type="camel_vee_message_info_get_type"
           glib:type-struct="VeeMessageInfoClass">
      <source-position filename="src/camel/camel-vee-message-info.h"
                       line="64"/>
      <constructor name="new"
                   c:identifier="camel_vee_message_info_new"
                   version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-message-info.c"
             line="546">Creates a new instance of #CamelVeeMessageInfo which references
a message from the @original_summary internally.

The @vuid should be encoded in a way which the vFolder understands,
which is like the one returned by camel_vee_message_info_data_get_vee_message_uid().</doc>
        <source-position filename="src/camel/camel-vee-message-info.h"
                         line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-vee-message-info.c"
               line="558">a newly created #CamelVeeMessageInfo
  which references @orig_mi. Free with g_object_unref() when done
  with it.</doc>
          <type name="MessageInfo" c:type="CamelMessageInfo*"/>
        </return-value>
        <parameters>
          <parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-message-info.c"
                 line="548">a #CamelVeeSummary, the "owner" of the created message info</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </parameter>
          <parameter name="original_summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-message-info.c"
                 line="549">an original #CamelFolderSummary to reference to</doc>
            <type name="FolderSummary" c:type="CamelFolderSummary*"/>
          </parameter>
          <parameter name="vuid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-message-info.c"
                 line="550">what UID to set on the resulting message info</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_original_folder"
              c:identifier="camel_vee_message_info_get_original_folder"
              version="3.24">
        <source-position filename="src/camel/camel-vee-message-info.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-vee-message-info.c"
               line="609">A #CamelFolder of the original
  message info, which this @vmi is proxying.</doc>
          <type name="Folder" c:type="CamelFolder*"/>
        </return-value>
        <parameters>
          <instance-parameter name="vmi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-message-info.c"
                 line="607">a #CamelVeeMessageInfo</doc>
            <type name="VeeMessageInfo" c:type="const CamelVeeMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_original_summary"
              c:identifier="camel_vee_message_info_get_original_summary"
              version="3.24">
        <source-position filename="src/camel/camel-vee-message-info.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-vee-message-info.c"
               line="592">A #CamelFolderSummary of the original
  message info, which this @vmi is proxying.</doc>
          <type name="FolderSummary" c:type="CamelFolderSummary*"/>
        </return-value>
        <parameters>
          <instance-parameter name="vmi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-message-info.c"
                 line="590">a #CamelVeeMessageInfo</doc>
            <type name="VeeMessageInfo" c:type="const CamelVeeMessageInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="MessageInfo" c:type="CamelMessageInfo"/>
      </field>
      <field name="priv">
        <type name="VeeMessageInfoPrivate"
              c:type="CamelVeeMessageInfoPrivate*"/>
      </field>
    </class>
    <record name="VeeMessageInfoClass"
            c:type="CamelVeeMessageInfoClass"
            glib:is-gtype-struct-for="VeeMessageInfo">
      <source-position filename="src/camel/camel-vee-message-info.h"
                       line="64"/>
      <field name="parent_class">
        <type name="MessageInfoClass" c:type="CamelMessageInfoClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="VeeMessageInfoData"
           c:symbol-prefix="vee_message_info_data"
           c:type="CamelVeeMessageInfoData"
           version="3.6"
           parent="GObject.Object"
           glib:type-name="CamelVeeMessageInfoData"
           glib:get-type="camel_vee_message_info_data_get_type"
           glib:type-struct="VeeMessageInfoDataClass">
      <doc xml:space="preserve"
           filename="src/camel/camel-vee-data-cache.h"
           line="140">Contains only private data that should be read and manipulated using the
functions below.</doc>
      <source-position filename="src/camel/camel-vee-data-cache.h" line="159"/>
      <constructor name="new"
                   c:identifier="camel_vee_message_info_data_new"
                   version="3.6">
        <source-position filename="src/camel/camel-vee-data-cache.h"
                         line="164"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-vee-data-cache.c"
               line="249">a new #CamelVeeMessageInfoData which references
   message info with UID @orig_message_uid froma folder managed by @subfolder_data.
   Unref the returned object with g_object_unref(), when no longer needed.</doc>
          <type name="VeeMessageInfoData" c:type="CamelVeeMessageInfoData*"/>
        </return-value>
        <parameters>
          <parameter name="subfolder_data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-data-cache.c"
                 line="246">a #CamelVeeSubfolderData</doc>
            <type name="VeeSubfolderData" c:type="CamelVeeSubfolderData*"/>
          </parameter>
          <parameter name="orig_message_uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-data-cache.c"
                 line="247">original message info's UID</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_orig_message_uid"
              c:identifier="camel_vee_message_info_data_get_orig_message_uid"
              version="3.6">
        <source-position filename="src/camel/camel-vee-data-cache.h"
                         line="170"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-vee-data-cache.c"
               line="297">The original message info's UID, for which
   the @data had been created.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-data-cache.c"
                 line="295">a CamelVeeMessageInfoData</doc>
            <type name="VeeMessageInfoData" c:type="CamelVeeMessageInfoData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subfolder_data"
              c:identifier="camel_vee_message_info_data_get_subfolder_data"
              version="3.6">
        <source-position filename="src/camel/camel-vee-data-cache.h"
                         line="168"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-vee-data-cache.c"
               line="280">A #CamelVeeSubfolderData for which
   the @data had been created.</doc>
          <type name="VeeSubfolderData" c:type="CamelVeeSubfolderData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-data-cache.c"
                 line="278">a CamelVeeMessageInfoData</doc>
            <type name="VeeMessageInfoData" c:type="CamelVeeMessageInfoData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vee_message_uid"
              c:identifier="camel_vee_message_info_data_get_vee_message_uid"
              version="3.6">
        <source-position filename="src/camel/camel-vee-data-cache.h"
                         line="172"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-vee-data-cache.c"
               line="314">Message UID corresponding to this virtual
   message info @data.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-data-cache.c"
                 line="312">a CamelVeeMessageInfoData</doc>
            <type name="VeeMessageInfoData" c:type="CamelVeeMessageInfoData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="VeeMessageInfoDataPrivate"
              c:type="CamelVeeMessageInfoDataPrivate*"/>
      </field>
    </class>
    <record name="VeeMessageInfoDataClass"
            c:type="CamelVeeMessageInfoDataClass"
            glib:is-gtype-struct-for="VeeMessageInfoData">
      <source-position filename="src/camel/camel-vee-data-cache.h" line="159"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="VeeMessageInfoDataPrivate"
            c:type="CamelVeeMessageInfoDataPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-vee-data-cache.h" line="92"/>
    </record>
    <record name="VeeMessageInfoPrivate"
            c:type="CamelVeeMessageInfoPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-vee-message-info.h"
                       line="52"/>
    </record>
    <class name="VeeStore"
           c:symbol-prefix="vee_store"
           c:type="CamelVeeStore"
           parent="Store"
           glib:type-name="CamelVeeStore"
           glib:get-type="camel_vee_store_get_type"
           glib:type-struct="VeeStoreClass">
      <source-position filename="src/camel/camel-vee-store.h" line="66"/>
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="camel_vee_store_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-store.c"
             line="575">Create a new #CamelVeeStore object.</doc>
        <source-position filename="src/camel/camel-vee-store.h" line="69"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-vee-store.c"
               line="580">new #CamelVeeStore object</doc>
          <type name="VeeStore" c:type="CamelVeeStore*"/>
        </return-value>
      </constructor>
      <method name="get_unmatched_enabled"
              c:identifier="camel_vee_store_get_unmatched_enabled"
              glib:get-property="unmatched-enabled"
              version="3.6">
        <source-position filename="src/camel/camel-vee-store.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-vee-store.c"
               line="628">whether Unmatched folder processing is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="vstore" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-store.c"
                 line="626">a #CamelVeeStore</doc>
            <type name="VeeStore" c:type="CamelVeeStore*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_unmatched_folder"
              c:identifier="camel_vee_store_get_unmatched_folder"
              version="3.6">
        <source-position filename="src/camel/camel-vee-store.h" line="71"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-vee-store.c"
               line="608">the Unmatched folder instance,
   or %NULL, when it's disabled.</doc>
          <type name="gpointer" c:type="_CamelVeeFolder*"/>
        </return-value>
        <parameters>
          <instance-parameter name="vstore" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-store.c"
                 line="606">a #CamelVeeStore</doc>
            <type name="VeeStore" c:type="CamelVeeStore*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vee_data_cache"
              c:identifier="camel_vee_store_get_vee_data_cache"
              version="3.6">
        <source-position filename="src/camel/camel-vee-store.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-vee-store.c"
               line="592">the associated #CamelVeeDataCache</doc>
          <type name="VeeFolder" c:type="CamelVeeDataCache*"/>
        </return-value>
        <parameters>
          <instance-parameter name="vstore" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-store.c"
                 line="590">a #CamelVeeStore</doc>
            <type name="VeeStore" c:type="CamelVeeStore*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="note_subfolder_unused"
              c:identifier="camel_vee_store_note_subfolder_unused"
              version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-store.c"
             line="787">This is a counter part of camel_vee_store_note_subfolder_used(). Once
the @subfolder is claimed to be not used by all folders its message infos
are removed from the Unmatched folder.</doc>
        <source-position filename="src/camel/camel-vee-store.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vstore" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-store.c"
                 line="789">a #CamelVeeStore</doc>
            <type name="VeeStore" c:type="CamelVeeStore*"/>
          </instance-parameter>
          <parameter name="subfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-store.c"
                 line="790">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
          <parameter name="unused_by" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-store.c"
                 line="791">a #CamelVeeFolder</doc>
            <type name="VeeFolder" c:type="_CamelVeeFolder*"/>
          </parameter>
        </parameters>
      </method>
      <method name="note_subfolder_used"
              c:identifier="camel_vee_store_note_subfolder_used"
              version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-store.c"
             line="702">Notes that the @subfolder is used by @used_by folder, which
is used to determine what folders will be included in
the Unmatched folders.</doc>
        <source-position filename="src/camel/camel-vee-store.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vstore" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-store.c"
                 line="704">a #CamelVeeStore</doc>
            <type name="VeeStore" c:type="CamelVeeStore*"/>
          </instance-parameter>
          <parameter name="subfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-store.c"
                 line="705">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
          <parameter name="used_by" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-store.c"
                 line="706">a #CamelVeeFolder</doc>
            <type name="VeeFolder" c:type="_CamelVeeFolder*"/>
          </parameter>
        </parameters>
      </method>
      <method name="note_vuid_unused"
              c:identifier="camel_vee_store_note_vuid_unused"
              version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-store.c"
             line="929">A counter part of camel_vee_store_note_vuid_used(). Once the @unused_by
claims the @mi_data is not used by it anymore, and neither any other
virtual folder is using it, then the Unmatched folder will have it added.</doc>
        <source-position filename="src/camel/camel-vee-store.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vstore" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-store.c"
                 line="931">a #CamelVeeStore</doc>
            <type name="VeeStore" c:type="CamelVeeStore*"/>
          </instance-parameter>
          <parameter name="mi_data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-store.c"
                 line="932">a #CamelVeeMessageInfoData</doc>
            <type name="VeeMessageInfoData" c:type="CamelVeeMessageInfoData*"/>
          </parameter>
          <parameter name="unused_by" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-store.c"
                 line="933">a #CamelVeeFolder</doc>
            <type name="VeeFolder" c:type="_CamelVeeFolder*"/>
          </parameter>
        </parameters>
      </method>
      <method name="note_vuid_used"
              c:identifier="camel_vee_store_note_vuid_used"
              version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-store.c"
             line="842">Notes the @mi_data is used by the @used_by virtual folder, which
removes it from the Unmatched folder, if not used anywhere else.</doc>
        <source-position filename="src/camel/camel-vee-store.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vstore" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-store.c"
                 line="844">a #CamelVeeStore</doc>
            <type name="VeeStore" c:type="CamelVeeStore*"/>
          </instance-parameter>
          <parameter name="mi_data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-store.c"
                 line="845">a #CamelVeeMessageInfoData</doc>
            <type name="VeeMessageInfoData" c:type="CamelVeeMessageInfoData*"/>
          </parameter>
          <parameter name="used_by" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-store.c"
                 line="846">a #CamelVeeFolder</doc>
            <type name="VeeFolder" c:type="_CamelVeeFolder*"/>
          </parameter>
        </parameters>
      </method>
      <method name="rebuild_unmatched_folder"
              c:identifier="camel_vee_store_rebuild_unmatched_folder"
              version="3.6"
              throws="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-store.c"
             line="1082">Let's the @vstore know to rebuild the Unmatched folder. This is done
as a separate job, when the @cancellable is %NULL, otherwise it's run
synchronously.</doc>
        <source-position filename="src/camel/camel-vee-store.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vstore" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-store.c"
                 line="1084">a #CamelVeeStore</doc>
            <type name="VeeStore" c:type="CamelVeeStore*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-store.c"
                 line="1085">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_unmatched_enabled"
              c:identifier="camel_vee_store_set_unmatched_enabled"
              glib:set-property="unmatched-enabled"
              version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-store.c"
             line="640">Sets whether the Unmatched folder processing is enabled.</doc>
        <source-position filename="src/camel/camel-vee-store.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vstore" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-store.c"
                 line="642">a #CamelVeeStore</doc>
            <type name="VeeStore" c:type="CamelVeeStore*"/>
          </instance-parameter>
          <parameter name="is_enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-store.c"
                 line="643">value to set</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="unmatched-enabled"
                writable="1"
                transfer-ownership="none"
                setter="set_unmatched_enabled"
                getter="get_unmatched_enabled"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="Store" c:type="CamelStore"/>
      </field>
      <field name="priv">
        <type name="VeeStorePrivate" c:type="CamelVeeStorePrivate*"/>
      </field>
    </class>
    <record name="VeeStoreClass"
            c:type="CamelVeeStoreClass"
            glib:is-gtype-struct-for="VeeStore">
      <source-position filename="src/camel/camel-vee-store.h" line="66"/>
      <field name="parent_class">
        <type name="StoreClass" c:type="CamelStoreClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="VeeStorePrivate"
            c:type="CamelVeeStorePrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-vee-store.h" line="52"/>
    </record>
    <class name="VeeSubfolderData"
           c:symbol-prefix="vee_subfolder_data"
           c:type="CamelVeeSubfolderData"
           version="3.6"
           parent="GObject.Object"
           glib:type-name="CamelVeeSubfolderData"
           glib:get-type="camel_vee_subfolder_data_get_type"
           glib:type-struct="VeeSubfolderDataClass">
      <doc xml:space="preserve"
           filename="src/camel/camel-vee-data-cache.h"
           line="108">Contains only private data that should be read and manipulated using the
functions below.</doc>
      <source-position filename="src/camel/camel-vee-data-cache.h" line="127"/>
      <constructor name="new"
                   c:identifier="camel_vee_subfolder_data_new"
                   version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-data-cache.c"
             line="120">Creates a new #CamelVeeSubfolderData object for the given @folder.
The @folder is referenced for later use.</doc>
        <source-position filename="src/camel/camel-vee-data-cache.h"
                         line="132"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-vee-data-cache.c"
               line="127">a new #CamelVeeSubfolderData. Use g_object_unref()
   to unref it, when no longer needed.</doc>
          <type name="VeeSubfolderData" c:type="CamelVeeSubfolderData*"/>
        </return-value>
        <parameters>
          <parameter name="folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-data-cache.c"
                 line="122">a #CamelFolder for which create the object</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_folder"
              c:identifier="camel_vee_subfolder_data_get_folder"
              version="3.6">
        <source-position filename="src/camel/camel-vee-data-cache.h"
                         line="133"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-vee-data-cache.c"
               line="155">a #CamelFolder to which this @data was created</doc>
          <type name="Folder" c:type="CamelFolder*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-data-cache.c"
                 line="153">a CamelVeeSubfolderData</doc>
            <type name="VeeSubfolderData" c:type="CamelVeeSubfolderData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_folder_id"
              c:identifier="camel_vee_subfolder_data_get_folder_id"
              version="3.6">
        <source-position filename="src/camel/camel-vee-data-cache.h"
                         line="135"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-vee-data-cache.c"
               line="171">a folder ID for this subfolder @data</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-data-cache.c"
                 line="169">a CamelVeeSubfolderData</doc>
            <type name="VeeSubfolderData" c:type="CamelVeeSubfolderData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="VeeSubfolderDataPrivate"
              c:type="CamelVeeSubfolderDataPrivate*"/>
      </field>
    </class>
    <record name="VeeSubfolderDataClass"
            c:type="CamelVeeSubfolderDataClass"
            glib:is-gtype-struct-for="VeeSubfolderData">
      <source-position filename="src/camel/camel-vee-data-cache.h" line="127"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="VeeSubfolderDataPrivate"
            c:type="CamelVeeSubfolderDataPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-vee-data-cache.h" line="88"/>
    </record>
    <class name="VeeSummary"
           c:symbol-prefix="vee_summary"
           c:type="CamelVeeSummary"
           parent="FolderSummary"
           glib:type-name="CamelVeeSummary"
           glib:get-type="camel_vee_summary_get_type"
           glib:type-struct="VeeSummaryClass">
      <source-position filename="src/camel/camel-vee-summary.h" line="70"/>
      <constructor name="new" c:identifier="camel_vee_summary_new">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-summary.c"
             line="156">This will create a new CamelVeeSummary object and read in the
summary data from disk, if it exists.</doc>
        <source-position filename="src/camel/camel-vee-summary.h" line="74"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-vee-summary.c"
               line="163">A new CamelVeeSummary object.</doc>
          <type name="FolderSummary" c:type="CamelFolderSummary*"/>
        </return-value>
        <parameters>
          <parameter name="parent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-summary.c"
                 line="158">Folder its attached to.</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add" c:identifier="camel_vee_summary_add">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-summary.c"
             line="229">Unref returned pointer with g_object_unref()</doc>
        <source-position filename="src/camel/camel-vee-summary.h" line="76"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-vee-summary.c"
               line="236">A new #CamelVeeMessageInfo object.</doc>
          <type name="VeeMessageInfo" c:type="CamelVeeMessageInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-summary.c"
                 line="231">the CamelVeeSummary</doc>
            <type name="VeeSummary" c:type="CamelVeeSummary*"/>
          </instance-parameter>
          <parameter name="mi_data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-summary.c"
                 line="232">the #CamelVeeMessageInfoData to add</doc>
            <type name="VeeMessageInfoData"
                  c:type="_CamelVeeMessageInfoData*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_uids_for_subfolder"
              c:identifier="camel_vee_summary_get_uids_for_subfolder"
              version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-summary.c"
             line="191">Returns a hash table of all virtual message info UID-s known to the @summary.
The key of the hash table is the virtual message info UID, the value is
only the number 1.</doc>
        <source-position filename="src/camel/camel-vee-summary.h" line="83"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="src/camel/camel-vee-summary.c"
               line="200">a #GHashTable with
   all the virtual mesasge info UID-s knwn to the @summary.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="gint"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-summary.c"
                 line="193">a #CamelVeeSummary</doc>
            <type name="VeeSummary" c:type="CamelVeeSummary*"/>
          </instance-parameter>
          <parameter name="subfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-summary.c"
                 line="194">a #CamelFolder</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove"
              c:identifier="camel_vee_summary_remove"
              version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-summary.c"
             line="285">Removes the given @vuid of the @subfolder from the @summary.</doc>
        <source-position filename="src/camel/camel-vee-summary.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-summary.c"
                 line="287">a #CamelVeeSummary</doc>
            <type name="VeeSummary" c:type="CamelVeeSummary*"/>
          </instance-parameter>
          <parameter name="vuid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-summary.c"
                 line="288">a virtual message info UID to remove</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="subfolder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-summary.c"
                 line="289">a #CamelFolder to which @vuid belongs</doc>
            <type name="Folder" c:type="CamelFolder*"/>
          </parameter>
        </parameters>
      </method>
      <method name="replace_flags"
              c:identifier="camel_vee_summary_replace_flags"
              version="3.6">
        <doc xml:space="preserve"
             filename="src/camel/camel-vee-summary.c"
             line="320">Makes sure @summary flags on @uid corresponds to those
in the subfolder of vee-folder, and updates internal counts
on @summary as well.</doc>
        <source-position filename="src/camel/camel-vee-summary.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-summary.c"
                 line="322">a #CamelVeeSummary</doc>
            <type name="VeeSummary" c:type="CamelVeeSummary*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-vee-summary.c"
                 line="323">a message UID to update flags for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="FolderSummary" c:type="CamelFolderSummary"/>
      </field>
      <field name="priv">
        <type name="VeeSummaryPrivate" c:type="CamelVeeSummaryPrivate*"/>
      </field>
    </class>
    <record name="VeeSummaryClass"
            c:type="CamelVeeSummaryClass"
            glib:is-gtype-struct-for="VeeSummary">
      <source-position filename="src/camel/camel-vee-summary.h" line="70"/>
      <field name="parent_class">
        <type name="FolderSummaryClass" c:type="CamelFolderSummaryClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="VeeSummaryPrivate"
            c:type="CamelVeeSummaryPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/camel/camel-vee-summary.h" line="57"/>
    </record>
    <record name="WeakRefGroup"
            c:type="CamelWeakRefGroup"
            opaque="1"
            glib:type-name="CamelWeakRefGroup"
            glib:get-type="camel_weak_ref_group_get_type"
            c:symbol-prefix="weak_ref_group">
      <source-position filename="src/camel/camel-weak-ref-group.h" line="31"/>
      <constructor name="new"
                   c:identifier="camel_weak_ref_group_new"
                   version="3.24">
        <source-position filename="src/camel/camel-weak-ref-group.h"
                         line="35"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-weak-ref-group.c"
               line="79">A new #CamelWeakRefGroup instance, which should
   be freed with camel_weak_ref_group_unref() when no longer needed.</doc>
          <type name="WeakRefGroup" c:type="CamelWeakRefGroup*"/>
        </return-value>
      </constructor>
      <method name="get"
              c:identifier="camel_weak_ref_group_get"
              version="3.24">
        <source-position filename="src/camel/camel-weak-ref-group.h"
                         line="42"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-weak-ref-group.c"
               line="208">A referenced object associated with
   @group, or %NULL, when no object had been set to it. Use g_object_unref()
   to free it, when no longer needed.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-weak-ref-group.c"
                 line="206">a #CamelWeakRefGroup</doc>
            <type name="WeakRefGroup" c:type="CamelWeakRefGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref"
              c:identifier="camel_weak_ref_group_ref"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-weak-ref-group.c"
             line="96">Increases a reference count of the @group.</doc>
        <source-position filename="src/camel/camel-weak-ref-group.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-weak-ref-group.c"
               line="102">the @group</doc>
          <type name="WeakRefGroup" c:type="CamelWeakRefGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-weak-ref-group.c"
                 line="98">a #CamelWeakRefGroup</doc>
            <type name="WeakRefGroup" c:type="CamelWeakRefGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set"
              c:identifier="camel_weak_ref_group_set"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-weak-ref-group.c"
             line="147">Sets the @object as the object help by this @group. If
the @object is %NULL, then unsets any previously set.</doc>
        <source-position filename="src/camel/camel-weak-ref-group.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-weak-ref-group.c"
                 line="149">a #CamelWeakRefGroup</doc>
            <type name="WeakRefGroup" c:type="CamelWeakRefGroup*"/>
          </instance-parameter>
          <parameter name="object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/camel/camel-weak-ref-group.c"
                 line="150">a #GObject descendant, or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref"
              c:identifier="camel_weak_ref_group_unref"
              version="3.24">
        <doc xml:space="preserve"
             filename="src/camel/camel-weak-ref-group.c"
             line="120">Decreases a reference count of the @group. The @group is
freed when the reference count reaches zero.</doc>
        <source-position filename="src/camel/camel-weak-ref-group.h"
                         line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/camel/camel-weak-ref-group.c"
                 line="122">a #CamelWeakRefGroup</doc>
            <type name="WeakRefGroup" c:type="CamelWeakRefGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="_KeyKey" c:type="_CamelKeyKey">
      <source-position filename="src/camel/camel-partition-table.h"
                       line="149"/>
      <field name="data" writable="1">
        <type name="_block_t" c:type="camel_block_t"/>
      </field>
      <field name="offset" writable="1" bits="10">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="flags" writable="1" bits="22">
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <record name="_LockHelperMsg" c:type="_CamelLockHelperMsg">
      <source-position filename="src/camel/camel-lock-helper.h" line="38"/>
      <field name="magic" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="seq" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="id" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="data" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
    </record>
    <record name="__search_word" c:type="_camel_search_word">
      <source-position filename="src/camel/camel-search-private.h" line="89"/>
      <field name="type" writable="1">
        <type name="_search_word_t" c:type="camel_search_word_t"/>
      </field>
      <field name="word" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
    </record>
    <record name="__search_words" c:type="_camel_search_words">
      <source-position filename="src/camel/camel-search-private.h" line="95"/>
      <field name="len" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="type" writable="1">
        <type name="_search_word_t" c:type="camel_search_word_t"/>
      </field>
      <field name="words" writable="1">
        <type name="gpointer" c:type="_camel_search_word**"/>
      </field>
    </record>
    <record name="_encrypt" c:type="_encrypt">
      <source-position filename="src/camel/camel-cipher-context.h" line="168"/>
      <field name="status" writable="1">
        <type name="CipherValidityEncrypt"
              c:type="CamelCipherValidityEncrypt"/>
      </field>
      <field name="description" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="encrypters" writable="1">
        <type name="GLib.Queue" c:type="GQueue"/>
      </field>
    </record>
    <bitfield name="_search_flags_t" c:type="camel_search_flags_t">
      <source-position filename="src/camel/camel-search-private.h" line="37"/>
      <member name="start" value="1" c:identifier="CAMEL_SEARCH_MATCH_START">
      </member>
      <member name="end" value="2" c:identifier="CAMEL_SEARCH_MATCH_END">
      </member>
      <member name="regex" value="4" c:identifier="CAMEL_SEARCH_MATCH_REGEX">
      </member>
      <member name="icase" value="8" c:identifier="CAMEL_SEARCH_MATCH_ICASE">
      </member>
      <member name="newline"
              value="16"
              c:identifier="CAMEL_SEARCH_MATCH_NEWLINE">
      </member>
    </bitfield>
    <enumeration name="_search_match_t" c:type="camel_search_match_t">
      <source-position filename="src/camel/camel-search-private.h" line="46"/>
      <member name="exact" value="0" c:identifier="CAMEL_SEARCH_MATCH_EXACT">
      </member>
      <member name="contains"
              value="1"
              c:identifier="CAMEL_SEARCH_MATCH_CONTAINS">
      </member>
      <member name="word" value="2" c:identifier="CAMEL_SEARCH_MATCH_WORD">
      </member>
      <member name="starts" value="3" c:identifier="CAMEL_SEARCH_MATCH_STARTS">
      </member>
      <member name="ends" value="4" c:identifier="CAMEL_SEARCH_MATCH_ENDS">
      </member>
      <member name="soundex"
              value="5"
              c:identifier="CAMEL_SEARCH_MATCH_SOUNDEX">
      </member>
    </enumeration>
    <enumeration name="_search_t" c:type="camel_search_t">
      <source-position filename="src/camel/camel-search-private.h" line="54"/>
      <member name="asis" value="0" c:identifier="CAMEL_SEARCH_TYPE_ASIS">
      </member>
      <member name="encoded"
              value="1"
              c:identifier="CAMEL_SEARCH_TYPE_ENCODED">
      </member>
      <member name="address"
              value="2"
              c:identifier="CAMEL_SEARCH_TYPE_ADDRESS">
      </member>
      <member name="address_encoded"
              value="3"
              c:identifier="CAMEL_SEARCH_TYPE_ADDRESS_ENCODED">
      </member>
      <member name="mlist" value="4" c:identifier="CAMEL_SEARCH_TYPE_MLIST">
      </member>
    </enumeration>
    <enumeration name="_search_word_t" c:type="camel_search_word_t">
      <source-position filename="src/camel/camel-search-private.h" line="84"/>
      <member name="simple" value="1" c:identifier="CAMEL_SEARCH_WORD_SIMPLE">
      </member>
      <member name="complex"
              value="2"
              c:identifier="CAMEL_SEARCH_WORD_COMPLEX">
      </member>
      <member name="8bit" value="4" c:identifier="CAMEL_SEARCH_WORD_8BIT">
      </member>
    </enumeration>
    <record name="_sign" c:type="_sign">
      <source-position filename="src/camel/camel-cipher-context.h" line="162"/>
      <field name="status" writable="1">
        <type name="CipherValiditySign" c:type="CamelCipherValiditySign"/>
      </field>
      <field name="description" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="signers" writable="1">
        <type name="GLib.Queue" c:type="GQueue"/>
      </field>
    </record>
    <function name="async_closure_callback"
              c:identifier="camel_async_closure_callback"
              moved-to="AsyncClosure.callback"
              version="3.12"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/camel/camel-async-closure.c"
           line="164">Pass this function as the #GAsyncReadyCallback argument of an asynchronous
function, and the #CamelAsyncClosure as the data argument.

This causes camel_async_closure_wait() to terminate and return @result.</doc>
      <source-position filename="src/camel/camel-async-closure.h" line="33"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="source_object"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-async-closure.c"
               line="166">a #GObject or %NULL</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-async-closure.c"
               line="167">a #GAsyncResult</doc>
          <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
        </parameter>
        <parameter name="closure"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-async-closure.c"
               line="168">a #CamelAsyncClosure</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="async_closure_new"
              c:identifier="camel_async_closure_new"
              moved-to="AsyncClosure.new"
              version="3.12"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/camel/camel-async-closure.c"
           line="61">Creates a new #CamelAsyncClosure for use with asynchronous functions.</doc>
      <source-position filename="src/camel/camel-async-closure.h" line="30"/>
      <return-value>
        <doc xml:space="preserve"
             filename="src/camel/camel-async-closure.c"
             line="66">a new #CamelAsyncClosure</doc>
        <type name="AsyncClosure" c:type="CamelAsyncClosure*"/>
      </return-value>
    </function>
    <function name="binding_bind_property"
              c:identifier="camel_binding_bind_property"
              version="3.16">
      <doc xml:space="preserve"
           filename="src/camel/camel.c"
           line="281">Thread safe variant of g_object_bind_property(). See its documentation
for more information on arguments and return value.</doc>
      <source-position filename="src/camel/camel.h" line="159"/>
      <return-value transfer-ownership="none">
        <type name="GObject.Binding" c:type="GBinding*"/>
      </return-value>
      <parameters>
        <parameter name="source" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel.c"
               line="283">the source #GObject</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </parameter>
        <parameter name="source_property" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel.c"
               line="284">the property on @source to bind</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="target" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel.c"
               line="285">the target #GObject</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </parameter>
        <parameter name="target_property" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel.c"
               line="286">the property on @target to bind</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel.c"
               line="287">flags to pass to #GBinding</doc>
          <type name="GObject.BindingFlags" c:type="GBindingFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="binding_bind_property_full"
              c:identifier="camel_binding_bind_property_full"
              shadowed-by="binding_bind_property_with_closures"
              version="3.16">
      <doc xml:space="preserve"
           filename="src/camel/camel.c"
           line="314">Thread safe variant of g_object_bind_property_full(). See its documentation
for more information on arguments and return value.</doc>
      <source-position filename="src/camel/camel.h" line="164"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel.c"
             line="333">the #GBinding instance representing the
  binding between the two #GObject instances. The binding is released
  whenever the #GBinding reference count reaches zero.</doc>
        <type name="GObject.Binding" c:type="GBinding*"/>
      </return-value>
      <parameters>
        <parameter name="source" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel.c"
               line="316">the source #GObject</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </parameter>
        <parameter name="source_property" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel.c"
               line="317">the property on @source to bind</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="target" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel.c"
               line="318">the target #GObject</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </parameter>
        <parameter name="target_property" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel.c"
               line="319">the property on @target to bind</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel.c"
               line="320">flags to pass to #GBinding</doc>
          <type name="GObject.BindingFlags" c:type="GBindingFlags"/>
        </parameter>
        <parameter name="transform_to"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified">
          <doc xml:space="preserve"
               filename="src/camel/camel.c"
               line="321">the transformation function
  from the @source to the @target, or %NULL to use the default</doc>
          <type name="GObject.BindingTransformFunc"
                c:type="GBindingTransformFunc"/>
        </parameter>
        <parameter name="transform_from"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified"
                   closure="7"
                   destroy="8">
          <doc xml:space="preserve"
               filename="src/camel/camel.c"
               line="323">the transformation function
  from the @target to the @source, or %NULL to use the default</doc>
          <type name="GObject.BindingTransformFunc"
                c:type="GBindingTransformFunc"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel.c"
               line="325">custom data to be passed to the transformation
  functions, or %NULL</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="notify" transfer-ownership="none" scope="async">
          <doc xml:space="preserve"
               filename="src/camel/camel.c"
               line="327">function to be called when disposing the binding, to free the
  resources used by the transformation functions</doc>
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
      </parameters>
    </function>
    <function name="binding_bind_property_with_closures"
              c:identifier="camel_binding_bind_property_with_closures"
              shadows="binding_bind_property_full"
              version="3.16">
      <doc xml:space="preserve"
           filename="src/camel/camel.c"
           line="362">Thread safe variant of g_object_bind_property_with_closures(). See its
documentation for more information on arguments and return value.</doc>
      <source-position filename="src/camel/camel.h" line="173"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel.c"
             line="377">the #GBinding instance representing the
  binding between the two #GObject instances. The binding is released
  whenever the #GBinding reference count reaches zero.</doc>
        <type name="GObject.Binding" c:type="GBinding*"/>
      </return-value>
      <parameters>
        <parameter name="source" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel.c"
               line="364">the source #GObject</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </parameter>
        <parameter name="source_property" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel.c"
               line="365">the property on @source to bind</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="target" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel.c"
               line="366">the target #GObject</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </parameter>
        <parameter name="target_property" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel.c"
               line="367">the property on @target to bind</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel.c"
               line="368">flags to pass to #GBinding</doc>
          <type name="GObject.BindingFlags" c:type="GBindingFlags"/>
        </parameter>
        <parameter name="transform_to" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel.c"
               line="369">a #GClosure wrapping the transformation function
  from the @source to the @target, or %NULL to use the default</doc>
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="transform_from" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel.c"
               line="371">a #GClosure wrapping the transformation function
  from the @target to the @source, or %NULL to use the default</doc>
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="camel-async-closure">
      <doc xml:space="preserve"
           filename="src/camel/camel-async-closure.c"
           line="18">#CamelAsyncClosure provides a simple way to run an asynchronous function
synchronously without blocking the current thread.

1) Create a #CamelAsyncClosure with camel_async_closure_new().

2) Call the asynchronous function passing camel_async_closure_callback()
   as the #GAsyncReadyCallback argument and the #CamelAsyncClosure as the
   data argument.

3) Call camel_async_closure_wait() and collect the #GAsyncResult.

4) Call the corresponding asynchronous "finish" function, passing the
   #GAsyncResult returned by camel_async_closure_wait().

5) If needed, repeat steps 2-4 for additional asynchronous functions
   using the same #CamelAsyncClosure.

6) Finally, free the #CamelAsyncClosure with camel_async_closure_free().</doc>
    </docsection>
    <docsection name="camel-filter-input-stream">
      <doc xml:space="preserve"
           filename="src/camel/camel-filter-input-stream.c"
           line="18">#CamelFilterInputStream is similar to #GConverterInputStream, except it
operates on a #CamelMimeFilter instead of a #GConverter.

This class is meant to be a temporary solution until all of Camel's MIME
filters are ported to the #GConverter interface.</doc>
    </docsection>
    <docsection name="camel-filter-output-stream">
      <doc xml:space="preserve"
           filename="src/camel/camel-filter-output-stream.c"
           line="18">#CamelFilterOutputStream is similar to #GConverterOutputStream, except it
operates on a #CamelMimeFilter instead of a #GConverter.

This class is meant to be a temporary solution until all of Camel's MIME
filters are ported to the #GConverter interface.</doc>
    </docsection>
    <docsection name="camel-null-output-stream">
      <doc xml:space="preserve"
           filename="src/camel/camel-null-output-stream.c"
           line="18">#CamelNullOutputStream is analogous to writing to /dev/null, except it
counts the total number of bytes written to it.  This is primarily useful
for determining the final size of some outgoing data, especially if using
filters on the output stream.</doc>
    </docsection>
    <docsection name="camel-weak-ref-group">
      <doc xml:space="preserve"
           filename="src/camel/camel-weak-ref-group.c"
           line="18">A #GWeakRef as such is not suitable for large sets, because
it causes big performance impact on free. This #CamelWeakRefGroup
groups together weak references for the same object to minimize
the performance issue of the #GWeakRef.</doc>
    </docsection>
    <function name="charset_best"
              c:identifier="camel_charset_best"
              moved-to="Charset.best">
      <doc xml:space="preserve"
           filename="src/camel/camel-charset-map.c"
           line="392">Finds the minimum charset for this string NULL means US-ASCII.</doc>
      <source-position filename="src/camel/camel-charset-map.h" line="44"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-charset-map.c"
             line="399">the minimum charset or NULL for US_ASCII.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-charset-map.c"
               line="394">input text</doc>
          <array length="1" zero-terminated="0" c:type="const gchar*">
            <type name="gchar" c:type="gchar"/>
          </array>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-charset-map.c"
               line="395">length of the input text</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="charset_iso_to_windows"
              c:identifier="camel_charset_iso_to_windows"
              moved-to="Charset.iso_to_windows">
      <source-position filename="src/camel/camel-charset-map.h" line="46"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-charset-map.c"
             line="416">the equivalent Windows charset.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="isocharset" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-charset-map.c"
               line="414">a canonicalised ISO charset</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cipher_can_load_photos"
              c:identifier="camel_cipher_can_load_photos"
              version="3.22">
      <source-position filename="src/camel/camel-cipher-context.h" line="381"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-cipher-context.c"
             line="1624">Whether ciphers can load photos, as being setup by the user.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="cipher_canonical_to_stream"
              c:identifier="camel_cipher_canonical_to_stream"
              throws="1">
      <doc xml:space="preserve"
           filename="src/camel/camel-cipher-context.c"
           line="1569">Writes a part to a stream in a canonicalised format, suitable for signing/encrypting.

The transfer encoding paramaters for the part may be changed by this function.</doc>
      <source-position filename="src/camel/camel-cipher-context.h" line="375"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-cipher-context.c"
             line="1581">-1 on error;</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="part" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-cipher-context.c"
               line="1571">Part to write.</doc>
          <type name="MimePart" c:type="CamelMimePart*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-cipher-context.c"
               line="1572">flags for the canonicalisation filter (CamelMimeFilterCanon)</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
        <parameter name="ostream" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-cipher-context.c"
               line="1573">stream to write canonicalised output to.</doc>
          <type name="Stream" c:type="CamelStream*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-cipher-context.c"
               line="1574">optional #GCancellable object, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cipher_certinfo_get_property"
              c:identifier="camel_cipher_certinfo_get_property"
              version="3.22">
      <doc xml:space="preserve"
           filename="src/camel/camel-cipher-context.c"
           line="1402">Gets a named property @name value for the given @cert_info.</doc>
      <source-position filename="src/camel/camel-cipher-context.h" line="364"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-cipher-context.c"
             line="1409">Value of a named property of the @cert_info,
   or %NULL when no such property exists. The returned value is owned by
   the @cert_info and is valid until the @cert_info is freed.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="cert_info" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-cipher-context.c"
               line="1404">a #CamelCipherCertInfo</doc>
          <type name="CipherCertInfo" c:type="CamelCipherCertInfo*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-cipher-context.c"
               line="1405">a property name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cipher_certinfo_set_property"
              c:identifier="camel_cipher_certinfo_set_property"
              version="3.22">
      <doc xml:space="preserve"
           filename="src/camel/camel-cipher-context.c"
           line="1434">Sets a named property @name value @value for the given @cert_info.
If the @value is %NULL, then the property is removed. With a non-%NULL
@value also @value_free and @value_clone functions cannot be %NULL.</doc>
      <source-position filename="src/camel/camel-cipher-context.h" line="367"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cert_info" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-cipher-context.c"
               line="1436">a #CamelCipherCertInfo</doc>
          <type name="CipherCertInfo" c:type="CamelCipherCertInfo*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-cipher-context.c"
               line="1437">a property name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified"
                   destroy="3">
          <doc xml:space="preserve"
               filename="src/camel/camel-cipher-context.c"
               line="1438">a property value, or %NULL</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="value_free"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async">
          <doc xml:space="preserve"
               filename="src/camel/camel-cipher-context.c"
               line="1439">a free function for the @value</doc>
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
        <parameter name="value_clone"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="call">
          <doc xml:space="preserve"
               filename="src/camel/camel-cipher-context.c"
               line="1440">a clone function for the @value</doc>
          <type name="CipherCloneFunc" c:type="CamelCipherCloneFunc"/>
        </parameter>
      </parameters>
    </function>
    <function name="content_disposition_decode"
              c:identifier="camel_content_disposition_decode"
              moved-to="ContentDisposition.decode">
      <source-position filename="src/camel/camel-mime-utils.h" line="142"/>
      <return-value transfer-ownership="full">
        <type name="ContentDisposition" c:type="CamelContentDisposition*"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="content_transfer_encoding_decode"
              c:identifier="camel_content_transfer_encoding_decode">
      <source-position filename="src/camel/camel-mime-utils.h" line="150"/>
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="content_type_decode"
              c:identifier="camel_content_type_decode"
              moved-to="ContentType.decode">
      <source-position filename="src/camel/camel-mime-utils.h" line="127"/>
      <return-value transfer-ownership="full">
        <type name="ContentType" c:type="CamelContentType*"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="debug" c:identifier="camel_debug">
      <doc xml:space="preserve"
           filename="src/camel/camel-debug.c"
           line="79">Check to see if a debug mode is activated.  @mode takes one of two forms,
a fully qualified 'module:target', or a wildcard 'module' name.  It
returns a boolean to indicate if the module or module and target is
currently activated for debug output.</doc>
      <source-position filename="src/camel/camel-debug.h" line="36"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-debug.c"
             line="88">Whether the debug @mode is activated</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="mode" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-debug.c"
               line="81">string name of the mode to check for</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_demangle_backtrace"
              c:identifier="camel_debug_demangle_backtrace"
              version="3.30">
      <doc xml:space="preserve"
           filename="src/camel/camel-debug.c"
           line="851">Demangles @bt, possibly got from camel_debug_get_raw_backtrace(), by
replacing addresses with actual function calls and eventually line numbers, if
available. It modifies lines of @bt, but skips those it cannot parse.

Note: Getting backtraces only works if the library was
configured with --enable-backtraces.

See also camel_debug_get_raw_backtrace()</doc>
      <source-position filename="src/camel/camel-debug.h" line="151"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="bt"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-debug.c"
               line="853">a #GString with a raw backtrace, or %NULL</doc>
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_end" c:identifier="camel_debug_end">
      <doc xml:space="preserve"
           filename="src/camel/camel-debug.c"
           line="148">Call this when you're done with your debug output.  If and only if
you called camel_debug_start, and if it returns TRUE.</doc>
      <source-position filename="src/camel/camel-debug.h" line="39"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="debug_get_backtrace"
              c:identifier="camel_debug_get_backtrace"
              version="3.12">
      <doc xml:space="preserve"
           filename="src/camel/camel-debug.c"
           line="798">Gets current backtrace leading to this function call and demangles it.</doc>
      <source-position filename="src/camel/camel-debug.h" line="149"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-debug.c"
             line="803">Current backtrace, or %NULL, if cannot determine it.

Note: Getting backtraces only works if the library was
configured with --enable-backtraces.

See also camel_debug_get_raw_backtrace()</doc>
        <type name="GLib.String" c:type="GString*"/>
      </return-value>
    </function>
    <function name="debug_get_raw_backtrace"
              c:identifier="camel_debug_get_raw_backtrace"
              version="3.30">
      <doc xml:space="preserve"
           filename="src/camel/camel-debug.c"
           line="827">Gets current raw backtrace leading to this function call.
This is quicker than camel_debug_get_backtrace(), because it
doesn't demangle the backtrace. To demangle it (replace addresses
with actual function calls and eventually line numbers, if
available) call camel_debug_demangle_backtrace().</doc>
      <source-position filename="src/camel/camel-debug.h" line="150"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-debug.c"
             line="836">Current raw backtrace, or %NULL, if cannot determine it.

Note: Getting backtraces only works if the library was
configured with --enable-backtraces.

See also camel_debug_get_backtrace()</doc>
        <type name="GLib.String" c:type="GString*"/>
      </return-value>
    </function>
    <function name="debug_init" c:identifier="camel_debug_init">
      <doc xml:space="preserve"
           filename="src/camel/camel-debug.c"
           line="43">Init camel debug.

CAMEL_DEBUG is set to a comma separated list of modules to debug.
The modules can contain module-specific specifiers after a ':', or
just act as a wildcard for the module or even specifier.  e.g. 'imap'
for imap debug, or 'imap:folder' for imap folder debug.  Additionaly,
':folder' can be used for a wildcard for any folder operations.</doc>
      <source-position filename="src/camel/camel-debug.h" line="35"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="debug_ref_unref_dump_backtraces"
              c:identifier="camel_debug_ref_unref_dump_backtraces"
              version="3.20">
      <doc xml:space="preserve"
           filename="src/camel/camel-debug.c"
           line="1341">Prints current backtraces stored with camel_debug_ref_unref_push_backtrace()
or with camel_debug_ref_unref_push_backtrace_for_object().

It's usually not needed to use this function, as the left backtraces, if any,
are printed at the end of the application.</doc>
      <source-position filename="src/camel/camel-debug.h" line="158"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="debug_ref_unref_push_backtrace"
              c:identifier="camel_debug_ref_unref_push_backtrace"
              version="3.20">
      <doc xml:space="preserve"
           filename="src/camel/camel-debug.c"
           line="1250">Adds this backtrace into the set of backtraces related to some object
reference counting issues debugging. This is usually called inside g_object_ref()
and g_object_unref(). If the backtrace corresponds to a g_object_unref()
call, and a corresponding g_object_ref() backtrace is found in the current list,
then the previous backtrace is removed and this one is skipped.

Any left backtraces in the list are printed at the application end.

A convenient function camel_debug_ref_unref_push_backtrace_for_object()
is provided too.</doc>
      <source-position filename="src/camel/camel-debug.h" line="153"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="backtrace" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-debug.c"
               line="1252">a backtrace to push, taken from camel_debug_get_backtrace()</doc>
          <type name="GLib.String" c:type="const GString*"/>
        </parameter>
        <parameter name="object_ref_count" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-debug.c"
               line="1253">the current object reference count when the push is done</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_ref_unref_push_backtrace_for_object"
              c:identifier="camel_debug_ref_unref_push_backtrace_for_object"
              version="3.20">
      <doc xml:space="preserve"
           filename="src/camel/camel-debug.c"
           line="1301">Gets current backtrace of this call and adds it to the list
of backtraces with camel_debug_ref_unref_push_backtrace().

Usual usage would be, once GNOME bug 758358 is applied to the GLib sources,
or a patched GLib is used, to call this function in an object init() function,
like this:

static void
my_object_init (MyObject *obj)
{
   camel_debug_ref_unref_push_backtrace_for_object (obj);
   g_track_object_ref_unref (obj, (GFunc) camel_debug_ref_unref_push_backtrace_for_object, NULL);
}

Note that the g_track_object_ref_unref() can track only one pointer, thus make
sure you track the right one (add some logic if multiple objects are created at once).</doc>
      <source-position filename="src/camel/camel-debug.h" line="156"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="_object"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-debug.c"
               line="1303">a #GObject, for which add the backtrace</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_start" c:identifier="camel_debug_start">
      <doc xml:space="preserve"
           filename="src/camel/camel-debug.c"
           line="126">Start debug output for a given mode, used to make sure debug output
is output atomically and not interspersed with unrelated stuff.</doc>
      <source-position filename="src/camel/camel-debug.h" line="38"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-debug.c"
             line="133">%TRUE if mode is set, and in which case, you must
call camel_debug_end() when finished any screen output.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="mode" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-debug.c"
               line="128">string name of the mode to start the debug for</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="enriched_to_html" c:identifier="camel_enriched_to_html">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-filter-enriched.c"
           line="577">Convert @in from text/plain into text/enriched or text/richtext
based on @flags.</doc>
      <source-position filename="src/camel/camel-mime-filter-enriched.h"
                       line="74"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter-enriched.c"
             line="585">a newly allocated string containing the enriched or
richtext version of @in.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-enriched.c"
               line="579">input textual string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-enriched.c"
               line="580">flags specifying filter behaviour</doc>
          <type name="MimeFilterEnrichedFlags" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="error_quark" c:identifier="camel_error_quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="file_util_decode_fixed_int32"
              c:identifier="camel_file_util_decode_fixed_int32">
      <doc xml:space="preserve"
           filename="src/camel/camel-file-utils.c"
           line="131">Retrieve a gint32.</doc>
      <source-position filename="src/camel/camel-file-utils.h" line="42"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-file-utils.c"
             line="138">0 on success, -1 on error.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="in"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="133">file to read from</doc>
          <type name="gpointer" c:type="FILE*"/>
        </parameter>
        <parameter name="dest" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="134">pointer to a variable to store the value in</doc>
          <type name="gint32" c:type="gint32*"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_util_decode_fixed_string"
              c:identifier="camel_file_util_decode_fixed_string">
      <doc xml:space="preserve"
           filename="src/camel/camel-file-utils.c"
           line="383">Decode a normal string from the input file.</doc>
      <source-position filename="src/camel/camel-file-utils.h" line="56"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-file-utils.c"
             line="391">0 on success, -1 on error.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="in"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="385">file to read from</doc>
          <type name="gpointer" c:type="FILE*"/>
        </parameter>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="386">pointer to a variable to store the value in</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="387">total-len to decode.</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_util_decode_gint64"
              c:identifier="camel_file_util_decode_gint64"
              version="3.50">
      <doc xml:space="preserve"
           filename="src/camel/camel-file-utils.c"
           line="264">Decode a gint64 type.</doc>
      <source-position filename="src/camel/camel-file-utils.h" line="52"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-file-utils.c"
             line="271">0 on success, -1 on failure.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="in"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="266">file to read from</doc>
          <type name="gpointer" c:type="FILE*"/>
        </parameter>
        <parameter name="dest" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="267">pointer to a variable to put the value in</doc>
          <type name="gint64" c:type="gint64*"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_util_decode_gsize"
              c:identifier="camel_file_util_decode_gsize">
      <doc xml:space="preserve"
           filename="src/camel/camel-file-utils.c"
           line="240">Decode an gsize type.</doc>
      <source-position filename="src/camel/camel-file-utils.h" line="50"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-file-utils.c"
             line="247">0 on success, -1 on failure.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="in"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="242">file to read from</doc>
          <type name="gpointer" c:type="FILE*"/>
        </parameter>
        <parameter name="dest" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="243">pointer to a variable to put the value in</doc>
          <type name="gsize" c:type="gsize*"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_util_decode_off_t"
              c:identifier="camel_file_util_decode_off_t">
      <doc xml:space="preserve"
           filename="src/camel/camel-file-utils.c"
           line="218">Decode an off_t type.</doc>
      <source-position filename="src/camel/camel-file-utils.h" line="48"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-file-utils.c"
             line="225">0 on success, -1 on failure.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="in"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="220">file to read from</doc>
          <type name="gpointer" c:type="FILE*"/>
        </parameter>
        <parameter name="dest" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="221">pointer to a variable to put the value in</doc>
          <type name="gsize" c:type="off_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_util_decode_string"
              c:identifier="camel_file_util_decode_string">
      <doc xml:space="preserve"
           filename="src/camel/camel-file-utils.c"
           line="305">Decode a normal string from the input file.</doc>
      <source-position filename="src/camel/camel-file-utils.h" line="54"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-file-utils.c"
             line="312">0 on success, -1 on error.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="in"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="307">file to read from</doc>
          <type name="gpointer" c:type="FILE*"/>
        </parameter>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="308">pointer to a variable to store the value in</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_util_decode_time_t"
              c:identifier="camel_file_util_decode_time_t">
      <doc xml:space="preserve"
           filename="src/camel/camel-file-utils.c"
           line="196">Decode a time_t value.</doc>
      <source-position filename="src/camel/camel-file-utils.h" line="46"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-file-utils.c"
             line="203">0 on success, -1 on error.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="in"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="198">file to read from</doc>
          <type name="gpointer" c:type="FILE*"/>
        </parameter>
        <parameter name="dest" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="199">pointer to a variable to store the value in</doc>
          <type name="glong" c:type="time_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_util_decode_uint32"
              c:identifier="camel_file_util_decode_uint32">
      <doc xml:space="preserve"
           filename="src/camel/camel-file-utils.c"
           line="78">Retrieve an encoded uint32 from a file.</doc>
      <source-position filename="src/camel/camel-file-utils.h" line="44"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-file-utils.c"
             line="85">0 on success, -1 on error.  @*dest will contain the
decoded value.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="in"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="80">file to read from</doc>
          <type name="gpointer" c:type="FILE*"/>
        </parameter>
        <parameter name="dest" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="81">pointer to a variable to store the value in</doc>
          <type name="guint32" c:type="guint32*"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_util_encode_fixed_int32"
              c:identifier="camel_file_util_encode_fixed_int32">
      <doc xml:space="preserve"
           filename="src/camel/camel-file-utils.c"
           line="109">Encode a gint32, performing no compression, but converting
to network order.</doc>
      <source-position filename="src/camel/camel-file-utils.h" line="41"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-file-utils.c"
             line="117">0 on success, -1 on error.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="out"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="111">file to output to</doc>
          <type name="gpointer" c:type="FILE*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="112">value to output</doc>
          <type name="gint32" c:type="gint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_util_encode_fixed_string"
              c:identifier="camel_file_util_encode_fixed_string">
      <doc xml:space="preserve"
           filename="src/camel/camel-file-utils.c"
           line="344">Encode a normal string and save it in the output file.
Unlike @camel_file_util_encode_string, it pads the
@str with "NULL" bytes, if @len is &gt; strlen(str)</doc>
      <source-position filename="src/camel/camel-file-utils.h" line="55"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-file-utils.c"
             line="354">0 on success, -1 on error.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="out"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="346">file to output to</doc>
          <type name="gpointer" c:type="FILE*"/>
        </parameter>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="347">value to output</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="348">total-len of str to store</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_util_encode_gint64"
              c:identifier="camel_file_util_encode_gint64"
              version="3.50">
      <doc xml:space="preserve"
           filename="src/camel/camel-file-utils.c"
           line="251">Encode a gint64 type.</doc>
      <source-position filename="src/camel/camel-file-utils.h" line="51"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-file-utils.c"
             line="258">0 on success, -1 on error.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="out"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="253">file to output to</doc>
          <type name="gpointer" c:type="FILE*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="254">value to output</doc>
          <type name="gint64" c:type="gint64"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_util_encode_gsize"
              c:identifier="camel_file_util_encode_gsize">
      <doc xml:space="preserve"
           filename="src/camel/camel-file-utils.c"
           line="229">Encode an gsize type.</doc>
      <source-position filename="src/camel/camel-file-utils.h" line="49"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-file-utils.c"
             line="236">0 on success, -1 on error.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="out"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="231">file to output to</doc>
          <type name="gpointer" c:type="FILE*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="232">value to output</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_util_encode_off_t"
              c:identifier="camel_file_util_encode_off_t">
      <doc xml:space="preserve"
           filename="src/camel/camel-file-utils.c"
           line="207">Encode an off_t type.</doc>
      <source-position filename="src/camel/camel-file-utils.h" line="47"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-file-utils.c"
             line="214">0 on success, -1 on error.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="out"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="209">file to output to</doc>
          <type name="gpointer" c:type="FILE*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="210">value to output</doc>
          <type name="gsize" c:type="off_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_util_encode_string"
              c:identifier="camel_file_util_encode_string">
      <doc xml:space="preserve"
           filename="src/camel/camel-file-utils.c"
           line="277">Encode a normal string and save it in the output file.</doc>
      <source-position filename="src/camel/camel-file-utils.h" line="53"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-file-utils.c"
             line="284">0 on success, -1 on error.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="out"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="279">file to output to</doc>
          <type name="gpointer" c:type="FILE*"/>
        </parameter>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="280">value to output</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_util_encode_time_t"
              c:identifier="camel_file_util_encode_time_t">
      <doc xml:space="preserve"
           filename="src/camel/camel-file-utils.c"
           line="185">Encode a time_t value to the file.</doc>
      <source-position filename="src/camel/camel-file-utils.h" line="45"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-file-utils.c"
             line="192">0 on success, -1 on error.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="out"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="187">file to output to</doc>
          <type name="gpointer" c:type="FILE*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="188">value to output</doc>
          <type name="glong" c:type="time_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_util_encode_uint32"
              c:identifier="camel_file_util_encode_uint32">
      <doc xml:space="preserve"
           filename="src/camel/camel-file-utils.c"
           line="53">Utility function to save an uint32 to a file.</doc>
      <source-position filename="src/camel/camel-file-utils.h" line="43"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-file-utils.c"
             line="60">0 on success, -1 on error.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="out"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="55">file to output to</doc>
          <type name="gpointer" c:type="FILE*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="56">value to output</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_util_safe_filename"
              c:identifier="camel_file_util_safe_filename">
      <doc xml:space="preserve"
           filename="src/camel/camel-file-utils.c"
           line="417">'Flattens' @name into a safe filename string by hex encoding any
chars that may cause problems on the filesystem.</doc>
      <source-position filename="src/camel/camel-file-utils.h" line="58"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/camel/camel-file-utils.c"
             line="424">a safe filename string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="419">string to 'flattened' into a safe filename</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_util_savename"
              c:identifier="camel_file_util_savename">
      <doc xml:space="preserve"
           filename="src/camel/camel-file-utils.c"
           line="640">Builds a pathname where the basename is of the form ".#" + the
basename of @filename, for instance used in a two-stage commit file
write.</doc>
      <source-position filename="src/camel/camel-file-utils.h" line="76"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/camel/camel-file-utils.c"
             line="648">The new pathname.  It must be free'd with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="642">a pathname</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="filter_search_match"
              c:identifier="camel_filter_search_match"
              introspectable="0"
              throws="1">
      <source-position filename="src/camel/camel-filter-search.h" line="45"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-filter-search.c"
             line="1525">one of CAMEL_SEARCH_MATCHED, CAMEL_SEARCH_NOMATCH, or
CAMEL_SEARCH_ERROR.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="session"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="_CamelSession*"/>
        </parameter>
        <parameter name="get_message"
                   transfer-ownership="none"
                   scope="async"
                   closure="2">
          <doc xml:space="preserve"
               filename="src/camel/camel-filter-search.c"
               line="1516">function to retrieve the message if necessary</doc>
          <type name="FilterSearchGetMessageFunc"
                c:type="CamelFilterSearchGetMessageFunc"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-filter-search.c"
               line="1517">data for above</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="info" transfer-ownership="none">
          <type name="MessageInfo" c:type="CamelMessageInfo*"/>
        </parameter>
        <parameter name="source" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="folder"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-filter-search.c"
               line="1520">in which folder the message is stored</doc>
          <type name="gpointer" c:type="_CamelFolder*"/>
        </parameter>
        <parameter name="expression" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-filter-search.c"
               line="1522">a #GCancellable, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="filter_search_match_with_log"
              c:identifier="camel_filter_search_match_with_log"
              introspectable="0"
              throws="1">
      <source-position filename="src/camel/camel-filter-search.h" line="54"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-filter-search.c"
             line="1400">one of CAMEL_SEARCH_MATCHED, CAMEL_SEARCH_NOMATCH, or
CAMEL_SEARCH_ERROR.

Since 3.24</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="session"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="_CamelSession*"/>
        </parameter>
        <parameter name="get_message"
                   transfer-ownership="none"
                   scope="async"
                   closure="2">
          <doc xml:space="preserve"
               filename="src/camel/camel-filter-search.c"
               line="1390">function to retrieve the message if necessary</doc>
          <type name="FilterSearchGetMessageFunc"
                c:type="CamelFilterSearchGetMessageFunc"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-filter-search.c"
               line="1391">data for above</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="info" transfer-ownership="none">
          <type name="MessageInfo" c:type="CamelMessageInfo*"/>
        </parameter>
        <parameter name="source" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="folder"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-filter-search.c"
               line="1394">in which folder the message is stored</doc>
          <type name="gpointer" c:type="_CamelFolder*"/>
        </parameter>
        <parameter name="expression" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="logfile"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-filter-search.c"
               line="1396">an optional log file to write logging information to, or %NULL</doc>
          <type name="gpointer" c:type="FILE*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-filter-search.c"
               line="1397">a #GCancellable, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function-macro name="folder_delete_message"
                    c:identifier="camel_folder_delete_message"
                    introspectable="0">
      <source-position filename="src/camel/camel-folder.h" line="354"/>
      <parameters>
        <parameter name="folder">
        </parameter>
        <parameter name="uid">
        </parameter>
      </parameters>
    </function-macro>
    <function name="folder_error_quark"
              c:identifier="camel_folder_error_quark"
              moved-to="FolderError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="folder_info_build"
              c:identifier="camel_folder_info_build"
              moved-to="FolderInfo.build">
      <doc xml:space="preserve"
           filename="src/camel/camel-store.c"
           line="1138">This takes an array of folders and attaches them together according
to the hierarchy described by their full_names and @separator. If
@namespace_ is non-%NULL, then it will be ignored as a full_name
prefix, for purposes of comparison. If necessary,
camel_folder_info_build() will create additional #CamelFolderInfo with
%NULL urls to fill in gaps in the tree. The value of @short_names
is used in constructing the names of these intermediate folders.</doc>
      <source-position filename="src/camel/camel-store.h" line="257"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/camel/camel-store.c"
             line="1154">the top level of the tree of linked folder info.</doc>
        <type name="FolderInfo" c:type="CamelFolderInfo*"/>
      </return-value>
      <parameters>
        <parameter name="folders" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="1140">an array of #CamelFolderInfo</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="FolderInfo"/>
          </array>
        </parameter>
        <parameter name="namespace_" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="1141">an ignorable prefix on the folder names</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="separator" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="1142">the hieararchy separator character</doc>
          <type name="gchar" c:type="gchar"/>
        </parameter>
        <parameter name="short_names" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store.c"
               line="1143">%TRUE if the (short) name of a folder is the part after
the last @separator in the full name. %FALSE if it is the full name.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="freeaddrinfo"
              c:identifier="camel_freeaddrinfo"
              version="2.22">
      <doc xml:space="preserve"
           filename="src/camel/camel-net-utils.c"
           line="765">Frees a structure returned with camel_getaddrinfo(). It does
nothing when the @host is %NULL.</doc>
      <source-position filename="src/camel/camel-net-utils.h" line="98"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="host"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-net-utils.c"
               line="767">a host address information structure to free, or %NULL</doc>
          <type name="gpointer" c:type="addrinfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="getaddrinfo"
              c:identifier="camel_getaddrinfo"
              version="2.22"
              throws="1">
      <doc xml:space="preserve"
           filename="src/camel/camel-net-utils.c"
           line="681">Resolves a host @name and returns an information about its address.</doc>
      <source-position filename="src/camel/camel-net-utils.h" line="93"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-net-utils.c"
             line="691">a newly allocated #addrinfo. Free it
   with camel_freeaddrinfo() when done with it.</doc>
        <type name="gpointer" c:type="addrinfo*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-net-utils.c"
               line="683">an address name to resolve</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="service" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-net-utils.c"
               line="684">a service name to use</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="hints"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-net-utils.c"
               line="685">an #addrinfo hints, or %NULL</doc>
          <type name="gpointer" c:type="const addrinfo*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-net-utils.c"
               line="686">optional #GCancellable object, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_address_decode"
              c:identifier="camel_header_address_decode"
              moved-to="HeaderAddress.decode">
      <source-position filename="src/camel/camel-mime-utils.h" line="109"/>
      <return-value transfer-ownership="full">
        <type name="HeaderAddress" c:type="CamelHeaderAddress*"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="charset" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_address_fold"
              c:identifier="camel_header_address_fold"
              moved-to="HeaderAddress.fold">
      <source-position filename="src/camel/camel-mime-utils.h" line="153"/>
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="headerlen" transfer-ownership="none">
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_address_list_append"
              c:identifier="camel_header_address_list_append"
              moved-to="HeaderAddress.list_append">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-utils.c"
           line="5057">TODO: Document me.</doc>
      <source-position filename="src/camel/camel-mime-utils.h" line="106"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="addrlistp" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="5059">a NULL-terminated list of #CamelHeaderAddress objects</doc>
          <array c:type="CamelHeaderAddress**">
            <type name="HeaderAddress" c:type="CamelHeaderAddress*"/>
          </array>
        </parameter>
        <parameter name="addr" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="5060">the #CamelHeaderAddress to add</doc>
          <type name="HeaderAddress" c:type="CamelHeaderAddress*"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_address_list_append_list"
              c:identifier="camel_header_address_list_append_list"
              moved-to="HeaderAddress.list_append_list">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-utils.c"
           line="5036">TODO: Document me.</doc>
      <source-position filename="src/camel/camel-mime-utils.h" line="105"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="addrlistp" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="5038">a NULL-terminated list of #CamelHeaderAddress objects</doc>
          <array c:type="CamelHeaderAddress**">
            <type name="HeaderAddress" c:type="CamelHeaderAddress*"/>
          </array>
        </parameter>
        <parameter name="addrs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="5039">a NULL-terminated list of #CamelHeaderAddress to add</doc>
          <array c:type="CamelHeaderAddress**">
            <type name="HeaderAddress" c:type="CamelHeaderAddress*"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="header_address_list_clear"
              c:identifier="camel_header_address_list_clear"
              moved-to="HeaderAddress.list_clear">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-utils.c"
           line="5075">TODO: Document me.</doc>
      <source-position filename="src/camel/camel-mime-utils.h" line="107"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="addrlistp" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="5077">a NULL-terminated list of #CamelHeaderAddress objects</doc>
          <array c:type="CamelHeaderAddress**">
            <type name="HeaderAddress" c:type="CamelHeaderAddress*"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="header_address_list_encode"
              c:identifier="camel_header_address_list_encode"
              moved-to="HeaderAddress.list_encode">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-utils.c"
           line="5174">TODO: Document me.</doc>
      <source-position filename="src/camel/camel-mime-utils.h" line="112"/>
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="addrlist" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="5176">a NULL-terminated list of #CamelHeaderAddress objects</doc>
          <array c:type="CamelHeaderAddress*">
            <type name="HeaderAddress" c:type="CamelHeaderAddress"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="header_address_list_format"
              c:identifier="camel_header_address_list_format"
              moved-to="HeaderAddress.list_format">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-utils.c"
           line="5194">TODO: Document me.</doc>
      <source-position filename="src/camel/camel-mime-utils.h" line="114"/>
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="addrlist" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="5196">a NULL-terminated list of #CamelHeaderAddress objects</doc>
          <array c:type="CamelHeaderAddress*">
            <type name="HeaderAddress" c:type="CamelHeaderAddress"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="header_contentid_decode"
              c:identifier="camel_header_contentid_decode">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-utils.c"
           line="3142">Extract a content-id from @in.</doc>
      <source-position filename="src/camel/camel-mime-utils.h" line="183"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="3148">the extracted content-id</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="3144">input string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_decode_date"
              c:identifier="camel_header_decode_date">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-utils.c"
           line="4621">Decodes the rfc822 date string and saves the GMT offset into
@tz_offset if non-NULL.</doc>
      <source-position filename="src/camel/camel-mime-utils.h" line="178"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="4629">the time_t representation of the date string specified by
@str or (time_t) 0 on error. If @tz_offset is non-NULL, the value
of the timezone offset will be stored.</doc>
        <type name="glong" c:type="time_t"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="4623">input date string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="tz_offset" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="4624">timezone offset</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_decode_int" c:identifier="camel_header_decode_int">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-utils.c"
           line="2291">Extracts an integer token from @in and updates the pointer to point
to after the end of the integer token (sort of like strtol).</doc>
      <source-position filename="src/camel/camel-mime-utils.h" line="162"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="2298">the gint value</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="2293">pointer to input string</doc>
          <type name="utf8" c:type="const gchar**"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_decode_string"
              c:identifier="camel_header_decode_string">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-utils.c"
           line="1452">Decodes rfc2047 encoded-word tokens</doc>
      <source-position filename="src/camel/camel-mime-utils.h" line="165"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="1459">a string containing the UTF-8 version of the decoded header
value</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="1454">input header value string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="default_charset" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="1455">default charset to use if improperly encoded</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_encode_phrase"
              c:identifier="camel_header_encode_phrase">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-utils.c"
           line="2026">Encodes a 'phrase' header according to the rules in rfc2047.</doc>
      <source-position filename="src/camel/camel-mime-utils.h" line="172"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="2032">the encoded 'phrase'</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="2028">header to encode</doc>
          <type name="guint8" c:type="const guchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_encode_string"
              c:identifier="camel_header_encode_string">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-utils.c"
           line="1793">Encodes a 'text' header according to the rules of rfc2047.</doc>
      <source-position filename="src/camel/camel-mime-utils.h" line="166"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="1799">the rfc2047 encoded header</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="1795">input string</doc>
          <type name="guint8" c:type="const guchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_fold" c:identifier="camel_header_fold">
      <source-position filename="src/camel/camel-mime-utils.h" line="154"/>
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="headerlen" transfer-ownership="none">
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_format_ctext"
              c:identifier="camel_header_format_ctext">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-utils.c"
           line="1479">Decodes a header which contains rfc2047 encoded-word tokens that
may or may not be within a comment.</doc>
      <source-position filename="src/camel/camel-mime-utils.h" line="169"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="1487">a string containing the UTF-8 version of the decoded header
value</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="1481">input header value string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="default_charset" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="1482">default charset to use if improperly encoded</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_format_date"
              c:identifier="camel_header_format_date">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-utils.c"
           line="4113">Allocates a string buffer containing the rfc822 formatted date
string represented by @time and @tz_offset.</doc>
      <source-position filename="src/camel/camel-mime-utils.h" line="179"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="4121">a valid string representation of the date.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="date" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="4115">time_t date representation</doc>
          <type name="glong" c:type="time_t"/>
        </parameter>
        <parameter name="tz_offset" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="4116">Timezone offset</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_location_decode"
              c:identifier="camel_header_location_decode">
      <source-position filename="src/camel/camel-mime-utils.h" line="192"/>
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_mailbox_decode"
              c:identifier="camel_header_mailbox_decode">
      <source-position filename="src/camel/camel-mime-utils.h" line="110"/>
      <return-value transfer-ownership="full">
        <type name="HeaderAddress" c:type="CamelHeaderAddress*"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="charset" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_mime_decode"
              c:identifier="camel_header_mime_decode">
      <source-position filename="src/camel/camel-mime-utils.h" line="201"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="maj" transfer-ownership="none">
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="min" transfer-ownership="none">
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_msgid_decode"
              c:identifier="camel_header_msgid_decode">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-utils.c"
           line="3125">Extract a message-id token from @in.</doc>
      <source-position filename="src/camel/camel-mime-utils.h" line="182"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="3131">the msg-id</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="3127">input string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_msgid_generate"
              c:identifier="camel_header_msgid_generate">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-utils.c"
           line="4700">Either the @domain is used, or the user's local hostname,
in case it's %NULL or empty.</doc>
      <source-position filename="src/camel/camel-mime-utils.h" line="186"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="4707">Unique message ID.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="domain"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="4702">domain to use (like "example.com") for the ID suffix; can be %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_newsgroups_decode"
              c:identifier="camel_header_newsgroups_decode">
      <source-position filename="src/camel/camel-mime-utils.h" line="195"/>
      <return-value transfer-ownership="full">
        <type name="GLib.SList" c:type="GSList*">
          <type name="utf8"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_param" c:identifier="camel_header_param">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-utils.c"
           line="2411">Searches @params for a param named @name and gets the value.</doc>
      <source-position filename="src/camel/camel-mime-utils.h" line="118"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="2418">the value of the @name param</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="params"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="2413">parameters</doc>
          <type name="gpointer" c:type="_camel_header_param*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="2414">name of param to find</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_param_list_decode"
              c:identifier="camel_header_param_list_decode"
              moved-to="HeaderParam.list_decode">
      <source-position filename="src/camel/camel-mime-utils.h" line="117"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="3598">Decode list of parameters.
   Free with camel_header_param_list_free() when done with it.</doc>
        <type name="gpointer" c:type="_camel_header_param*"/>
      </return-value>
      <parameters>
        <parameter name="in"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="3596">a header param value to decode</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_param_list_format"
              c:identifier="camel_header_param_list_format"
              moved-to="HeaderParam.list_format">
      <source-position filename="src/camel/camel-mime-utils.h" line="121"/>
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="params"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="_camel_header_param*"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_param_list_format_append"
              c:identifier="camel_header_param_list_format_append"
              moved-to="HeaderParam.list_format_append">
      <source-position filename="src/camel/camel-mime-utils.h" line="120"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="out" transfer-ownership="none">
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
        <parameter name="params"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="_camel_header_param*"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_param_list_free"
              c:identifier="camel_header_param_list_free"
              moved-to="HeaderParam.list_free">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-utils.c"
           line="2550">Free the list of params.</doc>
      <source-position filename="src/camel/camel-mime-utils.h" line="122"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="params"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="2552">a list of params</doc>
          <type name="gpointer" c:type="_camel_header_param*"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_references_decode"
              c:identifier="camel_header_references_decode">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-utils.c"
           line="3268">Generate a list of references, from most recent up.</doc>
      <source-position filename="src/camel/camel-mime-utils.h" line="189"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="3274">a list of references decoedd from @in</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type name="utf8"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="3270">References header value</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_set_param" c:identifier="camel_header_set_param">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-utils.c"
           line="2433">Set a parameter in the list.</doc>
      <source-position filename="src/camel/camel-mime-utils.h" line="119"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="2441">the set param</doc>
        <type name="gpointer" c:type="_camel_header_param*"/>
      </return-value>
      <parameters>
        <parameter name="paramsp"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="2435">poinetr to a list of params</doc>
          <type name="gpointer" c:type="_camel_header_param**"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="2436">name of param to set</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="2437">value to set</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_token_decode"
              c:identifier="camel_header_token_decode">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-utils.c"
           line="2133">Gets the first token in the string according to the rules of
rfc0822.</doc>
      <source-position filename="src/camel/camel-mime-utils.h" line="160"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="2140">a new string containing the first token in @in</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="2135">input string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_unfold" c:identifier="camel_header_unfold">
      <source-position filename="src/camel/camel-mime-utils.h" line="155"/>
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="headers_dup_mailing_list"
              c:identifier="camel_headers_dup_mailing_list">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-utils.c"
           line="4862">Searches for a mailing list information among known headers and returns
a newly allocated string with its value.</doc>
      <source-position filename="src/camel/camel-mime-utils.h" line="157"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="4869">The mailing list header, or %NULL, if none is found</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="headers" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="4864">a #CamelNameValueArray with headers</doc>
          <type name="NameValueArray" c:type="const CamelNameValueArray*"/>
        </parameter>
      </parameters>
    </function>
    <function name="host_idna_to_ascii"
              c:identifier="camel_host_idna_to_ascii"
              version="3.16">
      <doc xml:space="preserve"
           filename="src/camel/camel-net-utils.c"
           line="794">Converts IDN (Internationalized Domain Name) into ASCII representation.
If there's a failure or the @host has only ASCII letters, then a copy
of @host is returned.</doc>
      <source-position filename="src/camel/camel-net-utils.h" line="100"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-net-utils.c"
             line="802">Newly allocated string with only ASCII letters
  describing the @host or %NULL, when the @host is %NULL. Free the returned
  string with g_free() when no longer needed.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="host"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-net-utils.c"
               line="796">Host name, with or without non-ascii letters in utf8</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="hostname_utils_requires_ascii"
              c:identifier="camel_hostname_utils_requires_ascii"
              version="3.44">
      <doc xml:space="preserve"
           filename="src/camel/camel-hostname-utils.c"
           line="636">Check whether the @hostname requires conversion to ASCII. That can
be when a character in it can look like an ASCII character, even
it being a Unicode letter. This can be used to display host names
in a way of invulnerable to IDN homograph attacks.</doc>
      <source-position filename="src/camel/camel-hostname-utils.h" line="29"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-hostname-utils.c"
             line="645">%TRUE, when the @hostname should be converted to an ASCII equivalent,
   %FALSE, when it can be shown as is.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="hostname" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-hostname-utils.c"
               line="638">a host name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="iconv" c:identifier="camel_iconv" introspectable="0">
      <source-position filename="src/camel/camel-iconv.h" line="40"/>
      <return-value transfer-ownership="none">
        <type name="gsize" c:type="gsize"/>
      </return-value>
      <parameters>
        <parameter name="cd" transfer-ownership="none">
          <type name="GLib.IConv" c:type="GIConv"/>
        </parameter>
        <parameter name="inbuf" transfer-ownership="none">
          <type name="utf8" c:type="const gchar**"/>
        </parameter>
        <parameter name="inleft" transfer-ownership="none">
          <type name="gsize" c:type="gsize*"/>
        </parameter>
        <parameter name="outbuf" transfer-ownership="none">
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="outleft" transfer-ownership="none">
          <type name="gsize" c:type="gsize*"/>
        </parameter>
      </parameters>
    </function>
    <function name="iconv_charset_language"
              c:identifier="camel_iconv_charset_language">
      <source-position filename="src/camel/camel-iconv.h" line="36"/>
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="charset" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="iconv_charset_name"
              c:identifier="camel_iconv_charset_name">
      <source-position filename="src/camel/camel-iconv.h" line="35"/>
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="charset" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="iconv_close"
              c:identifier="camel_iconv_close"
              introspectable="0">
      <source-position filename="src/camel/camel-iconv.h" line="45"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cd" transfer-ownership="none">
          <type name="GLib.IConv" c:type="GIConv"/>
        </parameter>
      </parameters>
    </function>
    <function name="iconv_locale_charset"
              c:identifier="camel_iconv_locale_charset">
      <source-position filename="src/camel/camel-iconv.h" line="32"/>
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="iconv_locale_language"
              c:identifier="camel_iconv_locale_language">
      <source-position filename="src/camel/camel-iconv.h" line="33"/>
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="iconv_open"
              c:identifier="camel_iconv_open"
              introspectable="0">
      <source-position filename="src/camel/camel-iconv.h" line="38"/>
      <return-value>
        <doc xml:space="preserve"
             filename="src/camel/camel-iconv.c"
             line="377">a #GIConv for the conversion from charset @from to charset @to, or (GIConv) -1 on error.</doc>
        <type name="GLib.IConv" c:type="GIConv"/>
      </return-value>
      <parameters>
        <parameter name="to" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-iconv.c"
               line="374">charset to convert to</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="from" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-iconv.c"
               line="375">charset to covert from</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="init" c:identifier="camel_init">
      <source-position filename="src/camel/camel.h" line="156"/>
      <return-value transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="certdb_dir" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nss_init" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="localtime_with_offset"
              c:identifier="camel_localtime_with_offset">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-utils.c"
           line="140">Converts the calendar time representation @tt to a broken-down
time representation, stored in @tm, and provides the offset in
seconds from UTC time, stored in @offset.</doc>
      <source-position filename="src/camel/camel-mime-utils.h" line="90"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="tt" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="142">the #time_t to convert</doc>
          <type name="glong" c:type="time_t"/>
        </parameter>
        <parameter name="tm"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="143">the #tm to store the result in</doc>
          <type name="gpointer" c:type="tm*"/>
        </parameter>
        <parameter name="offset" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="144">the #gint to store the offset in</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="lock_dot" c:identifier="camel_lock_dot" throws="1">
      <doc xml:space="preserve"
           filename="src/camel/camel-lock.c"
           line="63">Create an exclusive lock using .lock semantics.
All locks are equivalent to write locks (exclusive).

The function does nothing and returns success (zero),
when dot locking had not been compiled.</doc>
      <source-position filename="src/camel/camel-lock.h" line="46"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-lock.c"
             line="74">-1 on error, sets @ex appropriately.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-lock.c"
               line="65">a path to lock</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="lock_fcntl" c:identifier="camel_lock_fcntl" throws="1">
      <doc xml:space="preserve"
           filename="src/camel/camel-lock.c"
           line="185">Create a lock using fcntl(2).

@type is CAMEL_LOCK_WRITE or CAMEL_LOCK_READ,
to create exclusive or shared read locks

The function does nothing and returns success (zero),
when fcntl locking had not been compiled.</doc>
      <source-position filename="src/camel/camel-lock.h" line="47"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-lock.c"
             line="199">-1 on error.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="fd" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-lock.c"
               line="187">a file descriptor</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-lock.c"
               line="188">a #CamelLockType</doc>
          <type name="LockType" c:type="CamelLockType"/>
        </parameter>
      </parameters>
    </function>
    <function name="lock_flock" c:identifier="camel_lock_flock" throws="1">
      <doc xml:space="preserve"
           filename="src/camel/camel-lock.c"
           line="258">Create a lock using flock(2).

@type is CAMEL_LOCK_WRITE or CAMEL_LOCK_READ,
to create exclusive or shared read locks

The function does nothing and returns success (zero),
when flock locking had not been compiled.</doc>
      <source-position filename="src/camel/camel-lock.h" line="48"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-lock.c"
             line="272">-1 on error.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="fd" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-lock.c"
               line="260">a file descriptor</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-lock.c"
               line="261">a #CamelLockType</doc>
          <type name="LockType" c:type="CamelLockType"/>
        </parameter>
      </parameters>
    </function>
    <function name="lock_folder" c:identifier="camel_lock_folder" throws="1">
      <doc xml:space="preserve"
           filename="src/camel/camel-lock.c"
           line="319">Attempt to lock a folder, multiple attempts will be made using all
locking strategies available.</doc>
      <source-position filename="src/camel/camel-lock.h" line="55"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-lock.c"
             line="329">-1 on error, @ex will describe the locking system that failed.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-lock.c"
               line="321">Path to the file to lock (used for .locking only).</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="fd" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-lock.c"
               line="322">Open file descriptor of the right type to lock.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-lock.c"
               line="323">Type of lock, CAMEL_LOCK_READ or CAMEL_LOCK_WRITE.</doc>
          <type name="LockType" c:type="CamelLockType"/>
        </parameter>
      </parameters>
    </function>
    <function name="lock_helper_lock"
              c:identifier="camel_lock_helper_lock"
              throws="1">
      <source-position filename="src/camel/camel-lock-client.h" line="33"/>
      <return-value transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="lock_helper_unlock"
              c:identifier="camel_lock_helper_unlock">
      <source-position filename="src/camel/camel-lock-client.h" line="34"/>
      <return-value transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="lockid" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="memchunk_alloc"
              c:identifier="camel_memchunk_alloc"
              version="3.4"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/camel/camel-memchunk.c"
           line="104">Allocate a new atom size block of memory from a #CamelMemChunk.
Free the returned atom with camel_memchunk_free().</doc>
      <source-position filename="src/camel/camel-memchunk.h" line="37"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-memchunk.c"
             line="111">an allocated block of memory</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="memchunk" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-memchunk.c"
               line="106">a #CamelMemChunk</doc>
          <type name="MemChunk" c:type="CamelMemChunk*"/>
        </parameter>
      </parameters>
    </function>
    <function name="memchunk_alloc0"
              c:identifier="camel_memchunk_alloc0"
              version="3.4"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/camel/camel-memchunk.c"
           line="143">Allocate a new atom size block of memory from a #CamelMemChunk,
and fill the memory with zeros.  Free the returned atom with
camel_memchunk_free().</doc>
      <source-position filename="src/camel/camel-memchunk.h" line="38"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-memchunk.c"
             line="151">an allocated block of memory</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="memchunk" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-memchunk.c"
               line="145">a #CamelMemChunk</doc>
          <type name="MemChunk" c:type="CamelMemChunk*"/>
        </parameter>
      </parameters>
    </function>
    <function name="memchunk_clean"
              c:identifier="camel_memchunk_clean"
              version="3.4"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/camel/camel-memchunk.c"
           line="252">Scan all empty blocks and check for blocks which can be free'd
back to the system.

This routine may take a while to run if there are many allocated
memory blocks (if the total number of allocations is many times
greater than atomcount).</doc>
      <source-position filename="src/camel/camel-memchunk.h" line="42"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="memchunk" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-memchunk.c"
               line="254">a #CamelMemChunk</doc>
          <type name="MemChunk" c:type="CamelMemChunk*"/>
        </parameter>
      </parameters>
    </function>
    <function name="memchunk_destroy"
              c:identifier="camel_memchunk_destroy"
              version="3.4"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/camel/camel-memchunk.c"
           line="330">Free the memchunk header, and all associated memory.</doc>
      <source-position filename="src/camel/camel-memchunk.h" line="43"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="memchunk" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-memchunk.c"
               line="332">a #CamelMemChunk</doc>
          <type name="MemChunk" c:type="CamelMemChunk*"/>
        </parameter>
      </parameters>
    </function>
    <function name="memchunk_empty"
              c:identifier="camel_memchunk_empty"
              version="3.4"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/camel/camel-memchunk.c"
           line="196">Clean out the memchunk buffers.  Marks all allocated memory as free blocks,
but does not give it back to the system.  Can be used if the memchunk
is to be used repeatedly.</doc>
      <source-position filename="src/camel/camel-memchunk.h" line="41"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="memchunk" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-memchunk.c"
               line="198">a #CamelMemChunk</doc>
          <type name="MemChunk" c:type="CamelMemChunk*"/>
        </parameter>
      </parameters>
    </function>
    <function name="memchunk_free"
              c:identifier="camel_memchunk_free"
              version="3.4"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/camel/camel-memchunk.c"
           line="166">Free a single atom back to the free pool of atoms in the given
memchunk.</doc>
      <source-position filename="src/camel/camel-memchunk.h" line="39"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="memchunk" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-memchunk.c"
               line="168">a #CamelMemChunk</doc>
          <type name="MemChunk" c:type="CamelMemChunk*"/>
        </parameter>
        <parameter name="mem"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-memchunk.c"
               line="169">address of atom to free</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="memchunk_new"
              c:identifier="camel_memchunk_new"
              version="3.4"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/camel/camel-memchunk.c"
           line="74">Create a new #CamelMemChunk header.  Memchunks are an efficient way to
allocate and deallocate identical sized blocks of memory quickly, and
space efficiently.

camel_memchunks are effectively the same as gmemchunks, only faster (much),
and they use less memory overhead for housekeeping.</doc>
      <source-position filename="src/camel/camel-memchunk.h" line="35"/>
      <return-value>
        <doc xml:space="preserve"
             filename="src/camel/camel-memchunk.c"
             line="86">a new #CamelMemChunk</doc>
        <type name="MemChunk" c:type="CamelMemChunk*"/>
      </return-value>
      <parameters>
        <parameter name="atomcount" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-memchunk.c"
               line="76">the number of atoms stored in a single malloc'd block of memory</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="atomsize" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-memchunk.c"
               line="77">the size of each allocation</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="mempool_alloc"
              c:identifier="camel_mempool_alloc"
              version="2.32"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/camel/camel-mempool.c"
           line="96">Allocate a new data block in the mempool.  Size will
be rounded up to the mempool's alignment restrictions
before being used.</doc>
      <source-position filename="src/camel/camel-mempool.h" line="63"/>
      <return-value transfer-ownership="none" nullable="1">
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="pool" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mempool.c"
               line="98">a #CamelMemPool</doc>
          <type name="MemPool" c:type="CamelMemPool*"/>
        </parameter>
        <parameter name="size" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mempool.c"
               line="99">requested size to allocate</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="mempool_destroy"
              c:identifier="camel_mempool_destroy"
              version="2.32"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/camel/camel-mempool.c"
           line="205">Free all memory associated with a mempool.</doc>
      <source-position filename="src/camel/camel-mempool.h" line="69"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pool" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mempool.c"
               line="207">a #CamelMemPool</doc>
          <type name="MemPool" c:type="CamelMemPool*"/>
        </parameter>
      </parameters>
    </function>
    <function name="mempool_flush"
              c:identifier="camel_mempool_flush"
              version="2.32"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/camel/camel-mempool.c"
           line="160">Flush used memory and mark allocated blocks as free.

If @freeall is %TRUE, then all allocated blocks are free'd
as well.  Otherwise only blocks above the threshold are
actually freed, and the others are simply marked as empty.</doc>
      <source-position filename="src/camel/camel-mempool.h" line="67"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pool" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mempool.c"
               line="162">a #CamelMemPool</doc>
          <type name="MemPool" c:type="CamelMemPool*"/>
        </parameter>
        <parameter name="freeall" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mempool.c"
               line="163">free all system allocated blocks as well</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="mempool_new"
              c:identifier="camel_mempool_new"
              version="2.32"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/camel/camel-mempool.c"
           line="43">Create a new mempool header.  Mempools can be used to efficiently
allocate data which can then be freed as a whole.

Mempools can also be used to efficiently allocate arbitrarily
aligned data (such as strings) without incurring the space overhead
of aligning each allocation (which is not required for strings).

However, each allocation cannot be freed individually, only all
or nothing.</doc>
      <source-position filename="src/camel/camel-mempool.h" line="60"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/camel/camel-mempool.c"
             line="63">a newly allocated #CamelMemPool</doc>
        <type name="MemPool" c:type="CamelMemPool*"/>
      </return-value>
      <parameters>
        <parameter name="blocksize" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mempool.c"
               line="45">The base blocksize to use for all system alocations.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="threshold" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mempool.c"
               line="46">If the allocation exceeds the threshold, then it is
allocated separately and stored in a separate list.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mempool.c"
               line="48">Alignment options: CAMEL_MEMPOOL_ALIGN_STRUCT uses native
struct alignment, CAMEL_MEMPOOL_ALIGN_WORD aligns to 16 bits (2 bytes),
and CAMEL_MEMPOOL_ALIGN_BYTE aligns to the nearest byte.  The default
is to align to native structures.</doc>
          <type name="MemPoolFlags" c:type="CamelMemPoolFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="mempool_strdup"
              c:identifier="camel_mempool_strdup"
              version="2.32"
              introspectable="0">
      <source-position filename="src/camel/camel-mempool.h" line="65"/>
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="pool" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mempool.c"
               line="141">a #CamelMemPool</doc>
          <type name="MemPool" c:type="CamelMemPool*"/>
        </parameter>
        <parameter name="str" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function-macro name="mime_is_atom"
                    c:identifier="camel_mime_is_atom"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-utils.h" line="236"/>
      <parameters>
        <parameter name="x">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="mime_is_attrchar"
                    c:identifier="camel_mime_is_attrchar"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-utils.h" line="242"/>
      <parameters>
        <parameter name="x">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="mime_is_ctrl"
                    c:identifier="camel_mime_is_ctrl"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-utils.h" line="231"/>
      <parameters>
        <parameter name="x">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="mime_is_dtext"
                    c:identifier="camel_mime_is_dtext"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-utils.h" line="237"/>
      <parameters>
        <parameter name="x">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="mime_is_especial"
                    c:identifier="camel_mime_is_especial"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-utils.h" line="240"/>
      <parameters>
        <parameter name="x">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="mime_is_fieldname"
                    c:identifier="camel_mime_is_fieldname"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-utils.h" line="238"/>
      <parameters>
        <parameter name="x">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="mime_is_lwsp"
                    c:identifier="camel_mime_is_lwsp"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-utils.h" line="232"/>
      <parameters>
        <parameter name="x">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="mime_is_psafe"
                    c:identifier="camel_mime_is_psafe"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-utils.h" line="241"/>
      <parameters>
        <parameter name="x">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="mime_is_qpsafe"
                    c:identifier="camel_mime_is_qpsafe"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-utils.h" line="239"/>
      <parameters>
        <parameter name="x">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="mime_is_tspecial"
                    c:identifier="camel_mime_is_tspecial"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-utils.h" line="233"/>
      <parameters>
        <parameter name="x">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="mime_is_ttoken"
                    c:identifier="camel_mime_is_ttoken"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-utils.h" line="235"/>
      <parameters>
        <parameter name="x">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="mime_is_type"
                    c:identifier="camel_mime_is_type"
                    introspectable="0">
      <source-position filename="src/camel/camel-mime-utils.h" line="234"/>
      <parameters>
        <parameter name="x">
        </parameter>
        <parameter name="t">
        </parameter>
      </parameters>
    </function-macro>
    <function name="mktime_utc" c:identifier="camel_mktime_utc" version="3.4">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-utils.c"
           line="106">Like mktime(3), but assumes UTC instead of local timezone.</doc>
      <source-position filename="src/camel/camel-mime-utils.h" line="89"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="112">the calendar time representation of @tm</doc>
        <type name="glong" c:type="time_t"/>
      </return-value>
      <parameters>
        <parameter name="tm"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="108">the #tm to convert to a calendar time representation</doc>
          <type name="gpointer" c:type="tm*"/>
        </parameter>
      </parameters>
    </function>
    <function name="movemail" c:identifier="camel_movemail" throws="1">
      <doc xml:space="preserve"
           filename="src/camel/camel-movemail.c"
           line="70">This copies an mbox file from a shared directory with multiple
readers and writers into a private (presumably Camel-controlled)
directory. Dot locking is used on the source file (but not the
destination).</doc>
      <source-position filename="src/camel/camel-movemail.h" line="32"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-movemail.c"
             line="81">Returns -1 on error or 0 on success.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="source" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-movemail.c"
               line="72">source file</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="dest" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-movemail.c"
               line="73">destination file</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="msgport_destroy"
              c:identifier="camel_msgport_destroy"
              version="2.24"
              introspectable="0">
      <source-position filename="src/camel/camel-msgport.h" line="53"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="msgport" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-msgport.c"
               line="264">a #CamelMsgPort</doc>
          <type name="MsgPort" c:type="CamelMsgPort*"/>
        </parameter>
      </parameters>
    </function>
    <function name="msgport_fd"
              c:identifier="camel_msgport_fd"
              version="2.24"
              introspectable="0">
      <source-position filename="src/camel/camel-msgport.h" line="54"/>
      <return-value transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="msgport" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-msgport.c"
               line="288">a #CamelMsgPort</doc>
          <type name="MsgPort" c:type="CamelMsgPort*"/>
        </parameter>
      </parameters>
    </function>
    <function name="msgport_new"
              c:identifier="camel_msgport_new"
              version="2.24"
              introspectable="0">
      <source-position filename="src/camel/camel-msgport.h" line="52"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/camel/camel-msgport.c"
             line="243">a new #CamelMsgPort</doc>
        <type name="MsgPort" c:type="CamelMsgPort*"/>
      </return-value>
    </function>
    <function name="msgport_pop"
              c:identifier="camel_msgport_pop"
              version="2.24"
              introspectable="0">
      <source-position filename="src/camel/camel-msgport.h" line="57"/>
      <return-value>
        <type name="Msg" c:type="CamelMsg*"/>
      </return-value>
      <parameters>
        <parameter name="msgport" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-msgport.c"
               line="387">a #CamelMsgPort</doc>
          <type name="MsgPort" c:type="CamelMsgPort*"/>
        </parameter>
      </parameters>
    </function>
    <function name="msgport_prfd"
              c:identifier="camel_msgport_prfd"
              version="2.24"
              introspectable="0">
      <source-position filename="src/camel/camel-msgport.h" line="63"/>
      <return-value transfer-ownership="none" nullable="1">
        <type name="gpointer" c:type="PRFileDesc*"/>
      </return-value>
      <parameters>
        <parameter name="msgport" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-msgport.c"
               line="310">a #CamelMsgPort</doc>
          <type name="MsgPort" c:type="CamelMsgPort*"/>
        </parameter>
      </parameters>
    </function>
    <function name="msgport_push"
              c:identifier="camel_msgport_push"
              version="2.24"
              introspectable="0">
      <source-position filename="src/camel/camel-msgport.h" line="55"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="msgport" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-msgport.c"
               line="334">a #CamelMsgPort</doc>
          <type name="MsgPort" c:type="CamelMsgPort*"/>
        </parameter>
        <parameter name="msg" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-msgport.c"
               line="335">a #CamelMsg</doc>
          <type name="Msg" c:type="CamelMsg*"/>
        </parameter>
      </parameters>
    </function>
    <function name="msgport_reply"
              c:identifier="camel_msgport_reply"
              version="2.24"
              introspectable="0">
      <source-position filename="src/camel/camel-msgport.h" line="61"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="msg" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-msgport.c"
               line="472">a #CamelMsg</doc>
          <type name="Msg" c:type="CamelMsg*"/>
        </parameter>
      </parameters>
    </function>
    <function name="msgport_timeout_pop"
              c:identifier="camel_msgport_timeout_pop"
              version="3.8"
              introspectable="0">
      <source-position filename="src/camel/camel-msgport.h" line="59"/>
      <return-value>
        <type name="Msg" c:type="CamelMsg*"/>
      </return-value>
      <parameters>
        <parameter name="msgport" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-msgport.c"
               line="443">a #CamelMsgPort</doc>
          <type name="MsgPort" c:type="CamelMsgPort*"/>
        </parameter>
        <parameter name="timeout" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-msgport.c"
               line="444">number of microseconds to wait</doc>
          <type name="guint64" c:type="guint64"/>
        </parameter>
      </parameters>
    </function>
    <function name="msgport_try_pop"
              c:identifier="camel_msgport_try_pop"
              version="2.24"
              introspectable="0">
      <source-position filename="src/camel/camel-msgport.h" line="58"/>
      <return-value>
        <type name="Msg" c:type="CamelMsg*"/>
      </return-value>
      <parameters>
        <parameter name="msgport" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-msgport.c"
               line="416">a #CamelMsgPort</doc>
          <type name="MsgPort" c:type="CamelMsgPort*"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_bag_new"
              c:identifier="camel_object_bag_new"
              moved-to="ObjectBag.new"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/camel/camel-object-bag.c"
           line="153">Returns a new object bag.  Object bags are keyed hash tables of objects
that can be updated atomically using transaction semantics.  Use
camel_object_bag_destroy() to free the object bag.</doc>
      <source-position filename="src/camel/camel-object-bag.h" line="35"/>
      <return-value>
        <doc xml:space="preserve"
             filename="src/camel/camel-object-bag.c"
             line="164">a newly-allocated #CamelObjectBag</doc>
        <type name="ObjectBag" c:type="CamelObjectBag*"/>
      </return-value>
      <parameters>
        <parameter name="key_hash_func" transfer-ownership="none" scope="call">
          <doc xml:space="preserve"
               filename="src/camel/camel-object-bag.c"
               line="155">a hashing function for keys</doc>
          <type name="GLib.HashFunc" c:type="GHashFunc"/>
        </parameter>
        <parameter name="key_equal_func"
                   transfer-ownership="none"
                   scope="call">
          <doc xml:space="preserve"
               filename="src/camel/camel-object-bag.c"
               line="156">a comparison function for keys</doc>
          <type name="GLib.EqualFunc" c:type="GEqualFunc"/>
        </parameter>
        <parameter name="key_copy_func" transfer-ownership="none" scope="call">
          <doc xml:space="preserve"
               filename="src/camel/camel-object-bag.c"
               line="157">a function to copy keys</doc>
          <type name="CopyFunc" c:type="CamelCopyFunc"/>
        </parameter>
        <parameter name="key_free_func" transfer-ownership="none" scope="call">
          <doc xml:space="preserve"
               filename="src/camel/camel-object-bag.c"
               line="158">a function to free keys</doc>
          <type name="GLib.FreeFunc" c:type="GFreeFunc"/>
        </parameter>
      </parameters>
    </function>
    <function name="pointer_tracker_dump"
              c:identifier="camel_pointer_tracker_dump"
              version="3.6">
      <doc xml:space="preserve"
           filename="src/camel/camel-debug.c"
           line="778">Prints information about currently stored pointers
in the pointer tracker. This is called automatically
on application exit if camel_pointer_tracker_track() or
camel_pointer_tracker_track_with_info() was called.

Note: If the library is configured with --enable-backtraces,
then also backtraces where the pointer was added is printed
in the summary.</doc>
      <source-position filename="src/camel/camel-debug.h" line="147"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function-macro name="pointer_tracker_track"
                    c:identifier="camel_pointer_tracker_track"
                    version="3.6"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="src/camel/camel-debug.h"
           line="124">Adds pointer 'ptr' to pointer tracker. Usual use case is to add object
to the tracker in GObject::init and remove it from tracker within
GObject::finalize. Since the tracker's functions are called, the application
prints summary of the pointers on console on exit. If everything gone right
then it prints message about all tracked pointers were removed. Otherwise
it prints summary of left pointers in the tracker. Added pointer should
be removed with pair function camel_pointer_tracker_untrack().

See camel_pointer_tracker_dump(), camel_pointer_tracker_track_with_info().</doc>
      <source-position filename="src/camel/camel-debug.h" line="140"/>
      <parameters>
        <parameter name="ptr">
          <doc xml:space="preserve"
               filename="src/camel/camel-debug.h"
               line="126">pointer to add to pointer tracker</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function name="pointer_tracker_track_with_info"
              c:identifier="camel_pointer_tracker_track_with_info"
              version="3.6">
      <doc xml:space="preserve"
           filename="src/camel/camel-debug.c"
           line="712">Adds pointer to the pointer tracker, with associated information,
which is printed in summary of pointer tracker printed by
camel_pointer_tracker_dump(). For convenience can be used
camel_pointer_tracker_track(), which adds place of the caller
as @info. Added pointer should be removed with pair function
camel_pointer_tracker_untrack().</doc>
      <source-position filename="src/camel/camel-debug.h" line="143"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ptr"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-debug.c"
               line="714">pointer to add to the pointer tracker</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="info" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-debug.c"
               line="715">info to print in tracker summary</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pointer_tracker_untrack"
              c:identifier="camel_pointer_tracker_untrack"
              version="3.6">
      <doc xml:space="preserve"
           filename="src/camel/camel-debug.c"
           line="750">Removes pointer from the pointer tracker. It's an error to try
to remove pointer which was not added to the tracker by
camel_pointer_tracker_track() or camel_pointer_tracker_track_with_info(),
or a pointer which was already removed.</doc>
      <source-position filename="src/camel/camel-debug.h" line="146"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ptr"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-debug.c"
               line="752">pointer to remove from the tracker</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="provider_get"
              c:identifier="camel_provider_get"
              moved-to="Provider.get"
              throws="1">
      <doc xml:space="preserve"
           filename="src/camel/camel-provider.c"
           line="456">Returns the registered #CamelProvider for @protocol, loading it
from disk if necessary.  If no #CamelProvider can be found for
@protocol, or the provider module fails to load, the function
sets @error and returns %NULL.

The returned #CamelProvider is owned by Camel and should not be
modified or freed.</doc>
      <source-position filename="src/camel/camel-provider.h" line="223"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/camel/camel-provider.c"
             line="469">a #CamelProvider for @protocol, or %NULL on error</doc>
        <type name="Provider" c:type="CamelProvider*"/>
      </return-value>
      <parameters>
        <parameter name="protocol" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-provider.c"
               line="458">a #CamelProvider protocol name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="provider_init"
              c:identifier="camel_provider_init"
              moved-to="Provider.init">
      <doc xml:space="preserve"
           filename="src/camel/camel-provider.c"
           line="254">Initialize the Camel provider system by reading in the .urls
files in the provider directory and creating a hash table mapping
URLs to module names.

A .urls file has the same initial prefix as the shared library it
correspond to, and consists of a series of lines containing the URL
protocols that that library handles.

TODO: This should be pathed?
TODO: This should be plugin-d?</doc>
      <source-position filename="src/camel/camel-provider.h" line="218"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="provider_list"
              c:identifier="camel_provider_list"
              moved-to="Provider.list">
      <doc xml:space="preserve"
           filename="src/camel/camel-provider.c"
           line="398">This returns a list of available providers. If @load is %TRUE, it will
first load in all available providers that haven't yet been loaded.

Free the returned list with g_list_free().  The #CamelProvider structs
in the list are owned by Camel and should not be modified or freed.</doc>
      <source-position filename="src/camel/camel-provider.h" line="222"/>
      <return-value transfer-ownership="container">
        <doc xml:space="preserve"
             filename="src/camel/camel-provider.c"
             line="408">a #GList of #CamelProvider structs</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="Provider"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="load" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-provider.c"
               line="400">whether or not to load in providers that are not already loaded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="provider_load"
              c:identifier="camel_provider_load"
              moved-to="Provider.load"
              throws="1">
      <doc xml:space="preserve"
           filename="src/camel/camel-provider.c"
           line="312">Loads the provider at @path, and calls its initialization function,
passing @session as an argument. The provider should then register
itself with @session.</doc>
      <source-position filename="src/camel/camel-provider.h" line="219"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-provider.c"
             line="321">%TRUE on success, %FALSE on failure</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-provider.c"
               line="314">the path to a shared library</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="provider_module_init"
              c:identifier="camel_provider_module_init"
              moved-to="ProviderModule.init">
      <source-position filename="src/camel/camel-provider.h" line="227"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="pstring_add" c:identifier="camel_pstring_add">
      <doc xml:space="preserve"
           filename="src/camel/camel-string-utils.c"
           line="144">Add @string to the pool.

The %NULL and empty strings are special cased to constant values.

Unreference the returned string with camel_pstring_free().</doc>
      <source-position filename="src/camel/camel-string-utils.h" line="38"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-string-utils.c"
             line="156">a canonicalized copy of @string</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="string"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-string-utils.c"
               line="146">string to add to the string pool</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="own" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-string-utils.c"
               line="147">whether the string pool will own the memory pointed to by
      @string, if @string is not yet in the pool</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="pstring_contains"
              c:identifier="camel_pstring_contains"
              version="3.22">
      <doc xml:space="preserve"
           filename="src/camel/camel-string-utils.c"
           line="244">Returns whether the @string exists in the string pool.

The %NULL and empty strings are special cased to constant values.</doc>
      <source-position filename="src/camel/camel-string-utils.h" line="42"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-string-utils.c"
             line="252">Whether the @string exists in the string pool</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="string"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-string-utils.c"
               line="246">string to look up in the string pool</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pstring_dump_stat"
              c:identifier="camel_pstring_dump_stat"
              version="3.6">
      <doc xml:space="preserve"
           filename="src/camel/camel-string-utils.c"
           line="337">Dumps to stdout memory statistic about the string pool.</doc>
      <source-position filename="src/camel/camel-string-utils.h" line="43"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="pstring_free" c:identifier="camel_pstring_free">
      <doc xml:space="preserve"
           filename="src/camel/camel-string-utils.c"
           line="299">Unreferences a pooled string.  If the string's reference count drops to
zero it will be deallocated.  %NULL and the empty string are special cased.</doc>
      <source-position filename="src/camel/camel-string-utils.h" line="40"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="string"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-string-utils.c"
               line="301">string to free</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pstring_peek"
              c:identifier="camel_pstring_peek"
              version="2.24">
      <doc xml:space="preserve"
           filename="src/camel/camel-string-utils.c"
           line="199">Returns the canonicalized copy of @string without increasing its
reference count in the string pool.  If necessary, @string is first
added to the string pool.

The %NULL and empty strings are special cased to constant values.</doc>
      <source-position filename="src/camel/camel-string-utils.h" line="41"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-string-utils.c"
             line="209">a canonicalized copy of @string</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="string"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-string-utils.c"
               line="201">string to fetch from the string pool</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pstring_strdup" c:identifier="camel_pstring_strdup">
      <doc xml:space="preserve"
           filename="src/camel/camel-string-utils.c"
           line="279">Create a new pooled string entry for @strings.  A pooled string
is a table where common strings are canonicalized.  They are also
reference counted and freed when no longer referenced.

The %NULL and empty strings are special cased to constant values.

Unreference the returned string with camel_pstring_free().</doc>
      <source-position filename="src/camel/camel-string-utils.h" line="39"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-string-utils.c"
             line="291">a canonicalized copy of @string</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="string"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-string-utils.c"
               line="281">string to copy</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quoted_decode_step"
              c:identifier="camel_quoted_decode_step">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-utils.c"
           line="643">Decodes a block of quoted-printable encoded data. Performs a
'decode step' on a chunk of QP encoded data.</doc>
      <source-position filename="src/camel/camel-mime-utils.h" line="210"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="654">the number of bytes decoded</doc>
        <type name="gsize" c:type="gsize"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="645">input stream</doc>
          <array length="1" zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="646">max length of data to decode</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="out"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="647">output stream</doc>
          <array zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </parameter>
        <parameter name="savestate"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="648">holds the number of bits that are stored in @saveme</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="saveme"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="649">leftover bits that have not yet been decoded</doc>
          <array length="3" zero-terminated="0" c:type="gint*">
            <type name="gint" c:type="gint"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="quoted_encode_close"
              c:identifier="camel_quoted_encode_close">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-utils.c"
           line="488">Quoted-printable encodes a block of text. Call this when finished
encoding data with camel_quoted_encode_step() to flush off
the last little bit.</doc>
      <source-position filename="src/camel/camel-mime-utils.h" line="213"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="500">the number of bytes encoded</doc>
        <type name="gsize" c:type="gsize"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="490">input stream</doc>
          <array length="1" zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="491">length of the input</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="out"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="492">output string</doc>
          <array zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </parameter>
        <parameter name="state"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="493">holds the number of bits that are stored in @save</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="save"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="494">leftover bits that have not yet been encoded</doc>
          <array length="3" zero-terminated="0" c:type="gint*">
            <type name="gint" c:type="gint"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="quoted_encode_step"
              c:identifier="camel_quoted_encode_step">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-utils.c"
           line="534">Quoted-printable encodes a block of text. Performs an 'encode
step', saves left-over state in state and save (initialise to -1 on
first invocation).</doc>
      <source-position filename="src/camel/camel-mime-utils.h" line="212"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="546">the number of bytes encoded</doc>
        <type name="gsize" c:type="gsize"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="536">input stream</doc>
          <array length="1" zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="537">length of the input</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="out"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="538">output string</doc>
          <array zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </parameter>
        <parameter name="state"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="539">holds the number of bits that are stored in @save</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="save"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="540">leftover bits that have not yet been encoded</doc>
          <array length="3" zero-terminated="0" c:type="gint*">
            <type name="gint" c:type="gint"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="read" c:identifier="camel_read" throws="1">
      <doc xml:space="preserve"
           filename="src/camel/camel-file-utils.c"
           line="443">Cancellable libc read() replacement.

Code that intends to be portable to Win32 should call this function
only on file descriptors returned from open(), not on sockets.</doc>
      <source-position filename="src/camel/camel-file-utils.h" line="65"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-file-utils.c"
             line="456">number of bytes read or -1 on fail. On failure, errno will
be set appropriately.</doc>
        <type name="gssize" c:type="gssize"/>
      </return-value>
      <parameters>
        <parameter name="fd" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="445">file descriptor</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="buf" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="446">buffer to fill</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="447">number of bytes to read into @buf</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="448">optional #GCancellable object, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="search_build_match_regex"
              c:identifier="camel_search_build_match_regex"
              introspectable="0"
              throws="1">
      <source-position filename="src/camel/camel-search-private.h" line="57"/>
      <return-value transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="pattern" transfer-ownership="none">
          <type c:type="regex_t*"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <type name="_search_flags_t" c:type="camel_search_flags_t"/>
        </parameter>
        <parameter name="argc" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="argv" transfer-ownership="none">
          <type name="SExpResult" c:type="CamelSExpResult**"/>
        </parameter>
      </parameters>
    </function>
    <function name="search_camel_header_soundex"
              c:identifier="camel_search_camel_header_soundex">
      <source-position filename="src/camel/camel-search-private.h" line="71"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="header" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="match" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="search_get_all_headers_decoded"
              c:identifier="camel_search_get_all_headers_decoded"
              version="3.22">
      <source-position filename="src/camel/camel-search-private.h" line="113"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/camel/camel-search-private.c"
             line="928">All headers of the @message, decoded where needed.
   Free the returned pointer with g_free() when done with it.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-search-private.c"
               line="926">a #CamelMessage</doc>
          <type name="MimeMessage" c:type="CamelMimeMessage*"/>
        </parameter>
      </parameters>
    </function>
    <function name="search_get_default_charset_from_headers"
              c:identifier="camel_search_get_default_charset_from_headers"
              version="3.28">
      <source-position filename="src/camel/camel-search-private.h" line="106"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-search-private.c"
             line="803">Default charset from the Content-Type header of the @headers; if none cannot be determined,
   UTF-8 is returned.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="headers" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-search-private.c"
               line="801">a #CamelNameValueArray</doc>
          <type name="NameValueArray" c:type="const CamelNameValueArray*"/>
        </parameter>
      </parameters>
    </function>
    <function name="search_get_default_charset_from_message"
              c:identifier="camel_search_get_default_charset_from_message"
              version="3.22">
      <source-position filename="src/camel/camel-search-private.h" line="104"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-search-private.c"
             line="776">Default charset of the @message; if none cannot be determined,
   UTF-8 is returned.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-search-private.c"
               line="774">a #CamelMimeMessage</doc>
          <type name="MimeMessage" c:type="CamelMimeMessage*"/>
        </parameter>
      </parameters>
    </function>
    <function name="search_get_header_decoded"
              c:identifier="camel_search_get_header_decoded"
              version="3.22">
      <doc xml:space="preserve"
           filename="src/camel/camel-search-private.c"
           line="829">Decodes @header_value, if needed, either from an address header
or the Subject header. Other @header_name headers are returned
as is.</doc>
      <source-position filename="src/camel/camel-search-private.h" line="108"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/camel/camel-search-private.c"
             line="839">decoded header value, suitable for text comparison.
   Free the returned pointer with g_free() when done with it.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="header_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-search-private.c"
               line="831">the header name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="header_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-search-private.c"
               line="832">the header value</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="default_charset"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-search-private.c"
               line="833">the default charset to use for the decode, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="search_get_headers_decoded"
              c:identifier="camel_search_get_headers_decoded"
              version="3.28">
      <source-position filename="src/camel/camel-search-private.h" line="111"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/camel/camel-search-private.c"
             line="874">The @headers, decoded where needed.
   Free the returned pointer with g_free() when done with it.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="headers" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-search-private.c"
               line="871">a #CamelNameValueArray</doc>
          <type name="NameValueArray" c:type="const CamelNameValueArray*"/>
        </parameter>
        <parameter name="default_charset"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-search-private.c"
               line="872">default charset to use; or %NULL, to detect from Content-Type of @headers</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="search_header_is_address"
              c:identifier="camel_search_header_is_address"
              version="3.22">
      <source-position filename="src/camel/camel-search-private.h" line="103"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-search-private.c"
             line="741">Whether the @header_name is a header with a mail address</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="header_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-search-private.c"
               line="739">A header name, like "Subject"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="search_header_match"
              c:identifier="camel_search_header_match">
      <source-position filename="src/camel/camel-search-private.h" line="66"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="match" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="how" transfer-ownership="none">
          <type name="_search_match_t" c:type="camel_search_match_t"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <type name="_search_t" c:type="camel_search_t"/>
        </parameter>
        <parameter name="default_charset" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="search_message_body_contains"
              c:identifier="camel_search_message_body_contains"
              introspectable="0">
      <source-position filename="src/camel/camel-search-private.h" line="62"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <type name="DataWrapper" c:type="CamelDataWrapper*"/>
        </parameter>
        <parameter name="pattern" transfer-ownership="none">
          <type c:type="regex_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="search_words_free" c:identifier="camel_search_words_free">
      <source-position filename="src/camel/camel-search-private.h" line="101"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="words"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="_camel_search_words*"/>
        </parameter>
      </parameters>
    </function>
    <function name="search_words_simple"
              c:identifier="camel_search_words_simple">
      <source-position filename="src/camel/camel-search-private.h" line="100"/>
      <return-value transfer-ownership="none" nullable="1">
        <type name="gpointer" c:type="_camel_search_words*"/>
      </return-value>
      <parameters>
        <parameter name="words"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="_camel_search_words*"/>
        </parameter>
      </parameters>
    </function>
    <function name="search_words_split"
              c:identifier="camel_search_words_split">
      <source-position filename="src/camel/camel-search-private.h" line="98"/>
      <return-value transfer-ownership="none" nullable="1">
        <type name="gpointer" c:type="_camel_search_words*"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <type name="guint8" c:type="const guchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="service_error_quark"
              c:identifier="camel_service_error_quark"
              moved-to="ServiceError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="shutdown" c:identifier="camel_shutdown" version="2.24">
      <source-position filename="src/camel/camel.h" line="157"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="store_error_quark"
              c:identifier="camel_store_error_quark"
              moved-to="StoreError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="store_info_name"
              c:identifier="camel_store_info_name"
              moved-to="StoreInfo.name"
              deprecated="1"
              deprecated-version="3.46">
      <doc xml:space="preserve"
           filename="src/camel/camel-store-summary.c"
           line="933">Returns the last segment of the path string from @info.</doc>
      <doc-deprecated xml:space="preserve">Use camel_store_info_get_name() instead.</doc-deprecated>
      <source-position filename="src/camel/camel-store-summary.h" line="184"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-summary.c"
             line="940">the last segment of the path string from @info</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="summary" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store-summary.c"
               line="935">a #CamelStoreSummary</doc>
          <type name="StoreSummary" c:type="CamelStoreSummary*"/>
        </parameter>
        <parameter name="info" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store-summary.c"
               line="936">a #CamelStoreInfo</doc>
          <type name="StoreInfo" c:type="CamelStoreInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="store_info_path"
              c:identifier="camel_store_info_path"
              moved-to="StoreInfo.path"
              deprecated="1"
              deprecated-version="3.46">
      <doc xml:space="preserve"
           filename="src/camel/camel-store-summary.c"
           line="911">Returns the path string from @info.</doc>
      <doc-deprecated xml:space="preserve">Use camel_store_info_get_path() instead.</doc-deprecated>
      <source-position filename="src/camel/camel-store-summary.h" line="182"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-store-summary.c"
             line="918">the path string from @info</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="summary" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store-summary.c"
               line="913">a #CamelStoreSummary</doc>
          <type name="StoreSummary" c:type="CamelStoreSummary*"/>
        </parameter>
        <parameter name="info" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store-summary.c"
               line="914">a #CamelStoreInfo</doc>
          <type name="StoreInfo" c:type="CamelStoreInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="store_info_set_string"
              c:identifier="camel_store_info_set_string"
              moved-to="StoreInfo.set_string"
              deprecated="1"
              deprecated-version="3.46">
      <doc xml:space="preserve"
           filename="src/camel/camel-store-summary.c"
           line="803">Set a specific string on the @info.</doc>
      <doc-deprecated xml:space="preserve">Use camel_store_info_set_value() instead.</doc-deprecated>
      <source-position filename="src/camel/camel-store-summary.h" line="178"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="summary" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store-summary.c"
               line="805">a #CamelStoreSummary object</doc>
          <type name="StoreSummary" c:type="CamelStoreSummary*"/>
        </parameter>
        <parameter name="info" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store-summary.c"
               line="806">a #CamelStoreInfo</doc>
          <type name="StoreInfo" c:type="CamelStoreInfo*"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store-summary.c"
               line="807">specific string being set</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-store-summary.c"
               line="808">string value to set</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="strcase_equal" c:identifier="camel_strcase_equal">
      <source-position filename="src/camel/camel-string-utils.h" line="31"/>
      <return-value transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="a"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
        <parameter name="b"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="strcase_hash" c:identifier="camel_strcase_hash">
      <source-position filename="src/camel/camel-string-utils.h" line="32"/>
      <return-value transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="v"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="strdown" c:identifier="camel_strdown">
      <source-position filename="src/camel/camel-string-utils.h" line="36"/>
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="string_is_all_ascii"
              c:identifier="camel_string_is_all_ascii"
              version="3.44">
      <source-position filename="src/camel/camel-string-utils.h" line="45"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-string-utils.c"
             line="382">%TRUE, when the @str is %NULL, an empty string or when
   it contains only ASCII letters.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="str"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-string-utils.c"
               line="380">a string to check, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="strstrcase" c:identifier="camel_strstrcase">
      <source-position filename="src/camel/camel-string-utils.h" line="34"/>
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="haystack" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="needle" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="system_flag" c:identifier="camel_system_flag">
      <source-position filename="src/camel/camel-folder-summary.h" line="265"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="3373">the integer value of the system flag string</doc>
        <type name="MessageFlags" c:type="CamelMessageFlags"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="3371">name of a system flag</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="system_flag_get" c:identifier="camel_system_flag_get">
      <doc xml:space="preserve"
           filename="src/camel/camel-folder-summary.c"
           line="3389">Find the state of the flag @name in @flags.</doc>
      <source-position filename="src/camel/camel-folder-summary.h" line="266"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-folder-summary.c"
             line="3396">%TRUE if the named flag is set or %FALSE otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="3391">bitwise system flags</doc>
          <type name="MessageFlags" c:type="CamelMessageFlags"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-folder-summary.c"
               line="3392">name of the flag to check for</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="text_to_html" c:identifier="camel_text_to_html">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-filter-tohtml.c"
           line="725">Convert @in from plain text into HTML.</doc>
      <source-position filename="src/camel/camel-mime-filter-tohtml.h"
                       line="74"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter-tohtml.c"
             line="733">a newly allocated string containing the HTMLified version
of @in</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-tohtml.c"
               line="727">input text</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-tohtml.c"
               line="728">bitwise flags defining the html conversion behaviour</doc>
          <type name="MimeFilterToHTMLFlags"
                c:type="CamelMimeFilterToHTMLFlags"/>
        </parameter>
        <parameter name="color" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-tohtml.c"
               line="729">color to use when syntax highlighting</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="time_value_apply"
              c:identifier="camel_time_value_apply"
              version="3.24">
      <doc xml:space="preserve"
           filename="src/camel/camel-utils.c"
           line="175">Applies the given time @value in unit @unit to the @src_time.
Use negative value to subtract it. The time part is rounded
to the beginning of the day.</doc>
      <source-position filename="src/camel/camel-utils.h" line="44"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-utils.c"
             line="185">@src_time modified by the given parameters as date, with
   the time part being beginning of the day.</doc>
        <type name="glong" c:type="time_t"/>
      </return-value>
      <parameters>
        <parameter name="src_time" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-utils.c"
               line="177">a time_t to apply the value to, or -1 to use the current time</doc>
          <type name="glong" c:type="time_t"/>
        </parameter>
        <parameter name="unit" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-utils.c"
               line="178">a #CamelTimeUnit</doc>
          <type name="TimeUnit" c:type="CamelTimeUnit"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-utils.c"
               line="179">a value to apply</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="transfer_encoding_from_string"
              c:identifier="camel_transfer_encoding_from_string"
              moved-to="TransferEncoding.from_string">
      <source-position filename="src/camel/camel-mime-utils.h" line="198"/>
      <return-value transfer-ownership="none">
        <type name="TransferEncoding" c:type="CamelTransferEncoding"/>
      </return-value>
      <parameters>
        <parameter name="string" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="transfer_encoding_to_string"
              c:identifier="camel_transfer_encoding_to_string"
              moved-to="TransferEncoding.to_string">
      <source-position filename="src/camel/camel-mime-utils.h" line="197"/>
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="encoding" transfer-ownership="none">
          <type name="TransferEncoding" c:type="CamelTransferEncoding"/>
        </parameter>
      </parameters>
    </function>
    <function name="trie_new"
              c:identifier="camel_trie_new"
              moved-to="Trie.new"
              version="2.24"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/camel/camel-trie.c"
           line="108">Creates a new #CamelTrie. If @icase is %TRUE, then pattern matching
done by the CamelTrie will be case insensitive.</doc>
      <source-position filename="src/camel/camel-trie.h" line="32"/>
      <return-value>
        <doc xml:space="preserve"
             filename="src/camel/camel-trie.c"
             line="115">The newly-created #CamelTrie.</doc>
        <type name="Trie" c:type="CamelTrie*"/>
      </return-value>
      <parameters>
        <parameter name="icase" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-trie.c"
               line="110">Case sensitivity for the #CamelTrie.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="ucs2_utf8" c:identifier="camel_ucs2_utf8">
      <doc xml:space="preserve"
           filename="src/camel/camel-utf8.c"
           line="390">Convert a ucs2 string into a UTF-8 one. The ucs2 string is treated
as network byte ordered, and terminated with a 16-bit %NULL.</doc>
      <source-position filename="src/camel/camel-utf8.h" line="41"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/camel/camel-utf8.c"
             line="397">The converted string. Free it with g_free(),
   when no longer needed.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="ptr" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-utf8.c"
               line="392">a ucs2 string to convert</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="uid_cache_free_uids"
              c:identifier="camel_uid_cache_free_uids"
              moved-to="UIDCache.free_uids">
      <doc xml:space="preserve"
           filename="src/camel/camel-uid-cache.c"
           line="321">Frees the array of UIDs.</doc>
      <source-position filename="src/camel/camel-uid-cache.h" line="51"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="uids" transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-uid-cache.c"
               line="323">an array returned from camel_uid_cache_get_new_uids()</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="utf8"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="uid_cache_new"
              c:identifier="camel_uid_cache_new"
              moved-to="UIDCache.new"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/camel/camel-uid-cache.c"
           line="40">Creates a new UID cache, initialized from @filename. If @filename
doesn't already exist, the UID cache will be empty. Otherwise, if
it does exist but can't be read, the function will return %NULL.</doc>
      <source-position filename="src/camel/camel-uid-cache.h" line="44"/>
      <return-value nullable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-uid-cache.c"
             line="48">a new UID cache, or %NULL</doc>
        <type name="UIDCache" c:type="CamelUIDCache*"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-uid-cache.c"
               line="42">path to load the cache from</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="unlock_dot" c:identifier="camel_unlock_dot">
      <doc xml:space="preserve"
           filename="src/camel/camel-lock.c"
           line="162">Attempt to unlock a .lock lock.

The function does nothing, when dot locking had not been compiled.</doc>
      <source-position filename="src/camel/camel-lock.h" line="50"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-lock.c"
               line="164">a path to unlock</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="unlock_fcntl" c:identifier="camel_unlock_fcntl">
      <doc xml:space="preserve"
           filename="src/camel/camel-lock.c"
           line="236">Unlock an fcntl lock.

The function does nothing, when fcntl locking had not been compiled.</doc>
      <source-position filename="src/camel/camel-lock.h" line="51"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="fd" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-lock.c"
               line="238">a file descriptor</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="unlock_flock" c:identifier="camel_unlock_flock">
      <doc xml:space="preserve"
           filename="src/camel/camel-lock.c"
           line="301">Unlock an flock lock.

The function does nothing, when flock locking had not been compiled.</doc>
      <source-position filename="src/camel/camel-lock.h" line="52"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="fd" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-lock.c"
               line="303">a file descriptor</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="unlock_folder" c:identifier="camel_unlock_folder">
      <doc xml:space="preserve"
           filename="src/camel/camel-lock.c"
           line="357">Free a lock on a folder.</doc>
      <source-position filename="src/camel/camel-lock.h" line="56"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-lock.c"
               line="359">Filename of folder.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="fd" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-lock.c"
               line="360">Open descrptor on which locks were placed.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="url_addrspec_end"
              c:identifier="camel_url_addrspec_end"
              moved-to="URL.addrspec_end">
      <source-position filename="src/camel/camel-url-scanner.h" line="47"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="pos" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="inend" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="match" transfer-ownership="none">
          <type name="UrlMatch" c:type="CamelUrlMatch*"/>
        </parameter>
      </parameters>
    </function>
    <function name="url_addrspec_start"
              c:identifier="camel_url_addrspec_start"
              moved-to="URL.addrspec_start">
      <source-position filename="src/camel/camel-url-scanner.h" line="46"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="pos" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="inend" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="match" transfer-ownership="none">
          <type name="UrlMatch" c:type="CamelUrlMatch*"/>
        </parameter>
      </parameters>
    </function>
    <function name="url_decode"
              c:identifier="camel_url_decode"
              moved-to="URL.decode">
      <doc xml:space="preserve"
           filename="src/camel/camel-url.c"
           line="672">&amp;percnt;-decodes the passed-in URL *in place*. The decoded version is
never longer than the encoded version, so there does not need to
be any additional space at the end of the string.</doc>
      <source-position filename="src/camel/camel-url.h" line="73"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="part" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-url.c"
               line="674">a URL part</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="url_decode_path"
              c:identifier="camel_url_decode_path"
              moved-to="URL.decode_path">
      <source-position filename="src/camel/camel-url.h" line="74"/>
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="url_encode"
              c:identifier="camel_url_encode"
              moved-to="URL.encode">
      <doc xml:space="preserve"
           filename="src/camel/camel-url.c"
           line="647">This &amp;percnt;-encodes the given URL part and returns the escaped version
in allocated memory, which the caller must free when it is done.</doc>
      <source-position filename="src/camel/camel-url.h" line="71"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/camel/camel-url.c"
             line="656">the encoded string</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="part" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-url.c"
               line="649">a URL part</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="escape_extra"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-url.c"
               line="650">additional characters beyond " \"%#&lt;&gt;{}|\^[]`"
to escape (or %NULL)</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="url_file_end"
              c:identifier="camel_url_file_end"
              moved-to="URL.file_end">
      <source-position filename="src/camel/camel-url-scanner.h" line="43"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="pos" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="inend" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="match" transfer-ownership="none">
          <type name="UrlMatch" c:type="CamelUrlMatch*"/>
        </parameter>
      </parameters>
    </function>
    <function name="url_file_start"
              c:identifier="camel_url_file_start"
              moved-to="URL.file_start">
      <source-position filename="src/camel/camel-url-scanner.h" line="42"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="pos" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="inend" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="match" transfer-ownership="none">
          <type name="UrlMatch" c:type="CamelUrlMatch*"/>
        </parameter>
      </parameters>
    </function>
    <function name="url_scanner_new"
              c:identifier="camel_url_scanner_new"
              moved-to="UrlScanner.new"
              introspectable="0">
      <source-position filename="src/camel/camel-url-scanner.h" line="58"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/camel/camel-url-scanner.c"
             line="38">Creates a new #CamelUrlScanner</doc>
        <type name="UrlScanner" c:type="CamelUrlScanner*"/>
      </return-value>
    </function>
    <function name="url_web_end"
              c:identifier="camel_url_web_end"
              moved-to="URL.web_end">
      <source-position filename="src/camel/camel-url-scanner.h" line="45"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="pos" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="inend" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="match" transfer-ownership="none">
          <type name="UrlMatch" c:type="CamelUrlMatch*"/>
        </parameter>
      </parameters>
    </function>
    <function name="url_web_start"
              c:identifier="camel_url_web_start"
              moved-to="URL.web_start">
      <source-position filename="src/camel/camel-url-scanner.h" line="44"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="pos" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="inend" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="match" transfer-ownership="none">
          <type name="UrlMatch" c:type="CamelUrlMatch*"/>
        </parameter>
      </parameters>
    </function>
    <function name="ustrstrcase" c:identifier="camel_ustrstrcase">
      <source-position filename="src/camel/camel-search-private.h" line="76"/>
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="haystack" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="needle" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utf7_utf8" c:identifier="camel_utf7_utf8">
      <doc xml:space="preserve"
           filename="src/camel/camel-utf8.c"
           line="188">Convert a modified UTF-7 string to UTF-8.  If the UTF-7 string
contains 8 bit characters, they are treated as iso-8859-1.

The IMAP rules [rfc2060] are used in the UTF-7 encoding.</doc>
      <source-position filename="src/camel/camel-utf8.h" line="36"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/camel/camel-utf8.c"
             line="197">The converted string. Free it with g_free(),
   when no longer needed.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="ptr" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-utf8.c"
               line="190">a UTF-7 string to convert</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utf8_getc" c:identifier="camel_utf8_getc">
      <doc xml:space="preserve"
           filename="src/camel/camel-utf8.c"
           line="61">Get a Unicode character from a UTF-8 stream.  @ptr will be advanced
to the next character position.  Invalid utf8 characters will be
silently skipped. The @ptr should point to a NUL terminated array.</doc>
      <source-position filename="src/camel/camel-utf8.h" line="32"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-utf8.c"
             line="69">The next Unicode character. The @ptr will be advanced to
   the next character always.</doc>
        <type name="guint32" c:type="guint32"/>
      </return-value>
      <parameters>
        <parameter name="ptr"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-utf8.c"
               line="63">a pointer to read the character from</doc>
          <type name="guint8" c:type="const guchar**"/>
        </parameter>
      </parameters>
    </function>
    <function name="utf8_getc_limit" c:identifier="camel_utf8_getc_limit">
      <doc xml:space="preserve"
           filename="src/camel/camel-utf8.c"
           line="109">Get the next UTF-8 gchar at @ptr, and return it, advancing @ptr to
the next character. If @end is reached before a full UTF-8
character can be read, then the invalid Unicode gchar 0xffff is
returned as a sentinel (Unicode 3.1, section 2.7), and @ptr is not
advanced.</doc>
      <source-position filename="src/camel/camel-utf8.h" line="33"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-utf8.c"
             line="120">The next UTF-8 char, or 0xffff.</doc>
        <type name="guint32" c:type="guint32"/>
      </return-value>
      <parameters>
        <parameter name="ptr"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-utf8.c"
               line="111">a pointer to read the character from</doc>
          <type name="guint8" c:type="const guchar**"/>
        </parameter>
        <parameter name="end" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-utf8.c"
               line="112">upper limit for the read, must not be %NULL</doc>
          <type name="guint8" c:type="const guchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utf8_make_valid"
              c:identifier="camel_utf8_make_valid"
              version="2.26">
      <doc xml:space="preserve"
           filename="src/camel/camel-utf8.c"
           line="417">Ensures the returned text will be valid UTF-8 string, with incorrect letters
changed to question marks.</doc>
      <source-position filename="src/camel/camel-utf8.h" line="44"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/camel/camel-utf8.c"
             line="424">Valid UTF-8 string, with replaced incorrect letters.
   Free it with g_free(), when no longer needed.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-utf8.c"
               line="419">a text to make valid</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utf8_make_valid_len"
              c:identifier="camel_utf8_make_valid_len"
              version="3.34">
      <doc xml:space="preserve"
           filename="src/camel/camel-utf8.c"
           line="435">Ensures the returned text will be valid UTF-8 string, with incorrect letters
changed to question marks.</doc>
      <source-position filename="src/camel/camel-utf8.h" line="45"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/camel/camel-utf8.c"
             line="443">Valid UTF-8 string, with replaced incorrect letters.
   Free it with g_free(), when no longer needed.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-utf8.c"
               line="437">a text to make valid</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="text_len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-utf8.c"
               line="438">length of the @text, or -1 if NUL-terminated</doc>
          <type name="gssize" c:type="gssize"/>
        </parameter>
      </parameters>
    </function>
    <function name="utf8_putc" c:identifier="camel_utf8_putc">
      <doc xml:space="preserve"
           filename="src/camel/camel-utf8.c"
           line="27">Output a 32 bit unicode character as UTF-8 octets.  At most 4 octets will
be written to @ptr. The @ptr will be advanced to the next character position.</doc>
      <source-position filename="src/camel/camel-utf8.h" line="31"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ptr"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-utf8.c"
               line="29">pointer to write the character to</doc>
          <type name="guint8" c:type="guchar**"/>
        </parameter>
        <parameter name="c" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-utf8.c"
               line="30">a Unicode character to write</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="utf8_ucs2" c:identifier="camel_utf8_ucs2">
      <doc xml:space="preserve"
           filename="src/camel/camel-utf8.c"
           line="356">Convert a UTF-8 string into a ucs2 one. The ucs string will be in
network byte order, and terminated with a 16-bit %NULL.</doc>
      <source-position filename="src/camel/camel-utf8.h" line="40"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/camel/camel-utf8.c"
             line="363">The converted string. Free it with g_free(),
   when no longer needed.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="ptr" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-utf8.c"
               line="358">a UTF-8 string to convert</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utf8_utf7" c:identifier="camel_utf8_utf7">
      <doc xml:space="preserve"
           filename="src/camel/camel-utf8.c"
           line="286">Convert a UTF-8 string to a modified UTF-7 format.

The IMAP rules [rfc2060] are used in the UTF-7 encoding.</doc>
      <source-position filename="src/camel/camel-utf8.h" line="37"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/camel/camel-utf8.c"
             line="294">The converted string. Free it with g_free(),
   when no longer needed.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="ptr" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-utf8.c"
               line="288">a UTF-8 string to convert</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_bdata_get_number"
              c:identifier="camel_util_bdata_get_number"
              version="3.24">
      <doc xml:space="preserve"
           filename="src/camel/camel-utils.c"
           line="27">Reads a numeric data from the @bdata_ptr and moves the @bdata_ptr
after that number. If the number cannot be read, then the @default_value
is returned instead and the @bdata_ptr is left unchanged. The number
might be previously stored with the camel_util_bdata_put_number().</doc>
      <source-position filename="src/camel/camel-utils.h" line="35"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-utils.c"
             line="37">The read number, or the @default_value, if the @bdata_ptr doesn't
   point to a number.</doc>
        <type name="gint64" c:type="gint64"/>
      </return-value>
      <parameters>
        <parameter name="bdata_ptr" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-utils.c"
               line="29">a backend specific data (bdata) pointer</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="default_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-utils.c"
               line="30">a value to return, when no data can be read</doc>
          <type name="gint64" c:type="gint64"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_bdata_get_string"
              c:identifier="camel_util_bdata_get_string"
              version="3.24">
      <doc xml:space="preserve"
           filename="src/camel/camel-utils.c"
           line="95">Reads a string data from the @bdata_ptr and moves the @bdata_ptr
after that string. If the string cannot be read, then the @default_value
is returned instead and the @bdata_ptr is left unchanged. The string
might be previously stored with the camel_util_bdata_put_string().</doc>
      <source-position filename="src/camel/camel-utils.h" line="39"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/camel/camel-utils.c"
             line="105">Newly allocated string, which was read, or
   dupped the @default_value, if the @bdata_ptr doesn't point to a string.
   Free returned pointer with g_free() when done with it.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="bdata_ptr" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-utils.c"
               line="97">a backend specific data (bdata) pointer</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="default_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-utils.c"
               line="98">a value to return, when no data can be read</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_bdata_put_number"
              c:identifier="camel_util_bdata_put_number"
              version="3.24">
      <doc xml:space="preserve"
           filename="src/camel/camel-utils.c"
           line="72">Puts the number @value at the end of the @bdata_str. In case the @bdata_str
is not empty a space is added before the numeric @value. The stored value
can be read back with the camel_util_bdata_get_number().</doc>
      <source-position filename="src/camel/camel-utils.h" line="37"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="bdata_str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-utils.c"
               line="74">a #GString to store a backend specific data (bdata)</doc>
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-utils.c"
               line="75">a value to store</doc>
          <type name="gint64" c:type="gint64"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_bdata_put_string"
              c:identifier="camel_util_bdata_put_string"
              version="3.24">
      <doc xml:space="preserve"
           filename="src/camel/camel-utils.c"
           line="150">Puts the string @value at the end of the @bdata_str. In case the @bdata_str
is not empty a space is added before the string @value. The stored value
can be read back with the camel_util_bdata_get_string().

The strings are encoded as "length-value", quotes for clarity only.</doc>
      <source-position filename="src/camel/camel-utils.h" line="41"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="bdata_str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-utils.c"
               line="152">a #GString to store a backend specific data (bdata)</doc>
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-utils.c"
               line="153">a value to store</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_decode_user_header_setting"
              c:identifier="camel_util_decode_user_header_setting"
              version="3.42">
      <doc xml:space="preserve"
           filename="src/camel/camel-utils.c"
           line="479">Decode the values previously encoded by camel_util_encode_user_header_setting().
The @out_header_name points to the @setting_value, thus it's valid as long
as the @setting_value is valid and unchanged.

The @out_header_name can result in %NULL when the @setting_value
contains invalid data.

The @out_display_name can result in %NULL when the @setting_value
does not contain the display name. In such case the header name can
be used as the display name.</doc>
      <source-position filename="src/camel/camel-utils.h" line="57"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="setting_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-utils.c"
               line="481">the value to decode</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="out_display_name"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   nullable="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-utils.c"
               line="482">location for the decoded display name, or %NULL when not needed</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="out_header_name"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-utils.c"
               line="483">the location for the decoded header name</doc>
          <type name="utf8" c:type="const gchar**"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_encode_user_header_setting"
              c:identifier="camel_util_encode_user_header_setting"
              version="3.42">
      <doc xml:space="preserve"
           filename="src/camel/camel-utils.c"
           line="452">Encode the optional @display_name and the @header_name to a value suitable
for GSettings schema org.gnome.evolution-data-server and key camel-message-info-user-headers.

Free the returned string with g_free(), when no longer needed.</doc>
      <source-position filename="src/camel/camel-utils.h" line="54"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/camel/camel-utils.c"
             line="462">a newly allocated string with encoded @display_name
   and @header_name</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="display_name"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-utils.c"
               line="454">display name for the header name, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="header_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-utils.c"
               line="455">the header name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_fill_message_info_user_headers"
              c:identifier="camel_util_fill_message_info_user_headers"
              version="3.42">
      <doc xml:space="preserve"
           filename="src/camel/camel-utils.c"
           line="385">Fill @info 's user-headers with the user-defined headers from
the @headers array.</doc>
      <source-position filename="src/camel/camel-utils.h" line="51"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-utils.c"
             line="393">Whether the @info's user headers changed</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-utils.c"
               line="387">a #CamelMessageInfo</doc>
          <type name="MessageInfo" c:type="CamelMessageInfo*"/>
        </parameter>
        <parameter name="headers" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-utils.c"
               line="388">a #CamelNameValueArray with the headers to read from</doc>
          <type name="NameValueArray" c:type="const CamelNameValueArray*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_get_directory_variants"
              c:identifier="camel_util_get_directory_variants"
              version="3.40">
      <doc xml:space="preserve"
           filename="src/camel/camel.c"
           line="420">The @main_path is a directory, which will be always used. It
should have as its prefix the @replace_prefix, otherwise
the function returns only the @main_path in the paths array.

When there's exported an environment variable EDS_EXTRA_PREFIXES,
it is used as a list of alternative prefixes where to look for
the @main_path (rest after the @replace_prefix).

When the @with_modules_dir is %TRUE, there's also added
g_get_user_data_dir() + "evolution/modules/", aka
~/.local/share/evolution/modules/, into the resulting array.</doc>
      <source-position filename="src/camel/camel.h" line="181"/>
      <return-value transfer-ownership="container">
        <doc xml:space="preserve"
             filename="src/camel/camel.c"
             line="438">a %GPtrArray
   with paths to use, including the @main_path. Free it with
   g_ptr_array_unref(), when no longer needed.</doc>
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="utf8"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="main_path" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel.c"
               line="422">the main path to work with</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="replace_prefix" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel.c"
               line="423">path prefix to replace</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="with_modules_dir" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel.c"
               line="424">whether to add also the modules directory</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_sanitize_ascii_domain_in_address"
              c:identifier="camel_utils_sanitize_ascii_domain_in_address"
              version="3.44">
      <doc xml:space="preserve"
           filename="src/camel/camel-net-utils.c"
           line="869">Checks whether the domain in the @email_address requires
conversion to ASCII and if it does it also converts it.
When the @do_format is %TRUE, the output string is formatted
for display, otherwise it's encoded for use in the message
headers. A %NULL is returned when no conversion was needed.</doc>
      <source-position filename="src/camel/camel-net-utils.h" line="102"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-net-utils.c"
             line="880">the @email_address with only ASCII letters,
   if such conversion is needed or %NULL, when no conversion was
   required.

See: camel_hostname_utils_requires_ascii(), camel_internet_address_sanitize_ascii_domain(),
   camel_utils_sanitize_ascii_domain_in_url_str()</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="email_address"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-net-utils.c"
               line="871">an email address as string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="do_format" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-net-utils.c"
               line="872">what format will be returned</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_sanitize_ascii_domain_in_url"
              c:identifier="camel_utils_sanitize_ascii_domain_in_url"
              version="3.44">
      <doc xml:space="preserve"
           filename="src/camel/camel-net-utils.c"
           line="952">Checks whether the host name of the @url requires conversion
to ASCII and converts it, if needed.</doc>
      <source-position filename="src/camel/camel-net-utils.h" line="107"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-net-utils.c"
             line="959">%TRUE, when the conversion was required.

See: camel_hostname_utils_requires_ascii(), camel_utils_sanitize_ascii_domain_in_url_str()</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="url" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-net-utils.c"
               line="954">a #CamelURL</doc>
          <type name="URL" c:type="CamelURL*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_sanitize_ascii_domain_in_url_str"
              c:identifier="camel_utils_sanitize_ascii_domain_in_url_str"
              version="3.44">
      <doc xml:space="preserve"
           filename="src/camel/camel-net-utils.c"
           line="916">Checks whether the host name of the @url_str requires conversion
to ASCII and converts it if needed. Returns %NULL, when no conversion
was required.</doc>
      <source-position filename="src/camel/camel-net-utils.h" line="105"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="src/camel/camel-net-utils.c"
             line="924">converted @url_str to ASCII host name, or %NULL, when
   no conversion was needed.

See: camel_hostname_utils_requires_ascii(), camel_utils_sanitize_ascii_domain_in_url()</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="url_str"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-net-utils.c"
               line="918">a URL as string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_weak_ref_free"
              c:identifier="camel_utils_weak_ref_free"
              version="3.40"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/camel/camel-utils.c"
           line="271">Frees a #GWeakRef created by camel_utils_weak_ref_new().</doc>
      <source-position filename="src/camel/camel-utils.h" line="49"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="weak_ref" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-utils.c"
               line="273">a #GWeakRef</doc>
          <type name="GObject.WeakRef" c:type="GWeakRef*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_weak_ref_new"
              c:identifier="camel_utils_weak_ref_new"
              version="3.40"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/camel/camel-utils.c"
           line="246">Allocates a new #GWeakRef and calls g_weak_ref_set() with @object.

Free the returned #GWeakRef with camel_utils_weak_ref_free().</doc>
      <source-position filename="src/camel/camel-utils.h" line="48"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/camel/camel-utils.c"
             line="254">a new #GWeakRef</doc>
        <type name="GObject.WeakRef" c:type="GWeakRef*"/>
      </return-value>
      <parameters>
        <parameter name="object"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-utils.c"
               line="248">a #GObject or %NULL</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="uudecode_step" c:identifier="camel_uudecode_step">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-utils.c"
           line="379">Uudecodes a chunk of data. Performs a 'decode step' on a chunk of
uuencoded data. Assumes the "begin mode filename" line has
been stripped off.</doc>
      <source-position filename="src/camel/camel-mime-utils.h" line="203"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="391">the number of bytes decoded</doc>
        <type name="gsize" c:type="gsize"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="381">input stream</doc>
          <array length="1" zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </parameter>
        <parameter name="inlen" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="382">max length of data to decode</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="out"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="383">output stream</doc>
          <array zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </parameter>
        <parameter name="state"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="384">holds the number of bits that are stored in @save</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="save"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="385">leftover bits that have not yet been decoded</doc>
          <array length="3" zero-terminated="0" c:type="guint32*">
            <type name="guint32" c:type="guint32"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="uuencode_close" c:identifier="camel_uuencode_close">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-utils.c"
           line="179">Uuencodes a chunk of data. Call this when finished encoding data
with camel_uuencode_step() to flush off the last little bit.</doc>
      <source-position filename="src/camel/camel-mime-utils.h" line="207"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="191">the number of bytes encoded</doc>
        <type name="gsize" c:type="gsize"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="181">input stream</doc>
          <array length="1" zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="182">input stream length</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="out"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="183">output stream</doc>
          <array zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </parameter>
        <parameter name="uubuf"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="184">temporary buffer of 60 bytes</doc>
          <array zero-terminated="0" c:type="guchar*" fixed-size="60">
            <type name="guint8" c:type="guchar"/>
          </array>
        </parameter>
        <parameter name="state"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="185">holds the number of bits that are stored in @save</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="save"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="186">leftover bits that have not yet been encoded</doc>
          <array length="4" zero-terminated="0" c:type="guint32*">
            <type name="guint32" c:type="guint32"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="uuencode_step" c:identifier="camel_uuencode_step">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-utils.c"
           line="261">Uuencodes a chunk of data. Performs an 'encode step', only encodes
blocks of 45 characters to the output at a time, saves left-over
state in @uubuf, @state and @save (initialize to 0 on first
invocation).</doc>
      <source-position filename="src/camel/camel-mime-utils.h" line="205"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-utils.c"
             line="275">the number of bytes encoded</doc>
        <type name="gsize" c:type="gsize"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="263">input stream</doc>
          <array length="1" zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="264">input stream length</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="out"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="265">output stream</doc>
          <array zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </parameter>
        <parameter name="uubuf"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="266">temporary buffer of 60 bytes</doc>
          <array zero-terminated="0" c:type="guchar*" fixed-size="60">
            <type name="guint8" c:type="guchar"/>
          </array>
        </parameter>
        <parameter name="state"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="267">holds the number of bits that are stored in @save</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="save"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-utils.c"
               line="268">leftover bits that have not yet been encoded</doc>
          <array length="4" zero-terminated="0" c:type="guint32*">
            <type name="guint32" c:type="guint32"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="write" c:identifier="camel_write" throws="1">
      <doc xml:space="preserve"
           filename="src/camel/camel-file-utils.c"
           line="535">Cancellable libc write() replacement.

Code that intends to be portable to Win32 should call this function
only on file descriptors returned from open(), not on sockets.</doc>
      <source-position filename="src/camel/camel-file-utils.h" line="70"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-file-utils.c"
             line="548">number of bytes written or -1 on fail. On failure, errno will
be set appropriately.</doc>
        <type name="gssize" c:type="gssize"/>
      </return-value>
      <parameters>
        <parameter name="fd" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="537">file descriptor</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="buf" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="538">buffer to write</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="539">number of bytes of @buf to write</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/camel/camel-file-utils.c"
               line="540">optional #GCancellable object, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="ydecode_step" c:identifier="camel_ydecode_step">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-filter-yenc.c"
           line="375">Performs a 'decode step' on a chunk of yEncoded data of length
@inlen pointed to by @in and writes to @out. Assumes the =ybegin
and =ypart lines have already been stripped off.

To get the crc32 value of the part, use #CAMEL_MIME_YENCODE_CRC_FINAL
(@pcrc). If there are more parts, you should reuse @crc without
re-initializing. Once all parts have been decoded, you may get the
combined crc32 value of all the parts using #CAMEL_MIME_YENCODE_CRC_FINAL
(@crc).</doc>
      <source-position filename="src/camel/camel-mime-filter-yenc.h"
                       line="96"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter-yenc.c"
             line="394">the number of bytes decoded</doc>
        <type name="gsize" c:type="gsize"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-yenc.c"
               line="377">input buffer</doc>
          <array length="1" zero-terminated="0" c:type="const guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </parameter>
        <parameter name="inlen" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-yenc.c"
               line="378">input buffer length</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="out"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-yenc.c"
               line="379">output buffer</doc>
          <array zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </parameter>
        <parameter name="state"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-yenc.c"
               line="380">ydecode state</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="pcrc"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-yenc.c"
               line="381">part crc state</doc>
          <type name="guint32" c:type="guint32*"/>
        </parameter>
        <parameter name="crc"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-yenc.c"
               line="382">crc state</doc>
          <type name="guint32" c:type="guint32*"/>
        </parameter>
      </parameters>
    </function>
    <function name="yencode_close" c:identifier="camel_yencode_close">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-filter-yenc.c"
           line="527">Call this function when finished encoding data with
camel_yencode_step() to flush off the remaining state.

#CAMEL_MIME_YENCODE_CRC_FINAL (@pcrc) will give you the crc32 of the
encoded "part". If there are more "parts" to encode, you should
re-use @crc when encoding the next "parts" and then use
#CAMEL_MIME_YENCODE_CRC_FINAL (@crc) to get the combined crc32 value of
all the parts.</doc>
      <source-position filename="src/camel/camel-mime-filter-yenc.h"
                       line="108"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter-yenc.c"
             line="545">the number of bytes encoded.</doc>
        <type name="gsize" c:type="gsize"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-yenc.c"
               line="529">input buffer</doc>
          <array length="1" zero-terminated="0" c:type="const guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </parameter>
        <parameter name="inlen" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-yenc.c"
               line="530">input buffer length</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="out"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-yenc.c"
               line="531">output buffer</doc>
          <array zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </parameter>
        <parameter name="state"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-yenc.c"
               line="532">yencode state</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="pcrc"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-yenc.c"
               line="533">part crc state</doc>
          <type name="guint32" c:type="guint32*"/>
        </parameter>
        <parameter name="crc"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-yenc.c"
               line="534">crc state</doc>
          <type name="guint32" c:type="guint32*"/>
        </parameter>
      </parameters>
    </function>
    <function name="yencode_step" c:identifier="camel_yencode_step">
      <doc xml:space="preserve"
           filename="src/camel/camel-mime-filter-yenc.c"
           line="458">Performs an yEncode 'encode step' on a chunk of raw data of length
@inlen pointed to by @in and writes to @out.

@state should be initialized to #CAMEL_MIME_YENCODE_STATE_INIT before
beginning making the first call to this function. Subsequent calls
should reuse @state.

Along the same lines, @pcrc and @crc should be initialized to
#CAMEL_MIME_YENCODE_CRC_INIT before using.</doc>
      <source-position filename="src/camel/camel-mime-filter-yenc.h"
                       line="102"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/camel/camel-mime-filter-yenc.c"
             line="477">the number of bytes encoded</doc>
        <type name="gsize" c:type="gsize"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-yenc.c"
               line="460">input buffer</doc>
          <array length="1" zero-terminated="0" c:type="const guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </parameter>
        <parameter name="inlen" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-yenc.c"
               line="461">input buffer length</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="out"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-yenc.c"
               line="462">output buffer</doc>
          <array zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </parameter>
        <parameter name="state"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-yenc.c"
               line="463">yencode state</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="pcrc"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-yenc.c"
               line="464">part crc state</doc>
          <type name="guint32" c:type="guint32*"/>
        </parameter>
        <parameter name="crc"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/camel/camel-mime-filter-yenc.c"
               line="465">crc state</doc>
          <type name="guint32" c:type="guint32*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
