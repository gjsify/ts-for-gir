<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <package name="packagekit-glib2"/>
  <c:include name="packagekit-glib2/packagekit.h"/>
  <namespace name="PackageKitGlib"
             version="1.0"
             shared-library="libpackagekit-glib2.so.18"
             c:identifier-prefixes="Pk"
             c:symbol-prefixes="pk">
    <alias name="Bitfield" c:type="PkBitfield">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-bitfield.h"
           line="33">A bitfield capable of storing enumerations with up to 64 values.</doc>
      <source-position filename="lib/packagekit-glib2/pk-bitfield.h"
                       line="38"/>
      <type name="guint64" c:type="guint64"/>
    </alias>
    <enumeration name="AuthorizeEnum"
                 glib:type-name="PkAuthorizeEnum"
                 glib:get-type="pk_authorize_enum_get_type"
                 c:type="PkAuthorizeEnum">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.h"
           line="732">The authorization result</doc>
      <member name="unknown"
              value="0"
              c:identifier="PK_AUTHORIZE_ENUM_UNKNOWN"
              glib:nick="unknown"
              glib:name="PK_AUTHORIZE_ENUM_UNKNOWN">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="734">Unknown authorization status</doc>
      </member>
      <member name="yes"
              value="1"
              c:identifier="PK_AUTHORIZE_ENUM_YES"
              glib:nick="yes"
              glib:name="PK_AUTHORIZE_ENUM_YES">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="735">Authorized</doc>
      </member>
      <member name="no"
              value="2"
              c:identifier="PK_AUTHORIZE_ENUM_NO"
              glib:nick="no"
              glib:name="PK_AUTHORIZE_ENUM_NO">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="736">Not authorized</doc>
      </member>
      <member name="interactive"
              value="3"
              c:identifier="PK_AUTHORIZE_ENUM_INTERACTIVE"
              glib:nick="interactive"
              glib:name="PK_AUTHORIZE_ENUM_INTERACTIVE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="737">Interaction required for authorization</doc>
      </member>
      <member name="last"
              value="4"
              c:identifier="PK_AUTHORIZE_ENUM_LAST"
              glib:nick="last"
              glib:name="PK_AUTHORIZE_ENUM_LAST">
      </member>
    </enumeration>
    <function-macro name="CATEGORY"
                    c:identifier="PK_CATEGORY"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-category.h"
                       line="36"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CATEGORY_CLASS"
                    c:identifier="PK_CATEGORY_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-category.h"
                       line="37"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CATEGORY_GET_CLASS"
                    c:identifier="PK_CATEGORY_GET_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-category.h"
                       line="40"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHECK_VERSION"
                    c:identifier="PK_CHECK_VERSION"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-version.h" line="38"/>
      <parameters>
        <parameter name="major">
        </parameter>
        <parameter name="minor">
        </parameter>
        <parameter name="micro">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CLIENT" c:identifier="PK_CLIENT" introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-client.h" line="40"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CLIENT_CLASS"
                    c:identifier="PK_CLIENT_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-client.h" line="41"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CLIENT_GET_CLASS"
                    c:identifier="PK_CLIENT_GET_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-client.h" line="44"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CLIENT_HELPER"
                    c:identifier="PK_CLIENT_HELPER"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-client-helper.h"
                       line="37"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CLIENT_HELPER_CLASS"
                    c:identifier="PK_CLIENT_HELPER_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-client-helper.h"
                       line="38"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CLIENT_HELPER_GET_CLASS"
                    c:identifier="PK_CLIENT_HELPER_GET_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-client-helper.h"
                       line="41"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTROL"
                    c:identifier="PK_CONTROL"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-control.h" line="37"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTROL_CLASS"
                    c:identifier="PK_CONTROL_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-control.h" line="38"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTROL_GET_CLASS"
                    c:identifier="PK_CONTROL_GET_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-control.h" line="41"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Category"
           c:symbol-prefix="category"
           c:type="PkCategory"
           parent="Source"
           glib:type-name="PkCategory"
           glib:get-type="pk_category_get_type"
           glib:type-struct="CategoryClass">
      <source-position filename="lib/packagekit-glib2/pk-category.h"
                       line="65"/>
      <constructor name="new" c:identifier="pk_category_new" version="0.5.4">
        <source-position filename="lib/packagekit-glib2/pk-category.h"
                         line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-category.c"
               line="397">a new #PkCategory object.</doc>
          <type name="Category" c:type="PkCategory*"/>
        </return-value>
      </constructor>
      <method name="get_icon"
              c:identifier="pk_category_get_icon"
              glib:get-property="icon"
              version="0.6.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-category.c"
             line="201">Gets the icon filename.</doc>
        <source-position filename="lib/packagekit-glib2/pk-category.h"
                         line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-category.c"
               line="207">the string value, or %NULL for unset.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="category" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-category.c"
                 line="203">The #PkCategory</doc>
            <type name="Category" c:type="PkCategory*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="pk_category_get_id" version="0.6.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-category.c"
             line="99">Gets the id specific to this category.</doc>
        <source-position filename="lib/packagekit-glib2/pk-category.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-category.c"
               line="105">the string value, or %NULL for unset.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="category" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-category.c"
                 line="101">The #PkCategory</doc>
            <type name="Category" c:type="PkCategory*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="pk_category_get_name"
              glib:get-property="name"
              version="0.6.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-category.c"
             line="133">Gets the name.</doc>
        <source-position filename="lib/packagekit-glib2/pk-category.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-category.c"
               line="139">the string value, or %NULL for unset.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="category" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-category.c"
                 line="135">The #PkCategory</doc>
            <type name="Category" c:type="PkCategory*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent_id"
              c:identifier="pk_category_get_parent_id"
              glib:get-property="parent-id"
              version="0.6.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-category.c"
             line="65">Gets the parent category id.</doc>
        <source-position filename="lib/packagekit-glib2/pk-category.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-category.c"
               line="71">the string value, or %NULL for unset.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="category" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-category.c"
                 line="67">The #PkCategory</doc>
            <type name="Category" c:type="PkCategory*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_summary"
              c:identifier="pk_category_get_summary"
              glib:get-property="summary"
              version="0.6.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-category.c"
             line="167">Gets the summary.</doc>
        <source-position filename="lib/packagekit-glib2/pk-category.h"
                         line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-category.c"
               line="173">the string value, or %NULL for unset.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="category" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-category.c"
                 line="169">The #PkCategory</doc>
            <type name="Category" c:type="PkCategory*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_icon"
              c:identifier="pk_category_set_icon"
              glib:set-property="icon"
              version="0.6.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-category.c"
             line="218">Sets the icon filename.</doc>
        <source-position filename="lib/packagekit-glib2/pk-category.h"
                         line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="category" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-category.c"
                 line="220">The #PkCategory</doc>
            <type name="Category" c:type="PkCategory*"/>
          </instance-parameter>
          <parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-category.c"
                 line="221">the new value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id" c:identifier="pk_category_set_id" version="0.6.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-category.c"
             line="116">Sets the id specific to this category.</doc>
        <source-position filename="lib/packagekit-glib2/pk-category.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="category" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-category.c"
                 line="118">The #PkCategory</doc>
            <type name="Category" c:type="PkCategory*"/>
          </instance-parameter>
          <parameter name="cat_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-category.c"
                 line="119">the new value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="pk_category_set_name"
              glib:set-property="name"
              version="0.6.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-category.c"
             line="150">Sets the name.</doc>
        <source-position filename="lib/packagekit-glib2/pk-category.h"
                         line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="category" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-category.c"
                 line="152">The #PkCategory</doc>
            <type name="Category" c:type="PkCategory*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-category.c"
                 line="153">the new value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_parent_id"
              c:identifier="pk_category_set_parent_id"
              glib:set-property="parent-id"
              version="0.6.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-category.c"
             line="82">Sets the parent category id.</doc>
        <source-position filename="lib/packagekit-glib2/pk-category.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="category" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-category.c"
                 line="84">The #PkCategory</doc>
            <type name="Category" c:type="PkCategory*"/>
          </instance-parameter>
          <parameter name="parent_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-category.c"
                 line="85">the new value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_summary"
              c:identifier="pk_category_set_summary"
              glib:set-property="summary"
              version="0.6.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-category.c"
             line="184">Sets the summary.</doc>
        <source-position filename="lib/packagekit-glib2/pk-category.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="category" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-category.c"
                 line="186">The #PkCategory</doc>
            <type name="Category" c:type="PkCategory*"/>
          </instance-parameter>
          <parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-category.c"
                 line="187">the new value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="cat-id"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="icon"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                setter="set_icon"
                getter="get_icon"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                setter="set_name"
                getter="get_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="parent-id"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                setter="set_parent_id"
                getter="get_parent_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="summary"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                setter="set_summary"
                getter="get_summary"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Source" c:type="PkSource"/>
      </field>
      <field name="priv">
        <type name="CategoryPrivate" c:type="PkCategoryPrivate*"/>
      </field>
    </class>
    <record name="CategoryClass"
            c:type="PkCategoryClass"
            glib:is-gtype-struct-for="Category">
      <source-position filename="lib/packagekit-glib2/pk-category.h"
                       line="65"/>
      <field name="parent_class">
        <type name="SourceClass" c:type="PkSourceClass"/>
      </field>
      <field name="_pk_reserved1" introspectable="0">
        <callback name="_pk_reserved1">
          <source-position filename="lib/packagekit-glib2/pk-category.h"
                           line="60"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved2" introspectable="0">
        <callback name="_pk_reserved2">
          <source-position filename="lib/packagekit-glib2/pk-category.h"
                           line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved3" introspectable="0">
        <callback name="_pk_reserved3">
          <source-position filename="lib/packagekit-glib2/pk-category.h"
                           line="62"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved4" introspectable="0">
        <callback name="_pk_reserved4">
          <source-position filename="lib/packagekit-glib2/pk-category.h"
                           line="63"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved5" introspectable="0">
        <callback name="_pk_reserved5">
          <source-position filename="lib/packagekit-glib2/pk-category.h"
                           line="64"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="CategoryPrivate"
            c:type="PkCategoryPrivate"
            disguised="1"
            opaque="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-category.c"
           line="39">Private #PkCategory data</doc>
      <source-position filename="lib/packagekit-glib2/pk-category.h"
                       line="42"/>
    </record>
    <class name="Client"
           c:symbol-prefix="client"
           c:type="PkClient"
           parent="GObject.Object"
           glib:type-name="PkClient"
           glib:get-type="pk_client_get_type"
           glib:type-struct="ClientClass">
      <source-position filename="lib/packagekit-glib2/pk-client.h" line="108"/>
      <constructor name="new" c:identifier="pk_client_new" version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="4798">#PkClient is a nice GObject wrapper for PackageKit and makes writing
frontends easy.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="112"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client.c"
               line="4804">A new #PkClient instance</doc>
          <type name="Client" c:type="PkClient*"/>
        </return-value>
      </constructor>
      <function name="create_helper_argv_envp"
                c:identifier="pk_client_create_helper_argv_envp">
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="417"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="argv" transfer-ownership="none">
            <type name="utf8" c:type="gchar***"/>
          </parameter>
          <parameter name="envp_out" transfer-ownership="none">
            <type name="utf8" c:type="gchar***"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="changed">
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="accept_eula"
              c:identifier="pk_client_accept_eula"
              version="0.5.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="1454">We may want to agree to a EULA dialog if one is presented.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="224"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="1468">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1456">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="eula_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1457">the &lt;literal&gt;eula_id&lt;/literal&gt; we are agreeing to</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1458">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1459">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1460">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="accept_eula_async"
              c:identifier="pk_client_accept_eula_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="3824">We may want to agree to a EULA dialog if one is presented.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="336"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3826">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="eula_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3827">the &lt;literal&gt;eula_id&lt;/literal&gt; we are agreeing to</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3828">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3829">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3830">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3831">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3832">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="adopt"
              c:identifier="pk_client_adopt"
              version="0.5.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="1867">Adopt a transaction.

Warning: this function is synchronous, and will block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="280"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="1881">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1869">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="transaction_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1870">a transaction ID such as "/21_ebcbdaae_data"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1871">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1872">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1873">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="adopt_async"
              c:identifier="pk_client_adopt_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="4230">Adopt a transaction which allows the caller to monitor the state or cancel it.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="399"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4232">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="transaction_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4233">a transaction ID such as "/21_ebcbdaae_data"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4234">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4235">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4236">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4237">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4238">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="depends_on"
              c:identifier="pk_client_depends_on"
              version="0.5.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="712">Get the packages that depend this one, i.e. child.parent.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="122"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="728">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="714">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="715">a #PkBitfield such as %PK_FILTER_ENUM_GUI | %PK_FILTER_ENUM_FREE or %PK_FILTER_ENUM_NONE</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="716">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="recursive" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="717">If we should search recursively for depends</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="718">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="719">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="720">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="depends_on_async"
              c:identifier="pk_client_depends_on_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="3018">Get the packages that depend this one, i.e. child-&gt;parent.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="221"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3020">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3021">a #PkBitfield such as %PK_FILTER_ENUM_GUI | %PK_FILTER_ENUM_FREE or %PK_FILTER_ENUM_NONE</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3022">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="recursive" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3023">If we should search recursively for depends</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3024">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3025">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3026">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3027">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3028">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="download_packages"
              c:identifier="pk_client_download_packages"
              version="0.5.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="552">Downloads package files to a specified location.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="100"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="567">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="554">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="555">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="directory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="556">the location where packages are to be downloaded</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="557">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="558">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="559">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="download_packages_async"
              c:identifier="pk_client_download_packages_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="2865">Downloads package files to a specified location.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="196"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2867">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2868">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="directory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2869">the location where packages are to be downloaded</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2870">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2871">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2872">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2873">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2874">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="generic_finish"
              c:identifier="pk_client_generic_finish"
              version="0.5.2"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="2356">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="115"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client.c"
               line="2364">the #PkResults, or %NULL. Free with g_object_unref()</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2358">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2359">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_background"
              c:identifier="pk_client_get_background"
              glib:get-property="background"
              version="0.6.10">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="4532">Gets the background value.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="426"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client.c"
               line="4538">The background status.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4534">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cache_age"
              c:identifier="pk_client_get_cache_age"
              glib:get-property="cache-age"
              version="0.6.10">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="4626">Gets the maximum cache age value.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="433"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client.c"
               line="4632">The cache age in seconds</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4628">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_categories"
              c:identifier="pk_client_get_categories"
              version="0.5.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="1040">Get a list of all categories supported.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="168"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="1053">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1042">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1043">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1044">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1045">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_categories_async"
              c:identifier="pk_client_get_categories_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="3335">Get a list of all categories supported.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="273"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3337">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3338">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3339">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3340">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3341">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3342">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_details"
              c:identifier="pk_client_get_details"
              version="0.5.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="332">Get details of a package, so more information can be obtained for GUI
or command line tools.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="72"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="347">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="334">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="335">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="336">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="337">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="338">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_details_async"
              c:identifier="pk_client_get_details_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="2649">Get details of a package, so more information can be obtained for GUI
or command line tools.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="164"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2651">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2652">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2653">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2654">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2655">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2656">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2657">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_details_local"
              c:identifier="pk_client_get_details_local"
              version="0.8.17"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="386">Get details of a local package, so more information can be obtained for GUI
or command line tools.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="79"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="401">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="388">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="files" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="389">a null terminated array of filenames</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="390">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="391">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="392">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_details_local_async"
              c:identifier="pk_client_get_details_local_async"
              version="0.8.17">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="2701">Get details of a package, so more information can be obtained for GUI
or command line tools.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="172"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2703">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="files" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2704">a null terminated array of filenames</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2705">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2706">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2707">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2708">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2709">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_details_with_deps_size"
              c:identifier="pk_client_get_details_with_deps_size"
              glib:get-property="details-with-deps-size"
              version="1.2.7">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="4665">Gets the client details-with-deps-size value.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="436"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client.c"
               line="4671">whether the pk_client_get_details_async() should include dependencies
   download sizes for packages, which are not installed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4667">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_distro_upgrades"
              c:identifier="pk_client_get_distro_upgrades"
              version="0.5.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="934">This method should return a list of distribution upgrades that are available.
It should not return updates, only major upgrades.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="155"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="948">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="936">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="937">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="938">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="939">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_distro_upgrades_async"
              c:identifier="pk_client_get_distro_upgrades_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="3235">This method should return a list of distribution upgrades that are available.
It should not return updates, only major upgrades.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="258"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3237">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3238">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3239">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3240">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3241">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3242">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_files"
              c:identifier="pk_client_get_files"
              version="0.5.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="987">Get the file list (i.e. a list of files installed) for the specified package.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="161"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="1001">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="989">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="990">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="991">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="992">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="993">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_files_async"
              c:identifier="pk_client_get_files_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="3284">Get the file list (i.e. a list of files installed) for the specified package.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="265"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3286">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3287">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3288">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3289">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3290">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3291">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3292">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_files_local"
              c:identifier="pk_client_get_files_local"
              version="0.9.1"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="442">Get file list of a local package, so more information can be obtained for GUI
or command line tools.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="86"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="457">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="444">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="files" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="445">a null terminated array of filenames</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="446">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="447">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="448">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_files_local_async"
              c:identifier="pk_client_get_files_local_async"
              version="0.9.1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="2757">Get file list of a package, so more information can be obtained for GUI
or command line tools.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="180"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2759">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="files" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2760">a null terminated array of filenames</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2761">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2762">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2763">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2764">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2765">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_idle"
              c:identifier="pk_client_get_idle"
              glib:get-property="idle"
              version="0.6.10">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="4588">Gets if the transaction client idle value.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="430"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client.c"
               line="4594">if this client is idle.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4590">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_interactive"
              c:identifier="pk_client_get_interactive"
              glib:get-property="interactive"
              version="0.6.10">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="4571">Gets the client interactive value.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="429"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client.c"
               line="4577">if the transaction is due to run interactivly.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4573">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_locale"
              c:identifier="pk_client_get_locale"
              glib:get-property="locale"
              version="0.6.10">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="4492">Gets the locale used for this transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="423"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client.c"
               line="4498">The locale.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4494">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_old_transactions"
              c:identifier="pk_client_get_old_transactions"
              version="0.5.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="659">Get the old transaction list, mainly used for the transaction viewer.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="115"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="673">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="661">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="number" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="662">the number of past transactions to return, or 0 for all</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="663">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="664">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="665">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_old_transactions_async"
              c:identifier="pk_client_get_old_transactions_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="2968">Get the old transaction list, mainly used for the transaction viewer.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="213"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2970">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="number" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2971">the number of past transactions to return, or 0 for all</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2972">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2973">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2974">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2975">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2976">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_packages"
              c:identifier="pk_client_get_packages"
              version="0.5.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="767">Get the list of packages from the backend

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="131"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="781">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="769">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="770">a #PkBitfield such as %PK_FILTER_ENUM_GUI | %PK_FILTER_ENUM_FREE or %PK_FILTER_ENUM_NONE</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="771">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="772">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="773">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_packages_async"
              c:identifier="pk_client_get_packages_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="3073">Get the list of packages from the backend</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="231"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3075">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3076">a #PkBitfield such as %PK_FILTER_ENUM_GUI | %PK_FILTER_ENUM_FREE or %PK_FILTER_ENUM_NONE</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3077">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3078">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3079">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3080">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3081">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_progress"
              c:identifier="pk_client_get_progress"
              version="0.5.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="1935">Get the progress of a transaction.

Warning: this function is synchronous, and will block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="287"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="1947">a #PkResults object, or %NULL for error</doc>
          <type name="Progress" c:type="PkProgress*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1937">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="transaction_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1938">The transaction id</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1939">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_progress_async"
              c:identifier="pk_client_get_progress_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="4388">Find the current state of a transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="411"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4390">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="transaction_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4391">a transaction ID such as "/21_ebcbdaae_data"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4392">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4393">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4394">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_progress_finish"
              c:identifier="pk_client_get_progress_finish"
              version="0.5.2"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="4300">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="407"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client.c"
               line="4308">the #PkProgress, or %NULL. Free with g_object_unref()</doc>
          <type name="Progress" c:type="PkProgress*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4302">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4303">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_repo_list"
              c:identifier="pk_client_get_repo_list"
              version="0.5.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="1507">Get the list of repositories installed on the system.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="231"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="1521">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1509">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1510">a #PkBitfield such as %PK_FILTER_ENUM_DEVELOPMENT or %PK_FILTER_ENUM_NONE</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1511">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1512">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1513">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_repo_list_async"
              c:identifier="pk_client_get_repo_list_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="3874">Get the list of repositories installed on the system.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="344"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3876">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3877">a #PkBitfield such as %PK_FILTER_ENUM_DEVELOPMENT or %PK_FILTER_ENUM_NONE</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3878">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3879">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3880">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3881">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3882">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_update_detail"
              c:identifier="pk_client_get_update_detail"
              version="0.5.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="498">Get details about the specific update, for instance any CVE urls and
severity information.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="93"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="513">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="500">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="501">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="502">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="503">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="504">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_update_detail_async"
              c:identifier="pk_client_get_update_detail_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="2813">Get details about the specific update, for instance any CVE urls and
severity information.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="188"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2815">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2816">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2817">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2818">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2819">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2820">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2821">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_updates"
              c:identifier="pk_client_get_updates"
              version="0.5.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="606">Get a list of all the packages that can be updated for all repositories.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="108"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="620">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="608">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="609">a #PkBitfield such as %PK_FILTER_ENUM_DEVELOPMENT or %PK_FILTER_ENUM_NONE</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="610">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="611">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="612">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_updates_async"
              c:identifier="pk_client_get_updates_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="2918">Get a list of all the packages that can be updated for all repositories.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="205"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2920">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2921">a #PkBitfield such as %PK_FILTER_ENUM_DEVELOPMENT or %PK_FILTER_ENUM_NONE</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2922">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2923">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2924">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2925">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2926">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_files"
              c:identifier="pk_client_install_files"
              version="0.8.1"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="1394">Install a file locally, and get the deps from the repositories.
This is useful for double clicking on a .rpm or .deb file.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="216"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="1410">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1396">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="transaction_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1397">a transaction type bitfield</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="files" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1398">a file such as "/home/hughsie/Desktop/hal-devel-0.10.0.rpm"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1399">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1400">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1401">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_files_async"
              c:identifier="pk_client_install_files_async"
              version="0.8.1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="3742">Install a file locally, and get the deps from the repositories.
This is useful for double clicking on a .rpm or .deb file.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="327"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3744">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="transaction_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3745">a transaction type bitfield</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="files" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3746">a file such as "/home/hughsie/Desktop/hal-devel-0.10.0.rpm"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3747">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3748">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3749">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3750">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3751">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_packages"
              c:identifier="pk_client_install_packages"
              version="0.8.1"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="1221">Install a package of the newest and most correct version.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="191"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="1236">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1223">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="transaction_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1224">a transaction type bitfield</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1225">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1226">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1227">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1228">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_packages_async"
              c:identifier="pk_client_install_packages_async"
              version="0.8.1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="3502">Install a package of the newest and most correct version.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="299"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3504">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="transaction_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3505">a transaction type bitfield</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3506">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3507">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3508">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3509">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3510">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3511">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_signature"
              c:identifier="pk_client_install_signature"
              version="0.5.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="1280">Install a software repository signature of the newest and most correct version.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="199"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="1296">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1282">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1283">the signature type, e.g. %PK_SIGTYPE_ENUM_GPG</doc>
            <type name="SigTypeEnum" c:type="PkSigTypeEnum"/>
          </parameter>
          <parameter name="key_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1284">a key ID such as "0df23df"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="package_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1285">a signature_id structure such as "hal;0.0.1;i386;fedora"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1286">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1287">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1288">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_signature_async"
              c:identifier="pk_client_install_signature_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="3555">Install a software repository signature of the newest and most correct version.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="308"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3557">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3558">the signature type, e.g. %PK_SIGTYPE_ENUM_GPG</doc>
            <type name="SigTypeEnum" c:type="PkSigTypeEnum"/>
          </parameter>
          <parameter name="key_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3559">a key ID such as "0df23df"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="package_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3560">a signature_id structure such as "hal;0.0.1;i386;fedora"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3561">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3562">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3563">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3564">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3565">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_cache"
              c:identifier="pk_client_refresh_cache"
              version="0.5.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="1165">Refresh the cache, i.e. download new metadata from a remote URL so that
package lists are up to date.
This action may take a few minutes and should be done when the session and
system are idle.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="184"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="1182">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1167">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="force" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1168">if we should aggressively drop caches</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1169">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1170">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1171">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_cache_async"
              c:identifier="pk_client_refresh_cache_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="3449">Refresh the cache, i.e. download new metadata from a remote URL so that
package lists are up to date.
This action may take a few minutes and should be done when the session and
system are idle.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="291"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3451">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="force" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3452">if we should aggressively drop caches</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3453">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3454">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3455">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3456">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3457">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_packages"
              c:identifier="pk_client_remove_packages"
              version="0.8.1"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="1092">Remove a package (optionally with dependancies) from the system.
If @allow_deps is set to %FALSE, and other packages would have to be removed,
then the transaction would fail.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="174"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="1111">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1094">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="transaction_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1095">a transaction type bitfield</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1096">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="allow_deps" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1097">if other dependent packages are allowed to be removed from the computer</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="autoremove" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1098">if other packages installed at the same time should be tried to remove</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1099">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="6">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1100">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1101">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_packages_async"
              c:identifier="pk_client_remove_packages_async"
              version="0.8.1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="3383">Remove a package (optionally with dependancies) from the system.
If @allow_deps is set to %FALSE, and other packages would have to be removed,
then the transaction would fail.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="280"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3385">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="transaction_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3386">a transaction type bitfield</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3387">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="allow_deps" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3388">if other dependent packages are allowed to be removed from the computer</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="autoremove" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3389">if other packages installed at the same time should be tried to remove</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3390">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="6">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3391">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3392">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="8">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3393">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3394">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="repair_system"
              c:identifier="pk_client_repair_system"
              version="0.8.1"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="1800">This transaction will try to recover from a broken package management system:
e.g. the installation of a package with unsatisfied dependencies has
been forced by using a low level tool (rpm or dpkg) or the
system was shutdown during processing an installation.

The backend will decide what is best to do.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="273"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="1819">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1802">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="transaction_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1803">if only trusted packages should be installed</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1804">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1805">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1806">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="repair_system_async"
              c:identifier="pk_client_repair_system_async"
              version="0.8.1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="4152">This transaction will try to recover from a broken package management system:
e.g. the installation of a package with unsatisfied dependencies has
been forced by the user using a low level tool (rpm or dpkg) or the
system was shutdown during processing an installation.

The backend will decide what is best to do.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="391"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4154">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="transaction_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4155">a transaction type bitfield</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4156">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4157">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4158">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4159">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4160">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="repo_enable"
              c:identifier="pk_client_repo_enable"
              version="0.5.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="1560">Enable or disable the repository.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="238"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="1575">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1562">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="repo_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1563">a repo_id structure such as "livna-devel"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1564">if we should enable the repository</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1565">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1566">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1567">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="repo_enable_async"
              c:identifier="pk_client_repo_enable_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="3924">Enable or disable the repository.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="352"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3926">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="repo_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3927">a repo_id structure such as "livna-devel"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3928">if we should enable the repository</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3929">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3930">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3931">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3932">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3933">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="repo_remove"
              c:identifier="pk_client_repo_remove"
              version="0.9.1"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="1670">Removes a repo and optionally the packages installed from it.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="255"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="1686">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1672">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="transaction_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1673">transaction flags</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="repo_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1674">a repo_id structure such as "livna-devel"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="autoremove" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1675">If packages should be auto-removed</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1676">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1677">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1678">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="repo_remove_async"
              c:identifier="pk_client_repo_remove_async"
              version="0.9.1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="4031">Removes a repo and optionally the packages installed from it.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="371"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4033">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="transaction_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4034">transaction flags</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="repo_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4035">a repo_id structure such as "livna-devel"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="autoremove" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4036">If packages should be auto-removed</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4037">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4038">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4039">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4040">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4041">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="repo_set_data"
              c:identifier="pk_client_repo_set_data"
              version="0.5.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="1614">We may want to set a repository parameter.
NOTE: this is free text, and is left to the backend to define a format.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="246"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="1631">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1616">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="repo_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1617">a repo_id structure such as "livna-devel"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="parameter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1618">the parameter to change</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1619">what we should change it to</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1620">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1621">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1622">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="repo_set_data_async"
              c:identifier="pk_client_repo_set_data_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="3976">We may want to set a repository parameter.
NOTE: this is free text, and is left to the backend to define a format.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="361"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3978">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="repo_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3979">a repo_id structure such as "livna-devel"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="parameter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3980">the parameter to change</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3981">what we should change it to</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3982">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3983">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3984">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3985">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3986">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="required_by"
              c:identifier="pk_client_required_by"
              version="0.5.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="820">Get the packages that require this one, i.e. parent.child.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="138"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="836">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="822">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="823">a #PkBitfield such as %PK_FILTER_ENUM_GUI | %PK_FILTER_ENUM_FREE or %PK_FILTER_ENUM_NONE</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="824">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="recursive" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="825">If we should search recursively for requires</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="826">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="827">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="828">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="required_by_async"
              c:identifier="pk_client_required_by_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="3123">Get the packages that require this one, i.e. parent-&gt;child.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="239"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3125">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3126">a #PkBitfield such as %PK_FILTER_ENUM_GUI | %PK_FILTER_ENUM_FREE or %PK_FILTER_ENUM_NONE</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3127">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="recursive" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3128">If we should search recursively for requires</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3129">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3130">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3131">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3132">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3133">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="resolve"
              c:identifier="pk_client_resolve"
              version="0.5.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="57">Resolve a package name into a @package_id. This can return installed and
available packages and allows you find out if a package is installed locally
or is available in a repository.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="32"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="74">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="59">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="60">a #PkBitfield such as %PK_FILTER_ENUM_GUI | %PK_FILTER_ENUM_FREE or %PK_FILTER_ENUM_NONE</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="packages" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="61">an array of package names to resolve, e.g. "gnome-system-tools"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="62">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="63">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="64">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="resolve_async"
              c:identifier="pk_client_resolve_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="2384">Resolve a package name into a @package_id. This can return installed and
available packages and allows you find out if a package is installed locally
or is available in a repository.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="119"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2386">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2387">a #PkBitfield such as %PK_FILTER_ENUM_GUI | %PK_FILTER_ENUM_FREE or %PK_FILTER_ENUM_NONE</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="packages" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2388">an array of package names to resolve, e.g. "gnome-system-tools"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2389">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2390">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2391">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2392">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2393">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_details"
              c:identifier="pk_client_search_details"
              version="0.5.5"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="168">Search all detailed summary information to try and find a keyword.
Think of this as pk_client_search_names(), but trying much harder and
taking longer.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="48"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="185">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="170">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="171">a #PkBitfield such as %PK_FILTER_ENUM_GUI | %PK_FILTER_ENUM_FREE or %PK_FILTER_ENUM_NONE</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="172">free text to search for, for instance, "power"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="173">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="174">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="175">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_details_async"
              c:identifier="pk_client_search_details_async"
              version="0.5.5">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="2491">Search all detailed summary information to try and find a keyword.
Think of this as pk_client_search_names(), but trying much harder and
taking longer.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="137"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2493">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2494">a #PkBitfield such as %PK_FILTER_ENUM_GUI | %PK_FILTER_ENUM_FREE or %PK_FILTER_ENUM_NONE</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2495">free text to search for, for instance, "power"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2496">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2497">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2498">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2499">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2500">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_files"
              c:identifier="pk_client_search_files"
              version="0.5.5"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="278">Search for packages that provide a specific file.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="64"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="293">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="280">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="281">a #PkBitfield such as %PK_FILTER_ENUM_GUI | %PK_FILTER_ENUM_FREE or %PK_FILTER_ENUM_NONE</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="282">file to search for, for instance, "/sbin/service"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="283">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="284">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="285">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_files_async"
              c:identifier="pk_client_search_files_async"
              version="0.5.5">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="2597">Search for packages that provide a specific file.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="155"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2599">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2600">a #PkBitfield such as %PK_FILTER_ENUM_GUI | %PK_FILTER_ENUM_FREE or %PK_FILTER_ENUM_NONE</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2601">file to search for, for instance, "/sbin/service"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2602">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2603">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2604">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2605">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2606">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_groups"
              c:identifier="pk_client_search_groups"
              version="0.5.5"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="224">Return all packages in a specific group.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="56"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="239">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="226">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="227">a #PkBitfield such as %PK_FILTER_ENUM_GUI | %PK_FILTER_ENUM_FREE or %PK_FILTER_ENUM_NONE</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="228">a group enum to search for, for instance, "system-tools"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="229">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="230">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="231">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_groups_async"
              c:identifier="pk_client_search_groups_async"
              version="0.5.5">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="2545">Return all packages in a specific group.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="146"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2547">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2548">a #PkBitfield such as %PK_FILTER_ENUM_GUI | %PK_FILTER_ENUM_FREE or %PK_FILTER_ENUM_NONE</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2549">a group enum to search for, for instance, "system-tools"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2550">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2551">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2552">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2553">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2554">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_names"
              c:identifier="pk_client_search_names"
              version="0.5.5"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="113">Search all the locally installed files and remote repositories for a package
that matches a specific name.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="40"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="129">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="115">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="116">a #PkBitfield such as %PK_FILTER_ENUM_GUI | %PK_FILTER_ENUM_FREE or %PK_FILTER_ENUM_NONE</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="117">free text to search for, for instance, "power"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="118">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="119">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="120">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_names_async"
              c:identifier="pk_client_search_names_async"
              version="0.5.5">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="2438">Search all the locally installed files and remote repositories for a package
that matches a specific name.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="128"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2440">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2441">a #PkBitfield such as %PK_FILTER_ENUM_GUI | %PK_FILTER_ENUM_FREE or %PK_FILTER_ENUM_NONE</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2442">free text to search for, for instance, "power"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2443">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2444">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2445">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2446">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="2447">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_background"
              c:identifier="pk_client_set_background"
              glib:set-property="background"
              version="0.6.10">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="4509">Sets the background value for the client. A background transaction
is usually scheduled at a lower priority and is usually given less
network and disk performance.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="424"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4511">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="background" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4512">if the transaction is a background transaction</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cache_age"
              c:identifier="pk_client_set_cache_age"
              glib:set-property="cache-age"
              version="0.6.10">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="4605">Sets the maximum cache age value for the client.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="431"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4607">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="cache_age" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4608">the cache age to set, where %G_MAXUINT means "never"</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_details_with_deps_size"
              c:identifier="pk_client_set_details_with_deps_size"
              glib:set-property="details-with-deps-size"
              version="1.2.7">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="4643">Sets whether the pk_client_get_details_async() should include dependencies
download sizes for packages, which are not installed.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="434"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4645">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="details_with_deps_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4646">the value to set</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_interactive"
              c:identifier="pk_client_set_interactive"
              glib:set-property="interactive"
              version="0.6.10">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="4549">Sets the interactive value for the client. Interactive transactions
are usually allowed to ask the user questions.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="427"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4551">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="interactive" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4552">the value to set</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_locale"
              c:identifier="pk_client_set_locale"
              glib:set-property="locale"
              version="0.6.10">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="4469">Sets the locale to be used for the client. This may affect returned
results.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="421"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4471">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="locale" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4472">the locale to set, e.g. "en_GB.UTF-8"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_packages"
              c:identifier="pk_client_update_packages"
              version="0.8.1"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="1335">Update specific packages to the newest available versions.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="208"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="1350">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1337">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="transaction_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1338">a transaction type bitfield</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1339">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1340">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1341">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1342">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_packages_async"
              c:identifier="pk_client_update_packages_async"
              version="0.8.1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="3609">Update specific packages to the newest available versions.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="318"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3611">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="transaction_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3612">a transaction type bitfield</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3613">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3614">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3615">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3616">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3617">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3618">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="upgrade_system"
              c:identifier="pk_client_upgrade_system"
              version="1.0.10"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="1738">This transaction will upgrade the distro to the next version, which may
involve just downloading the installer and setting up the boot device,
or may involve doing an on-line upgrade.

The backend will decide what is best to do.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="264"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="1758">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1740">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="transaction_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1742">transaction flags</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="distro_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1741">a distro ID such as "fedora-14"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="upgrade_kind" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1743">a #PkUpgradeKindEnum such as %PK_UPGRADE_KIND_ENUM_COMPLETE</doc>
            <type name="UpgradeKindEnum" c:type="PkUpgradeKindEnum"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1744">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1745">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="1746">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="upgrade_system_async"
              c:identifier="pk_client_upgrade_system_async"
              version="1.0.10">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="4091">This transaction will update the distro to the next version, which may
involve just downloading the installer and setting up the boot device,
or may involve doing an on-line upgrade.

The backend will decide what is best to do.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="381"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4093">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="transaction_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4094">a transaction type bitfield</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="distro_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4095">a distro ID such as "fedora-14"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="upgrade_kind" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4096">a #PkUpgradeKindEnum such as %PK_UPGRADE_KIND_ENUM_COMPLETE</doc>
            <type name="UpgradeKindEnum" c:type="PkUpgradeKindEnum"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4097">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4098">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4099">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4100">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="4101">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="what_provides"
              c:identifier="pk_client_what_provides"
              version="0.5.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-sync.c"
             line="875">This should return packages that provide the supplied attributes.
This method is useful for finding out what package(s) provide a modalias
or GStreamer codec string.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-sync.h"
                         line="147"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-sync.c"
               line="892">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="877">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="878">a #PkBitfield such as %PK_FILTER_ENUM_GUI | %PK_FILTER_ENUM_FREE or %PK_FILTER_ENUM_NONE</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="879">a search term such as "sound/mp3"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="880">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="881">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-sync.c"
                 line="882">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="what_provides_async"
              c:identifier="pk_client_what_provides_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="3178">This should return packages that provide the supplied attributes.
This method is useful for finding out what package(s) provide a modalias
or GStreamer codec string.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client.h"
                         line="249"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3180">a valid #PkClient instance</doc>
            <type name="Client" c:type="PkClient*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3181">a #PkBitfield such as %PK_FILTER_ENUM_GUI | %PK_FILTER_ENUM_FREE or %PK_FILTER_ENUM_NONE</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3182">a search term such as "sound/mp3"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3183">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3184">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3185">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3186">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client.c"
                 line="3187">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <property name="background"
                version="0.5.3"
                writable="1"
                transfer-ownership="none"
                setter="set_background"
                getter="get_background"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="cache-age"
                version="0.6.10"
                writable="1"
                transfer-ownership="none"
                setter="set_cache_age"
                getter="get_cache_age"
                default-value="4294967295">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="details-with-deps-size"
                version="1.2.7"
                writable="1"
                transfer-ownership="none"
                setter="set_details_with_deps_size"
                getter="get_details_with_deps_size"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="idle"
                version="0.5.4"
                transfer-ownership="none"
                getter="get_idle"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="interactive"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                setter="set_interactive"
                getter="get_interactive"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="locale"
                version="0.5.3"
                writable="1"
                transfer-ownership="none"
                setter="set_locale"
                getter="get_locale"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ClientPrivate" c:type="PkClientPrivate*"/>
      </field>
    </class>
    <record name="ClientClass"
            c:type="PkClientClass"
            glib:is-gtype-struct-for="Client">
      <source-position filename="lib/packagekit-glib2/pk-client.h" line="108"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="changed">
        <callback name="changed">
          <source-position filename="lib/packagekit-glib2/pk-client.h"
                           line="101"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="PkClient*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_pk_reserved1" introspectable="0">
        <callback name="_pk_reserved1">
          <source-position filename="lib/packagekit-glib2/pk-client.h"
                           line="103"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved2" introspectable="0">
        <callback name="_pk_reserved2">
          <source-position filename="lib/packagekit-glib2/pk-client.h"
                           line="104"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved3" introspectable="0">
        <callback name="_pk_reserved3">
          <source-position filename="lib/packagekit-glib2/pk-client.h"
                           line="105"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved4" introspectable="0">
        <callback name="_pk_reserved4">
          <source-position filename="lib/packagekit-glib2/pk-client.h"
                           line="106"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved5" introspectable="0">
        <callback name="_pk_reserved5">
          <source-position filename="lib/packagekit-glib2/pk-client.h"
                           line="107"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="ClientError"
                 glib:type-name="PkClientError"
                 glib:get-type="pk_client_error_get_type"
                 c:type="PkClientError"
                 glib:error-domain="pk-client-error-quark">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-client.h"
           line="48">Errors that can be thrown</doc>
      <member name="failed"
              value="0"
              c:identifier="PK_CLIENT_ERROR_FAILED"
              glib:nick="failed"
              glib:name="PK_CLIENT_ERROR_FAILED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.h"
             line="50">the transaction failed for an unknown reason</doc>
      </member>
      <member name="failed_auth"
              value="1"
              c:identifier="PK_CLIENT_ERROR_FAILED_AUTH"
              glib:nick="failed-auth"
              glib:name="PK_CLIENT_ERROR_FAILED_AUTH">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.h"
             line="51">the transaction failed authentication/authorization</doc>
      </member>
      <member name="no_tid"
              value="2"
              c:identifier="PK_CLIENT_ERROR_NO_TID"
              glib:nick="no-tid"
              glib:name="PK_CLIENT_ERROR_NO_TID">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.h"
             line="52">the transaction id was not pre-allocated (internal error)</doc>
      </member>
      <member name="already_tid"
              value="3"
              c:identifier="PK_CLIENT_ERROR_ALREADY_TID"
              glib:nick="already-tid"
              glib:name="PK_CLIENT_ERROR_ALREADY_TID">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.h"
             line="53">the transaction id has already been used (internal error)</doc>
      </member>
      <member name="role_unknown"
              value="4"
              c:identifier="PK_CLIENT_ERROR_ROLE_UNKNOWN"
              glib:nick="role-unknown"
              glib:name="PK_CLIENT_ERROR_ROLE_UNKNOWN">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.h"
             line="54">the role was not set (internal error)</doc>
      </member>
      <member name="cannot_start_daemon"
              value="5"
              c:identifier="PK_CLIENT_ERROR_CANNOT_START_DAEMON"
              glib:nick="cannot-start-daemon"
              glib:name="PK_CLIENT_ERROR_CANNOT_START_DAEMON">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.h"
             line="55">the PackageKit daemon failed to start</doc>
      </member>
      <member name="invalid_input"
              value="6"
              c:identifier="PK_CLIENT_ERROR_INVALID_INPUT"
              glib:nick="invalid-input"
              glib:name="PK_CLIENT_ERROR_INVALID_INPUT">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.h"
             line="56">the package_id is invalid</doc>
      </member>
      <member name="invalid_file"
              value="7"
              c:identifier="PK_CLIENT_ERROR_INVALID_FILE"
              glib:nick="invalid-file"
              glib:name="PK_CLIENT_ERROR_INVALID_FILE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.h"
             line="57">the file is invalid</doc>
      </member>
      <member name="not_supported"
              value="8"
              c:identifier="PK_CLIENT_ERROR_NOT_SUPPORTED"
              glib:nick="not-supported"
              glib:name="PK_CLIENT_ERROR_NOT_SUPPORTED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.h"
             line="58">the action is not supported</doc>
      </member>
      <member name="declined_simulation"
              value="9"
              c:identifier="PK_CLIENT_ERROR_DECLINED_SIMULATION"
              glib:nick="declined-simulation"
              glib:name="PK_CLIENT_ERROR_DECLINED_SIMULATION">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.h"
             line="59">the simulation was declined by the user</doc>
      </member>
      <member name="declined_interaction"
              value="10"
              c:identifier="PK_CLIENT_ERROR_DECLINED_INTERACTION"
              glib:nick="declined-interaction"
              glib:name="PK_CLIENT_ERROR_DECLINED_INTERACTION">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.h"
             line="60">the user declined interaction on the task</doc>
      </member>
      <member name="last"
              value="11"
              c:identifier="PK_CLIENT_ERROR_LAST"
              glib:nick="last"
              glib:name="PK_CLIENT_ERROR_LAST">
      </member>
      <function name="quark"
                c:identifier="pk_client_error_quark"
                version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="400">An error quark for #PkClientError.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client.c"
               line="405">an error quark.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="ClientHelper"
           c:symbol-prefix="client_helper"
           c:type="PkClientHelper"
           parent="GObject.Object"
           glib:type-name="PkClientHelper"
           glib:get-type="pk_client_helper_get_type"
           glib:type-struct="ClientHelperClass">
      <source-position filename="lib/packagekit-glib2/pk-client-helper.h"
                       line="62"/>
      <constructor name="new"
                   c:identifier="pk_client_helper_new"
                   version="0.6.10">
        <source-position filename="lib/packagekit-glib2/pk-client-helper.h"
                         line="65"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-helper.c"
               line="629">a new #PkClientHelper object.</doc>
          <type name="ClientHelper" c:type="PkClientHelper*"/>
        </return-value>
      </constructor>
      <method name="is_active"
              c:identifier="pk_client_helper_is_active"
              version="1.1.13">
        <source-position filename="lib/packagekit-glib2/pk-client-helper.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-helper.c"
               line="548">TRUE if there is an accepted connection, FALSE
              otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client_helper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-helper.c"
                 line="546">a valid #PkClientHelper instance</doc>
            <type name="ClientHelper" c:type="PkClientHelper*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="start"
              c:identifier="pk_client_helper_start"
              version="0.6.10"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-helper.c"
             line="400">Starts the helper process, by running the helper process and setting
up the socket for use.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-helper.h"
                         line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-helper.c"
               line="411">%TRUE for success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client_helper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-helper.c"
                 line="402">a valid #PkClientHelper instance</doc>
            <type name="ClientHelper" c:type="PkClientHelper*"/>
          </instance-parameter>
          <parameter name="socket_filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-helper.c"
                 line="403">a socket filename that does not already exist</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="argv" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-helper.c"
                 line="404">the executable, along with any arguments</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="envp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-helper.c"
                 line="405">the environment</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_with_socket"
              c:identifier="pk_client_helper_start_with_socket"
              version="1.1.13"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-helper.c"
             line="493">Starts the helper process, by running the helper process and setting
up the socket for use.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-helper.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-helper.c"
               line="504">%TRUE for success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client_helper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-helper.c"
                 line="495">a valid #PkClientHelper instance</doc>
            <type name="ClientHelper" c:type="PkClientHelper*"/>
          </instance-parameter>
          <parameter name="socket" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-helper.c"
                 line="496">the (bound and listening) #GSocket instance to use</doc>
            <type name="Gio.Socket" c:type="GSocket*"/>
          </parameter>
          <parameter name="argv" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-helper.c"
                 line="497">the executable, along with any arguments</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="envp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-helper.c"
                 line="498">the environment</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="stop"
              c:identifier="pk_client_helper_stop"
              version="0.6.10"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client-helper.c"
             line="123">Stops the helper process, by killing the helper process and deleting
the socket.</doc>
        <source-position filename="lib/packagekit-glib2/pk-client-helper.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-client-helper.c"
               line="131">%TRUE for success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client_helper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-client-helper.c"
                 line="125">a valid #PkClientHelper instance</doc>
            <type name="ClientHelper" c:type="PkClientHelper*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ClientHelperPrivate" c:type="PkClientHelperPrivate*"/>
      </field>
    </class>
    <record name="ClientHelperClass"
            c:type="PkClientHelperClass"
            glib:is-gtype-struct-for="ClientHelper">
      <source-position filename="lib/packagekit-glib2/pk-client-helper.h"
                       line="62"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_pk_reserved1" introspectable="0">
        <callback name="_pk_reserved1">
          <source-position filename="lib/packagekit-glib2/pk-client-helper.h"
                           line="57"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved2" introspectable="0">
        <callback name="_pk_reserved2">
          <source-position filename="lib/packagekit-glib2/pk-client-helper.h"
                           line="58"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved3" introspectable="0">
        <callback name="_pk_reserved3">
          <source-position filename="lib/packagekit-glib2/pk-client-helper.h"
                           line="59"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved4" introspectable="0">
        <callback name="_pk_reserved4">
          <source-position filename="lib/packagekit-glib2/pk-client-helper.h"
                           line="60"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved5" introspectable="0">
        <callback name="_pk_reserved5">
          <source-position filename="lib/packagekit-glib2/pk-client-helper.h"
                           line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ClientHelperPrivate"
            c:type="PkClientHelperPrivate"
            disguised="1"
            opaque="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-client-helper.c"
           line="61">Private #PkClientHelper data</doc>
      <source-position filename="lib/packagekit-glib2/pk-client-helper.h"
                       line="43"/>
    </record>
    <record name="ClientPrivate"
            c:type="PkClientPrivate"
            disguised="1"
            opaque="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-client.c"
           line="54">Private #PkClient data</doc>
      <source-position filename="lib/packagekit-glib2/pk-client.h" line="82"/>
    </record>
    <class name="Control"
           c:symbol-prefix="control"
           c:type="PkControl"
           parent="GObject.Object"
           glib:type-name="PkControl"
           glib:get-type="pk_control_get_type"
           glib:type-struct="ControlClass">
      <source-position filename="lib/packagekit-glib2/pk-control.h" line="93"/>
      <constructor name="new" c:identifier="pk_control_new" version="0.5.2">
        <source-position filename="lib/packagekit-glib2/pk-control.h"
                         line="97"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-control.c"
               line="2451">a new #PkControl object.</doc>
          <type name="Control" c:type="PkControl*"/>
        </return-value>
      </constructor>
      <virtual-method name="connection_changed">
        <source-position filename="lib/packagekit-glib2/pk-control.h"
                         line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="control" transfer-ownership="none">
            <type name="Control" c:type="PkControl*"/>
          </instance-parameter>
          <parameter name="connected" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="locked">
        <source-position filename="lib/packagekit-glib2/pk-control.h"
                         line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="control" transfer-ownership="none">
            <type name="Control" c:type="PkControl*"/>
          </instance-parameter>
          <parameter name="is_locked" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="network_state_changed">
        <source-position filename="lib/packagekit-glib2/pk-control.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="control" transfer-ownership="none">
            <type name="Control" c:type="PkControl*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="repo_list_changed">
        <source-position filename="lib/packagekit-glib2/pk-control.h"
                         line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="control" transfer-ownership="none">
            <type name="Control" c:type="PkControl*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="restart_schedule">
        <source-position filename="lib/packagekit-glib2/pk-control.h"
                         line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="control" transfer-ownership="none">
            <type name="Control" c:type="PkControl*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="transaction_list_changed">
        <source-position filename="lib/packagekit-glib2/pk-control.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="control" transfer-ownership="none">
            <type name="Control" c:type="PkControl*"/>
          </instance-parameter>
          <parameter name="transaction_ids" transfer-ownership="none">
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="updates_changed">
        <source-position filename="lib/packagekit-glib2/pk-control.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="control" transfer-ownership="none">
            <type name="Control" c:type="PkControl*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="can_authorize_async"
              c:identifier="pk_control_can_authorize_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-control.c"
             line="1785">We may want to know before we run a method if we are going to be denied,
accepted or challenged for authentication.</doc>
        <source-position filename="lib/packagekit-glib2/pk-control.h"
                         line="154"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="control" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1787">a valid #PkControl instance</doc>
            <type name="Control" c:type="PkControl*"/>
          </instance-parameter>
          <parameter name="action_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1788">The action ID, for instance "org.freedesktop.PackageKit.install-untrusted"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1789">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1790">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1791">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="can_authorize_finish"
              c:identifier="pk_control_can_authorize_finish"
              version="0.5.2"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-control.c"
             line="1854">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/packagekit-glib2/pk-control.h"
                         line="159"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-control.c"
               line="1862">the #PkAuthorizeEnum or %PK_AUTHORIZE_ENUM_UNKNOWN if the method failed</doc>
          <type name="AuthorizeEnum" c:type="PkAuthorizeEnum"/>
        </return-value>
        <parameters>
          <instance-parameter name="control" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1856">a valid #PkControl instance</doc>
            <type name="Control" c:type="PkControl*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1857">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_daemon_state_async"
              c:identifier="pk_control_get_daemon_state_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-control.c"
             line="907">Gets the debugging state from the daemon.</doc>
        <source-position filename="lib/packagekit-glib2/pk-control.h"
                         line="113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="control" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="909">a valid #PkControl instance</doc>
            <type name="Control" c:type="PkControl*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="910">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="911">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="912">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_daemon_state_finish"
              c:identifier="pk_control_get_daemon_state_finish"
              version="0.5.2"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-control.c"
             line="970">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/packagekit-glib2/pk-control.h"
                         line="117"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-control.c"
               line="978">the ID, or %NULL if unset, free with g_free()</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="control" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="972">a valid #PkControl instance</doc>
            <type name="Control" c:type="PkControl*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="973">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_properties"
              c:identifier="pk_control_get_properties"
              version="0.5.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-control-sync.c"
             line="54">Gets the properties the daemon supports.
Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-control-sync.h"
                         line="30"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-control-sync.c"
               line="64">%TRUE if the properties were set correctly</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="control" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control-sync.c"
                 line="56">a valid #PkControl instance</doc>
            <type name="Control" c:type="PkControl*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control-sync.c"
                 line="57">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_properties_async"
              c:identifier="pk_control_get_properties_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-control.c"
             line="1949">Gets global properties from the daemon.</doc>
        <source-position filename="lib/packagekit-glib2/pk-control.h"
                         line="162"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="control" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1951">a valid #PkControl instance</doc>
            <type name="Control" c:type="PkControl*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1952">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1953">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1954">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_properties_finish"
              c:identifier="pk_control_get_properties_finish"
              version="0.5.2"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-control.c"
             line="2015">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/packagekit-glib2/pk-control.h"
                         line="166"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-control.c"
               line="2023">%TRUE if we set the proxy successfully</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="control" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="2017">a valid #PkControl instance</doc>
            <type name="Control" c:type="PkControl*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="2018">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_tid_async"
              c:identifier="pk_control_get_tid_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-control.c"
             line="511">Gets a transacton ID from the daemon.</doc>
        <source-position filename="lib/packagekit-glib2/pk-control.h"
                         line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="control" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="513">a valid #PkControl instance</doc>
            <type name="Control" c:type="PkControl*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="514">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="515">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="516">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_tid_finish"
              c:identifier="pk_control_get_tid_finish"
              version="0.5.2"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-control.c"
             line="574">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/packagekit-glib2/pk-control.h"
                         line="103"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-control.c"
               line="582">the ID, or %NULL if unset, free with g_free()</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="control" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="576">a valid #PkControl instance</doc>
            <type name="Control" c:type="PkControl*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="577">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_time_since_action_async"
              c:identifier="pk_control_get_time_since_action_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-control.c"
             line="1576">We may want to know how long it has been since we refreshed the cache or
retrieved the update list.</doc>
        <source-position filename="lib/packagekit-glib2/pk-control.h"
                         line="139"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="control" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1578">a valid #PkControl instance</doc>
            <type name="Control" c:type="PkControl*"/>
          </instance-parameter>
          <parameter name="role" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1579">the role enum, e.g. %PK_ROLE_ENUM_GET_UPDATES</doc>
            <type name="RoleEnum" c:type="PkRoleEnum"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1580">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1581">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1582">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_time_since_action_finish"
              c:identifier="pk_control_get_time_since_action_finish"
              version="0.5.2"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-control.c"
             line="1644">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/packagekit-glib2/pk-control.h"
                         line="144"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-control.c"
               line="1652">%TRUE if the daemon serviced the request</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="control" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1646">a valid #PkControl instance</doc>
            <type name="Control" c:type="PkControl*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1647">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_transaction_list"
              c:identifier="pk_control_get_transaction_list"
              version="0.5.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-control-sync.c"
             line="111">Gets the transaction list in progress.
Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-control-sync.h"
                         line="33"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-control-sync.c"
               line="121">The list of transaction id's, or %NULL, free with g_strfreev()</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="control" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control-sync.c"
                 line="113">a valid #PkControl instance</doc>
            <type name="Control" c:type="PkControl*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control-sync.c"
                 line="114">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_transaction_list_async"
              c:identifier="pk_control_get_transaction_list_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-control.c"
             line="1371">Gets the transactions currently running in the daemon.</doc>
        <source-position filename="lib/packagekit-glib2/pk-control.h"
                         line="147"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="control" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1373">a valid #PkControl instance</doc>
            <type name="Control" c:type="PkControl*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1374">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1375">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1376">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_transaction_list_finish"
              c:identifier="pk_control_get_transaction_list_finish"
              version="0.5.2"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-control.c"
             line="1434">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/packagekit-glib2/pk-control.h"
                         line="151"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-control.c"
               line="1442">A GStrv list of transaction ID's, free with g_strfreev()</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="control" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1436">a valid #PkControl instance</doc>
            <type name="Control" c:type="PkControl*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1437">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_proxy"
              c:identifier="pk_control_set_proxy"
              version="0.6.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-control-sync.c"
             line="295">Sets the network proxy to use in the daemon.
Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-control-sync.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-control-sync.c"
               line="307">%TRUE if the proxy was set correctly

NOTE: This is just provided for backwards compatibility.
Clients should really be using pk_control_set_proxy2().</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="control" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control-sync.c"
                 line="297">a valid #PkControl instance</doc>
            <type name="Control" c:type="PkControl*"/>
          </instance-parameter>
          <parameter name="proxy_http" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control-sync.c"
                 line="298">the HTTP proxy server</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="proxy_ftp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control-sync.c"
                 line="299">the FTP proxy server</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control-sync.c"
                 line="300">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_proxy2"
              c:identifier="pk_control_set_proxy2"
              version="0.6.13"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-control-sync.c"
             line="225">Sets the network proxy to use in the daemon.
Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-control-sync.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-control-sync.c"
               line="241">%TRUE if the proxy was set correctly</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="control" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control-sync.c"
                 line="227">a valid #PkControl instance</doc>
            <type name="Control" c:type="PkControl*"/>
          </instance-parameter>
          <parameter name="proxy_http" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control-sync.c"
                 line="228">the HTTP proxy server</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="proxy_https" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control-sync.c"
                 line="229">the HTTPS proxy server</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="proxy_ftp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control-sync.c"
                 line="230">the FTP proxy server</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="proxy_socks" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control-sync.c"
                 line="231">the SOCKS proxy server</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="no_proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control-sync.c"
                 line="232">the list of download IPs that shouldn't go through the proxy</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="pac" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control-sync.c"
                 line="233">the PAC string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control-sync.c"
                 line="234">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_proxy2_async"
              c:identifier="pk_control_set_proxy2_async"
              version="0.6.13">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-control.c"
             line="1107">Set a proxy on the PK daemon</doc>
        <source-position filename="lib/packagekit-glib2/pk-control.h"
                         line="126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="control" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1109">a valid #PkControl instance</doc>
            <type name="Control" c:type="PkControl*"/>
          </instance-parameter>
          <parameter name="proxy_http" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1110">a HTTP proxy string such as "username:password@server.lan:8080", or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="proxy_https" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1111">a HTTPS proxy string such as "username:password@server.lan:8080", or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="proxy_ftp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1112">a FTP proxy string such as "server.lan:8080", or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="proxy_socks" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1113">a SOCKS proxy string such as "server.lan:8080", or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="no_proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1114">a list of download IPs that shouldn't go through the proxy, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="pac" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1115">a PAC string, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1116">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="8">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1117">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1118">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_proxy_async"
              c:identifier="pk_control_set_proxy_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-control.c"
             line="1190">Set a proxy on the PK daemon

NOTE: This is just provided for backwards compatibility.
Clients should really be using pk_control_set_proxy2_async().</doc>
        <source-position filename="lib/packagekit-glib2/pk-control.h"
                         line="120"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="control" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1192">a valid #PkControl instance</doc>
            <type name="Control" c:type="PkControl*"/>
          </instance-parameter>
          <parameter name="proxy_http" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1193">a HTTP proxy string such as "username:password@server.lan:8080"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="proxy_ftp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1194">a FTP proxy string such as "server.lan:8080"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1195">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1196">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1197">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_proxy_finish"
              c:identifier="pk_control_set_proxy_finish"
              version="0.5.2"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-control.c"
             line="1226">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/packagekit-glib2/pk-control.h"
                         line="136"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-control.c"
               line="1234">%TRUE if we set the proxy successfully</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="control" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1228">a valid #PkControl instance</doc>
            <type name="Control" c:type="PkControl*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="1229">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="suggest_daemon_quit"
              c:identifier="pk_control_suggest_daemon_quit"
              version="0.6.2"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-control-sync.c"
             line="168">Suggests to the daemon that it should quit as soon as possible.
Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-control-sync.h"
                         line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-control-sync.c"
               line="178">%TRUE if the suggestion was sent</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="control" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control-sync.c"
                 line="170">a valid #PkControl instance</doc>
            <type name="Control" c:type="PkControl*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control-sync.c"
                 line="171">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="suggest_daemon_quit_async"
              c:identifier="pk_control_suggest_daemon_quit_async"
              version="0.6.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-control.c"
             line="709">Suggests to the daemon that it should quit as soon as possible.</doc>
        <source-position filename="lib/packagekit-glib2/pk-control.h"
                         line="106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="control" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="711">a valid #PkControl instance</doc>
            <type name="Control" c:type="PkControl*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="712">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="713">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="714">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="suggest_daemon_quit_finish"
              c:identifier="pk_control_suggest_daemon_quit_finish"
              version="0.6.2"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-control.c"
             line="772">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/packagekit-glib2/pk-control.h"
                         line="110"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-control.c"
               line="780">%TRUE if the suggestion was sent</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="control" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="774">a valid #PkControl instance</doc>
            <type name="Control" c:type="PkControl*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="775">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="backend-author"
                version="0.5.2"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="backend-description"
                version="0.5.2"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="backend-name"
                version="0.5.2"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="connected"
                version="0.5.3"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="distro-id"
                version="0.5.5"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="filters"
                version="0.5.2"
                writable="1"
                transfer-ownership="none"
                default-value="0">
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="groups"
                version="0.5.2"
                writable="1"
                transfer-ownership="none"
                default-value="0">
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="locked"
                version="0.5.3"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="mime-types"
                version="0.8.1"
                writable="1"
                transfer-ownership="none">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="network-state"
                version="0.5.3"
                writable="1"
                transfer-ownership="none"
                default-value="PK_NETWORK_ENUM_LAST">
        <type name="NetworkEnum"/>
      </property>
      <property name="provides"
                version="0.8.8"
                writable="1"
                transfer-ownership="none"
                default-value="0">
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="roles"
                version="0.5.2"
                writable="1"
                transfer-ownership="none"
                default-value="0">
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="version-major"
                version="0.5.2"
                transfer-ownership="none"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="version-micro"
                version="0.5.2"
                transfer-ownership="none"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="version-minor"
                version="0.5.2"
                transfer-ownership="none"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ControlPrivate" c:type="PkControlPrivate*"/>
      </field>
      <glib:signal name="repo-list-changed" when="last">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-control.c"
             line="2299">The ::repo-list-changed signal is emitted when the repo list may have
changed and the control program may have to update some UI.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="restart-schedule" when="last">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-control.c"
             line="2312">The ::restart_schedule signal is emitted when the packagekitd service
has been restarted because it has been upgraded.
Client programs should reload themselves when it is convenient to
do so, as old client tools may not be compatable with the new daemon.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="transaction-list-changed" when="last">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-control.c"
             line="2327">The ::transaction-list-changed signal is emitted when the list
of transactions handled by the daemon is changed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="transaction_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-control.c"
                 line="2330">an #GStrv array of transaction ID's</doc>
            <array>
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="updates-changed" when="last">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-control.c"
             line="2286">The ::updates-changed signal is emitted when the update list may have
changed and the control program may have to update some UI.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ControlClass"
            c:type="PkControlClass"
            glib:is-gtype-struct-for="Control">
      <source-position filename="lib/packagekit-glib2/pk-control.h" line="93"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="transaction_list_changed">
        <callback name="transaction_list_changed">
          <source-position filename="lib/packagekit-glib2/pk-control.h"
                           line="77"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="control" transfer-ownership="none">
              <type name="Control" c:type="PkControl*"/>
            </parameter>
            <parameter name="transaction_ids" transfer-ownership="none">
              <type name="utf8" c:type="gchar**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="updates_changed">
        <callback name="updates_changed">
          <source-position filename="lib/packagekit-glib2/pk-control.h"
                           line="79"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="control" transfer-ownership="none">
              <type name="Control" c:type="PkControl*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="repo_list_changed">
        <callback name="repo_list_changed">
          <source-position filename="lib/packagekit-glib2/pk-control.h"
                           line="80"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="control" transfer-ownership="none">
              <type name="Control" c:type="PkControl*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="network_state_changed">
        <callback name="network_state_changed">
          <source-position filename="lib/packagekit-glib2/pk-control.h"
                           line="81"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="control" transfer-ownership="none">
              <type name="Control" c:type="PkControl*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="restart_schedule">
        <callback name="restart_schedule">
          <source-position filename="lib/packagekit-glib2/pk-control.h"
                           line="82"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="control" transfer-ownership="none">
              <type name="Control" c:type="PkControl*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="locked">
        <callback name="locked">
          <source-position filename="lib/packagekit-glib2/pk-control.h"
                           line="83"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="control" transfer-ownership="none">
              <type name="Control" c:type="PkControl*"/>
            </parameter>
            <parameter name="is_locked" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="connection_changed">
        <callback name="connection_changed">
          <source-position filename="lib/packagekit-glib2/pk-control.h"
                           line="85"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="control" transfer-ownership="none">
              <type name="Control" c:type="PkControl*"/>
            </parameter>
            <parameter name="connected" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_pk_reserved1" introspectable="0">
        <callback name="_pk_reserved1">
          <source-position filename="lib/packagekit-glib2/pk-control.h"
                           line="88"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved2" introspectable="0">
        <callback name="_pk_reserved2">
          <source-position filename="lib/packagekit-glib2/pk-control.h"
                           line="89"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved3" introspectable="0">
        <callback name="_pk_reserved3">
          <source-position filename="lib/packagekit-glib2/pk-control.h"
                           line="90"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved4" introspectable="0">
        <callback name="_pk_reserved4">
          <source-position filename="lib/packagekit-glib2/pk-control.h"
                           line="91"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved5" introspectable="0">
        <callback name="_pk_reserved5">
          <source-position filename="lib/packagekit-glib2/pk-control.h"
                           line="92"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="ControlError"
                 glib:type-name="PkControlError"
                 glib:get-type="pk_control_error_get_type"
                 c:type="PkControlError"
                 glib:error-domain="pk-control-error-quark">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-control.h"
           line="53">Errors that can be thrown</doc>
      <member name="failed"
              value="0"
              c:identifier="PK_CONTROL_ERROR_FAILED"
              glib:nick="failed"
              glib:name="PK_CONTROL_ERROR_FAILED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-control.h"
             line="55">the transaction failed for an unknown reason</doc>
      </member>
      <member name="cannot_start_daemon"
              value="1"
              c:identifier="PK_CONTROL_ERROR_CANNOT_START_DAEMON"
              glib:nick="cannot-start-daemon"
              glib:name="PK_CONTROL_ERROR_CANNOT_START_DAEMON">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-control.h"
             line="56">the PackageKit daemon failed to start</doc>
      </member>
      <function name="quark"
                c:identifier="pk_control_error_quark"
                version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-control.c"
             line="125">We are a GObject that sets errors</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-control.c"
               line="130">Our personal error quark.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <record name="ControlPrivate"
            c:type="PkControlPrivate"
            disguised="1"
            opaque="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-control.c"
           line="47">Private #PkControl data</doc>
      <source-position filename="lib/packagekit-glib2/pk-control.h" line="45"/>
    </record>
    <constant name="DBUS_INTERFACE"
              value="org.freedesktop.PackageKit"
              c:type="PK_DBUS_INTERFACE">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-common.h"
           line="49">The DBUS interface used by the PackageKit service.</doc>
      <source-position filename="lib/packagekit-glib2/pk-common.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_INTERFACE_OFFLINE"
              value="org.freedesktop.PackageKit.Offline"
              c:type="PK_DBUS_INTERFACE_OFFLINE">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-common.h"
           line="63">The DBUS interface for PackageKit offline update functionality</doc>
      <source-position filename="lib/packagekit-glib2/pk-common.h" line="68"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_INTERFACE_TRANSACTION"
              value="org.freedesktop.PackageKit.Transaction"
              c:type="PK_DBUS_INTERFACE_TRANSACTION">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-common.h"
           line="56">The DBUS interface for PackageKit transactions.</doc>
      <source-position filename="lib/packagekit-glib2/pk-common.h" line="61"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_PATH"
              value="/org/freedesktop/PackageKit"
              c:type="PK_DBUS_PATH">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-common.h"
           line="42">The DBUS path to the PackageKit service.</doc>
      <source-position filename="lib/packagekit-glib2/pk-common.h" line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_SERVICE"
              value="org.freedesktop.PackageKit"
              c:type="PK_DBUS_SERVICE">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-common.h"
           line="35">The DBUS name for the PackageKit system service.</doc>
      <source-position filename="lib/packagekit-glib2/pk-common.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="DESKTOP"
                    c:identifier="PK_DESKTOP"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-desktop.h" line="34"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DESKTOP_CLASS"
                    c:identifier="PK_DESKTOP_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-desktop.h" line="35"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="DESKTOP_DEFAULT_APPLICATION_DIR"
              value="/usr/share/applications"
              c:type="PK_DESKTOP_DEFAULT_APPLICATION_DIR">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-desktop.h"
           line="47">The default location for the desktop files</doc>
      <source-position filename="lib/packagekit-glib2/pk-desktop.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="DESKTOP_GET_CLASS"
                    c:identifier="PK_DESKTOP_GET_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-desktop.h" line="38"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DETAILS"
                    c:identifier="PK_DETAILS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-details.h" line="37"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DETAILS_CLASS"
                    c:identifier="PK_DETAILS_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-details.h" line="38"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DETAILS_GET_CLASS"
                    c:identifier="PK_DETAILS_GET_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-details.h" line="41"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DISTRO_UPGRADE"
                    c:identifier="PK_DISTRO_UPGRADE"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-distro-upgrade.h"
                       line="37"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DISTRO_UPGRADE_CLASS"
                    c:identifier="PK_DISTRO_UPGRADE_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-distro-upgrade.h"
                       line="38"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DISTRO_UPGRADE_GET_CLASS"
                    c:identifier="PK_DISTRO_UPGRADE_GET_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-distro-upgrade.h"
                       line="41"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Desktop"
           c:symbol-prefix="desktop"
           c:type="PkDesktop"
           parent="GObject.Object"
           glib:type-name="PkDesktop"
           glib:get-type="pk_desktop_get_type"
           glib:type-struct="DesktopClass">
      <source-position filename="lib/packagekit-glib2/pk-desktop.h" line="75"/>
      <constructor name="new" c:identifier="pk_desktop_new" version="0.5.3">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-desktop.c"
             line="169">NOTE: This method is unused and will be removed next time the library
soname changes!</doc>
        <source-position filename="lib/packagekit-glib2/pk-desktop.h"
                         line="78"/>
        <return-value transfer-ownership="full">
          <type name="Desktop" c:type="PkDesktop*"/>
        </return-value>
      </constructor>
      <method name="get_files_for_package"
              c:identifier="pk_desktop_get_files_for_package"
              version="0.5.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-desktop.c"
             line="52">Return all desktop files owned by a package, regardless if they are shown
in the main menu or not.</doc>
        <source-position filename="lib/packagekit-glib2/pk-desktop.h"
                         line="82"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-desktop.c"
               line="61">string array of results, free with g_ptr_array_unref()

NOTE: This method is unused and will be removed next time the library
soname changes!</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="desktop" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-desktop.c"
                 line="54">a valid #PkDesktop instance</doc>
            <type name="Desktop" c:type="PkDesktop*"/>
          </instance-parameter>
          <parameter name="package" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-desktop.c"
                 line="55">the package name, e.g. "gnome-power-manager"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_package_for_file"
              c:identifier="pk_desktop_get_package_for_file"
              version="0.5.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-desktop.c"
             line="98">Returns the package name that owns the desktop file. Fast.</doc>
        <source-position filename="lib/packagekit-glib2/pk-desktop.h"
                         line="88"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-desktop.c"
               line="106">package name, or %NULL

NOTE: This method is unused and will be removed next time the library
soname changes!</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="desktop" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-desktop.c"
                 line="100">a valid #PkDesktop instance</doc>
            <type name="Desktop" c:type="PkDesktop*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-desktop.c"
                 line="101">a fully qualified filename</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_shown_for_package"
              c:identifier="pk_desktop_get_shown_for_package"
              version="0.5.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-desktop.c"
             line="75">Return all desktop files owned by a package that would be shown in a menu,
i.e are an application</doc>
        <source-position filename="lib/packagekit-glib2/pk-desktop.h"
                         line="85"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-desktop.c"
               line="84">string array of results, free with g_ptr_array_unref()

NOTE: This method is unused and will be removed next time the library
soname changes!</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="desktop" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-desktop.c"
                 line="77">a valid #PkDesktop instance</doc>
            <type name="Desktop" c:type="PkDesktop*"/>
          </instance-parameter>
          <parameter name="package" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-desktop.c"
                 line="78">the package name, e.g. "gnome-power-manager"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_database"
              c:identifier="pk_desktop_open_database"
              version="0.5.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-desktop.c"
             line="120">This method is unused and will be removed next time the library
soname changes!</doc>
        <source-position filename="lib/packagekit-glib2/pk-desktop.h"
                         line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-desktop.c"
               line="128">%TRUE if opened correctly</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="desktop" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-desktop.c"
                 line="122">a valid #PkDesktop instance</doc>
            <type name="Desktop" c:type="PkDesktop*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="DesktopPrivate" c:type="PkDesktopPrivate*"/>
      </field>
    </class>
    <record name="DesktopClass"
            c:type="PkDesktopClass"
            glib:is-gtype-struct-for="Desktop">
      <source-position filename="lib/packagekit-glib2/pk-desktop.h" line="75"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="DesktopPrivate"
            c:type="PkDesktopPrivate"
            disguised="1"
            opaque="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-desktop.c"
           line="39">Private #PkDesktop data</doc>
      <source-position filename="lib/packagekit-glib2/pk-desktop.h" line="58"/>
    </record>
    <class name="Details"
           c:symbol-prefix="details"
           c:type="PkDetails"
           parent="Source"
           glib:type-name="PkDetails"
           glib:get-type="pk_details_get_type"
           glib:type-struct="DetailsClass">
      <source-position filename="lib/packagekit-glib2/pk-details.h" line="66"/>
      <constructor name="new" c:identifier="pk_details_new" version="0.5.4">
        <source-position filename="lib/packagekit-glib2/pk-details.h"
                         line="69"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-details.c"
               line="422">a new #PkDetails object.</doc>
          <type name="Details" c:type="PkDetails*"/>
        </return-value>
      </constructor>
      <method name="get_description"
              c:identifier="pk_details_get_description"
              glib:get-property="description"
              version="0.8.12">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-details.c"
             line="125">Gets the description for the details object.</doc>
        <source-position filename="lib/packagekit-glib2/pk-details.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-details.c"
               line="131">string value</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-details.c"
                 line="127">a #PkDetails instance</doc>
            <type name="Details" c:type="PkDetails*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_download_size"
              c:identifier="pk_details_get_download_size"
              glib:get-property="download-size"
              version="1.2.4">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-details.c"
             line="194">Gets the package download size.</doc>
        <source-position filename="lib/packagekit-glib2/pk-details.h"
                         line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-details.c"
               line="200">the package download size, 0 if already downloaded and G_MAXUINT64 when unknown</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-details.c"
                 line="196">a #PkDetails instance</doc>
            <type name="Details" c:type="PkDetails*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_group"
              c:identifier="pk_details_get_group"
              glib:get-property="group"
              version="0.8.12">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-details.c"
             line="108">Gets the group for the details object.</doc>
        <source-position filename="lib/packagekit-glib2/pk-details.h"
                         line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-details.c"
               line="114">string value</doc>
          <type name="GroupEnum" c:type="PkGroupEnum"/>
        </return-value>
        <parameters>
          <instance-parameter name="details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-details.c"
                 line="110">a #PkDetails instance</doc>
            <type name="Details" c:type="PkDetails*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_license"
              c:identifier="pk_details_get_license"
              glib:get-property="license"
              version="0.8.12">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-details.c"
             line="91">Gets the license for the details object.</doc>
        <source-position filename="lib/packagekit-glib2/pk-details.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-details.c"
               line="97">string value</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-details.c"
                 line="93">a #PkDetails instance</doc>
            <type name="Details" c:type="PkDetails*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_package_id"
              c:identifier="pk_details_get_package_id"
              glib:get-property="package-id"
              version="0.8.12">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-details.c"
             line="74">Gets the PackageId for the details object.</doc>
        <source-position filename="lib/packagekit-glib2/pk-details.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-details.c"
               line="80">string value</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-details.c"
                 line="76">a #PkDetails instance</doc>
            <type name="Details" c:type="PkDetails*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="pk_details_get_size"
              glib:get-property="size"
              version="0.8.12">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-details.c"
             line="176">Gets the size for the details object: for installed packages it will return
the installed size, for the rest the package size.</doc>
        <source-position filename="lib/packagekit-glib2/pk-details.h"
                         line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-details.c"
               line="183">string value</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-details.c"
                 line="178">a #PkDetails instance</doc>
            <type name="Details" c:type="PkDetails*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_summary"
              c:identifier="pk_details_get_summary"
              glib:get-property="summary"
              version="0.9.1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-details.c"
             line="159">Gets the summary for the details object.</doc>
        <source-position filename="lib/packagekit-glib2/pk-details.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-details.c"
               line="165">string value</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-details.c"
                 line="161">a #PkDetails instance</doc>
            <type name="Details" c:type="PkDetails*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_url"
              c:identifier="pk_details_get_url"
              glib:get-property="url"
              version="0.8.12">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-details.c"
             line="142">Gets the url for the details object.</doc>
        <source-position filename="lib/packagekit-glib2/pk-details.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-details.c"
               line="148">string value</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-details.c"
                 line="144">a #PkDetails instance</doc>
            <type name="Details" c:type="PkDetails*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="description"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                getter="get_description"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="download-size"
                version="1.2.4"
                writable="1"
                transfer-ownership="none"
                getter="get_download_size"
                default-value="18446744073709551615">
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="group"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                getter="get_group"
                default-value="PK_GROUP_ENUM_UNKNOWN">
        <type name="GroupEnum"/>
      </property>
      <property name="license"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                getter="get_license"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="package-id"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                getter="get_package_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="size"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                getter="get_size"
                default-value="0">
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="summary"
                version="0.9.1"
                writable="1"
                transfer-ownership="none"
                getter="get_summary"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="url"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                getter="get_url"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Source" c:type="PkSource"/>
      </field>
      <field name="priv">
        <type name="DetailsPrivate" c:type="PkDetailsPrivate*"/>
      </field>
    </class>
    <record name="DetailsClass"
            c:type="PkDetailsClass"
            glib:is-gtype-struct-for="Details">
      <source-position filename="lib/packagekit-glib2/pk-details.h" line="66"/>
      <field name="parent_class">
        <type name="SourceClass" c:type="PkSourceClass"/>
      </field>
      <field name="_pk_reserved1" introspectable="0">
        <callback name="_pk_reserved1">
          <source-position filename="lib/packagekit-glib2/pk-details.h"
                           line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved2" introspectable="0">
        <callback name="_pk_reserved2">
          <source-position filename="lib/packagekit-glib2/pk-details.h"
                           line="62"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved3" introspectable="0">
        <callback name="_pk_reserved3">
          <source-position filename="lib/packagekit-glib2/pk-details.h"
                           line="63"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved4" introspectable="0">
        <callback name="_pk_reserved4">
          <source-position filename="lib/packagekit-glib2/pk-details.h"
                           line="64"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved5" introspectable="0">
        <callback name="_pk_reserved5">
          <source-position filename="lib/packagekit-glib2/pk-details.h"
                           line="65"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="DetailsPrivate"
            c:type="PkDetailsPrivate"
            disguised="1"
            opaque="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-details.c"
           line="42">Private #PkDetails data</doc>
      <source-position filename="lib/packagekit-glib2/pk-details.h" line="43"/>
    </record>
    <class name="DistroUpgrade"
           c:symbol-prefix="distro_upgrade"
           c:type="PkDistroUpgrade"
           parent="Source"
           glib:type-name="PkDistroUpgrade"
           glib:get-type="pk_distro_upgrade_get_type"
           glib:type-struct="DistroUpgradeClass">
      <source-position filename="lib/packagekit-glib2/pk-distro-upgrade.h"
                       line="66"/>
      <constructor name="new"
                   c:identifier="pk_distro_upgrade_new"
                   version="0.5.4">
        <source-position filename="lib/packagekit-glib2/pk-distro-upgrade.h"
                         line="69"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-distro-upgrade.c"
               line="242">a new #PkDistroUpgrade object.</doc>
          <type name="DistroUpgrade" c:type="PkDistroUpgrade*"/>
        </return-value>
      </constructor>
      <method name="get_id"
              c:identifier="pk_distro_upgrade_get_id"
              version="0.6.11">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-distro-upgrade.c"
             line="65">Gets the distribution identifier.
You use this value to call UpgradeSystem.</doc>
        <source-position filename="lib/packagekit-glib2/pk-distro-upgrade.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-distro-upgrade.c"
               line="72">the distro-id, e.g. "fedora-14"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="distro_upgrade" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-distro-upgrade.c"
                 line="67">a valid #PkDistroUpgrade object.</doc>
            <type name="DistroUpgrade" c:type="PkDistroUpgrade*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state"
              c:identifier="pk_distro_upgrade_get_state"
              glib:get-property="state"
              version="0.6.11">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-distro-upgrade.c"
             line="100">Gets the status of the distribution upgrade.</doc>
        <source-position filename="lib/packagekit-glib2/pk-distro-upgrade.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-distro-upgrade.c"
               line="106">the printable name, e.g. %PK_DISTRO_UPGRADE_ENUM_UNSTABLE</doc>
          <type name="DistroUpgradeEnum" c:type="PkDistroUpgradeEnum"/>
        </return-value>
        <parameters>
          <instance-parameter name="distro_upgrade" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-distro-upgrade.c"
                 line="102">a valid #PkDistroUpgrade object.</doc>
            <type name="DistroUpgrade" c:type="PkDistroUpgrade*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_summary"
              c:identifier="pk_distro_upgrade_get_summary"
              glib:get-property="summary"
              version="0.6.11">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-distro-upgrade.c"
             line="83">Gets the description of the distribution upgrade.</doc>
        <source-position filename="lib/packagekit-glib2/pk-distro-upgrade.h"
                         line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-distro-upgrade.c"
               line="89">the printable name, e.g. "Fedora 14"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="distro_upgrade" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-distro-upgrade.c"
                 line="85">a valid #PkDistroUpgrade object.</doc>
            <type name="DistroUpgrade" c:type="PkDistroUpgrade*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="name"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="state"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                getter="get_state"
                default-value="PK_DISTRO_UPGRADE_ENUM_UNKNOWN">
        <type name="DistroUpgradeEnum"/>
      </property>
      <property name="summary"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                getter="get_summary"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Source" c:type="PkSource"/>
      </field>
      <field name="priv">
        <type name="DistroUpgradePrivate" c:type="PkDistroUpgradePrivate*"/>
      </field>
    </class>
    <record name="DistroUpgradeClass"
            c:type="PkDistroUpgradeClass"
            glib:is-gtype-struct-for="DistroUpgrade">
      <source-position filename="lib/packagekit-glib2/pk-distro-upgrade.h"
                       line="66"/>
      <field name="parent_class">
        <type name="SourceClass" c:type="PkSourceClass"/>
      </field>
      <field name="_pk_reserved1" introspectable="0">
        <callback name="_pk_reserved1">
          <source-position filename="lib/packagekit-glib2/pk-distro-upgrade.h"
                           line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved2" introspectable="0">
        <callback name="_pk_reserved2">
          <source-position filename="lib/packagekit-glib2/pk-distro-upgrade.h"
                           line="62"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved3" introspectable="0">
        <callback name="_pk_reserved3">
          <source-position filename="lib/packagekit-glib2/pk-distro-upgrade.h"
                           line="63"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved4" introspectable="0">
        <callback name="_pk_reserved4">
          <source-position filename="lib/packagekit-glib2/pk-distro-upgrade.h"
                           line="64"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved5" introspectable="0">
        <callback name="_pk_reserved5">
          <source-position filename="lib/packagekit-glib2/pk-distro-upgrade.h"
                           line="65"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="DistroUpgradeEnum"
                 glib:type-name="PkDistroUpgradeEnum"
                 glib:get-type="pk_distro_upgrade_enum_get_type"
                 c:type="PkDistroUpgradeEnum">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.h"
           line="684">The distro upgrade status</doc>
      <member name="unknown"
              value="0"
              c:identifier="PK_DISTRO_UPGRADE_ENUM_UNKNOWN"
              glib:nick="unknown"
              glib:name="PK_DISTRO_UPGRADE_ENUM_UNKNOWN">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="686">Unknown disto upgrade state</doc>
      </member>
      <member name="stable"
              value="1"
              c:identifier="PK_DISTRO_UPGRADE_ENUM_STABLE"
              glib:nick="stable"
              glib:name="PK_DISTRO_UPGRADE_ENUM_STABLE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="687">Upgraded to stable release</doc>
      </member>
      <member name="unstable"
              value="2"
              c:identifier="PK_DISTRO_UPGRADE_ENUM_UNSTABLE"
              glib:nick="unstable"
              glib:name="PK_DISTRO_UPGRADE_ENUM_UNSTABLE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="688">Upgraded to unstable release</doc>
      </member>
      <member name="last"
              value="3"
              c:identifier="PK_DISTRO_UPGRADE_ENUM_LAST"
              glib:nick="last"
              glib:name="PK_DISTRO_UPGRADE_ENUM_LAST">
      </member>
      <function name="from_string"
                c:identifier="pk_distro_upgrade_enum_from_string"
                version="0.5.0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="474">Converts a text enumerated type to its unsigned integer representation</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="833"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="480">the enumerated constant value, e.g. PK_DISTRO_UPGRADE_ENUM_STABLE</doc>
          <type name="DistroUpgradeEnum" c:type="PkDistroUpgradeEnum"/>
        </return-value>
        <parameters>
          <parameter name="upgrade" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="476">Text describing the enumerated type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_string"
                c:identifier="pk_distro_upgrade_enum_to_string"
                version="0.5.0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="490">Converts a enumerated type to its text representation</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="834"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="496">the enumerated constant value, e.g. "stable"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="upgrade" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="492">The enumerated type value</doc>
            <type name="DistroUpgradeEnum" c:type="PkDistroUpgradeEnum"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <record name="DistroUpgradePrivate"
            c:type="PkDistroUpgradePrivate"
            disguised="1"
            opaque="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-distro-upgrade.c"
           line="43">Private #PkDistroUpgrade data</doc>
      <source-position filename="lib/packagekit-glib2/pk-distro-upgrade.h"
                       line="43"/>
    </record>
    <function-macro name="ERROR_CODE"
                    c:identifier="PK_ERROR_CODE"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-error.h" line="37"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ERROR_CODE_CLASS"
                    c:identifier="PK_ERROR_CODE_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-error.h" line="38"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ERROR_CODE_GET_CLASS"
                    c:identifier="PK_ERROR_CODE_GET_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-error.h" line="41"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="EULA_REQUIRED"
                    c:identifier="PK_EULA_REQUIRED"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-eula-required.h"
                       line="36"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="EULA_REQUIRED_CLASS"
                    c:identifier="PK_EULA_REQUIRED_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-eula-required.h"
                       line="37"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="EULA_REQUIRED_GET_CLASS"
                    c:identifier="PK_EULA_REQUIRED_GET_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-eula-required.h"
                       line="40"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <record name="EnumMatch" c:type="PkEnumMatch">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.h"
           line="33">Matching an enumerated type to a string</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="43"/>
      <field name="value" writable="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="35">enumerated value</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="string" writable="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="36">string for given value</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
    </record>
    <class name="Error"
           c:symbol-prefix="error"
           c:type="PkError"
           parent="Source"
           glib:type-name="PkError"
           glib:get-type="pk_error_get_type"
           glib:type-struct="ErrorClass">
      <source-position filename="lib/packagekit-glib2/pk-error.h" line="66"/>
      <constructor name="new" c:identifier="pk_error_new" version="0.5.5">
        <source-position filename="lib/packagekit-glib2/pk-error.h" line="69"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-error.c"
               line="203">a new #PkError object.</doc>
          <type name="Error" c:type="PkError*"/>
        </return-value>
      </constructor>
      <method name="get_code"
              c:identifier="pk_error_get_code"
              glib:get-property="code"
              version="0.5.5">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-error.c"
             line="108">Get the error code for this error.</doc>
        <source-position filename="lib/packagekit-glib2/pk-error.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-error.c"
               line="114">a #PkErrorEnum</doc>
          <type name="ErrorEnum" c:type="PkErrorEnum"/>
        </return-value>
        <parameters>
          <instance-parameter name="error_code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-error.c"
                 line="110">a valid #PkError instance</doc>
            <type name="Error" c:type="PkError*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_details"
              c:identifier="pk_error_get_details"
              glib:get-property="details"
              version="0.5.5">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-error.c"
             line="125">Get details for this error.</doc>
        <source-position filename="lib/packagekit-glib2/pk-error.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-error.c"
               line="131">an string description</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="error_code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-error.c"
                 line="127">a valid #PkError instance</doc>
            <type name="Error" c:type="PkError*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="code"
                version="0.5.5"
                writable="1"
                transfer-ownership="none"
                getter="get_code"
                default-value="PK_ERROR_ENUM_UNKNOWN">
        <type name="ErrorEnum"/>
      </property>
      <property name="details"
                version="0.5.5"
                writable="1"
                transfer-ownership="none"
                getter="get_details"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Source" c:type="PkSource"/>
      </field>
      <field name="priv">
        <type name="ErrorPrivate" c:type="PkErrorPrivate*"/>
      </field>
    </class>
    <record name="ErrorClass"
            c:type="PkErrorClass"
            glib:is-gtype-struct-for="Error">
      <source-position filename="lib/packagekit-glib2/pk-error.h" line="66"/>
      <field name="parent_class">
        <type name="SourceClass" c:type="PkSourceClass"/>
      </field>
      <field name="_pk_reserved1" introspectable="0">
        <callback name="_pk_reserved1">
          <source-position filename="lib/packagekit-glib2/pk-error.h"
                           line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved2" introspectable="0">
        <callback name="_pk_reserved2">
          <source-position filename="lib/packagekit-glib2/pk-error.h"
                           line="62"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved3" introspectable="0">
        <callback name="_pk_reserved3">
          <source-position filename="lib/packagekit-glib2/pk-error.h"
                           line="63"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved4" introspectable="0">
        <callback name="_pk_reserved4">
          <source-position filename="lib/packagekit-glib2/pk-error.h"
                           line="64"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved5" introspectable="0">
        <callback name="_pk_reserved5">
          <source-position filename="lib/packagekit-glib2/pk-error.h"
                           line="65"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="ErrorEnum"
                 glib:type-name="PkErrorEnum"
                 glib:get-type="pk_error_enum_get_type"
                 c:type="PkErrorEnum">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.h"
           line="371">The error type</doc>
      <member name="unknown"
              value="0"
              c:identifier="PK_ERROR_ENUM_UNKNOWN"
              glib:nick="unknown"
              glib:name="PK_ERROR_ENUM_UNKNOWN">
      </member>
      <member name="oom"
              value="1"
              c:identifier="PK_ERROR_ENUM_OOM"
              glib:nick="oom"
              glib:name="PK_ERROR_ENUM_OOM">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="374">Out of memory</doc>
      </member>
      <member name="no_network"
              value="2"
              c:identifier="PK_ERROR_ENUM_NO_NETWORK"
              glib:nick="no-network"
              glib:name="PK_ERROR_ENUM_NO_NETWORK">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="375">No network access available</doc>
      </member>
      <member name="not_supported"
              value="3"
              c:identifier="PK_ERROR_ENUM_NOT_SUPPORTED"
              glib:nick="not-supported"
              glib:name="PK_ERROR_ENUM_NOT_SUPPORTED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="376">Request not supported</doc>
      </member>
      <member name="internal_error"
              value="4"
              c:identifier="PK_ERROR_ENUM_INTERNAL_ERROR"
              glib:nick="internal-error"
              glib:name="PK_ERROR_ENUM_INTERNAL_ERROR">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="377">Undefined internal error</doc>
      </member>
      <member name="gpg_failure"
              value="5"
              c:identifier="PK_ERROR_ENUM_GPG_FAILURE"
              glib:nick="gpg-failure"
              glib:name="PK_ERROR_ENUM_GPG_FAILURE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="378">GPG encryption failure</doc>
      </member>
      <member name="package_id_invalid"
              value="6"
              c:identifier="PK_ERROR_ENUM_PACKAGE_ID_INVALID"
              glib:nick="package-id-invalid"
              glib:name="PK_ERROR_ENUM_PACKAGE_ID_INVALID">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="379">Invalid package ID provided</doc>
      </member>
      <member name="package_not_installed"
              value="7"
              c:identifier="PK_ERROR_ENUM_PACKAGE_NOT_INSTALLED"
              glib:nick="package-not-installed"
              glib:name="PK_ERROR_ENUM_PACKAGE_NOT_INSTALLED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="380">Requested package not installed</doc>
      </member>
      <member name="package_not_found"
              value="8"
              c:identifier="PK_ERROR_ENUM_PACKAGE_NOT_FOUND"
              glib:nick="package-not-found"
              glib:name="PK_ERROR_ENUM_PACKAGE_NOT_FOUND">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="381">Requested package not found</doc>
      </member>
      <member name="package_already_installed"
              value="9"
              c:identifier="PK_ERROR_ENUM_PACKAGE_ALREADY_INSTALLED"
              glib:nick="package-already-installed"
              glib:name="PK_ERROR_ENUM_PACKAGE_ALREADY_INSTALLED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="382">Requested package already installed</doc>
      </member>
      <member name="package_download_failed"
              value="10"
              c:identifier="PK_ERROR_ENUM_PACKAGE_DOWNLOAD_FAILED"
              glib:nick="package-download-failed"
              glib:name="PK_ERROR_ENUM_PACKAGE_DOWNLOAD_FAILED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="383">Failed to download package</doc>
      </member>
      <member name="group_not_found"
              value="11"
              c:identifier="PK_ERROR_ENUM_GROUP_NOT_FOUND"
              glib:nick="group-not-found"
              glib:name="PK_ERROR_ENUM_GROUP_NOT_FOUND">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="384">Requested group not gound</doc>
      </member>
      <member name="group_list_invalid"
              value="12"
              c:identifier="PK_ERROR_ENUM_GROUP_LIST_INVALID"
              glib:nick="group-list-invalid"
              glib:name="PK_ERROR_ENUM_GROUP_LIST_INVALID">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="385">Invalid group list provided</doc>
      </member>
      <member name="dep_resolution_failed"
              value="13"
              c:identifier="PK_ERROR_ENUM_DEP_RESOLUTION_FAILED"
              glib:nick="dep-resolution-failed"
              glib:name="PK_ERROR_ENUM_DEP_RESOLUTION_FAILED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="386">Failed to resolve dependencies</doc>
      </member>
      <member name="filter_invalid"
              value="14"
              c:identifier="PK_ERROR_ENUM_FILTER_INVALID"
              glib:nick="filter-invalid"
              glib:name="PK_ERROR_ENUM_FILTER_INVALID">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="387">Invalid filter provides</doc>
      </member>
      <member name="create_thread_failed"
              value="15"
              c:identifier="PK_ERROR_ENUM_CREATE_THREAD_FAILED"
              glib:nick="create-thread-failed"
              glib:name="PK_ERROR_ENUM_CREATE_THREAD_FAILED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="388">Failed to create thread</doc>
      </member>
      <member name="transaction_error"
              value="16"
              c:identifier="PK_ERROR_ENUM_TRANSACTION_ERROR"
              glib:nick="transaction-error"
              glib:name="PK_ERROR_ENUM_TRANSACTION_ERROR">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="389">Error occurred during transaction</doc>
      </member>
      <member name="transaction_cancelled"
              value="17"
              c:identifier="PK_ERROR_ENUM_TRANSACTION_CANCELLED"
              glib:nick="transaction-cancelled"
              glib:name="PK_ERROR_ENUM_TRANSACTION_CANCELLED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="390">Transaction was cancelled</doc>
      </member>
      <member name="no_cache"
              value="18"
              c:identifier="PK_ERROR_ENUM_NO_CACHE"
              glib:nick="no-cache"
              glib:name="PK_ERROR_ENUM_NO_CACHE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="391">No cache available</doc>
      </member>
      <member name="repo_not_found"
              value="19"
              c:identifier="PK_ERROR_ENUM_REPO_NOT_FOUND"
              glib:nick="repo-not-found"
              glib:name="PK_ERROR_ENUM_REPO_NOT_FOUND">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="392">Requested repository not found</doc>
      </member>
      <member name="cannot_remove_system_package"
              value="20"
              c:identifier="PK_ERROR_ENUM_CANNOT_REMOVE_SYSTEM_PACKAGE"
              glib:nick="cannot-remove-system-package"
              glib:name="PK_ERROR_ENUM_CANNOT_REMOVE_SYSTEM_PACKAGE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="393">Not allowed to remove system package</doc>
      </member>
      <member name="process_kill"
              value="21"
              c:identifier="PK_ERROR_ENUM_PROCESS_KILL"
              glib:nick="process-kill"
              glib:name="PK_ERROR_ENUM_PROCESS_KILL">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="394">Process killed</doc>
      </member>
      <member name="failed_initialization"
              value="22"
              c:identifier="PK_ERROR_ENUM_FAILED_INITIALIZATION"
              glib:nick="failed-initialization"
              glib:name="PK_ERROR_ENUM_FAILED_INITIALIZATION">
      </member>
      <member name="failed_finalise"
              value="23"
              c:identifier="PK_ERROR_ENUM_FAILED_FINALISE"
              glib:nick="failed-finalise"
              glib:name="PK_ERROR_ENUM_FAILED_FINALISE">
      </member>
      <member name="failed_config_parsing"
              value="24"
              c:identifier="PK_ERROR_ENUM_FAILED_CONFIG_PARSING"
              glib:nick="failed-config-parsing"
              glib:name="PK_ERROR_ENUM_FAILED_CONFIG_PARSING">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="397">Configuration is not valid</doc>
      </member>
      <member name="cannot_cancel"
              value="25"
              c:identifier="PK_ERROR_ENUM_CANNOT_CANCEL"
              glib:nick="cannot-cancel"
              glib:name="PK_ERROR_ENUM_CANNOT_CANCEL">
      </member>
      <member name="cannot_get_lock"
              value="26"
              c:identifier="PK_ERROR_ENUM_CANNOT_GET_LOCK"
              glib:nick="cannot-get-lock"
              glib:name="PK_ERROR_ENUM_CANNOT_GET_LOCK">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="399">Cannot get lock</doc>
      </member>
      <member name="no_packages_to_update"
              value="27"
              c:identifier="PK_ERROR_ENUM_NO_PACKAGES_TO_UPDATE"
              glib:nick="no-packages-to-update"
              glib:name="PK_ERROR_ENUM_NO_PACKAGES_TO_UPDATE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="400">No packages to update</doc>
      </member>
      <member name="cannot_write_repo_config"
              value="28"
              c:identifier="PK_ERROR_ENUM_CANNOT_WRITE_REPO_CONFIG"
              glib:nick="cannot-write-repo-config"
              glib:name="PK_ERROR_ENUM_CANNOT_WRITE_REPO_CONFIG">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="401">Cannot write repository configuration</doc>
      </member>
      <member name="local_install_failed"
              value="29"
              c:identifier="PK_ERROR_ENUM_LOCAL_INSTALL_FAILED"
              glib:nick="local-install-failed"
              glib:name="PK_ERROR_ENUM_LOCAL_INSTALL_FAILED">
      </member>
      <member name="bad_gpg_signature"
              value="30"
              c:identifier="PK_ERROR_ENUM_BAD_GPG_SIGNATURE"
              glib:nick="bad-gpg-signature"
              glib:name="PK_ERROR_ENUM_BAD_GPG_SIGNATURE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="403">Bad GPG signature found</doc>
      </member>
      <member name="missing_gpg_signature"
              value="31"
              c:identifier="PK_ERROR_ENUM_MISSING_GPG_SIGNATURE"
              glib:nick="missing-gpg-signature"
              glib:name="PK_ERROR_ENUM_MISSING_GPG_SIGNATURE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="404">Required GPG signature not found</doc>
      </member>
      <member name="cannot_install_source_package"
              value="32"
              c:identifier="PK_ERROR_ENUM_CANNOT_INSTALL_SOURCE_PACKAGE"
              glib:nick="cannot-install-source-package"
              glib:name="PK_ERROR_ENUM_CANNOT_INSTALL_SOURCE_PACKAGE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="405">Cannot install source package</doc>
      </member>
      <member name="repo_configuration_error"
              value="33"
              c:identifier="PK_ERROR_ENUM_REPO_CONFIGURATION_ERROR"
              glib:nick="repo-configuration-error"
              glib:name="PK_ERROR_ENUM_REPO_CONFIGURATION_ERROR">
      </member>
      <member name="no_license_agreement"
              value="34"
              c:identifier="PK_ERROR_ENUM_NO_LICENSE_AGREEMENT"
              glib:nick="no-license-agreement"
              glib:name="PK_ERROR_ENUM_NO_LICENSE_AGREEMENT">
      </member>
      <member name="file_conflicts"
              value="35"
              c:identifier="PK_ERROR_ENUM_FILE_CONFLICTS"
              glib:nick="file-conflicts"
              glib:name="PK_ERROR_ENUM_FILE_CONFLICTS">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="408">File conflicts detected</doc>
      </member>
      <member name="package_conflicts"
              value="36"
              c:identifier="PK_ERROR_ENUM_PACKAGE_CONFLICTS"
              glib:nick="package-conflicts"
              glib:name="PK_ERROR_ENUM_PACKAGE_CONFLICTS">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="409">Package conflict</doc>
      </member>
      <member name="repo_not_available"
              value="37"
              c:identifier="PK_ERROR_ENUM_REPO_NOT_AVAILABLE"
              glib:nick="repo-not-available"
              glib:name="PK_ERROR_ENUM_REPO_NOT_AVAILABLE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="410">Repository not available</doc>
      </member>
      <member name="invalid_package_file"
              value="38"
              c:identifier="PK_ERROR_ENUM_INVALID_PACKAGE_FILE"
              glib:nick="invalid-package-file"
              glib:name="PK_ERROR_ENUM_INVALID_PACKAGE_FILE">
      </member>
      <member name="package_install_blocked"
              value="39"
              c:identifier="PK_ERROR_ENUM_PACKAGE_INSTALL_BLOCKED"
              glib:nick="package-install-blocked"
              glib:name="PK_ERROR_ENUM_PACKAGE_INSTALL_BLOCKED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="412">Package installation blocked</doc>
      </member>
      <member name="package_corrupt"
              value="40"
              c:identifier="PK_ERROR_ENUM_PACKAGE_CORRUPT"
              glib:nick="package-corrupt"
              glib:name="PK_ERROR_ENUM_PACKAGE_CORRUPT">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="413">Package corruption occurred</doc>
      </member>
      <member name="all_packages_already_installed"
              value="41"
              c:identifier="PK_ERROR_ENUM_ALL_PACKAGES_ALREADY_INSTALLED"
              glib:nick="all-packages-already-installed"
              glib:name="PK_ERROR_ENUM_ALL_PACKAGES_ALREADY_INSTALLED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="414">All packages already installed</doc>
      </member>
      <member name="file_not_found"
              value="42"
              c:identifier="PK_ERROR_ENUM_FILE_NOT_FOUND"
              glib:nick="file-not-found"
              glib:name="PK_ERROR_ENUM_FILE_NOT_FOUND">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="415">Required file not found</doc>
      </member>
      <member name="no_more_mirrors_to_try"
              value="43"
              c:identifier="PK_ERROR_ENUM_NO_MORE_MIRRORS_TO_TRY"
              glib:nick="no-more-mirrors-to-try"
              glib:name="PK_ERROR_ENUM_NO_MORE_MIRRORS_TO_TRY">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="416">Out of repository mirrors to try</doc>
      </member>
      <member name="no_distro_upgrade_data"
              value="44"
              c:identifier="PK_ERROR_ENUM_NO_DISTRO_UPGRADE_DATA"
              glib:nick="no-distro-upgrade-data"
              glib:name="PK_ERROR_ENUM_NO_DISTRO_UPGRADE_DATA">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="417">No distribution upgrade path found</doc>
      </member>
      <member name="incompatible_architecture"
              value="45"
              c:identifier="PK_ERROR_ENUM_INCOMPATIBLE_ARCHITECTURE"
              glib:nick="incompatible-architecture"
              glib:name="PK_ERROR_ENUM_INCOMPATIBLE_ARCHITECTURE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="418">Incompatible architecture found</doc>
      </member>
      <member name="no_space_on_device"
              value="46"
              c:identifier="PK_ERROR_ENUM_NO_SPACE_ON_DEVICE"
              glib:nick="no-space-on-device"
              glib:name="PK_ERROR_ENUM_NO_SPACE_ON_DEVICE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="419">Out of required disk space</doc>
      </member>
      <member name="media_change_required"
              value="47"
              c:identifier="PK_ERROR_ENUM_MEDIA_CHANGE_REQUIRED"
              glib:nick="media-change-required"
              glib:name="PK_ERROR_ENUM_MEDIA_CHANGE_REQUIRED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="420">Need to change media</doc>
      </member>
      <member name="not_authorized"
              value="48"
              c:identifier="PK_ERROR_ENUM_NOT_AUTHORIZED"
              glib:nick="not-authorized"
              glib:name="PK_ERROR_ENUM_NOT_AUTHORIZED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="421">Authorization failed</doc>
      </member>
      <member name="update_not_found"
              value="49"
              c:identifier="PK_ERROR_ENUM_UPDATE_NOT_FOUND"
              glib:nick="update-not-found"
              glib:name="PK_ERROR_ENUM_UPDATE_NOT_FOUND">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="422">Update not found</doc>
      </member>
      <member name="cannot_install_repo_unsigned"
              value="50"
              c:identifier="PK_ERROR_ENUM_CANNOT_INSTALL_REPO_UNSIGNED"
              glib:nick="cannot-install-repo-unsigned"
              glib:name="PK_ERROR_ENUM_CANNOT_INSTALL_REPO_UNSIGNED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="423">Installation repository missing signature</doc>
      </member>
      <member name="cannot_update_repo_unsigned"
              value="51"
              c:identifier="PK_ERROR_ENUM_CANNOT_UPDATE_REPO_UNSIGNED"
              glib:nick="cannot-update-repo-unsigned"
              glib:name="PK_ERROR_ENUM_CANNOT_UPDATE_REPO_UNSIGNED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="424">Update repository missing signature</doc>
      </member>
      <member name="cannot_get_filelist"
              value="52"
              c:identifier="PK_ERROR_ENUM_CANNOT_GET_FILELIST"
              glib:nick="cannot-get-filelist"
              glib:name="PK_ERROR_ENUM_CANNOT_GET_FILELIST">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="425">Cannot get file list</doc>
      </member>
      <member name="cannot_get_requires"
              value="53"
              c:identifier="PK_ERROR_ENUM_CANNOT_GET_REQUIRES"
              glib:nick="cannot-get-requires"
              glib:name="PK_ERROR_ENUM_CANNOT_GET_REQUIRES">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="426">Cannot get package requirements</doc>
      </member>
      <member name="cannot_disable_repository"
              value="54"
              c:identifier="PK_ERROR_ENUM_CANNOT_DISABLE_REPOSITORY"
              glib:nick="cannot-disable-repository"
              glib:name="PK_ERROR_ENUM_CANNOT_DISABLE_REPOSITORY">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="427">Cannot disable reposoitory</doc>
      </member>
      <member name="restricted_download"
              value="55"
              c:identifier="PK_ERROR_ENUM_RESTRICTED_DOWNLOAD"
              glib:nick="restricted-download"
              glib:name="PK_ERROR_ENUM_RESTRICTED_DOWNLOAD">
      </member>
      <member name="package_failed_to_configure"
              value="56"
              c:identifier="PK_ERROR_ENUM_PACKAGE_FAILED_TO_CONFIGURE"
              glib:nick="package-failed-to-configure"
              glib:name="PK_ERROR_ENUM_PACKAGE_FAILED_TO_CONFIGURE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="429">Package failed to configure</doc>
      </member>
      <member name="package_failed_to_build"
              value="57"
              c:identifier="PK_ERROR_ENUM_PACKAGE_FAILED_TO_BUILD"
              glib:nick="package-failed-to-build"
              glib:name="PK_ERROR_ENUM_PACKAGE_FAILED_TO_BUILD">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="430">Package failed to build</doc>
      </member>
      <member name="package_failed_to_install"
              value="58"
              c:identifier="PK_ERROR_ENUM_PACKAGE_FAILED_TO_INSTALL"
              glib:nick="package-failed-to-install"
              glib:name="PK_ERROR_ENUM_PACKAGE_FAILED_TO_INSTALL">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="431">Package failed to install</doc>
      </member>
      <member name="package_failed_to_remove"
              value="59"
              c:identifier="PK_ERROR_ENUM_PACKAGE_FAILED_TO_REMOVE"
              glib:nick="package-failed-to-remove"
              glib:name="PK_ERROR_ENUM_PACKAGE_FAILED_TO_REMOVE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="432">Package failed to remove</doc>
      </member>
      <member name="update_failed_due_to_running_process"
              value="60"
              c:identifier="PK_ERROR_ENUM_UPDATE_FAILED_DUE_TO_RUNNING_PROCESS"
              glib:nick="update-failed-due-to-running-process"
              glib:name="PK_ERROR_ENUM_UPDATE_FAILED_DUE_TO_RUNNING_PROCESS">
      </member>
      <member name="package_database_changed"
              value="61"
              c:identifier="PK_ERROR_ENUM_PACKAGE_DATABASE_CHANGED"
              glib:nick="package-database-changed"
              glib:name="PK_ERROR_ENUM_PACKAGE_DATABASE_CHANGED">
      </member>
      <member name="provide_type_not_supported"
              value="62"
              c:identifier="PK_ERROR_ENUM_PROVIDE_TYPE_NOT_SUPPORTED"
              glib:nick="provide-type-not-supported"
              glib:name="PK_ERROR_ENUM_PROVIDE_TYPE_NOT_SUPPORTED">
      </member>
      <member name="install_root_invalid"
              value="63"
              c:identifier="PK_ERROR_ENUM_INSTALL_ROOT_INVALID"
              glib:nick="install-root-invalid"
              glib:name="PK_ERROR_ENUM_INSTALL_ROOT_INVALID">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="436">Installtion root not suitable</doc>
      </member>
      <member name="cannot_fetch_sources"
              value="64"
              c:identifier="PK_ERROR_ENUM_CANNOT_FETCH_SOURCES"
              glib:nick="cannot-fetch-sources"
              glib:name="PK_ERROR_ENUM_CANNOT_FETCH_SOURCES">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="437">Cannot fetch sources</doc>
      </member>
      <member name="cancelled_priority"
              value="65"
              c:identifier="PK_ERROR_ENUM_CANCELLED_PRIORITY"
              glib:nick="cancelled-priority"
              glib:name="PK_ERROR_ENUM_CANCELLED_PRIORITY">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="438">Cancelled due to higher priority task</doc>
      </member>
      <member name="unfinished_transaction"
              value="66"
              c:identifier="PK_ERROR_ENUM_UNFINISHED_TRANSACTION"
              glib:nick="unfinished-transaction"
              glib:name="PK_ERROR_ENUM_UNFINISHED_TRANSACTION">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="439">Transaction unfinished</doc>
      </member>
      <member name="lock_required"
              value="67"
              c:identifier="PK_ERROR_ENUM_LOCK_REQUIRED"
              glib:nick="lock-required"
              glib:name="PK_ERROR_ENUM_LOCK_REQUIRED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="440">Required lock not available</doc>
      </member>
      <member name="repo_already_set"
              value="68"
              c:identifier="PK_ERROR_ENUM_REPO_ALREADY_SET"
              glib:nick="repo-already-set"
              glib:name="PK_ERROR_ENUM_REPO_ALREADY_SET">
      </member>
      <member name="last"
              value="69"
              c:identifier="PK_ERROR_ENUM_LAST"
              glib:nick="last"
              glib:name="PK_ERROR_ENUM_LAST">
      </member>
      <function name="from_string"
                c:identifier="pk_error_enum_from_string"
                version="0.5.0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="666">Converts a text enumerated type to its unsigned integer representation</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="821"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="672">the enumerated constant value, e.g. PK_SIGTYPE_ENUM_GPG</doc>
          <type name="ErrorEnum" c:type="PkErrorEnum"/>
        </return-value>
        <parameters>
          <parameter name="code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="668">Text describing the enumerated type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_string"
                c:identifier="pk_error_enum_to_string"
                version="0.5.0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="682">Converts a enumerated type to its text representation</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="822"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="688">the enumerated constant value, e.g. "available"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="684">The enumerated type value</doc>
            <type name="ErrorEnum" c:type="PkErrorEnum"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <record name="ErrorPrivate"
            c:type="PkErrorPrivate"
            disguised="1"
            opaque="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-error.c"
           line="43">Private #PkError data</doc>
      <source-position filename="lib/packagekit-glib2/pk-error.h" line="43"/>
    </record>
    <class name="EulaRequired"
           c:symbol-prefix="eula_required"
           c:type="PkEulaRequired"
           parent="Source"
           glib:type-name="PkEulaRequired"
           glib:get-type="pk_eula_required_get_type"
           glib:type-struct="EulaRequiredClass">
      <source-position filename="lib/packagekit-glib2/pk-eula-required.h"
                       line="65"/>
      <constructor name="new"
                   c:identifier="pk_eula_required_new"
                   version="0.5.4">
        <source-position filename="lib/packagekit-glib2/pk-eula-required.h"
                         line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-eula-required.c"
               line="285">a new #PkEulaRequired object.</doc>
          <type name="EulaRequired" c:type="PkEulaRequired*"/>
        </return-value>
      </constructor>
      <method name="get_eula_id"
              c:identifier="pk_eula_required_get_eula_id"
              glib:get-property="eula-id"
              version="1.1.8">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-eula-required.c"
             line="65">Get the ID for this EULA</doc>
        <source-position filename="lib/packagekit-glib2/pk-eula-required.h"
                         line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-eula-required.c"
               line="71">an ID</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="eula_required" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-eula-required.c"
                 line="67">a valid #PkEulaRequired instance.</doc>
            <type name="EulaRequired" c:type="PkEulaRequired*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_license_agreement"
              c:identifier="pk_eula_required_get_license_agreement"
              glib:get-property="license-agreement"
              version="1.1.8">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-eula-required.c"
             line="116">Get the text of the license agreement.</doc>
        <source-position filename="lib/packagekit-glib2/pk-eula-required.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-eula-required.c"
               line="122">license agreement text</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="eula_required" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-eula-required.c"
                 line="118">a valid #PkEulaRequired instance.</doc>
            <type name="EulaRequired" c:type="PkEulaRequired*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_package_id"
              c:identifier="pk_eula_required_get_package_id"
              glib:get-property="package-id"
              version="1.1.8">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-eula-required.c"
             line="82">Get the PackageID this EULA is for</doc>
        <source-position filename="lib/packagekit-glib2/pk-eula-required.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-eula-required.c"
               line="88">a PackageID</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="eula_required" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-eula-required.c"
                 line="84">a valid #PkEulaRequired instance.</doc>
            <type name="EulaRequired" c:type="PkEulaRequired*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vendor_name"
              c:identifier="pk_eula_required_get_vendor_name"
              glib:get-property="vendor-name"
              version="1.1.8">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-eula-required.c"
             line="99">Get the vendor this EULA is from.</doc>
        <source-position filename="lib/packagekit-glib2/pk-eula-required.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-eula-required.c"
               line="105">license vendor name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="eula_required" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-eula-required.c"
                 line="101">a valid #PkEulaRequired instance.</doc>
            <type name="EulaRequired" c:type="PkEulaRequired*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="eula-id"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                getter="get_eula_id"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-eula-required.c"
             line="205">ID for this EULA.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="license-agreement"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                getter="get_license_agreement"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-eula-required.c"
             line="241">The text of the license agreement.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="package-id"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                getter="get_package_id"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-eula-required.c"
             line="217">PackageID this EULA is for.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="vendor-name"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                getter="get_vendor_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-eula-required.c"
             line="229">Vendor this EULA is from.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Source" c:type="PkSource"/>
      </field>
      <field name="priv">
        <type name="EulaRequiredPrivate" c:type="PkEulaRequiredPrivate*"/>
      </field>
    </class>
    <record name="EulaRequiredClass"
            c:type="PkEulaRequiredClass"
            glib:is-gtype-struct-for="EulaRequired">
      <source-position filename="lib/packagekit-glib2/pk-eula-required.h"
                       line="65"/>
      <field name="parent_class">
        <type name="SourceClass" c:type="PkSourceClass"/>
      </field>
      <field name="_pk_reserved1" introspectable="0">
        <callback name="_pk_reserved1">
          <source-position filename="lib/packagekit-glib2/pk-eula-required.h"
                           line="60"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved2" introspectable="0">
        <callback name="_pk_reserved2">
          <source-position filename="lib/packagekit-glib2/pk-eula-required.h"
                           line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved3" introspectable="0">
        <callback name="_pk_reserved3">
          <source-position filename="lib/packagekit-glib2/pk-eula-required.h"
                           line="62"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved4" introspectable="0">
        <callback name="_pk_reserved4">
          <source-position filename="lib/packagekit-glib2/pk-eula-required.h"
                           line="63"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved5" introspectable="0">
        <callback name="_pk_reserved5">
          <source-position filename="lib/packagekit-glib2/pk-eula-required.h"
                           line="64"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="EulaRequiredPrivate"
            c:type="PkEulaRequiredPrivate"
            disguised="1"
            opaque="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-eula-required.c"
           line="41">Private #PkEulaRequired data</doc>
      <source-position filename="lib/packagekit-glib2/pk-eula-required.h"
                       line="42"/>
    </record>
    <enumeration name="ExitEnum"
                 glib:type-name="PkExitEnum"
                 glib:get-type="pk_exit_enum_get_type"
                 c:type="PkExitEnum">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.h"
           line="225">How the backend exited</doc>
      <member name="unknown"
              value="0"
              c:identifier="PK_EXIT_ENUM_UNKNOWN"
              glib:nick="unknown"
              glib:name="PK_EXIT_ENUM_UNKNOWN">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="227">Unknown exit status</doc>
      </member>
      <member name="success"
              value="1"
              c:identifier="PK_EXIT_ENUM_SUCCESS"
              glib:nick="success"
              glib:name="PK_EXIT_ENUM_SUCCESS">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="228">Backend exited successfully</doc>
      </member>
      <member name="failed"
              value="2"
              c:identifier="PK_EXIT_ENUM_FAILED"
              glib:nick="failed"
              glib:name="PK_EXIT_ENUM_FAILED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="229">Backend failed</doc>
      </member>
      <member name="cancelled"
              value="3"
              c:identifier="PK_EXIT_ENUM_CANCELLED"
              glib:nick="cancelled"
              glib:name="PK_EXIT_ENUM_CANCELLED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="230">Backend was cancelled</doc>
      </member>
      <member name="key_required"
              value="4"
              c:identifier="PK_EXIT_ENUM_KEY_REQUIRED"
              glib:nick="key-required"
              glib:name="PK_EXIT_ENUM_KEY_REQUIRED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="231">A repository encryption key needs installing</doc>
      </member>
      <member name="eula_required"
              value="5"
              c:identifier="PK_EXIT_ENUM_EULA_REQUIRED"
              glib:nick="eula-required"
              glib:name="PK_EXIT_ENUM_EULA_REQUIRED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="232">A EULA is required to be accepted</doc>
      </member>
      <member name="killed"
              value="6"
              c:identifier="PK_EXIT_ENUM_KILLED"
              glib:nick="killed"
              glib:name="PK_EXIT_ENUM_KILLED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="233">Backend was killed</doc>
      </member>
      <member name="media_change_required"
              value="7"
              c:identifier="PK_EXIT_ENUM_MEDIA_CHANGE_REQUIRED"
              glib:nick="media-change-required"
              glib:name="PK_EXIT_ENUM_MEDIA_CHANGE_REQUIRED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="234">Media change required</doc>
      </member>
      <member name="need_untrusted"
              value="8"
              c:identifier="PK_EXIT_ENUM_NEED_UNTRUSTED"
              glib:nick="need-untrusted"
              glib:name="PK_EXIT_ENUM_NEED_UNTRUSTED">
      </member>
      <member name="cancelled_priority"
              value="9"
              c:identifier="PK_EXIT_ENUM_CANCELLED_PRIORITY"
              glib:nick="cancelled-priority"
              glib:name="PK_EXIT_ENUM_CANCELLED_PRIORITY">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="236">Cancelled due to higher priority task</doc>
      </member>
      <member name="skip_transaction"
              value="10"
              c:identifier="PK_EXIT_ENUM_SKIP_TRANSACTION"
              glib:nick="skip-transaction"
              glib:name="PK_EXIT_ENUM_SKIP_TRANSACTION">
      </member>
      <member name="repair_required"
              value="11"
              c:identifier="PK_EXIT_ENUM_REPAIR_REQUIRED"
              glib:nick="repair-required"
              glib:name="PK_EXIT_ENUM_REPAIR_REQUIRED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="238">Package database requires repairing</doc>
      </member>
      <member name="last"
              value="12"
              c:identifier="PK_EXIT_ENUM_LAST"
              glib:nick="last"
              glib:name="PK_EXIT_ENUM_LAST">
      </member>
      <function name="from_string"
                c:identifier="pk_exit_enum_from_string"
                version="0.5.0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="538">Converts a text enumerated type to its unsigned integer representation</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="809"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="544">the enumerated constant value, e.g. PK_SIGTYPE_ENUM_GPG</doc>
          <type name="ExitEnum" c:type="PkExitEnum"/>
        </return-value>
        <parameters>
          <parameter name="exit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="540">Text describing the enumerated type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_string"
                c:identifier="pk_exit_enum_to_string"
                version="0.5.0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="554">Converts a enumerated type to its text representation</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="810"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="560">the enumerated constant value, e.g. "available"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="exit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="556">The enumerated type value</doc>
            <type name="ExitEnum" c:type="PkExitEnum"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <function-macro name="FILES" c:identifier="PK_FILES" introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-files.h" line="36"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILES_CLASS"
                    c:identifier="PK_FILES_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-files.h" line="37"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILES_GET_CLASS"
                    c:identifier="PK_FILES_GET_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-files.h" line="40"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Files"
           c:symbol-prefix="files"
           c:type="PkFiles"
           parent="Source"
           glib:type-name="PkFiles"
           glib:get-type="pk_files_get_type"
           glib:type-struct="FilesClass">
      <source-position filename="lib/packagekit-glib2/pk-files.h" line="65"/>
      <constructor name="new" c:identifier="pk_files_new" version="0.5.4">
        <source-position filename="lib/packagekit-glib2/pk-files.h" line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-files.c"
               line="205">a new #PkFiles object.</doc>
          <type name="Files" c:type="PkFiles*"/>
        </return-value>
      </constructor>
      <method name="get_files"
              c:identifier="pk_files_get_files"
              glib:get-property="files"
              version="0.9.1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-files.c"
             line="78">Gets the file list</doc>
        <source-position filename="lib/packagekit-glib2/pk-files.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-files.c"
               line="84">Gets the file list for the files object</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="files" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-files.c"
                 line="80">a valid #PkFiles instance</doc>
            <type name="Files" c:type="PkFiles*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_package_id"
              c:identifier="pk_files_get_package_id"
              glib:get-property="package-id"
              version="0.9.1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-files.c"
             line="61">Gets the package-id</doc>
        <source-position filename="lib/packagekit-glib2/pk-files.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-files.c"
               line="67">Gets the package_id for the files object</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="files" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-files.c"
                 line="63">a valid #PkFiles instance</doc>
            <type name="Files" c:type="PkFiles*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="files"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                getter="get_files">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="package-id"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                getter="get_package_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Source" c:type="PkSource"/>
      </field>
      <field name="priv">
        <type name="FilesPrivate" c:type="PkFilesPrivate*"/>
      </field>
    </class>
    <record name="FilesClass"
            c:type="PkFilesClass"
            glib:is-gtype-struct-for="Files">
      <source-position filename="lib/packagekit-glib2/pk-files.h" line="65"/>
      <field name="parent_class">
        <type name="SourceClass" c:type="PkSourceClass"/>
      </field>
      <field name="_pk_reserved1" introspectable="0">
        <callback name="_pk_reserved1">
          <source-position filename="lib/packagekit-glib2/pk-files.h"
                           line="60"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved2" introspectable="0">
        <callback name="_pk_reserved2">
          <source-position filename="lib/packagekit-glib2/pk-files.h"
                           line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved3" introspectable="0">
        <callback name="_pk_reserved3">
          <source-position filename="lib/packagekit-glib2/pk-files.h"
                           line="62"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved4" introspectable="0">
        <callback name="_pk_reserved4">
          <source-position filename="lib/packagekit-glib2/pk-files.h"
                           line="63"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved5" introspectable="0">
        <callback name="_pk_reserved5">
          <source-position filename="lib/packagekit-glib2/pk-files.h"
                           line="64"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="FilesPrivate"
            c:type="PkFilesPrivate"
            disguised="1"
            opaque="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-files.c"
           line="41">Private #PkFiles data</doc>
      <source-position filename="lib/packagekit-glib2/pk-files.h" line="42"/>
    </record>
    <enumeration name="FilterEnum"
                 glib:type-name="PkFilterEnum"
                 glib:get-type="pk_filter_enum_get_type"
                 c:type="PkFilterEnum">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.h"
           line="281">The filter types</doc>
      <member name="unknown"
              value="0"
              c:identifier="PK_FILTER_ENUM_UNKNOWN"
              glib:nick="unknown"
              glib:name="PK_FILTER_ENUM_UNKNOWN">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="283">Unknown filter</doc>
      </member>
      <member name="none"
              value="1"
              c:identifier="PK_FILTER_ENUM_NONE"
              glib:nick="none"
              glib:name="PK_FILTER_ENUM_NONE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="284">No filter</doc>
      </member>
      <member name="installed"
              value="2"
              c:identifier="PK_FILTER_ENUM_INSTALLED"
              glib:nick="installed"
              glib:name="PK_FILTER_ENUM_INSTALLED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="285">Filter for installed packages</doc>
      </member>
      <member name="not_installed"
              value="3"
              c:identifier="PK_FILTER_ENUM_NOT_INSTALLED"
              glib:nick="not-installed"
              glib:name="PK_FILTER_ENUM_NOT_INSTALLED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="286">Filter for not installed packages</doc>
      </member>
      <member name="development"
              value="4"
              c:identifier="PK_FILTER_ENUM_DEVELOPMENT"
              glib:nick="development"
              glib:name="PK_FILTER_ENUM_DEVELOPMENT">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="287">Filter for development packages</doc>
      </member>
      <member name="not_development"
              value="5"
              c:identifier="PK_FILTER_ENUM_NOT_DEVELOPMENT"
              glib:nick="not-development"
              glib:name="PK_FILTER_ENUM_NOT_DEVELOPMENT">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="288">Filter for non-development packages</doc>
      </member>
      <member name="gui"
              value="6"
              c:identifier="PK_FILTER_ENUM_GUI"
              glib:nick="gui"
              glib:name="PK_FILTER_ENUM_GUI">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="289">Filter for GUI packages</doc>
      </member>
      <member name="not_gui"
              value="7"
              c:identifier="PK_FILTER_ENUM_NOT_GUI"
              glib:nick="not-gui"
              glib:name="PK_FILTER_ENUM_NOT_GUI">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="290">Filter for non-GUI packages</doc>
      </member>
      <member name="free"
              value="8"
              c:identifier="PK_FILTER_ENUM_FREE"
              glib:nick="free"
              glib:name="PK_FILTER_ENUM_FREE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="291">Filter for free packages</doc>
      </member>
      <member name="not_free"
              value="9"
              c:identifier="PK_FILTER_ENUM_NOT_FREE"
              glib:nick="not-free"
              glib:name="PK_FILTER_ENUM_NOT_FREE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="292">Filter for non-free packages</doc>
      </member>
      <member name="visible"
              value="10"
              c:identifier="PK_FILTER_ENUM_VISIBLE"
              glib:nick="visible"
              glib:name="PK_FILTER_ENUM_VISIBLE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="293">Filter for visible packages</doc>
      </member>
      <member name="not_visible"
              value="11"
              c:identifier="PK_FILTER_ENUM_NOT_VISIBLE"
              glib:nick="not-visible"
              glib:name="PK_FILTER_ENUM_NOT_VISIBLE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="294">Filter for invisible packages</doc>
      </member>
      <member name="supported"
              value="12"
              c:identifier="PK_FILTER_ENUM_SUPPORTED"
              glib:nick="supported"
              glib:name="PK_FILTER_ENUM_SUPPORTED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="295">Filter for supported packages</doc>
      </member>
      <member name="not_supported"
              value="13"
              c:identifier="PK_FILTER_ENUM_NOT_SUPPORTED"
              glib:nick="not-supported"
              glib:name="PK_FILTER_ENUM_NOT_SUPPORTED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="296">Filter for not supported packages</doc>
      </member>
      <member name="basename"
              value="14"
              c:identifier="PK_FILTER_ENUM_BASENAME"
              glib:nick="basename"
              glib:name="PK_FILTER_ENUM_BASENAME">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="297">Filter for packages that match basename</doc>
      </member>
      <member name="not_basename"
              value="15"
              c:identifier="PK_FILTER_ENUM_NOT_BASENAME"
              glib:nick="not-basename"
              glib:name="PK_FILTER_ENUM_NOT_BASENAME">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="298">Filter for packages that don't match basename</doc>
      </member>
      <member name="newest"
              value="16"
              c:identifier="PK_FILTER_ENUM_NEWEST"
              glib:nick="newest"
              glib:name="PK_FILTER_ENUM_NEWEST">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="299">Filter for newest packages</doc>
      </member>
      <member name="not_newest"
              value="17"
              c:identifier="PK_FILTER_ENUM_NOT_NEWEST"
              glib:nick="not-newest"
              glib:name="PK_FILTER_ENUM_NOT_NEWEST">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="300">Filter for not newest packages</doc>
      </member>
      <member name="arch"
              value="18"
              c:identifier="PK_FILTER_ENUM_ARCH"
              glib:nick="arch"
              glib:name="PK_FILTER_ENUM_ARCH">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="301">Filter for packages that match architecture</doc>
      </member>
      <member name="not_arch"
              value="19"
              c:identifier="PK_FILTER_ENUM_NOT_ARCH"
              glib:nick="not-arch"
              glib:name="PK_FILTER_ENUM_NOT_ARCH">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="302">Filter for packages that don't match architecture</doc>
      </member>
      <member name="source"
              value="20"
              c:identifier="PK_FILTER_ENUM_SOURCE"
              glib:nick="source"
              glib:name="PK_FILTER_ENUM_SOURCE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="303">Filter for source packages</doc>
      </member>
      <member name="not_source"
              value="21"
              c:identifier="PK_FILTER_ENUM_NOT_SOURCE"
              glib:nick="not-source"
              glib:name="PK_FILTER_ENUM_NOT_SOURCE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="304">Filter for non-source packages</doc>
      </member>
      <member name="collections"
              value="22"
              c:identifier="PK_FILTER_ENUM_COLLECTIONS"
              glib:nick="collections"
              glib:name="PK_FILTER_ENUM_COLLECTIONS">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="305">Filter for collections</doc>
      </member>
      <member name="not_collections"
              value="23"
              c:identifier="PK_FILTER_ENUM_NOT_COLLECTIONS"
              glib:nick="not-collections"
              glib:name="PK_FILTER_ENUM_NOT_COLLECTIONS">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="306">Filter for not collections</doc>
      </member>
      <member name="application"
              value="24"
              c:identifier="PK_FILTER_ENUM_APPLICATION"
              glib:nick="application"
              glib:name="PK_FILTER_ENUM_APPLICATION">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="307">Filter for application packages</doc>
      </member>
      <member name="not_application"
              value="25"
              c:identifier="PK_FILTER_ENUM_NOT_APPLICATION"
              glib:nick="not-application"
              glib:name="PK_FILTER_ENUM_NOT_APPLICATION">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="308">Filter for non-application packages</doc>
      </member>
      <member name="downloaded"
              value="26"
              c:identifier="PK_FILTER_ENUM_DOWNLOADED"
              glib:nick="downloaded"
              glib:name="PK_FILTER_ENUM_DOWNLOADED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="309">Filter for downloaded packages</doc>
      </member>
      <member name="not_downloaded"
              value="27"
              c:identifier="PK_FILTER_ENUM_NOT_DOWNLOADED"
              glib:nick="not-downloaded"
              glib:name="PK_FILTER_ENUM_NOT_DOWNLOADED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="310">Filter for not downloaded packages</doc>
      </member>
      <member name="last"
              value="28"
              c:identifier="PK_FILTER_ENUM_LAST"
              glib:nick="last"
              glib:name="PK_FILTER_ENUM_LAST">
      </member>
      <function name="from_string"
                c:identifier="pk_filter_enum_from_string"
                version="0.5.0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="794">Converts a text enumerated type to its unsigned integer representation</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="830"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="800">the enumerated constant value, e.g. PK_SIGTYPE_ENUM_GPG</doc>
          <type name="FilterEnum" c:type="PkFilterEnum"/>
        </return-value>
        <parameters>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="796">Text describing the enumerated type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_string"
                c:identifier="pk_filter_enum_to_string"
                version="0.5.0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="810">Converts a enumerated type to its text representation</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="831"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="816">the enumerated constant value, e.g. "available"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="812">The enumerated type value</doc>
            <type name="FilterEnum" c:type="PkFilterEnum"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <enumeration name="GroupEnum"
                 glib:type-name="PkGroupEnum"
                 glib:get-type="pk_group_enum_get_type"
                 c:type="PkGroupEnum">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.h"
           line="519">The group type</doc>
      <member name="unknown"
              value="0"
              c:identifier="PK_GROUP_ENUM_UNKNOWN"
              glib:nick="unknown"
              glib:name="PK_GROUP_ENUM_UNKNOWN">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="521">Unknown group</doc>
      </member>
      <member name="accessibility"
              value="1"
              c:identifier="PK_GROUP_ENUM_ACCESSIBILITY"
              glib:nick="accessibility"
              glib:name="PK_GROUP_ENUM_ACCESSIBILITY">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="522">Accessibility related packages</doc>
      </member>
      <member name="accessories"
              value="2"
              c:identifier="PK_GROUP_ENUM_ACCESSORIES"
              glib:nick="accessories"
              glib:name="PK_GROUP_ENUM_ACCESSORIES">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="523">Accessory packages</doc>
      </member>
      <member name="admin_tools"
              value="3"
              c:identifier="PK_GROUP_ENUM_ADMIN_TOOLS"
              glib:nick="admin-tools"
              glib:name="PK_GROUP_ENUM_ADMIN_TOOLS">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="524">Administration tools packages</doc>
      </member>
      <member name="communication"
              value="4"
              c:identifier="PK_GROUP_ENUM_COMMUNICATION"
              glib:nick="communication"
              glib:name="PK_GROUP_ENUM_COMMUNICATION">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="525">Communication packages</doc>
      </member>
      <member name="desktop_gnome"
              value="5"
              c:identifier="PK_GROUP_ENUM_DESKTOP_GNOME"
              glib:nick="desktop-gnome"
              glib:name="PK_GROUP_ENUM_DESKTOP_GNOME">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="526">GNOME packages</doc>
      </member>
      <member name="desktop_kde"
              value="6"
              c:identifier="PK_GROUP_ENUM_DESKTOP_KDE"
              glib:nick="desktop-kde"
              glib:name="PK_GROUP_ENUM_DESKTOP_KDE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="527">KDE packages</doc>
      </member>
      <member name="desktop_other"
              value="7"
              c:identifier="PK_GROUP_ENUM_DESKTOP_OTHER"
              glib:nick="desktop-other"
              glib:name="PK_GROUP_ENUM_DESKTOP_OTHER">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="528">Other desktop packages</doc>
      </member>
      <member name="desktop_xfce"
              value="8"
              c:identifier="PK_GROUP_ENUM_DESKTOP_XFCE"
              glib:nick="desktop-xfce"
              glib:name="PK_GROUP_ENUM_DESKTOP_XFCE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="529">XFCE packages</doc>
      </member>
      <member name="education"
              value="9"
              c:identifier="PK_GROUP_ENUM_EDUCATION"
              glib:nick="education"
              glib:name="PK_GROUP_ENUM_EDUCATION">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="530">Education packages</doc>
      </member>
      <member name="fonts"
              value="10"
              c:identifier="PK_GROUP_ENUM_FONTS"
              glib:nick="fonts"
              glib:name="PK_GROUP_ENUM_FONTS">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="531">Fonts</doc>
      </member>
      <member name="games"
              value="11"
              c:identifier="PK_GROUP_ENUM_GAMES"
              glib:nick="games"
              glib:name="PK_GROUP_ENUM_GAMES">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="532">Games</doc>
      </member>
      <member name="graphics"
              value="12"
              c:identifier="PK_GROUP_ENUM_GRAPHICS"
              glib:nick="graphics"
              glib:name="PK_GROUP_ENUM_GRAPHICS">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="533">Graphics related packages</doc>
      </member>
      <member name="internet"
              value="13"
              c:identifier="PK_GROUP_ENUM_INTERNET"
              glib:nick="internet"
              glib:name="PK_GROUP_ENUM_INTERNET">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="534">Internet related packages</doc>
      </member>
      <member name="legacy"
              value="14"
              c:identifier="PK_GROUP_ENUM_LEGACY"
              glib:nick="legacy"
              glib:name="PK_GROUP_ENUM_LEGACY">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="535">Legacy packages</doc>
      </member>
      <member name="localization"
              value="15"
              c:identifier="PK_GROUP_ENUM_LOCALIZATION"
              glib:nick="localization"
              glib:name="PK_GROUP_ENUM_LOCALIZATION">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="536">Localization related packages</doc>
      </member>
      <member name="maps"
              value="16"
              c:identifier="PK_GROUP_ENUM_MAPS"
              glib:nick="maps"
              glib:name="PK_GROUP_ENUM_MAPS">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="537">Map related packages</doc>
      </member>
      <member name="multimedia"
              value="17"
              c:identifier="PK_GROUP_ENUM_MULTIMEDIA"
              glib:nick="multimedia"
              glib:name="PK_GROUP_ENUM_MULTIMEDIA">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="538">Multimedia packages</doc>
      </member>
      <member name="network"
              value="18"
              c:identifier="PK_GROUP_ENUM_NETWORK"
              glib:nick="network"
              glib:name="PK_GROUP_ENUM_NETWORK">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="539">Network related packages</doc>
      </member>
      <member name="office"
              value="19"
              c:identifier="PK_GROUP_ENUM_OFFICE"
              glib:nick="office"
              glib:name="PK_GROUP_ENUM_OFFICE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="540">Office packages</doc>
      </member>
      <member name="other"
              value="20"
              c:identifier="PK_GROUP_ENUM_OTHER"
              glib:nick="other"
              glib:name="PK_GROUP_ENUM_OTHER">
      </member>
      <member name="power_management"
              value="21"
              c:identifier="PK_GROUP_ENUM_POWER_MANAGEMENT"
              glib:nick="power-management"
              glib:name="PK_GROUP_ENUM_POWER_MANAGEMENT">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="542">Power-management related packages</doc>
      </member>
      <member name="programming"
              value="22"
              c:identifier="PK_GROUP_ENUM_PROGRAMMING"
              glib:nick="programming"
              glib:name="PK_GROUP_ENUM_PROGRAMMING">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="543">Programming packages</doc>
      </member>
      <member name="publishing"
              value="23"
              c:identifier="PK_GROUP_ENUM_PUBLISHING"
              glib:nick="publishing"
              glib:name="PK_GROUP_ENUM_PUBLISHING">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="544">Publishing related packages</doc>
      </member>
      <member name="repos"
              value="24"
              c:identifier="PK_GROUP_ENUM_REPOS"
              glib:nick="repos"
              glib:name="PK_GROUP_ENUM_REPOS">
      </member>
      <member name="security"
              value="25"
              c:identifier="PK_GROUP_ENUM_SECURITY"
              glib:nick="security"
              glib:name="PK_GROUP_ENUM_SECURITY">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="546">Security packages</doc>
      </member>
      <member name="servers"
              value="26"
              c:identifier="PK_GROUP_ENUM_SERVERS"
              glib:nick="servers"
              glib:name="PK_GROUP_ENUM_SERVERS">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="547">Server related packages</doc>
      </member>
      <member name="system"
              value="27"
              c:identifier="PK_GROUP_ENUM_SYSTEM"
              glib:nick="system"
              glib:name="PK_GROUP_ENUM_SYSTEM">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="548">System packages</doc>
      </member>
      <member name="virtualization"
              value="28"
              c:identifier="PK_GROUP_ENUM_VIRTUALIZATION"
              glib:nick="virtualization"
              glib:name="PK_GROUP_ENUM_VIRTUALIZATION">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="549">Virtualization packages</doc>
      </member>
      <member name="science"
              value="29"
              c:identifier="PK_GROUP_ENUM_SCIENCE"
              glib:nick="science"
              glib:name="PK_GROUP_ENUM_SCIENCE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="550">Science related packages</doc>
      </member>
      <member name="documentation"
              value="30"
              c:identifier="PK_GROUP_ENUM_DOCUMENTATION"
              glib:nick="documentation"
              glib:name="PK_GROUP_ENUM_DOCUMENTATION">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="551">Documentation</doc>
      </member>
      <member name="electronics"
              value="31"
              c:identifier="PK_GROUP_ENUM_ELECTRONICS"
              glib:nick="electronics"
              glib:name="PK_GROUP_ENUM_ELECTRONICS">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="552">Electronics package</doc>
      </member>
      <member name="collections"
              value="32"
              c:identifier="PK_GROUP_ENUM_COLLECTIONS"
              glib:nick="collections"
              glib:name="PK_GROUP_ENUM_COLLECTIONS">
      </member>
      <member name="vendor"
              value="33"
              c:identifier="PK_GROUP_ENUM_VENDOR"
              glib:nick="vendor"
              glib:name="PK_GROUP_ENUM_VENDOR">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="554">Vendor defined group</doc>
      </member>
      <member name="newest"
              value="34"
              c:identifier="PK_GROUP_ENUM_NEWEST"
              glib:nick="newest"
              glib:name="PK_GROUP_ENUM_NEWEST">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="555">Special group for recently updated packages</doc>
      </member>
      <member name="desktop_dde"
              value="35"
              c:identifier="PK_GROUP_ENUM_DESKTOP_DDE"
              glib:nick="desktop-dde"
              glib:name="PK_GROUP_ENUM_DESKTOP_DDE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="556">DDE packages</doc>
      </member>
      <member name="last"
              value="36"
              c:identifier="PK_GROUP_ENUM_LAST"
              glib:nick="last"
              glib:name="PK_GROUP_ENUM_LAST">
      </member>
      <function name="from_string"
                c:identifier="pk_group_enum_from_string"
                version="0.5.0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="730">Converts a text enumerated type to its unsigned integer representation</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="827"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="736">the enumerated constant value, e.g. PK_SIGTYPE_ENUM_GPG</doc>
          <type name="GroupEnum" c:type="PkGroupEnum"/>
        </return-value>
        <parameters>
          <parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="732">Text describing the enumerated type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_string"
                c:identifier="pk_group_enum_to_string"
                version="0.5.0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="746">Converts a enumerated type to its text representation</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="828"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="752">the enumerated constant value, e.g. "available"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="748">The enumerated type value</doc>
            <type name="GroupEnum" c:type="PkGroupEnum"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <function-macro name="IS_CATEGORY"
                    c:identifier="PK_IS_CATEGORY"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-category.h"
                       line="38"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CATEGORY_CLASS"
                    c:identifier="PK_IS_CATEGORY_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-category.h"
                       line="39"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CLIENT"
                    c:identifier="PK_IS_CLIENT"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-client.h" line="42"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CLIENT_CLASS"
                    c:identifier="PK_IS_CLIENT_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-client.h" line="43"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CLIENT_HELPER"
                    c:identifier="PK_IS_CLIENT_HELPER"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-client-helper.h"
                       line="39"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CLIENT_HELPER_CLASS"
                    c:identifier="PK_IS_CLIENT_HELPER_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-client-helper.h"
                       line="40"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONTROL"
                    c:identifier="PK_IS_CONTROL"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-control.h" line="39"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONTROL_CLASS"
                    c:identifier="PK_IS_CONTROL_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-control.h" line="40"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DESKTOP"
                    c:identifier="PK_IS_DESKTOP"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-desktop.h" line="36"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DESKTOP_CLASS"
                    c:identifier="PK_IS_DESKTOP_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-desktop.h" line="37"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DETAILS"
                    c:identifier="PK_IS_DETAILS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-details.h" line="39"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DETAILS_CLASS"
                    c:identifier="PK_IS_DETAILS_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-details.h" line="40"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DISTRO_UPGRADE"
                    c:identifier="PK_IS_DISTRO_UPGRADE"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-distro-upgrade.h"
                       line="39"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DISTRO_UPGRADE_CLASS"
                    c:identifier="PK_IS_DISTRO_UPGRADE_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-distro-upgrade.h"
                       line="40"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ERROR_CODE"
                    c:identifier="PK_IS_ERROR_CODE"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-error.h" line="39"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ERROR_CODE_CLASS"
                    c:identifier="PK_IS_ERROR_CODE_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-error.h" line="40"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_EULA_REQUIRED"
                    c:identifier="PK_IS_EULA_REQUIRED"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-eula-required.h"
                       line="38"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_EULA_REQUIRED_CLASS"
                    c:identifier="PK_IS_EULA_REQUIRED_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-eula-required.h"
                       line="39"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILES"
                    c:identifier="PK_IS_FILES"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-files.h" line="38"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILES_CLASS"
                    c:identifier="PK_IS_FILES_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-files.h" line="39"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ITEM_PROGRESS"
                    c:identifier="PK_IS_ITEM_PROGRESS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-item-progress.h"
                       line="39"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ITEM_PROGRESS_CLASS"
                    c:identifier="PK_IS_ITEM_PROGRESS_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-item-progress.h"
                       line="40"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MEDIA_CHANGE_REQUIRED"
                    c:identifier="PK_IS_MEDIA_CHANGE_REQUIRED"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-media-change-required.h"
                       line="38"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MEDIA_CHANGE_REQUIRED_CLASS"
                    c:identifier="PK_IS_MEDIA_CHANGE_REQUIRED_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-media-change-required.h"
                       line="39"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PACKAGE"
                    c:identifier="PK_IS_PACKAGE"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-package.h" line="39"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PACKAGE_CLASS"
                    c:identifier="PK_IS_PACKAGE_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-package.h" line="40"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PACKAGE_SACK"
                    c:identifier="PK_IS_PACKAGE_SACK"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                       line="39"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PACKAGE_SACK_CLASS"
                    c:identifier="PK_IS_PACKAGE_SACK_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                       line="40"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PROGRESS"
                    c:identifier="PK_IS_PROGRESS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-progress.h"
                       line="39"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PROGRESS_CLASS"
                    c:identifier="PK_IS_PROGRESS_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-progress.h"
                       line="40"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_REPO_DETAIL"
                    c:identifier="PK_IS_REPO_DETAIL"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-repo-detail.h"
                       line="38"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_REPO_DETAIL_CLASS"
                    c:identifier="PK_IS_REPO_DETAIL_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-repo-detail.h"
                       line="39"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_REPO_SIGNATURE_REQUIRED"
                    c:identifier="PK_IS_REPO_SIGNATURE_REQUIRED"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-repo-signature-required.h"
                       line="38"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_REPO_SIGNATURE_REQUIRED_CLASS"
                    c:identifier="PK_IS_REPO_SIGNATURE_REQUIRED_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-repo-signature-required.h"
                       line="39"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_REQUIRE_RESTART"
                    c:identifier="PK_IS_REQUIRE_RESTART"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-require-restart.h"
                       line="38"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_REQUIRE_RESTART_CLASS"
                    c:identifier="PK_IS_REQUIRE_RESTART_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-require-restart.h"
                       line="39"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_RESULTS"
                    c:identifier="PK_IS_RESULTS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-results.h" line="51"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_RESULTS_CLASS"
                    c:identifier="PK_IS_RESULTS_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-results.h" line="52"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE"
                    c:identifier="PK_IS_SOURCE"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-source.h" line="36"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_CLASS"
                    c:identifier="PK_IS_SOURCE_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-source.h" line="37"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TASK"
                    c:identifier="PK_IS_TASK"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-task.h" line="41"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TASK_CLASS"
                    c:identifier="PK_IS_TASK_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-task.h" line="42"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TRANSACTION_LIST"
                    c:identifier="PK_IS_TRANSACTION_LIST"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-transaction-list.h"
                       line="36"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TRANSACTION_LIST_CLASS"
                    c:identifier="PK_IS_TRANSACTION_LIST_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-transaction-list.h"
                       line="37"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TRANSACTION_PAST"
                    c:identifier="PK_IS_TRANSACTION_PAST"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-transaction-past.h"
                       line="39"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TRANSACTION_PAST_CLASS"
                    c:identifier="PK_IS_TRANSACTION_PAST_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-transaction-past.h"
                       line="40"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_UPDATE_DETAIL"
                    c:identifier="PK_IS_UPDATE_DETAIL"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-update-detail.h"
                       line="39"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_UPDATE_DETAIL_CLASS"
                    c:identifier="PK_IS_UPDATE_DETAIL_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-update-detail.h"
                       line="40"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ITEM_PROGRESS"
                    c:identifier="PK_ITEM_PROGRESS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-item-progress.h"
                       line="37"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ITEM_PROGRESS_CLASS"
                    c:identifier="PK_ITEM_PROGRESS_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-item-progress.h"
                       line="38"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ITEM_PROGRESS_GET_CLASS"
                    c:identifier="PK_ITEM_PROGRESS_GET_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-item-progress.h"
                       line="41"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <enumeration name="InfoEnum"
                 glib:type-name="PkInfoEnum"
                 glib:get-type="pk_info_enum_get_type"
                 c:type="PkInfoEnum">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.h"
           line="619">The enumerated types used in Package() - these have to refer to a specific
package action, rather than a general state</doc>
      <member name="unknown"
              value="0"
              c:identifier="PK_INFO_ENUM_UNKNOWN"
              glib:nick="unknown"
              glib:name="PK_INFO_ENUM_UNKNOWN">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="621">Package status is unknown</doc>
      </member>
      <member name="installed"
              value="1"
              c:identifier="PK_INFO_ENUM_INSTALLED"
              glib:nick="installed"
              glib:name="PK_INFO_ENUM_INSTALLED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="622">Package is installed</doc>
      </member>
      <member name="available"
              value="2"
              c:identifier="PK_INFO_ENUM_AVAILABLE"
              glib:nick="available"
              glib:name="PK_INFO_ENUM_AVAILABLE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="623">Package is available to be installed</doc>
      </member>
      <member name="low"
              value="3"
              c:identifier="PK_INFO_ENUM_LOW"
              glib:nick="low"
              glib:name="PK_INFO_ENUM_LOW">
      </member>
      <member name="enhancement"
              value="4"
              c:identifier="PK_INFO_ENUM_ENHANCEMENT"
              glib:nick="enhancement"
              glib:name="PK_INFO_ENUM_ENHANCEMENT">
      </member>
      <member name="normal"
              value="5"
              c:identifier="PK_INFO_ENUM_NORMAL"
              glib:nick="normal"
              glib:name="PK_INFO_ENUM_NORMAL">
      </member>
      <member name="bugfix"
              value="6"
              c:identifier="PK_INFO_ENUM_BUGFIX"
              glib:nick="bugfix"
              glib:name="PK_INFO_ENUM_BUGFIX">
      </member>
      <member name="important"
              value="7"
              c:identifier="PK_INFO_ENUM_IMPORTANT"
              glib:nick="important"
              glib:name="PK_INFO_ENUM_IMPORTANT">
      </member>
      <member name="security"
              value="8"
              c:identifier="PK_INFO_ENUM_SECURITY"
              glib:nick="security"
              glib:name="PK_INFO_ENUM_SECURITY">
      </member>
      <member name="blocked"
              value="9"
              c:identifier="PK_INFO_ENUM_BLOCKED"
              glib:nick="blocked"
              glib:name="PK_INFO_ENUM_BLOCKED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="630">Package is blocked</doc>
      </member>
      <member name="downloading"
              value="10"
              c:identifier="PK_INFO_ENUM_DOWNLOADING"
              glib:nick="downloading"
              glib:name="PK_INFO_ENUM_DOWNLOADING">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="631">Package is downloading</doc>
      </member>
      <member name="updating"
              value="11"
              c:identifier="PK_INFO_ENUM_UPDATING"
              glib:nick="updating"
              glib:name="PK_INFO_ENUM_UPDATING">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="632">Package is updating</doc>
      </member>
      <member name="installing"
              value="12"
              c:identifier="PK_INFO_ENUM_INSTALLING"
              glib:nick="installing"
              glib:name="PK_INFO_ENUM_INSTALLING">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="633">Package is being installed</doc>
      </member>
      <member name="removing"
              value="13"
              c:identifier="PK_INFO_ENUM_REMOVING"
              glib:nick="removing"
              glib:name="PK_INFO_ENUM_REMOVING">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="634">Package is being removed</doc>
      </member>
      <member name="cleanup"
              value="14"
              c:identifier="PK_INFO_ENUM_CLEANUP"
              glib:nick="cleanup"
              glib:name="PK_INFO_ENUM_CLEANUP">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="635">Package is running cleanup</doc>
      </member>
      <member name="obsoleting"
              value="15"
              c:identifier="PK_INFO_ENUM_OBSOLETING"
              glib:nick="obsoleting"
              glib:name="PK_INFO_ENUM_OBSOLETING">
      </member>
      <member name="collection_installed"
              value="16"
              c:identifier="PK_INFO_ENUM_COLLECTION_INSTALLED"
              glib:nick="collection-installed"
              glib:name="PK_INFO_ENUM_COLLECTION_INSTALLED">
      </member>
      <member name="collection_available"
              value="17"
              c:identifier="PK_INFO_ENUM_COLLECTION_AVAILABLE"
              glib:nick="collection-available"
              glib:name="PK_INFO_ENUM_COLLECTION_AVAILABLE">
      </member>
      <member name="finished"
              value="18"
              c:identifier="PK_INFO_ENUM_FINISHED"
              glib:nick="finished"
              glib:name="PK_INFO_ENUM_FINISHED">
      </member>
      <member name="reinstalling"
              value="19"
              c:identifier="PK_INFO_ENUM_REINSTALLING"
              glib:nick="reinstalling"
              glib:name="PK_INFO_ENUM_REINSTALLING">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="640">Package is being reinstalled</doc>
      </member>
      <member name="downgrading"
              value="20"
              c:identifier="PK_INFO_ENUM_DOWNGRADING"
              glib:nick="downgrading"
              glib:name="PK_INFO_ENUM_DOWNGRADING">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="641">Package is being downgraded</doc>
      </member>
      <member name="preparing"
              value="21"
              c:identifier="PK_INFO_ENUM_PREPARING"
              glib:nick="preparing"
              glib:name="PK_INFO_ENUM_PREPARING">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="642">Package is preparing for installation/removal</doc>
      </member>
      <member name="decompressing"
              value="22"
              c:identifier="PK_INFO_ENUM_DECOMPRESSING"
              glib:nick="decompressing"
              glib:name="PK_INFO_ENUM_DECOMPRESSING">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="643">Package is decompressing</doc>
      </member>
      <member name="untrusted"
              value="23"
              c:identifier="PK_INFO_ENUM_UNTRUSTED"
              glib:nick="untrusted"
              glib:name="PK_INFO_ENUM_UNTRUSTED">
      </member>
      <member name="trusted"
              value="24"
              c:identifier="PK_INFO_ENUM_TRUSTED"
              glib:nick="trusted"
              glib:name="PK_INFO_ENUM_TRUSTED">
      </member>
      <member name="unavailable"
              value="25"
              c:identifier="PK_INFO_ENUM_UNAVAILABLE"
              glib:nick="unavailable"
              glib:name="PK_INFO_ENUM_UNAVAILABLE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="646">Package is unavailable</doc>
      </member>
      <member name="critical"
              value="26"
              c:identifier="PK_INFO_ENUM_CRITICAL"
              glib:nick="critical"
              glib:name="PK_INFO_ENUM_CRITICAL">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="647">Update severity is critical; Since: 1.2.4</doc>
      </member>
      <member name="last"
              value="27"
              c:identifier="PK_INFO_ENUM_LAST"
              glib:nick="last"
              glib:name="PK_INFO_ENUM_LAST">
      </member>
      <function name="from_string"
                c:identifier="pk_info_enum_from_string"
                version="0.5.0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="506">Converts a text enumerated type to its unsigned integer representation</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="803"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="512">the enumerated constant value, e.g. PK_SIGTYPE_ENUM_GPG</doc>
          <type name="InfoEnum" c:type="PkInfoEnum"/>
        </return-value>
        <parameters>
          <parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="508">Text describing the enumerated type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_localised_past"
                c:identifier="pk_info_enum_to_localised_past"
                version="0.7.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="1066">Converts a enumerated type to its localized description</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="849"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="1072">the translated text</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="1068">The enumerated type value</doc>
            <type name="InfoEnum" c:type="PkInfoEnum"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_localised_present"
                c:identifier="pk_info_enum_to_localised_present"
                version="0.7.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="1017">Converts a enumerated type to its localized description</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="850"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="1023">the translated text</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="1019">The enumerated type value</doc>
            <type name="InfoEnum" c:type="PkInfoEnum"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_string"
                c:identifier="pk_info_enum_to_string"
                version="0.5.0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="522">Converts a enumerated type to its text representation</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="804"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="528">the enumerated constant value, e.g. "available"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="524">The enumerated type value</doc>
            <type name="InfoEnum" c:type="PkInfoEnum"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <class name="ItemProgress"
           c:symbol-prefix="item_progress"
           c:type="PkItemProgress"
           parent="Source"
           glib:type-name="PkItemProgress"
           glib:get-type="pk_item_progress_get_type"
           glib:type-struct="ItemProgressClass">
      <source-position filename="lib/packagekit-glib2/pk-item-progress.h"
                       line="66"/>
      <constructor name="new"
                   c:identifier="pk_item_progress_new"
                   version="0.8.1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-item-progress.c"
             line="225">An object containing item inside a #PkProgress.</doc>
        <source-position filename="lib/packagekit-glib2/pk-item-progress.h"
                         line="69"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-item-progress.c"
               line="230">a new #PkItemProgress object.</doc>
          <type name="ItemProgress" c:type="PkItemProgress*"/>
        </return-value>
      </constructor>
      <method name="get_package_id"
              c:identifier="pk_item_progress_get_package_id"
              glib:get-property="package-id">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-item-progress.c"
             line="92">Get the package ID this item is working on.</doc>
        <source-position filename="lib/packagekit-glib2/pk-item-progress.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-item-progress.c"
               line="98">a package ID</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item_progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-item-progress.c"
                 line="94">a valid #PkItemProgress instance</doc>
            <type name="ItemProgress" c:type="PkItemProgress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_percentage"
              c:identifier="pk_item_progress_get_percentage"
              glib:get-property="percentage">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-item-progress.c"
             line="78">Get the percentage complete of this item.</doc>
        <source-position filename="lib/packagekit-glib2/pk-item-progress.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-item-progress.c"
               line="84">a progress percentage (0-100)</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="item_progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-item-progress.c"
                 line="80">a valid #PkItemProgress instance</doc>
            <type name="ItemProgress" c:type="PkItemProgress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status"
              c:identifier="pk_item_progress_get_status"
              glib:get-property="status">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-item-progress.c"
             line="64">Get the status of this item.</doc>
        <source-position filename="lib/packagekit-glib2/pk-item-progress.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-item-progress.c"
               line="70">a #PkStatusEnum</doc>
          <type name="StatusEnum" c:type="PkStatusEnum"/>
        </return-value>
        <parameters>
          <instance-parameter name="item_progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-item-progress.c"
                 line="66">a valid #PkItemProgress instance</doc>
            <type name="ItemProgress" c:type="PkItemProgress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="package-id"
                version="0.8.1"
                writable="1"
                transfer-ownership="none"
                getter="get_package_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="percentage"
                version="0.8.1"
                writable="1"
                transfer-ownership="none"
                getter="get_percentage"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="status"
                version="0.8.2"
                writable="1"
                transfer-ownership="none"
                getter="get_status"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="Source" c:type="PkSource"/>
      </field>
      <field name="priv">
        <type name="ItemProgressPrivate" c:type="PkItemProgressPrivate*"/>
      </field>
    </class>
    <record name="ItemProgressClass"
            c:type="PkItemProgressClass"
            glib:is-gtype-struct-for="ItemProgress">
      <source-position filename="lib/packagekit-glib2/pk-item-progress.h"
                       line="66"/>
      <field name="parent_class">
        <type name="SourceClass" c:type="PkSourceClass"/>
      </field>
      <field name="_pk_reserved1" introspectable="0">
        <callback name="_pk_reserved1">
          <source-position filename="lib/packagekit-glib2/pk-item-progress.h"
                           line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved2" introspectable="0">
        <callback name="_pk_reserved2">
          <source-position filename="lib/packagekit-glib2/pk-item-progress.h"
                           line="62"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved3" introspectable="0">
        <callback name="_pk_reserved3">
          <source-position filename="lib/packagekit-glib2/pk-item-progress.h"
                           line="63"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved4" introspectable="0">
        <callback name="_pk_reserved4">
          <source-position filename="lib/packagekit-glib2/pk-item-progress.h"
                           line="64"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved5" introspectable="0">
        <callback name="_pk_reserved5">
          <source-position filename="lib/packagekit-glib2/pk-item-progress.h"
                           line="65"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ItemProgressPrivate"
            c:type="PkItemProgressPrivate"
            disguised="1"
            opaque="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-item-progress.c"
           line="42">Private #PkItemProgress data</doc>
      <source-position filename="lib/packagekit-glib2/pk-item-progress.h"
                       line="43"/>
    </record>
    <constant name="MAJOR_VERSION" value="1" c:type="PK_MAJOR_VERSION">
      <source-position filename="lib/packagekit-glib2/pk-version.h" line="31"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="MEDIA_CHANGE_REQUIRED"
                    c:identifier="PK_MEDIA_CHANGE_REQUIRED"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-media-change-required.h"
                       line="36"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MEDIA_CHANGE_REQUIRED_CLASS"
                    c:identifier="PK_MEDIA_CHANGE_REQUIRED_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-media-change-required.h"
                       line="37"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MEDIA_CHANGE_REQUIRED_GET_CLASS"
                    c:identifier="PK_MEDIA_CHANGE_REQUIRED_GET_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-media-change-required.h"
                       line="40"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="MICRO_VERSION" value="7" c:type="PK_MICRO_VERSION">
      <source-position filename="lib/packagekit-glib2/pk-version.h" line="33"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MINOR_VERSION" value="2" c:type="PK_MINOR_VERSION">
      <source-position filename="lib/packagekit-glib2/pk-version.h" line="32"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="MediaChangeRequired"
           c:symbol-prefix="media_change_required"
           c:type="PkMediaChangeRequired"
           parent="Source"
           glib:type-name="PkMediaChangeRequired"
           glib:get-type="pk_media_change_required_get_type"
           glib:type-struct="MediaChangeRequiredClass">
      <source-position filename="lib/packagekit-glib2/pk-media-change-required.h"
                       line="65"/>
      <constructor name="new"
                   c:identifier="pk_media_change_required_new"
                   version="0.5.4">
        <source-position filename="lib/packagekit-glib2/pk-media-change-required.h"
                         line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-media-change-required.c"
               line="189">a new #PkMediaChangeRequired object.</doc>
          <type name="MediaChangeRequired" c:type="PkMediaChangeRequired*"/>
        </return-value>
      </constructor>
      <property name="media-id"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="media-text"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="media-type"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                default-value="PK_MEDIA_TYPE_ENUM_UNKNOWN">
        <type name="MediaTypeEnum"/>
      </property>
      <field name="parent">
        <type name="Source" c:type="PkSource"/>
      </field>
      <field name="priv">
        <type name="MediaChangeRequiredPrivate"
              c:type="PkMediaChangeRequiredPrivate*"/>
      </field>
    </class>
    <record name="MediaChangeRequiredClass"
            c:type="PkMediaChangeRequiredClass"
            glib:is-gtype-struct-for="MediaChangeRequired">
      <source-position filename="lib/packagekit-glib2/pk-media-change-required.h"
                       line="65"/>
      <field name="parent_class">
        <type name="SourceClass" c:type="PkSourceClass"/>
      </field>
      <field name="_pk_reserved1" introspectable="0">
        <callback name="_pk_reserved1">
          <source-position filename="lib/packagekit-glib2/pk-media-change-required.h"
                           line="60"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved2" introspectable="0">
        <callback name="_pk_reserved2">
          <source-position filename="lib/packagekit-glib2/pk-media-change-required.h"
                           line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved3" introspectable="0">
        <callback name="_pk_reserved3">
          <source-position filename="lib/packagekit-glib2/pk-media-change-required.h"
                           line="62"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved4" introspectable="0">
        <callback name="_pk_reserved4">
          <source-position filename="lib/packagekit-glib2/pk-media-change-required.h"
                           line="63"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved5" introspectable="0">
        <callback name="_pk_reserved5">
          <source-position filename="lib/packagekit-glib2/pk-media-change-required.h"
                           line="64"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="MediaChangeRequiredPrivate"
            c:type="PkMediaChangeRequiredPrivate"
            disguised="1"
            opaque="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-media-change-required.c"
           line="43">Private #PkMediaChangeRequired data</doc>
      <source-position filename="lib/packagekit-glib2/pk-media-change-required.h"
                       line="42"/>
    </record>
    <enumeration name="MediaTypeEnum"
                 glib:type-name="PkMediaTypeEnum"
                 glib:get-type="pk_media_type_enum_get_type"
                 c:type="PkMediaTypeEnum">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.h"
           line="714">The media type</doc>
      <member name="unknown"
              value="0"
              c:identifier="PK_MEDIA_TYPE_ENUM_UNKNOWN"
              glib:nick="unknown"
              glib:name="PK_MEDIA_TYPE_ENUM_UNKNOWN">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="716">Unknown media type</doc>
      </member>
      <member name="cd"
              value="1"
              c:identifier="PK_MEDIA_TYPE_ENUM_CD"
              glib:nick="cd"
              glib:name="PK_MEDIA_TYPE_ENUM_CD">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="717">Media is a CD</doc>
      </member>
      <member name="dvd"
              value="2"
              c:identifier="PK_MEDIA_TYPE_ENUM_DVD"
              glib:nick="dvd"
              glib:name="PK_MEDIA_TYPE_ENUM_DVD">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="718">Media is a DVD</doc>
      </member>
      <member name="disc"
              value="3"
              c:identifier="PK_MEDIA_TYPE_ENUM_DISC"
              glib:nick="disc"
              glib:name="PK_MEDIA_TYPE_ENUM_DISC">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="719">Media is a disc (not CD or DVD)</doc>
      </member>
      <member name="last"
              value="4"
              c:identifier="PK_MEDIA_TYPE_ENUM_LAST"
              glib:nick="last"
              glib:name="PK_MEDIA_TYPE_ENUM_LAST">
      </member>
      <function name="from_string"
                c:identifier="pk_media_type_enum_from_string"
                version="0.5.0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="826">Converts a text enumerated type to its unsigned integer representation</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="836"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="832">the enumerated constant value, e.g. PK_MEDIA_TYPE_ENUM_CD</doc>
          <type name="MediaTypeEnum" c:type="PkMediaTypeEnum"/>
        </return-value>
        <parameters>
          <parameter name="media_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="828">Text describing the enumerated type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_string"
                c:identifier="pk_media_type_enum_to_string"
                version="0.5.0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="842">Converts a enumerated type to its text representation</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="837"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="848">the enumerated constant value, e.g. "dvd"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="media_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="844">The enumerated type value</doc>
            <type name="MediaTypeEnum" c:type="PkMediaTypeEnum"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <enumeration name="NetworkEnum"
                 glib:type-name="PkNetworkEnum"
                 glib:get-type="pk_network_enum_get_type"
                 c:type="PkNetworkEnum">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.h"
           line="259">Network type</doc>
      <member name="unknown"
              value="0"
              c:identifier="PK_NETWORK_ENUM_UNKNOWN"
              glib:nick="unknown"
              glib:name="PK_NETWORK_ENUM_UNKNOWN">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="261">Unknown network</doc>
      </member>
      <member name="offline"
              value="1"
              c:identifier="PK_NETWORK_ENUM_OFFLINE"
              glib:nick="offline"
              glib:name="PK_NETWORK_ENUM_OFFLINE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="262">Offline (no network)</doc>
      </member>
      <member name="online"
              value="2"
              c:identifier="PK_NETWORK_ENUM_ONLINE"
              glib:nick="online"
              glib:name="PK_NETWORK_ENUM_ONLINE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="263">Online (network type unknown)</doc>
      </member>
      <member name="wired"
              value="3"
              c:identifier="PK_NETWORK_ENUM_WIRED"
              glib:nick="wired"
              glib:name="PK_NETWORK_ENUM_WIRED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="264">Wired network</doc>
      </member>
      <member name="wifi"
              value="4"
              c:identifier="PK_NETWORK_ENUM_WIFI"
              glib:nick="wifi"
              glib:name="PK_NETWORK_ENUM_WIFI">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="265">WiFi network</doc>
      </member>
      <member name="mobile"
              value="5"
              c:identifier="PK_NETWORK_ENUM_MOBILE"
              glib:nick="mobile"
              glib:name="PK_NETWORK_ENUM_MOBILE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="266">Mobile network</doc>
      </member>
      <member name="last"
              value="6"
              c:identifier="PK_NETWORK_ENUM_LAST"
              glib:nick="last"
              glib:name="PK_NETWORK_ENUM_LAST">
      </member>
      <function name="from_string"
                c:identifier="pk_network_enum_from_string"
                version="0.5.0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="570">Converts a text enumerated type to its unsigned integer representation</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="812"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="576">the enumerated constant value, e.g. PK_SIGTYPE_ENUM_GPG</doc>
          <type name="NetworkEnum" c:type="PkNetworkEnum"/>
        </return-value>
        <parameters>
          <parameter name="network" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="572">Text describing the enumerated type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_string"
                c:identifier="pk_network_enum_to_string"
                version="0.5.0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="586">Converts a enumerated type to its text representation</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="813"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="592">the enumerated constant value, e.g. "available"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="network" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="588">The enumerated type value</doc>
            <type name="NetworkEnum" c:type="PkNetworkEnum"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <constant name="OFFLINE_DESTDIR" value="" c:type="PK_OFFLINE_DESTDIR">
      <source-position filename="lib/packagekit-glib2/pk-offline-private.h"
                       line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OFFLINE_RESULTS_GROUP"
              value="PackageKit Offline Update Results"
              c:type="PK_OFFLINE_RESULTS_GROUP">
      <source-position filename="lib/packagekit-glib2/pk-offline-private.h"
                       line="59"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <enumeration name="OfflineAction"
                 glib:type-name="PkOfflineAction"
                 glib:get-type="pk_offline_action_get_type"
                 c:type="PkOfflineAction">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-offline.h"
           line="39">Actions that can be taken after an offline operation.</doc>
      <member name="unknown"
              value="0"
              c:identifier="PK_OFFLINE_ACTION_UNKNOWN"
              glib:nick="unknown"
              glib:name="PK_OFFLINE_ACTION_UNKNOWN">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.h"
             line="41">Unknown</doc>
      </member>
      <member name="reboot"
              value="1"
              c:identifier="PK_OFFLINE_ACTION_REBOOT"
              glib:nick="reboot"
              glib:name="PK_OFFLINE_ACTION_REBOOT">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.h"
             line="42">Reboot</doc>
      </member>
      <member name="power_off"
              value="2"
              c:identifier="PK_OFFLINE_ACTION_POWER_OFF"
              glib:nick="power-off"
              glib:name="PK_OFFLINE_ACTION_POWER_OFF">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.h"
             line="43">Power-off</doc>
      </member>
      <member name="unset"
              value="3"
              c:identifier="PK_OFFLINE_ACTION_UNSET"
              glib:nick="unset"
              glib:name="PK_OFFLINE_ACTION_UNSET">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.h"
             line="44">No action set</doc>
      </member>
      <function name="from_string"
                c:identifier="pk_offline_action_from_string"
                version="0.9.6">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.c"
             line="74">Converts the string to the enumerated value.</doc>
        <source-position filename="lib/packagekit-glib2/pk-offline.h"
                         line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-offline.c"
               line="80">A #PkOfflineAction, or %PK_OFFLINE_ACTION_UNKNOWN for invalid</doc>
          <type name="OfflineAction" c:type="PkOfflineAction"/>
        </return-value>
        <parameters>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-offline.c"
                 line="76">a string representation of a #PkOfflineAction, e.g. "reboot"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_string"
                c:identifier="pk_offline_action_to_string"
                version="0.9.6">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.c"
             line="50">Converts the enumerated value to a string.</doc>
        <source-position filename="lib/packagekit-glib2/pk-offline.h"
                         line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-offline.c"
               line="56">string value, or %NULL for invalid</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-offline.c"
                 line="52">a #PkOfflineAction, e.g. %PK_OFFLINE_ACTION_REBOOT</doc>
            <type name="OfflineAction" c:type="PkOfflineAction"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <enumeration name="OfflineError"
                 glib:type-name="PkOfflineError"
                 glib:get-type="pk_offline_error_get_type"
                 c:type="PkOfflineError"
                 glib:error-domain="pk-offline-error-quark">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-offline.h"
           line="57">Errors that can be thrown</doc>
      <member name="failed"
              value="0"
              c:identifier="PK_OFFLINE_ERROR_FAILED"
              glib:nick="failed"
              glib:name="PK_OFFLINE_ERROR_FAILED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.h"
             line="59">No specific reason</doc>
      </member>
      <member name="invalid_value"
              value="1"
              c:identifier="PK_OFFLINE_ERROR_INVALID_VALUE"
              glib:nick="invalid-value"
              glib:name="PK_OFFLINE_ERROR_INVALID_VALUE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.h"
             line="60">An invalid value was specified</doc>
      </member>
      <member name="no_data"
              value="2"
              c:identifier="PK_OFFLINE_ERROR_NO_DATA"
              glib:nick="no-data"
              glib:name="PK_OFFLINE_ERROR_NO_DATA">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.h"
             line="61">No data was available</doc>
      </member>
      <function name="quark"
                c:identifier="pk_offline_error_quark"
                version="0.9.6">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.c"
             line="39">An error quark for #PkOfflineError.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-offline.c"
               line="44">an error quark.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <bitfield name="OfflineFlags"
              version="1.2.5"
              glib:type-name="PkOfflineFlags"
              glib:get-type="pk_offline_flags_get_type"
              c:type="PkOfflineFlags">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-offline.h"
           line="74">Flags to be used for the method invocations.</doc>
      <member name="none"
              value="0"
              c:identifier="PK_OFFLINE_FLAGS_NONE"
              glib:nick="none"
              glib:name="PK_OFFLINE_FLAGS_NONE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.h"
             line="76">No specific flag</doc>
      </member>
      <member name="interactive"
              value="1"
              c:identifier="PK_OFFLINE_FLAGS_INTERACTIVE"
              glib:nick="interactive"
              glib:name="PK_OFFLINE_FLAGS_INTERACTIVE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.h"
             line="77">Run the action in an interactive mode, allowing polkit authentication dialogs</doc>
      </member>
    </bitfield>
    <function-macro name="PACKAGE"
                    c:identifier="PK_PACKAGE"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-package.h" line="37"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PACKAGE_CLASS"
                    c:identifier="PK_PACKAGE_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-package.h" line="38"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PACKAGE_GET_CLASS"
                    c:identifier="PK_PACKAGE_GET_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-package.h" line="41"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="PACKAGE_IDS_DELIM"
              value="&amp;"
              c:type="PK_PACKAGE_IDS_DELIM">
      <source-position filename="lib/packagekit-glib2/pk-package-ids.h"
                       line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PACKAGE_ID_ARCH" value="2" c:type="PK_PACKAGE_ID_ARCH">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-package-id.h"
           line="47">Alias to get an arch field from the result of pk_package_id_split</doc>
      <source-position filename="lib/packagekit-glib2/pk-package-id.h"
                       line="52"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PACKAGE_ID_DATA" value="3" c:type="PK_PACKAGE_ID_DATA">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-package-id.h"
           line="54">Alias to get a data field from the result of pk_package_id_split</doc>
      <source-position filename="lib/packagekit-glib2/pk-package-id.h"
                       line="59"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PACKAGE_ID_NAME" value="0" c:type="PK_PACKAGE_ID_NAME">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-package-id.h"
           line="33">Alias to get a name field from the result of pk_package_id_split</doc>
      <source-position filename="lib/packagekit-glib2/pk-package-id.h"
                       line="38"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PACKAGE_ID_VERSION"
              value="1"
              c:type="PK_PACKAGE_ID_VERSION">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-package-id.h"
           line="40">Alias to get a version field from the result of pk_package_id_split</doc>
      <source-position filename="lib/packagekit-glib2/pk-package-id.h"
                       line="45"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="PACKAGE_SACK"
                    c:identifier="PK_PACKAGE_SACK"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                       line="37"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PACKAGE_SACK_CLASS"
                    c:identifier="PK_PACKAGE_SACK_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                       line="38"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PACKAGE_SACK_GET_CLASS"
                    c:identifier="PK_PACKAGE_SACK_GET_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                       line="41"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PROGRESS"
                    c:identifier="PK_PROGRESS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-progress.h"
                       line="37"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PROGRESS_CLASS"
                    c:identifier="PK_PROGRESS_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-progress.h"
                       line="38"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PROGRESS_GET_CLASS"
                    c:identifier="PK_PROGRESS_GET_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-progress.h"
                       line="41"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Package"
           c:symbol-prefix="package"
           c:type="PkPackage"
           parent="Source"
           glib:type-name="PkPackage"
           glib:get-type="pk_package_get_type"
           glib:type-struct="PackageClass">
      <source-position filename="lib/packagekit-glib2/pk-package.h" line="70"/>
      <constructor name="new" c:identifier="pk_package_new" version="0.5.4">
        <source-position filename="lib/packagekit-glib2/pk-package.h"
                         line="73"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package.c"
               line="875">a new #PkPackage object.</doc>
          <type name="Package" c:type="PkPackage*"/>
        </return-value>
      </constructor>
      <function name="id_build"
                c:identifier="pk_package_id_build"
                version="0.5.0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-id.c"
             line="98">Generate a PackageID.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-id.h"
                         line="61"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-id.c"
               line="107">returns a string to form the PackageID.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-id.c"
                 line="100">the package name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="version" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-id.c"
                 line="101">the package version</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arch" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-id.c"
                 line="102">the package architecture</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-id.c"
                 line="103">the package extra data</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="id_check"
                c:identifier="pk_package_id_check"
                version="0.5.0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-id.c"
             line="66">Check if a Packageid is well formed.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-id.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-id.c"
               line="72">%TRUE if the PackageID was well formed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="package_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-id.c"
                 line="68">the PackageID to check</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="id_equal_fuzzy_arch"
                c:identifier="pk_package_id_equal_fuzzy_arch"
                version="0.5.0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-id.c"
             line="151">Only compare the name, version, and arch, where the architecture will fuzzy
match with i*86.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-id.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-id.c"
               line="159">%TRUE if the PackageIDs can be considered equal.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="package_id1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-id.c"
                 line="153">the first PackageID</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="package_id2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-id.c"
                 line="154">the second PackageID</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="id_split"
                c:identifier="pk_package_id_split"
                version="0.5.3">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-id.c"
             line="34">Splits a PackageID into the correct number of parts, checking the correct
number of delimiters are present.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-id.h"
                         line="66"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-id.c"
               line="41">a GStrv or %NULL if invalid, use g_strfreev() to free</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="package_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-id.c"
                 line="36">the ; delimited PackageID to split</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="id_to_printable"
                c:identifier="pk_package_id_to_printable"
                version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-id.c"
             line="178">Formats the PackageID to be printable to the user.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-id.h"
                         line="67"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-id.c"
               line="184">the name-version.arch formatted string, use g_free() to free.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="package_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-id.c"
                 line="180">the PackageID</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="ids_add_id"
                c:identifier="pk_package_ids_add_id"
                version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-ids.c"
             line="142">Adds a package_id to an existing list.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-ids.h"
                         line="52"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-ids.c"
               line="149">the new list, free g_strfreev()</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-ids.c"
                 line="144">a string array of package_id's</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="package_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-ids.c"
                 line="145">a single package_id</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="ids_add_ids"
                c:identifier="pk_package_ids_add_ids"
                version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-ids.c"
             line="173">Adds a package_id to an existing list.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-ids.h"
                         line="54"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-ids.c"
               line="180">the new list, free g_strfreev()</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-ids.c"
                 line="175">a string array of package_id's</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="package_ids_new" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-ids.c"
                 line="176">a string array of package_id's</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </function>
      <function name="ids_check"
                c:identifier="pk_package_ids_check"
                version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-ids.c"
             line="64">Check the string array of package_id's for validity</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-ids.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-ids.c"
               line="70">%TRUE if the package_ids are all valid.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-ids.c"
                 line="66">a string array of package_id's</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </function>
      <function name="ids_from_id"
                c:identifier="pk_package_ids_from_id"
                version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-ids.c"
             line="28">Form a composite string array of package_id's from
a single package_id</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-ids.h"
                         line="46"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-ids.c"
               line="35">the string array, or %NULL if invalid, free with g_strfreev()</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="package_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-ids.c"
                 line="30">A single package_id</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="ids_from_string"
                c:identifier="pk_package_ids_from_string"
                version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-ids.c"
             line="46">Form a composite string array of package_id's from
a delimited string</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-ids.h"
                         line="47"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-ids.c"
               line="53">the string array, or %NULL if invalid, free with g_strfreev()</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="package_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-ids.c"
                 line="48">A single package_id</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="ids_present_id"
                c:identifier="pk_package_ids_present_id"
                version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-ids.c"
             line="115">Finds out if a package ID is present in the list.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-ids.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-ids.c"
               line="122">%TRUE if the package ID is present</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-ids.c"
                 line="117">a string array of package_id's</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="package_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-ids.c"
                 line="118">a single package_id</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="ids_remove_id"
                c:identifier="pk_package_ids_remove_id"
                version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-ids.c"
             line="207">Removes a package ID from the the list.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-ids.h"
                         line="56"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-ids.c"
               line="214">the new list, free g_strfreev()</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-ids.c"
                 line="209">a string array of package_id's</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="package_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-ids.c"
                 line="210">a single package_id</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="ids_to_string"
                c:identifier="pk_package_ids_to_string"
                version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-ids.c"
             line="96">Cats the string array of package_id's into one delimited string</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-ids.h"
                         line="49"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-ids.c"
               line="102">a string representation of all the package_id's.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-ids.c"
                 line="98">a string array of package_id's</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="changed">
        <source-position filename="lib/packagekit-glib2/pk-package.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="package" transfer-ownership="none">
            <type name="Package" c:type="PkPackage*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="equal" c:identifier="pk_package_equal" version="0.5.4">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package.c"
             line="110">Do the #PkPackage's have the same ID.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package.h"
                         line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package.c"
               line="117">%TRUE if the packages have the same package_id, info and summary.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="package1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package.c"
                 line="112">a valid #PkPackage instance</doc>
            <type name="Package" c:type="PkPackage*"/>
          </instance-parameter>
          <parameter name="package2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package.c"
                 line="113">a valid #PkPackage instance</doc>
            <type name="Package" c:type="PkPackage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="equal_id"
              c:identifier="pk_package_equal_id"
              version="0.5.4">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package.c"
             line="131">Do the #PkPackage's have the same ID.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package.h"
                         line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package.c"
               line="138">%TRUE if the packages have the same package_id.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="package1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package.c"
                 line="133">a valid #PkPackage instance</doc>
            <type name="Package" c:type="PkPackage*"/>
          </instance-parameter>
          <parameter name="package2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package.c"
                 line="134">a valid #PkPackage instance</doc>
            <type name="Package" c:type="PkPackage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_arch"
              c:identifier="pk_package_get_arch"
              version="0.6.4">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package.c"
             line="360">Gets the package arch.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package.h"
                         line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package.c"
               line="366">the arch, or %NULL if unset</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="package" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package.c"
                 line="362">a valid #PkPackage instance</doc>
            <type name="Package" c:type="PkPackage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_data"
              c:identifier="pk_package_get_data"
              version="0.6.4">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package.c"
             line="377">Gets the package data, which is usually the repository ID that contains the
package. Special ID's include "installed" for installed packages, and "local"
for local packages that exist on disk but not in a repository.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package.h"
                         line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package.c"
               line="385">the data, or %NULL if unset</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="package" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package.c"
                 line="379">a valid #PkPackage instance</doc>
            <type name="Package" c:type="PkPackage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="pk_package_get_id" version="0.5.4">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package.c"
             line="292">Gets the package object ID</doc>
        <source-position filename="lib/packagekit-glib2/pk-package.h"
                         line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package.c"
               line="298">the ID, or %NULL if unset</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="package" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package.c"
                 line="294">a valid #PkPackage instance</doc>
            <type name="Package" c:type="PkPackage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_info"
              c:identifier="pk_package_get_info"
              glib:get-property="info"
              version="0.5.4">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package.c"
             line="242">Gets the package object ID</doc>
        <source-position filename="lib/packagekit-glib2/pk-package.h"
                         line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package.c"
               line="248">the #PkInfoEnum</doc>
          <type name="InfoEnum" c:type="PkInfoEnum"/>
        </return-value>
        <parameters>
          <instance-parameter name="package" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package.c"
                 line="244">a valid #PkPackage instance</doc>
            <type name="Package" c:type="PkPackage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="pk_package_get_name"
              version="0.6.4">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package.c"
             line="326">Gets the package name.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package.h"
                         line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package.c"
               line="332">the name, or %NULL if unset</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="package" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package.c"
                 line="328">a valid #PkPackage instance</doc>
            <type name="Package" c:type="PkPackage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_summary"
              c:identifier="pk_package_get_summary"
              glib:get-property="summary"
              version="0.5.4">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package.c"
             line="309">Gets the package object ID</doc>
        <source-position filename="lib/packagekit-glib2/pk-package.h"
                         line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package.c"
               line="315">the summary, or %NULL if unset</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="package" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package.c"
                 line="311">a valid #PkPackage instance</doc>
            <type name="Package" c:type="PkPackage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_update_severity"
              c:identifier="pk_package_get_update_severity"
              glib:get-property="update-severity"
              version="1.2.4">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package.c"
             line="887">Returns the @package update severity. Can be one of %PK_INFO_ENUM_UNKNOWN,
%PK_INFO_ENUM_LOW, %PK_INFO_ENUM_NORMAL, %PK_INFO_ENUM_IMPORTANT or
%PK_INFO_ENUM_CRITICAL.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package.h"
                         line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package.c"
               line="895">the @package update severity, if known.</doc>
          <type name="InfoEnum" c:type="PkInfoEnum"/>
        </return-value>
        <parameters>
          <instance-parameter name="package" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package.c"
                 line="889">a #PkPackage</doc>
            <type name="Package" c:type="PkPackage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_version"
              c:identifier="pk_package_get_version"
              version="0.6.4">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package.c"
             line="343">Gets the package version.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package.h"
                         line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package.c"
               line="349">the version, or %NULL if unset</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="package" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package.c"
                 line="345">a valid #PkPackage instance</doc>
            <type name="Package" c:type="PkPackage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="parse"
              c:identifier="pk_package_parse"
              version="0.8.11"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package.c"
             line="206">Parses the data to populate the #PkPackage.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package.h"
                         line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package.c"
               line="214">%TRUE if the data was parsed correcty</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="package" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package.c"
                 line="208">a valid #PkPackage instance</doc>
            <type name="Package" c:type="PkPackage*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package.c"
                 line="209">the data describing the package</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="print" c:identifier="pk_package_print" version="0.5.4">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package.c"
             line="396">Prints details about the package to standard out.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="package" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package.c"
                 line="398">a valid #PkPackage instance</doc>
            <type name="Package" c:type="PkPackage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_id"
              c:identifier="pk_package_set_id"
              version="0.5.4"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package.c"
             line="150">Sets the package object to have the given ID</doc>
        <source-position filename="lib/packagekit-glib2/pk-package.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package.c"
               line="158">%TRUE if the package_id was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="package" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package.c"
                 line="152">a valid #PkPackage instance</doc>
            <type name="Package" c:type="PkPackage*"/>
          </instance-parameter>
          <parameter name="package_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package.c"
                 line="153">the valid package_id</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_info"
              c:identifier="pk_package_set_info"
              glib:set-property="info"
              version="0.8.14">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package.c"
             line="259">Sets the package info enum.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package.h"
                         line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="package" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package.c"
                 line="261">a valid #PkPackage instance</doc>
            <type name="Package" c:type="PkPackage*"/>
          </instance-parameter>
          <parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package.c"
                 line="262">the #PkInfoEnum</doc>
            <type name="InfoEnum" c:type="PkInfoEnum"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_summary"
              c:identifier="pk_package_set_summary"
              glib:set-property="summary"
              version="0.8.14">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package.c"
             line="275">Sets the package summary.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package.h"
                         line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="package" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package.c"
                 line="277">a valid #PkPackage instance</doc>
            <type name="Package" c:type="PkPackage*"/>
          </instance-parameter>
          <parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package.c"
                 line="278">the package summary</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_update_severity"
              c:identifier="pk_package_set_update_severity"
              glib:set-property="update-severity"
              version="1.2.4">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package.c"
             line="907">Set an update severity for the @package. The @update_severity can be
one of %PK_INFO_ENUM_UNKNOWN, %PK_INFO_ENUM_LOW, %PK_INFO_ENUM_NORMAL,
%PK_INFO_ENUM_IMPORTANT or %PK_INFO_ENUM_CRITICAL.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package.h"
                         line="100"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="package" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package.c"
                 line="909">a #PkPackage</doc>
            <type name="Package" c:type="PkPackage*"/>
          </instance-parameter>
          <parameter name="update_severity" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package.c"
                 line="910">a #PkInfoEnum</doc>
            <type name="InfoEnum" c:type="PkInfoEnum"/>
          </parameter>
        </parameters>
      </method>
      <property name="description"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="group"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                default-value="PK_GROUP_ENUM_UNKNOWN">
        <type name="GroupEnum"/>
      </property>
      <property name="info"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                setter="set_info"
                getter="get_info"
                default-value="PK_INFO_ENUM_UNKNOWN">
        <type name="InfoEnum"/>
      </property>
      <property name="license"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="package-id"
                version="0.5.4"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="size"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                default-value="0">
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="summary"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                setter="set_summary"
                getter="get_summary"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="update-bugzilla-urls"
                version="0.8.1"
                writable="1"
                transfer-ownership="none">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="update-changelog"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="update-cve-urls"
                version="0.8.1"
                writable="1"
                transfer-ownership="none">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="update-issued"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="update-obsoletes"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="update-restart"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                default-value="PK_RESTART_ENUM_UNKNOWN">
        <type name="RestartEnum"/>
      </property>
      <property name="update-severity"
                version="1.2.4"
                writable="1"
                transfer-ownership="none"
                setter="set_update_severity"
                getter="get_update_severity"
                default-value="PK_INFO_ENUM_UNKNOWN">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package.c"
             line="799">Can be one of %PK_INFO_ENUM_UNKNOWN, %PK_INFO_ENUM_LOW, %PK_INFO_ENUM_NORMAL,
%PK_INFO_ENUM_IMPORTANT or %PK_INFO_ENUM_CRITICAL.</doc>
        <type name="InfoEnum"/>
      </property>
      <property name="update-state"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                default-value="PK_UPDATE_STATE_ENUM_UNKNOWN">
        <type name="UpdateStateEnum"/>
      </property>
      <property name="update-text"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="update-updated"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="update-updates"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="update-vendor-urls"
                version="0.8.1"
                writable="1"
                transfer-ownership="none">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="url"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Source" c:type="PkSource"/>
      </field>
      <field name="priv">
        <type name="PackagePrivate" c:type="PkPackagePrivate*"/>
      </field>
      <glib:signal name="changed" when="last">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package.c"
             line="813">The ::changed signal is emitted when the package data may have changed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="PackageClass"
            c:type="PkPackageClass"
            glib:is-gtype-struct-for="Package">
      <source-position filename="lib/packagekit-glib2/pk-package.h" line="70"/>
      <field name="parent_class">
        <type name="SourceClass" c:type="PkSourceClass"/>
      </field>
      <field name="changed">
        <callback name="changed">
          <source-position filename="lib/packagekit-glib2/pk-package.h"
                           line="63"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="package" transfer-ownership="none">
              <type name="Package" c:type="PkPackage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_pk_reserved1" introspectable="0">
        <callback name="_pk_reserved1">
          <source-position filename="lib/packagekit-glib2/pk-package.h"
                           line="65"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved2" introspectable="0">
        <callback name="_pk_reserved2">
          <source-position filename="lib/packagekit-glib2/pk-package.h"
                           line="66"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved3" introspectable="0">
        <callback name="_pk_reserved3">
          <source-position filename="lib/packagekit-glib2/pk-package.h"
                           line="67"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved4" introspectable="0">
        <callback name="_pk_reserved4">
          <source-position filename="lib/packagekit-glib2/pk-package.h"
                           line="68"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved5" introspectable="0">
        <callback name="_pk_reserved5">
          <source-position filename="lib/packagekit-glib2/pk-package.h"
                           line="69"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="PackagePrivate"
            c:type="PkPackagePrivate"
            disguised="1"
            opaque="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-package.c"
           line="45">Private #PkPackage data</doc>
      <source-position filename="lib/packagekit-glib2/pk-package.h" line="44"/>
    </record>
    <class name="PackageSack"
           c:symbol-prefix="package_sack"
           c:type="PkPackageSack"
           parent="GObject.Object"
           glib:type-name="PkPackageSack"
           glib:get-type="pk_package_sack_get_type"
           glib:type-struct="PackageSackClass">
      <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                       line="71"/>
      <constructor name="new"
                   c:identifier="pk_package_sack_new"
                   version="0.5.2">
        <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                         line="92"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-sack.c"
               line="1168">a new #PkPackageSack object.</doc>
          <type name="PackageSack" c:type="PkPackageSack*"/>
        </return-value>
      </constructor>
      <virtual-method name="changed">
        <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sack" transfer-ownership="none">
            <type name="PackageSack" c:type="PkPackageSack*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="add_package"
              c:identifier="pk_package_sack_add_package"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-sack.c"
             line="220">Adds a package to the sack.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                         line="113"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-sack.c"
               line="227">%TRUE if the package was added to the sack</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sack" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="222">a valid #PkPackageSack instance</doc>
            <type name="PackageSack" c:type="PkPackageSack*"/>
          </instance-parameter>
          <parameter name="package" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="223">a valid #PkPackage instance</doc>
            <type name="Package" c:type="PkPackage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_package_by_id"
              c:identifier="pk_package_sack_add_package_by_id"
              version="0.5.2"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-sack.c"
             line="247">Adds a package reference to the sack.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                         line="115"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-sack.c"
               line="255">%TRUE if the package was added to the sack</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sack" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="249">a valid #PkPackageSack instance</doc>
            <type name="PackageSack" c:type="PkPackageSack*"/>
          </instance-parameter>
          <parameter name="package_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="250">a package_id descriptor</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_packages_from_file"
              c:identifier="pk_package_sack_add_packages_from_file"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-sack.c"
             line="314">Adds packages from package-list file to a #PkPackageSack.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                         line="118"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-sack.c"
               line="322">%TRUE if there were no errors.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sack" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="316">a valid #PkPackageSack instance</doc>
            <type name="PackageSack" c:type="PkPackageSack*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="317">a valid package-list file</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear"
              c:identifier="pk_package_sack_clear"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-sack.c"
             line="66">Empty all the packages from the sack</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                         line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sack" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="68">a valid #PkPackageSack instance</doc>
            <type name="PackageSack" c:type="PkPackageSack*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="filter"
              c:identifier="pk_package_sack_filter"
              version="0.6.3">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-sack.c"
             line="184">Returns a new package sack which only matches packages that return %TRUE
from the filter function.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                         line="137"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-sack.c"
               line="193">a new #PkPackageSack, free with g_object_unref()</doc>
          <type name="PackageSack" c:type="PkPackageSack*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sack" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="186">a valid #PkPackageSack instance</doc>
            <type name="PackageSack" c:type="PkPackageSack*"/>
          </instance-parameter>
          <parameter name="filter_cb"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="187">a #PkPackageSackFilterFunc, which returns %TRUE for the #PkPackage's to add</doc>
            <type name="PackageSackFilterFunc"
                  c:type="PkPackageSackFilterFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="188">user data to pass to @filter_cb</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="filter_by_info"
              c:identifier="pk_package_sack_filter_by_info"
              version="0.6.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-sack.c"
             line="147">Returns a new package sack which only matches packages that match the
specified info enum value.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                         line="135"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-sack.c"
               line="155">a new #PkPackageSack, free with g_object_unref()</doc>
          <type name="PackageSack" c:type="PkPackageSack*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sack" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="149">a valid #PkPackageSack instance</doc>
            <type name="PackageSack" c:type="PkPackageSack*"/>
          </instance-parameter>
          <parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="150">a #PkInfoEnum value to match</doc>
            <type name="InfoEnum" c:type="PkInfoEnum"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_by_id"
              c:identifier="pk_package_sack_find_by_id"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-sack.c"
             line="496">Finds a package in a sack from reference. As soon as one package is found
the search is stopped.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                         line="131"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-sack.c"
               line="504">the #PkPackage object, or %NULL if unfound. Free with g_object_unref()</doc>
          <type name="Package" c:type="PkPackage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sack" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="498">a valid #PkPackageSack instance</doc>
            <type name="PackageSack" c:type="PkPackageSack*"/>
          </instance-parameter>
          <parameter name="package_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="499">a package_id descriptor</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_by_id_name_arch"
              c:identifier="pk_package_sack_find_by_id_name_arch"
              version="0.8.16">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-sack.c"
             line="523">Finds a package in a sack by package name and architecture. As soon as one
package is found the search is stopped.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                         line="133"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-sack.c"
               line="531">the #PkPackage object, or %NULL if not found.</doc>
          <type name="Package" c:type="PkPackage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sack" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="525">a valid #PkPackageSack instance</doc>
            <type name="PackageSack" c:type="PkPackageSack*"/>
          </instance-parameter>
          <parameter name="package_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="526">a package_id descriptor</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_array"
              c:identifier="pk_package_sack_get_array"
              version="0.6.1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-sack.c"
             line="130">Gets the package array from the sack</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                         line="110"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-sack.c"
               line="136">A #GPtrArray, free with g_ptr_array_unref().</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Package"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="sack" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="132">a valid #PkPackageSack instance</doc>
            <type name="PackageSack" c:type="PkPackageSack*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_details"
              c:identifier="pk_package_sack_get_details"
              version="0.6.0"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-sack-sync.c"
             line="98">Gets the properties the daemon supports.
Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-sack-sync.h"
                         line="33"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-sack-sync.c"
               line="108">%TRUE if the properties were set correctly</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="package_sack" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack-sync.c"
                 line="100">a valid #PkPackageSack instance</doc>
            <type name="PackageSack" c:type="PkPackageSack*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack-sync.c"
                 line="101">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_details_async"
              c:identifier="pk_package_sack_get_details_async">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-sack.c"
             line="929">Merges in details about packages.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                         line="155"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sack" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="931">a valid #PkPackageSack instance</doc>
            <type name="PackageSack" c:type="PkPackageSack*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="932">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="933">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="934">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="935">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="936">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_ids"
              c:identifier="pk_package_sack_get_ids"
              version="0.5.3">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-sack.c"
             line="101">Returns all the Package IDs in the sack</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                         line="108"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-sack.c"
               line="107">the number of packages in the sack, free with g_strfreev()</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="sack" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="103">a valid #PkPackageSack instance</doc>
            <type name="PackageSack" c:type="PkPackageSack*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="pk_package_sack_get_size"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-sack.c"
             line="83">Gets the number of packages in the sack</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                         line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-sack.c"
               line="89">the number of packages in the sack</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="sack" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="85">a valid #PkPackageSack instance</doc>
            <type name="PackageSack" c:type="PkPackageSack*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_total_bytes"
              c:identifier="pk_package_sack_get_total_bytes"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-sack.c"
             line="645">Gets the total size of the package sack in bytes.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                         line="140"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-sack.c"
               line="651">the size in bytes</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="sack" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="647">a valid #PkPackageSack instance</doc>
            <type name="PackageSack" c:type="PkPackageSack*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_update_detail"
              c:identifier="pk_package_sack_get_update_detail"
              version="0.6.0"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-sack-sync.c"
             line="144">Gets the properties the daemon supports.
Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-sack-sync.h"
                         line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-sack-sync.c"
               line="154">%TRUE if the properties were set correctly</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="package_sack" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack-sync.c"
                 line="146">a valid #PkPackageSack instance</doc>
            <type name="PackageSack" c:type="PkPackageSack*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack-sync.c"
                 line="147">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_update_detail_async"
              c:identifier="pk_package_sack_get_update_detail_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-sack.c"
             line="1063">Merges in update details about packages.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                         line="163"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sack" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="1065">a valid #PkPackageSack instance</doc>
            <type name="PackageSack" c:type="PkPackageSack*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="1066">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="1067">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="1068">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="1069">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="1070">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="merge_generic_finish"
              c:identifier="pk_package_sack_merge_generic_finish"
              version="0.5.2"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-sack.c"
             line="835">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                         line="142"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-sack.c"
               line="843">%TRUE for success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sack" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="837">a valid #PkPackageSack instance</doc>
            <type name="PackageSack" c:type="PkPackageSack*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="838">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_by_filter"
              c:identifier="pk_package_sack_remove_by_filter"
              version="0.6.3">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-sack.c"
             line="456">Removes from the package sack any packages that return %FALSE from the filter
function.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                         line="128"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-sack.c"
               line="465">%TRUE if a package was removed from the sack</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sack" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="458">a valid #PkPackageSack instance</doc>
            <type name="PackageSack" c:type="PkPackageSack*"/>
          </instance-parameter>
          <parameter name="filter_cb"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="459">a #PkPackageSackFilterFunc, which returns %TRUE for the #PkPackage's to retain</doc>
            <type name="PackageSackFilterFunc"
                  c:type="PkPackageSackFilterFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="460">user data to pass to @filter_cb</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_package"
              c:identifier="pk_package_sack_remove_package"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-sack.c"
             line="400">Removes a package reference from the sack. The pointers have to match exactly.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                         line="124"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-sack.c"
               line="407">%TRUE if the package was removed from the sack</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sack" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="402">a valid #PkPackageSack instance</doc>
            <type name="PackageSack" c:type="PkPackageSack*"/>
          </instance-parameter>
          <parameter name="package" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="403">a valid #PkPackage instance</doc>
            <type name="Package" c:type="PkPackage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_package_by_id"
              c:identifier="pk_package_sack_remove_package_by_id"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-sack.c"
             line="422">Removes a package reference from the sack. As soon as one package is removed
the search is stopped.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                         line="126"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-sack.c"
               line="430">%TRUE if the package was removed from the sack</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sack" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="424">a valid #PkPackageSack instance</doc>
            <type name="PackageSack" c:type="PkPackageSack*"/>
          </instance-parameter>
          <parameter name="package_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="425">a package_id descriptor</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="resolve"
              c:identifier="pk_package_sack_resolve"
              version="0.6.0"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-sack-sync.c"
             line="52">Gets the properties the daemon supports.
Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-sack-sync.h"
                         line="30"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-sack-sync.c"
               line="62">%TRUE if the properties were set correctly</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="package_sack" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack-sync.c"
                 line="54">a valid #PkPackageSack instance</doc>
            <type name="PackageSack" c:type="PkPackageSack*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack-sync.c"
                 line="55">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="resolve_async"
              c:identifier="pk_package_sack_resolve_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-sack.c"
             line="792">Merges in details about packages using resolve.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                         line="147"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sack" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="794">a valid #PkPackageSack instance</doc>
            <type name="PackageSack" c:type="PkPackageSack*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="795">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="796">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="797">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="798">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="799">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="sort" c:identifier="pk_package_sack_sort" version="0.6.1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-sack.c"
             line="622">Sorts the package sack</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                         line="111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sack" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="624">a valid #PkPackageSack instance</doc>
            <type name="PackageSack" c:type="PkPackageSack*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="625">the type of sorting, e.g. #PK_PACKAGE_SACK_SORT_TYPE_NAME</doc>
            <type name="PackageSackSortType" c:type="PkPackageSackSortType"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_file"
              c:identifier="pk_package_sack_to_file"
              version="0.8.6"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-sack.c"
             line="357">Write the contents of a #PkPackageSack to a package-list file.</doc>
        <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                         line="121"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-sack.c"
               line="365">%TRUE if there were no errors.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sack" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="359">a valid #PkPackageSack instance</doc>
            <type name="PackageSack" c:type="PkPackageSack*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-package-sack.c"
                 line="360">a valid package-list file</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="PackageSackPrivate" c:type="PkPackageSackPrivate*"/>
      </field>
    </class>
    <record name="PackageSackClass"
            c:type="PkPackageSackClass"
            glib:is-gtype-struct-for="PackageSack">
      <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                       line="71"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="changed">
        <callback name="changed">
          <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                           line="64"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="sack" transfer-ownership="none">
              <type name="PackageSack" c:type="PkPackageSack*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_pk_reserved1" introspectable="0">
        <callback name="_pk_reserved1">
          <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                           line="66"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved2" introspectable="0">
        <callback name="_pk_reserved2">
          <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                           line="67"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved3" introspectable="0">
        <callback name="_pk_reserved3">
          <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                           line="68"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved4" introspectable="0">
        <callback name="_pk_reserved4">
          <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                           line="69"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved5" introspectable="0">
        <callback name="_pk_reserved5">
          <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                           line="70"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <callback name="PackageSackFilterFunc" c:type="PkPackageSackFilterFunc">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-package-sack.h"
           line="94">Function to filter packages in #PkPackageSack.</doc>
      <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                       line="103"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-sack.h"
             line="101">%TRUE if @package should remain in the sack.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="package" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-sack.h"
               line="96">the package being considered</doc>
          <type name="Package" c:type="PkPackage*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-package-sack.h"
               line="97">User data supplied when the callback was registered</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="PackageSackPrivate"
            c:type="PkPackageSackPrivate"
            disguised="1"
            opaque="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-package-sack.c"
           line="47">Private #PkPackageSack data</doc>
      <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                       line="44"/>
    </record>
    <record name="PackageSackResults"
            c:type="PkPackageSackResults"
            disguised="1"
            opaque="1">
      <source-position filename="lib/packagekit-glib2/pk-package-sack.h"
                       line="47"/>
    </record>
    <enumeration name="PackageSackSortType"
                 glib:type-name="PkPackageSackSortType"
                 glib:get-type="pk_package_sack_sort_type_get_type"
                 c:type="PkPackageSackSortType">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-package-sack.h"
           line="73">Type of sort to perform.</doc>
      <member name="name"
              value="0"
              c:identifier="PK_PACKAGE_SACK_SORT_TYPE_NAME"
              glib:nick="name"
              glib:name="PK_PACKAGE_SACK_SORT_TYPE_NAME">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-sack.h"
             line="75">Sort by name</doc>
      </member>
      <member name="info"
              value="1"
              c:identifier="PK_PACKAGE_SACK_SORT_TYPE_INFO"
              glib:nick="info"
              glib:name="PK_PACKAGE_SACK_SORT_TYPE_INFO">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-sack.h"
             line="76">Sort by package info</doc>
      </member>
      <member name="package_id"
              value="2"
              c:identifier="PK_PACKAGE_SACK_SORT_TYPE_PACKAGE_ID"
              glib:nick="package-id"
              glib:name="PK_PACKAGE_SACK_SORT_TYPE_PACKAGE_ID">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-sack.h"
             line="77">Sort by package ID</doc>
      </member>
      <member name="summary"
              value="3"
              c:identifier="PK_PACKAGE_SACK_SORT_TYPE_SUMMARY"
              glib:nick="summary"
              glib:name="PK_PACKAGE_SACK_SORT_TYPE_SUMMARY">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-package-sack.h"
             line="78">Sort by summary</doc>
      </member>
      <member name="last"
              value="4"
              c:identifier="PK_PACKAGE_SACK_SORT_TYPE_LAST"
              glib:nick="last"
              glib:name="PK_PACKAGE_SACK_SORT_TYPE_LAST">
      </member>
    </enumeration>
    <class name="Progress"
           c:symbol-prefix="progress"
           c:type="PkProgress"
           parent="GObject.Object"
           glib:type-name="PkProgress"
           glib:get-type="pk_progress_get_type"
           glib:type-struct="ProgressClass">
      <source-position filename="lib/packagekit-glib2/pk-progress.h"
                       line="67"/>
      <constructor name="new" c:identifier="pk_progress_new" version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="1165">#PkProgress is a nice GObject wrapper for PackageKit and makes writing
frontends easy.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="1171">A new #PkProgress instance</doc>
          <type name="Progress" c:type="PkProgress*"/>
        </return-value>
      </constructor>
      <method name="get_allow_cancel"
              c:identifier="pk_progress_get_allow_cancel"
              glib:get-property="allow-cancel"
              version="1.0.12">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="457">Get if this transaction can be cancelled.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="146"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="463">%TRUE if progress can be cancelled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="459">a valid #PkProgress instance</doc>
            <type name="Progress" c:type="PkProgress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_caller_active"
              c:identifier="pk_progress_get_caller_active"
              glib:get-property="caller-active"
              version="1.0.12">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="501">Get if the transaction caller is connected.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="149"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="507">%TRUE if the transaction caller is still connected.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="503">a valid #PkProgress instance</doc>
            <type name="Progress" c:type="PkProgress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_download_size_remaining"
              c:identifier="pk_progress_get_download_size_remaining"
              glib:get-property="download-size-remaining"
              version="1.0.12">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="677">Get the number of bytes remaining to download.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="161"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="683">number of bytes remaining to download.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="679">a valid #PkProgress instance</doc>
            <type name="Progress" c:type="PkProgress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_elapsed_time"
              c:identifier="pk_progress_get_elapsed_time"
              glib:get-property="elapsed-time"
              version="1.0.12">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="545">Get the amount of time the transaction has taken.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="152"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="551">time in seconds</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="547">a valid #PkProgress instance</doc>
            <type name="Progress" c:type="PkProgress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_item_progress"
              c:identifier="pk_progress_get_item_progress"
              glib:get-property="item-progress"
              version="1.0.12">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="231">Get the item progress associated with this transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="131"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="237">a #PkItemProgress</doc>
          <type name="ItemProgress" c:type="PkItemProgress*"/>
        </return-value>
        <parameters>
          <instance-parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="233">a valid #PkProgress instance</doc>
            <type name="Progress" c:type="PkProgress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_package"
              c:identifier="pk_progress_get_package"
              glib:get-property="package"
              version="1.0.12">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="856">Get the package this transaction is acting on.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="173"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="862">a #PkPackage</doc>
          <type name="Package" c:type="PkPackage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="858">a valid #PkProgress instance</doc>
            <type name="Progress" c:type="PkProgress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_package_id"
              c:identifier="pk_progress_get_package_id"
              glib:get-property="package-id"
              version="1.0.12">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="185">Get the package ID this transaction is acting on.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="128"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="191">a PackageID</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="187">a valid #PkProgress instance</doc>
            <type name="Progress" c:type="PkProgress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_percentage"
              c:identifier="pk_progress_get_percentage"
              glib:get-property="percentage"
              version="1.0.12">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="320">Get the percentage complete.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="137"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="326">a percentage (0-100)</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="322">a valid #PkProgress instance</doc>
            <type name="Progress" c:type="PkProgress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_remaining_time"
              c:identifier="pk_progress_get_remaining_time"
              glib:get-property="remaining-time"
              version="1.0.12">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="589">Get the amount of time the transaction will take to complete.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="155"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="595">time in seconds or 0 if unknown.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="591">a valid #PkProgress instance</doc>
            <type name="Progress" c:type="PkProgress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_role"
              c:identifier="pk_progress_get_role"
              glib:get-property="role"
              version="1.0.12">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="413">Get the role of this transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="143"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="419">a #PkRoleEnum</doc>
          <type name="RoleEnum" c:type="PkRoleEnum"/>
        </return-value>
        <parameters>
          <instance-parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="415">a valid #PkProgress instance</doc>
            <type name="Progress" c:type="PkProgress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sender"
              c:identifier="pk_progress_get_sender"
              glib:get-property="sender"
              version="1.2.6">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="810">Get the D-Bus name of the client that started this transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="170"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="816">a D-Bus name</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="812">a valid #PkProgress instance</doc>
            <type name="Progress" c:type="PkProgress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_speed"
              c:identifier="pk_progress_get_speed"
              glib:get-property="speed"
              version="1.0.12">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="633">Get the speed of this transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="158"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="639">speed in bits per scond or 0 if unknown</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="635">a valid #PkProgress instance</doc>
            <type name="Progress" c:type="PkProgress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status"
              c:identifier="pk_progress_get_status"
              glib:get-property="status"
              version="1.0.12">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="364">Get the status of this transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="140"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="370">a status string</doc>
          <type name="StatusEnum" c:type="PkStatusEnum"/>
        </return-value>
        <parameters>
          <instance-parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="366">a valid #PkProgress instance</doc>
            <type name="Progress" c:type="PkProgress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transaction_flags"
              c:identifier="pk_progress_get_transaction_flags"
              glib:get-property="transaction-flags"
              version="1.0.12">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="721">Get the flags associated with this transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="164"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="727">a #PkBitfield containing #PkTransactionFlagEnum values.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="723">a valid #PkProgress instance</doc>
            <type name="Progress" c:type="PkProgress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transaction_id"
              c:identifier="pk_progress_get_transaction_id"
              glib:get-property="transaction-id"
              version="1.0.12">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="276">Get the ID used by this transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="134"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="282">a transaction ID.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="278">a valid #PkProgress instance</doc>
            <type name="Progress" c:type="PkProgress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uid"
              c:identifier="pk_progress_get_uid"
              glib:get-property="uid"
              version="1.0.12">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="765">Get the UID that started this transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="167"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="771">an UID</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="767">a valid #PkProgress instance</doc>
            <type name="Progress" c:type="PkProgress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_allow_cancel"
              c:identifier="pk_progress_set_allow_cancel"
              glib:set-property="allow-cancel"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="430">Set if this transaction can be cancelled.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="144"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="437">%TRUE if value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="432">a valid #PkProgress instance</doc>
            <type name="Progress" c:type="PkProgress*"/>
          </instance-parameter>
          <parameter name="allow_cancel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="433">%TRUE if this transaction can be cancelled.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_caller_active"
              c:identifier="pk_progress_set_caller_active"
              glib:set-property="caller-active"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="474">Set if the transaction caller is connected.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="147"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="481">%TRUE if value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="476">a valid #PkProgress instance</doc>
            <type name="Progress" c:type="PkProgress*"/>
          </instance-parameter>
          <parameter name="caller_active" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="477">%TRUE if the transaction caller is still connected.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_download_size_remaining"
              c:identifier="pk_progress_set_download_size_remaining"
              glib:set-property="download-size-remaining"
              version="0.8.0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="650">Set the number of bytes remaining to download.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="159"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="657">%TRUE if value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="652">a valid #PkProgress instance</doc>
            <type name="Progress" c:type="PkProgress*"/>
          </instance-parameter>
          <parameter name="download_size_remaining" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="653">number of bytes remaining to download.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_elapsed_time"
              c:identifier="pk_progress_set_elapsed_time"
              glib:set-property="elapsed-time"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="518">Set the amount of time the transaction has taken.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="150"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="525">%TRUE if value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="520">a valid #PkProgress instance</doc>
            <type name="Progress" c:type="PkProgress*"/>
          </instance-parameter>
          <parameter name="elapsed_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="521">time in seconds</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_item_progress"
              c:identifier="pk_progress_set_item_progress"
              glib:set-property="item-progress"
              version="0.8.1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="202">Set the item progress associated with this transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="129"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="209">%TRUE if value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="204">a valid #PkProgress instance</doc>
            <type name="Progress" c:type="PkProgress*"/>
          </instance-parameter>
          <parameter name="item_progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="205">a #PkItemProgress</doc>
            <type name="ItemProgress" c:type="PkItemProgress*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_package"
              c:identifier="pk_progress_set_package"
              glib:set-property="package"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="827">Set the package this transaction is acting on.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="171"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="834">%TRUE if value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="829">a valid #PkProgress instance</doc>
            <type name="Progress" c:type="PkProgress*"/>
          </instance-parameter>
          <parameter name="package" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="830">a #PkPackage</doc>
            <type name="Package" c:type="PkPackage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_package_id"
              c:identifier="pk_progress_set_package_id"
              glib:set-property="package-id"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="151">Set the package ID this transaction is acting on.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="126"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="158">%TRUE if value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="153">a valid #PkProgress instance</doc>
            <type name="Progress" c:type="PkProgress*"/>
          </instance-parameter>
          <parameter name="package_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="154">a PackageID</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_percentage"
              c:identifier="pk_progress_set_percentage"
              glib:set-property="percentage"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="293">Set the percentage complete of this transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="135"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="300">%TRUE if value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="295">a valid #PkProgress instance</doc>
            <type name="Progress" c:type="PkProgress*"/>
          </instance-parameter>
          <parameter name="percentage" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="296">a percentage value (0-100)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_remaining_time"
              c:identifier="pk_progress_set_remaining_time"
              glib:set-property="remaining-time"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="562">Set the amount of time the transaction will take to complete.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="153"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="569">%TRUE if value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="564">a valid #PkProgress instance</doc>
            <type name="Progress" c:type="PkProgress*"/>
          </instance-parameter>
          <parameter name="remaining_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="565">time in seconds or 0 if unknown.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_role"
              c:identifier="pk_progress_set_role"
              glib:set-property="role"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="381">Set the role of this transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="141"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="388">%TRUE if value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="383">a valid #PkProgress instance</doc>
            <type name="Progress" c:type="PkProgress*"/>
          </instance-parameter>
          <parameter name="role" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="384">a #PkRoleEnum</doc>
            <type name="RoleEnum" c:type="PkRoleEnum"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sender"
              c:identifier="pk_progress_set_sender"
              glib:set-property="sender"
              version="1.2.6">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="782">Set the D-Bus name of the client that started this transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="168"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="789">%TRUE if value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="784">a valid #PkProgress instance</doc>
            <type name="Progress" c:type="PkProgress*"/>
          </instance-parameter>
          <parameter name="bus_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="785">a D-Bus name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_speed"
              c:identifier="pk_progress_set_speed"
              glib:set-property="speed"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="606">Set the speed of this transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="156"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="613">%TRUE if value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="608">a valid #PkProgress instance</doc>
            <type name="Progress" c:type="PkProgress*"/>
          </instance-parameter>
          <parameter name="speed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="609">speed in bits per second or 0 if unknown</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_status"
              c:identifier="pk_progress_set_status"
              glib:set-property="status"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="337">Set the status of this transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="138"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="344">%TRUE if value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="339">a valid #PkProgress instance</doc>
            <type name="Progress" c:type="PkProgress*"/>
          </instance-parameter>
          <parameter name="status" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="340">a #PkStatusEnum</doc>
            <type name="StatusEnum" c:type="PkStatusEnum"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transaction_flags"
              c:identifier="pk_progress_set_transaction_flags"
              glib:set-property="transaction-flags"
              version="0.8.8">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="694">Set the flags associated with this transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="162"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="701">%TRUE if value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="696">a valid #PkProgress instance</doc>
            <type name="Progress" c:type="PkProgress*"/>
          </instance-parameter>
          <parameter name="transaction_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="697">a #PkBitfield containing #PkTransactionFlagEnum values.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transaction_id"
              c:identifier="pk_progress_set_transaction_id"
              glib:set-property="transaction-id"
              version="0.5.3">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="248">Set the ID used by this transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="132"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="257">%TRUE if value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="250">a valid #PkProgress instance</doc>
            <type name="Progress" c:type="PkProgress*"/>
          </instance-parameter>
          <parameter name="transaction_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="251">a transaction ID.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uid"
              c:identifier="pk_progress_set_uid"
              glib:set-property="uid"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="738">Set the UID that started this transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-progress.h"
                         line="165"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.c"
               line="745">%TRUE if value changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="740">a valid #PkProgress instance</doc>
            <type name="Progress" c:type="PkProgress*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-progress.c"
                 line="741">a UID</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="allow-cancel"
                version="0.5.2"
                writable="1"
                transfer-ownership="none"
                setter="set_allow_cancel"
                getter="get_allow_cancel"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="977">%TRUE if this transaction can be cancelled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="caller-active"
                version="0.5.2"
                writable="1"
                transfer-ownership="none"
                setter="set_caller_active"
                getter="get_caller_active"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="1013">%TRUE if the transaction caller is still connected.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="download-size-remaining"
                version="0.8.0"
                writable="1"
                transfer-ownership="none"
                setter="set_download_size_remaining"
                getter="get_download_size_remaining"
                default-value="0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="1061">Number of bytes remaining to download.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="elapsed-time"
                version="0.5.2"
                writable="1"
                transfer-ownership="none"
                setter="set_elapsed_time"
                getter="get_elapsed_time"
                default-value="0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="1025">Amount of time the transaction has taken in seconds.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="item-progress"
                version="0.8.1"
                writable="1"
                transfer-ownership="none"
                setter="set_item_progress"
                getter="get_item_progress">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="1121">Item progress associated with this transaction.</doc>
        <type name="ItemProgress"/>
      </property>
      <property name="package"
                version="0.5.3"
                writable="1"
                transfer-ownership="none"
                setter="set_package"
                getter="get_package">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="1109">The package this transaction is acting on.</doc>
        <type name="Package"/>
      </property>
      <property name="package-id"
                version="0.5.2"
                writable="1"
                transfer-ownership="none"
                setter="set_package_id"
                getter="get_package_id"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="939">Package ID this transaction is acting on.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="percentage"
                version="0.5.2"
                writable="1"
                transfer-ownership="none"
                setter="set_percentage"
                getter="get_percentage"
                default-value="-1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="965">Percentage complete of this transaction.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="remaining-time"
                version="0.5.2"
                writable="1"
                transfer-ownership="none"
                setter="set_remaining_time"
                getter="get_remaining_time"
                default-value="0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="1037">Amount of time the transaction will take to complete in seconds or 0 if unknown.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="role"
                version="0.5.2"
                writable="1"
                transfer-ownership="none"
                setter="set_role"
                getter="get_role"
                default-value="0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="1001">Role of this transaction.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="sender"
                version="1.2.6"
                writable="1"
                transfer-ownership="none"
                setter="set_sender"
                getter="get_sender"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="1097">The D-Bus name of the client that started this transaction.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="speed"
                version="0.5.2"
                writable="1"
                transfer-ownership="none"
                setter="set_speed"
                getter="get_speed"
                default-value="0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="1049">Transaction speed in bits per second or 0 if unknown.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="status"
                version="0.5.2"
                writable="1"
                transfer-ownership="none"
                setter="set_status"
                getter="get_status"
                default-value="0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="989">Status of this transaction.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="transaction-flags"
                version="0.8.8"
                writable="1"
                transfer-ownership="none"
                setter="set_transaction_flags"
                getter="get_transaction_flags"
                default-value="0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="1073">A #PkBitfield containing #PkTransactionFlagEnum associated with this transaction.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="transaction-id"
                version="0.5.2"
                writable="1"
                transfer-ownership="none"
                setter="set_transaction_id"
                getter="get_transaction_id"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="952">ID used by this transaction.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="uid"
                version="0.5.2"
                writable="1"
                transfer-ownership="none"
                setter="set_uid"
                getter="get_uid"
                default-value="0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.c"
             line="1085">The UID that started this transaction.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ProgressPrivate" c:type="PkProgressPrivate*"/>
      </field>
    </class>
    <callback name="ProgressCallback" c:type="PkProgressCallback">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-progress.h"
           line="114">Function that is called when progress updates are given.</doc>
      <source-position filename="lib/packagekit-glib2/pk-progress.h"
                       line="122"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="progress" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.h"
               line="116">a #PkProgress</doc>
          <type name="Progress" c:type="PkProgress*"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.h"
               line="117">the type of progress update this is</doc>
          <type name="ProgressType" c:type="PkProgressType"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-progress.h"
               line="118">User data supplied when the callback was registered.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="ProgressClass"
            c:type="PkProgressClass"
            glib:is-gtype-struct-for="Progress">
      <source-position filename="lib/packagekit-glib2/pk-progress.h"
                       line="67"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_pk_reserved1" introspectable="0">
        <callback name="_pk_reserved1">
          <source-position filename="lib/packagekit-glib2/pk-progress.h"
                           line="62"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved2" introspectable="0">
        <callback name="_pk_reserved2">
          <source-position filename="lib/packagekit-glib2/pk-progress.h"
                           line="63"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved3" introspectable="0">
        <callback name="_pk_reserved3">
          <source-position filename="lib/packagekit-glib2/pk-progress.h"
                           line="64"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved4" introspectable="0">
        <callback name="_pk_reserved4">
          <source-position filename="lib/packagekit-glib2/pk-progress.h"
                           line="65"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved5" introspectable="0">
        <callback name="_pk_reserved5">
          <source-position filename="lib/packagekit-glib2/pk-progress.h"
                           line="66"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ProgressPrivate"
            c:type="PkProgressPrivate"
            disguised="1"
            opaque="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-progress.c"
           line="40">Private #PkProgress data</doc>
      <source-position filename="lib/packagekit-glib2/pk-progress.h"
                       line="44"/>
    </record>
    <enumeration name="ProgressType"
                 glib:type-name="PkProgressType"
                 glib:get-type="pk_progress_type_get_type"
                 c:type="PkProgressType">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-progress.h"
           line="72">Flag to show which progress field has been updated.</doc>
      <member name="package_id"
              value="0"
              c:identifier="PK_PROGRESS_TYPE_PACKAGE_ID"
              glib:nick="package-id"
              glib:name="PK_PROGRESS_TYPE_PACKAGE_ID">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.h"
             line="74">package id updated</doc>
      </member>
      <member name="transaction_id"
              value="1"
              c:identifier="PK_PROGRESS_TYPE_TRANSACTION_ID"
              glib:nick="transaction-id"
              glib:name="PK_PROGRESS_TYPE_TRANSACTION_ID">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.h"
             line="75">transaction ID updated</doc>
      </member>
      <member name="percentage"
              value="2"
              c:identifier="PK_PROGRESS_TYPE_PERCENTAGE"
              glib:nick="percentage"
              glib:name="PK_PROGRESS_TYPE_PERCENTAGE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.h"
             line="76">percentage updated</doc>
      </member>
      <member name="allow_cancel"
              value="3"
              c:identifier="PK_PROGRESS_TYPE_ALLOW_CANCEL"
              glib:nick="allow-cancel"
              glib:name="PK_PROGRESS_TYPE_ALLOW_CANCEL">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.h"
             line="77">allow cancel updated</doc>
      </member>
      <member name="status"
              value="4"
              c:identifier="PK_PROGRESS_TYPE_STATUS"
              glib:nick="status"
              glib:name="PK_PROGRESS_TYPE_STATUS">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.h"
             line="78">status updated</doc>
      </member>
      <member name="role"
              value="5"
              c:identifier="PK_PROGRESS_TYPE_ROLE"
              glib:nick="role"
              glib:name="PK_PROGRESS_TYPE_ROLE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.h"
             line="79">role updated</doc>
      </member>
      <member name="caller_active"
              value="6"
              c:identifier="PK_PROGRESS_TYPE_CALLER_ACTIVE"
              glib:nick="caller-active"
              glib:name="PK_PROGRESS_TYPE_CALLER_ACTIVE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.h"
             line="80">called active updated</doc>
      </member>
      <member name="elapsed_time"
              value="7"
              c:identifier="PK_PROGRESS_TYPE_ELAPSED_TIME"
              glib:nick="elapsed-time"
              glib:name="PK_PROGRESS_TYPE_ELAPSED_TIME">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.h"
             line="81">elapsed time updated</doc>
      </member>
      <member name="remaining_time"
              value="8"
              c:identifier="PK_PROGRESS_TYPE_REMAINING_TIME"
              glib:nick="remaining-time"
              glib:name="PK_PROGRESS_TYPE_REMAINING_TIME">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.h"
             line="82">remaining time updated</doc>
      </member>
      <member name="speed"
              value="9"
              c:identifier="PK_PROGRESS_TYPE_SPEED"
              glib:nick="speed"
              glib:name="PK_PROGRESS_TYPE_SPEED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.h"
             line="83">speed updated</doc>
      </member>
      <member name="download_size_remaining"
              value="10"
              c:identifier="PK_PROGRESS_TYPE_DOWNLOAD_SIZE_REMAINING"
              glib:nick="download-size-remaining"
              glib:name="PK_PROGRESS_TYPE_DOWNLOAD_SIZE_REMAINING">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.h"
             line="84">download size remaining updated</doc>
      </member>
      <member name="uid"
              value="11"
              c:identifier="PK_PROGRESS_TYPE_UID"
              glib:nick="uid"
              glib:name="PK_PROGRESS_TYPE_UID">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.h"
             line="85">uid updated</doc>
      </member>
      <member name="package"
              value="12"
              c:identifier="PK_PROGRESS_TYPE_PACKAGE"
              glib:nick="package"
              glib:name="PK_PROGRESS_TYPE_PACKAGE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.h"
             line="86">package updated</doc>
      </member>
      <member name="item_progress"
              value="13"
              c:identifier="PK_PROGRESS_TYPE_ITEM_PROGRESS"
              glib:nick="item-progress"
              glib:name="PK_PROGRESS_TYPE_ITEM_PROGRESS">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.h"
             line="87">item progress updated</doc>
      </member>
      <member name="transaction_flags"
              value="14"
              c:identifier="PK_PROGRESS_TYPE_TRANSACTION_FLAGS"
              glib:nick="transaction-flags"
              glib:name="PK_PROGRESS_TYPE_TRANSACTION_FLAGS">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.h"
             line="88">transaction flags updated</doc>
      </member>
      <member name="invalid"
              value="15"
              c:identifier="PK_PROGRESS_TYPE_INVALID"
              glib:nick="invalid"
              glib:name="PK_PROGRESS_TYPE_INVALID">
      </member>
      <member name="sender"
              value="16"
              c:identifier="PK_PROGRESS_TYPE_SENDER"
              glib:nick="sender"
              glib:name="PK_PROGRESS_TYPE_SENDER">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-progress.h"
             line="89">D-Bus name of sender updated (Since: 1.2.6)</doc>
      </member>
    </enumeration>
    <function-macro name="REPO_DETAIL"
                    c:identifier="PK_REPO_DETAIL"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-repo-detail.h"
                       line="36"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REPO_DETAIL_CLASS"
                    c:identifier="PK_REPO_DETAIL_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-repo-detail.h"
                       line="37"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REPO_DETAIL_GET_CLASS"
                    c:identifier="PK_REPO_DETAIL_GET_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-repo-detail.h"
                       line="40"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REPO_SIGNATURE_REQUIRED"
                    c:identifier="PK_REPO_SIGNATURE_REQUIRED"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-repo-signature-required.h"
                       line="36"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REPO_SIGNATURE_REQUIRED_CLASS"
                    c:identifier="PK_REPO_SIGNATURE_REQUIRED_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-repo-signature-required.h"
                       line="37"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REPO_SIGNATURE_REQUIRED_GET_CLASS"
                    c:identifier="PK_REPO_SIGNATURE_REQUIRED_GET_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-repo-signature-required.h"
                       line="40"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REQUIRE_RESTART"
                    c:identifier="PK_REQUIRE_RESTART"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-require-restart.h"
                       line="36"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REQUIRE_RESTART_CLASS"
                    c:identifier="PK_REQUIRE_RESTART_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-require-restart.h"
                       line="37"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REQUIRE_RESTART_GET_CLASS"
                    c:identifier="PK_REQUIRE_RESTART_GET_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-require-restart.h"
                       line="40"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="RESULTS"
                    c:identifier="PK_RESULTS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-results.h" line="49"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="RESULTS_CLASS"
                    c:identifier="PK_RESULTS_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-results.h" line="50"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="RESULTS_GET_CLASS"
                    c:identifier="PK_RESULTS_GET_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-results.h" line="53"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <class name="RepoDetail"
           c:symbol-prefix="repo_detail"
           c:type="PkRepoDetail"
           parent="Source"
           glib:type-name="PkRepoDetail"
           glib:get-type="pk_repo_detail_get_type"
           glib:type-struct="RepoDetailClass">
      <source-position filename="lib/packagekit-glib2/pk-repo-detail.h"
                       line="65"/>
      <constructor name="new"
                   c:identifier="pk_repo_detail_new"
                   version="0.5.4">
        <source-position filename="lib/packagekit-glib2/pk-repo-detail.h"
                         line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-repo-detail.c"
               line="238">a new #PkRepoDetail object.</doc>
          <type name="RepoDetail" c:type="PkRepoDetail*"/>
        </return-value>
      </constructor>
      <method name="get_description"
              c:identifier="pk_repo_detail_get_description"
              glib:get-property="description"
              version="0.9.1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-repo-detail.c"
             line="80">Gets the repository description.</doc>
        <source-position filename="lib/packagekit-glib2/pk-repo-detail.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-repo-detail.c"
               line="86">string ID, e.g. "Fedora 20 - i386"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="repo_detail" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-repo-detail.c"
                 line="82">a valid #PkRepoDetail instance</doc>
            <type name="RepoDetail" c:type="PkRepoDetail*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enabled"
              c:identifier="pk_repo_detail_get_enabled"
              glib:get-property="enabled"
              version="0.9.1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-repo-detail.c"
             line="97">Gets the repository enabled status.</doc>
        <source-position filename="lib/packagekit-glib2/pk-repo-detail.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-repo-detail.c"
               line="103">%TRUE for enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="repo_detail" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-repo-detail.c"
                 line="99">a valid #PkRepoDetail instance</doc>
            <type name="RepoDetail" c:type="PkRepoDetail*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="pk_repo_detail_get_id"
              version="0.9.1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-repo-detail.c"
             line="63">Gets the repository ID.</doc>
        <source-position filename="lib/packagekit-glib2/pk-repo-detail.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-repo-detail.c"
               line="69">string ID, e.g. "fedora"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="repo_detail" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-repo-detail.c"
                 line="65">a valid #PkRepoDetail instance</doc>
            <type name="RepoDetail" c:type="PkRepoDetail*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="description"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                getter="get_description"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="enabled"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                getter="get_enabled"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="repo-id"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Source" c:type="PkSource"/>
      </field>
      <field name="priv">
        <type name="RepoDetailPrivate" c:type="PkRepoDetailPrivate*"/>
      </field>
    </class>
    <record name="RepoDetailClass"
            c:type="PkRepoDetailClass"
            glib:is-gtype-struct-for="RepoDetail">
      <source-position filename="lib/packagekit-glib2/pk-repo-detail.h"
                       line="65"/>
      <field name="parent_class">
        <type name="SourceClass" c:type="PkSourceClass"/>
      </field>
      <field name="_pk_reserved1" introspectable="0">
        <callback name="_pk_reserved1">
          <source-position filename="lib/packagekit-glib2/pk-repo-detail.h"
                           line="60"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved2" introspectable="0">
        <callback name="_pk_reserved2">
          <source-position filename="lib/packagekit-glib2/pk-repo-detail.h"
                           line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved3" introspectable="0">
        <callback name="_pk_reserved3">
          <source-position filename="lib/packagekit-glib2/pk-repo-detail.h"
                           line="62"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved4" introspectable="0">
        <callback name="_pk_reserved4">
          <source-position filename="lib/packagekit-glib2/pk-repo-detail.h"
                           line="63"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved5" introspectable="0">
        <callback name="_pk_reserved5">
          <source-position filename="lib/packagekit-glib2/pk-repo-detail.h"
                           line="64"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="RepoDetailPrivate"
            c:type="PkRepoDetailPrivate"
            disguised="1"
            opaque="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-repo-detail.c"
           line="41">Private #PkRepoDetail data</doc>
      <source-position filename="lib/packagekit-glib2/pk-repo-detail.h"
                       line="42"/>
    </record>
    <class name="RepoSignatureRequired"
           c:symbol-prefix="repo_signature_required"
           c:type="PkRepoSignatureRequired"
           parent="Source"
           glib:type-name="PkRepoSignatureRequired"
           glib:get-type="pk_repo_signature_required_get_type"
           glib:type-struct="RepoSignatureRequiredClass">
      <source-position filename="lib/packagekit-glib2/pk-repo-signature-required.h"
                       line="65"/>
      <constructor name="new"
                   c:identifier="pk_repo_signature_required_new"
                   version="0.5.4">
        <source-position filename="lib/packagekit-glib2/pk-repo-signature-required.h"
                         line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-repo-signature-required.c"
               line="289">a new #PkRepoSignatureRequired object.</doc>
          <type name="RepoSignatureRequired"
                c:type="PkRepoSignatureRequired*"/>
        </return-value>
      </constructor>
      <property name="key-fingerprint"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="key-id"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="key-timestamp"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="key-url"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="key-userid"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="package-id"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="repository-name"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="type"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                default-value="PK_SIGTYPE_ENUM_UNKNOWN">
        <type name="SigTypeEnum"/>
      </property>
      <field name="parent">
        <type name="Source" c:type="PkSource"/>
      </field>
      <field name="priv">
        <type name="RepoSignatureRequiredPrivate"
              c:type="PkRepoSignatureRequiredPrivate*"/>
      </field>
    </class>
    <record name="RepoSignatureRequiredClass"
            c:type="PkRepoSignatureRequiredClass"
            glib:is-gtype-struct-for="RepoSignatureRequired">
      <source-position filename="lib/packagekit-glib2/pk-repo-signature-required.h"
                       line="65"/>
      <field name="parent_class">
        <type name="SourceClass" c:type="PkSourceClass"/>
      </field>
      <field name="_pk_reserved1" introspectable="0">
        <callback name="_pk_reserved1">
          <source-position filename="lib/packagekit-glib2/pk-repo-signature-required.h"
                           line="60"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved2" introspectable="0">
        <callback name="_pk_reserved2">
          <source-position filename="lib/packagekit-glib2/pk-repo-signature-required.h"
                           line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved3" introspectable="0">
        <callback name="_pk_reserved3">
          <source-position filename="lib/packagekit-glib2/pk-repo-signature-required.h"
                           line="62"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved4" introspectable="0">
        <callback name="_pk_reserved4">
          <source-position filename="lib/packagekit-glib2/pk-repo-signature-required.h"
                           line="63"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved5" introspectable="0">
        <callback name="_pk_reserved5">
          <source-position filename="lib/packagekit-glib2/pk-repo-signature-required.h"
                           line="64"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="RepoSignatureRequiredPrivate"
            c:type="PkRepoSignatureRequiredPrivate"
            disguised="1"
            opaque="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-repo-signature-required.c"
           line="43">Private #PkRepoSignatureRequired data</doc>
      <source-position filename="lib/packagekit-glib2/pk-repo-signature-required.h"
                       line="42"/>
    </record>
    <class name="RequireRestart"
           c:symbol-prefix="require_restart"
           c:type="PkRequireRestart"
           parent="Source"
           glib:type-name="PkRequireRestart"
           glib:get-type="pk_require_restart_get_type"
           glib:type-struct="RequireRestartClass">
      <source-position filename="lib/packagekit-glib2/pk-require-restart.h"
                       line="65"/>
      <constructor name="new"
                   c:identifier="pk_require_restart_new"
                   version="0.5.4">
        <source-position filename="lib/packagekit-glib2/pk-require-restart.h"
                         line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-require-restart.c"
               line="169">a new #PkRequireRestart object.</doc>
          <type name="RequireRestart" c:type="PkRequireRestart*"/>
        </return-value>
      </constructor>
      <property name="package-id"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="restart"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                default-value="PK_RESTART_ENUM_UNKNOWN">
        <type name="RestartEnum"/>
      </property>
      <field name="parent">
        <type name="Source" c:type="PkSource"/>
      </field>
      <field name="priv">
        <type name="RequireRestartPrivate" c:type="PkRequireRestartPrivate*"/>
      </field>
    </class>
    <record name="RequireRestartClass"
            c:type="PkRequireRestartClass"
            glib:is-gtype-struct-for="RequireRestart">
      <source-position filename="lib/packagekit-glib2/pk-require-restart.h"
                       line="65"/>
      <field name="parent_class">
        <type name="SourceClass" c:type="PkSourceClass"/>
      </field>
      <field name="_pk_reserved1" introspectable="0">
        <callback name="_pk_reserved1">
          <source-position filename="lib/packagekit-glib2/pk-require-restart.h"
                           line="60"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved2" introspectable="0">
        <callback name="_pk_reserved2">
          <source-position filename="lib/packagekit-glib2/pk-require-restart.h"
                           line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved3" introspectable="0">
        <callback name="_pk_reserved3">
          <source-position filename="lib/packagekit-glib2/pk-require-restart.h"
                           line="62"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved4" introspectable="0">
        <callback name="_pk_reserved4">
          <source-position filename="lib/packagekit-glib2/pk-require-restart.h"
                           line="63"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved5" introspectable="0">
        <callback name="_pk_reserved5">
          <source-position filename="lib/packagekit-glib2/pk-require-restart.h"
                           line="64"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="RequireRestartPrivate"
            c:type="PkRequireRestartPrivate"
            disguised="1"
            opaque="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-require-restart.c"
           line="43">Private #PkRequireRestart data</doc>
      <source-position filename="lib/packagekit-glib2/pk-require-restart.h"
                       line="42"/>
    </record>
    <enumeration name="RestartEnum"
                 glib:type-name="PkRestartEnum"
                 glib:get-type="pk_restart_enum_get_type"
                 c:type="PkRestartEnum">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.h"
           line="347">What restart we need to after a transaction, ordered by severity</doc>
      <member name="unknown"
              value="0"
              c:identifier="PK_RESTART_ENUM_UNKNOWN"
              glib:nick="unknown"
              glib:name="PK_RESTART_ENUM_UNKNOWN">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="349">Unknown restart state</doc>
      </member>
      <member name="none"
              value="1"
              c:identifier="PK_RESTART_ENUM_NONE"
              glib:nick="none"
              glib:name="PK_RESTART_ENUM_NONE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="350">No restart required</doc>
      </member>
      <member name="application"
              value="2"
              c:identifier="PK_RESTART_ENUM_APPLICATION"
              glib:nick="application"
              glib:name="PK_RESTART_ENUM_APPLICATION">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="351">Need to restart the application</doc>
      </member>
      <member name="session"
              value="3"
              c:identifier="PK_RESTART_ENUM_SESSION"
              glib:nick="session"
              glib:name="PK_RESTART_ENUM_SESSION">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="352">Need to restart the session</doc>
      </member>
      <member name="system"
              value="4"
              c:identifier="PK_RESTART_ENUM_SYSTEM"
              glib:nick="system"
              glib:name="PK_RESTART_ENUM_SYSTEM">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="353">Need to restart the system</doc>
      </member>
      <member name="security_session"
              value="5"
              c:identifier="PK_RESTART_ENUM_SECURITY_SESSION"
              glib:nick="security-session"
              glib:name="PK_RESTART_ENUM_SECURITY_SESSION">
      </member>
      <member name="security_system"
              value="6"
              c:identifier="PK_RESTART_ENUM_SECURITY_SYSTEM"
              glib:nick="security-system"
              glib:name="PK_RESTART_ENUM_SECURITY_SYSTEM">
      </member>
      <member name="last"
              value="7"
              c:identifier="PK_RESTART_ENUM_LAST"
              glib:nick="last"
              glib:name="PK_RESTART_ENUM_LAST">
      </member>
      <function name="from_string"
                c:identifier="pk_restart_enum_from_string"
                version="0.5.0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="698">Converts a text enumerated type to its unsigned integer representation</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="824"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="704">the enumerated constant value, e.g. PK_SIGTYPE_ENUM_GPG</doc>
          <type name="RestartEnum" c:type="PkRestartEnum"/>
        </return-value>
        <parameters>
          <parameter name="restart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="700">Text describing the enumerated type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_string"
                c:identifier="pk_restart_enum_to_string"
                version="0.5.0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="714">Converts a enumerated type to its text representation</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="825"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="720">the enumerated constant value, e.g. "available"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="restart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="716">The enumerated type value</doc>
            <type name="RestartEnum" c:type="PkRestartEnum"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <class name="Results"
           c:symbol-prefix="results"
           c:type="PkResults"
           parent="GObject.Object"
           glib:type-name="PkResults"
           glib:get-type="pk_results_get_type"
           glib:type-struct="ResultsClass">
      <source-position filename="lib/packagekit-glib2/pk-results.h" line="79"/>
      <constructor name="new" c:identifier="pk_results_new" version="0.5.2">
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="82"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="946">a new #PkResults object.</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
      </constructor>
      <method name="add_category"
              c:identifier="pk_results_add_category"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="256">Adds a category item to the results set.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="263">%TRUE if the value was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="258">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="259">the object to add to the array</doc>
            <type name="Category" c:type="PkCategory*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_details"
              c:identifier="pk_results_add_details"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="210">Adds some package details to the results set.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="217">%TRUE if the value was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="212">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="213">the object to add to the array</doc>
            <type name="Details" c:type="PkDetails*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_distro_upgrade"
              c:identifier="pk_results_add_distro_upgrade"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="279">Adds a distribution upgrade item to the results set.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="286">%TRUE if the value was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="281">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="282">the object to add to the array</doc>
            <type name="DistroUpgrade" c:type="PkDistroUpgrade*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_eula_required"
              c:identifier="pk_results_add_eula_required"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="394">Adds some EULA details to the results set.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="111"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="401">%TRUE if the value was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="396">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="397">the object to add to the array</doc>
            <type name="EulaRequired" c:type="PkEulaRequired*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_files"
              c:identifier="pk_results_add_files"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="348">Adds some files details to the results set.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="107"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="355">%TRUE if the value was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="350">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="351">the object to add to the array</doc>
            <type name="Files" c:type="PkFiles*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_media_change_required"
              c:identifier="pk_results_add_media_change_required"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="417">Adds some media change details to the results set.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="113"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="424">%TRUE if the value was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="419">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="420">the object to add to the array</doc>
            <type name="MediaChangeRequired" c:type="PkMediaChangeRequired*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_package"
              c:identifier="pk_results_add_package"
              version="0.5.3">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="184">Adds a package to the results set.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="191">%TRUE if the value was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="186">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="187">the object to add to the array</doc>
            <type name="Package" c:type="PkPackage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_repo_detail"
              c:identifier="pk_results_add_repo_detail"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="440">Adds some repository details to the results set.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="115"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="447">%TRUE if the value was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="442">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="443">the object to add to the array</doc>
            <type name="RepoDetail" c:type="PkRepoDetail*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_repo_signature_required"
              c:identifier="pk_results_add_repo_signature_required"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="371">Adds some repository signature details to the results set.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="378">%TRUE if the value was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="373">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="374">the object to add to the array</doc>
            <type name="RepoSignatureRequired"
                  c:type="PkRepoSignatureRequired*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_require_restart"
              c:identifier="pk_results_add_require_restart"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="302">Adds a require restart item to the results set.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="309">%TRUE if the value was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="304">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="305">the object to add to the array</doc>
            <type name="RequireRestart" c:type="PkRequireRestart*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_transaction"
              c:identifier="pk_results_add_transaction"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="325">Adds a transaction item to the results set.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="332">%TRUE if the value was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="327">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="328">the object to add to the array</doc>
            <type name="TransactionPast" c:type="PkTransactionPast*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_update_detail"
              c:identifier="pk_results_add_update_detail"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="233">Adds some update details to the results set.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="240">%TRUE if the value was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="235">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="236">the object to add to the array</doc>
            <type name="UpdateDetail" c:type="PkUpdateDetail*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_category_array"
              c:identifier="pk_results_get_category_array"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="635">Gets the categories from the transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="130"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="641">A #GPtrArray array of #PkCategory's, free with g_ptr_array_unref().</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Category"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="637">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_details_array"
              c:identifier="pk_results_get_details_array"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="601">Gets the package details from the transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="128"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="607">A #GPtrArray array of #PkDetails's, free with g_ptr_array_unref().</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Details"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="603">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_distro_upgrade_array"
              c:identifier="pk_results_get_distro_upgrade_array"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="652">Gets the distribution upgrades from the transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="131"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="658">A #GPtrArray array of #PkDistroUpgrade's, free with g_ptr_array_unref().</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="DistroUpgrade"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="654">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_error_code"
              c:identifier="pk_results_get_error_code"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="540">Gets the last error code from the transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="121"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="546">A #PkError, or %NULL, free with g_object_unref()</doc>
          <type name="Error" c:type="PkError*"/>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="542">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_eula_required_array"
              c:identifier="pk_results_get_eula_required_array"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="777">Gets the eulas required from the transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="136"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="783">A #GPtrArray array of #PkEulaRequired's, free with g_ptr_array_unref().</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="EulaRequired"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="779">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_exit_code"
              c:identifier="pk_results_get_exit_code"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="488">Gets the exit enum. You probably don't want to be using this function, and
instead using the much more useful pk_results_get_error_code() function.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="119"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="495">The #PkExitEnum or %PK_EXIT_ENUM_UNKNOWN for error or if it was not set</doc>
          <type name="ExitEnum" c:type="PkExitEnum"/>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="490">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_files_array"
              c:identifier="pk_results_get_files_array"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="743">Gets the files from the transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="134"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="749">A #GPtrArray array of #PkFiles's, free with g_ptr_array_unref().</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Files"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="745">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_change_required_array"
              c:identifier="pk_results_get_media_change_required_array"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="794">Gets the media changes required from the transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="137"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="800">A #GPtrArray array of #PkMediaChangeRequired's, free with g_ptr_array_unref().</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="MediaChangeRequired"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="796">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_package_array"
              c:identifier="pk_results_get_package_array"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="567">Gets the packages from the transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="127"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="573">A #GPtrArray array of #PkPackage's, free with g_ptr_array_unref().</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Package"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="569">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_package_sack"
              c:identifier="pk_results_get_package_sack"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="584">Gets a package sack from the transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="120"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="590">A #PkPackageSack of data, g_object_unref() to free.</doc>
          <type name="PackageSack" c:type="PkPackageSack*"/>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="586">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_repo_detail_array"
              c:identifier="pk_results_get_repo_detail_array"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="811">Gets the repository details from the transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="138"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="817">A #GPtrArray array of #PkRepoDetail's, free with g_ptr_array_unref().</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="RepoDetail"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="813">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_repo_signature_required_array"
              c:identifier="pk_results_get_repo_signature_required_array"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="760">Gets the repository signatures required from the transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="135"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="766">A #GPtrArray array of #PkRepoSignatureRequired's, free with g_ptr_array_unref().</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="RepoSignatureRequired"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="762">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_require_restart_array"
              c:identifier="pk_results_get_require_restart_array"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="669">Gets the require restarts from the transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="132"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="675">A #GPtrArray array of #PkRequireRestart's, free with g_ptr_array_unref().</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="RequireRestart"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="671">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_require_restart_worst"
              c:identifier="pk_results_get_require_restart_worst"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="686">This method returns the 'worst' restart of all the transactions.
It is needed as multiple sub-transactions may emit require-restart with
different values, and we always want to get the most invasive of all.

For instance, if a transaction emits RequireRestart(system) and then
RequireRestart(session) then pk_client_get_require_restart will return
system as a session restart is implied with a system restart.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="124"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="698">a #PkRestartEnum value, e.g. PK_RESTART_ENUM_SYSTEM</doc>
          <type name="RestartEnum" c:type="PkRestartEnum"/>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="688">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_role"
              c:identifier="pk_results_get_role"
              glib:get-property="role"
              version="0.7.5">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="506">Gets the role that produced these results.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="122"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="512">The #PkRoleEnum or %PK_ROLE_ENUM_UNKNOWN if not set</doc>
          <type name="RoleEnum" c:type="PkRoleEnum"/>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="508">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transaction_array"
              c:identifier="pk_results_get_transaction_array"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="726">Gets the transactions from the transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="133"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="732">A #GPtrArray array of #PkTransactionPast's, free with g_ptr_array_unref().</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="TransactionPast"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="728">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transaction_flags"
              c:identifier="pk_results_get_transaction_flags"
              glib:get-property="transaction-flags"
              version="0.8.1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="523">Gets the transaction flag for these results.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="123"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="529">a #PkBitfield containing #PkTransactionFlagEnum 0 if not set</doc>
          <type name="Bitfield" c:type="PkBitfield"/>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="525">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_update_detail_array"
              c:identifier="pk_results_get_update_detail_array"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="618">Gets the update details from the transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="129"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="624">A #GPtrArray array of #PkUpdateDetail's, free with g_ptr_array_unref().</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="UpdateDetail"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="620">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_error_code"
              c:identifier="pk_results_set_error_code"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="463">Adds some error details to the results set.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="470">%TRUE if the value was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="465">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="466">the object to add to the array</doc>
            <type name="Error" c:type="PkError*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_exit_code"
              c:identifier="pk_results_set_exit_code"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="162">Sets the results object to have the given exit code.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="169">%TRUE if the value was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="164">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
          <parameter name="exit_enum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="165">the exit code</doc>
            <type name="ExitEnum" c:type="PkExitEnum"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_role"
              c:identifier="pk_results_set_role"
              glib:set-property="role"
              version="1.1.8">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="140">Sets the results object to have the given role enum.</doc>
        <source-position filename="lib/packagekit-glib2/pk-results.h"
                         line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-results.c"
               line="147">%TRUE if the value was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="142">a valid #PkResults instance</doc>
            <type name="Results" c:type="PkResults*"/>
          </instance-parameter>
          <parameter name="role" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-results.c"
                 line="143">the role enum</doc>
            <type name="RoleEnum" c:type="PkRoleEnum"/>
          </parameter>
        </parameters>
      </method>
      <property name="inputs"
                version="0.5.3"
                writable="1"
                transfer-ownership="none"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="progress"
                version="0.5.3"
                writable="1"
                transfer-ownership="none">
        <type name="Progress"/>
      </property>
      <property name="role"
                version="0.5.2"
                writable="1"
                transfer-ownership="none"
                setter="set_role"
                getter="get_role"
                default-value="PK_ROLE_ENUM_UNKNOWN">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="840">The #PkRoleEnum or %PK_ROLE_ENUM_UNKNOWN if not set</doc>
        <type name="RoleEnum"/>
      </property>
      <property name="transaction-flags"
                version="0.8.1"
                writable="1"
                transfer-ownership="none"
                getter="get_transaction_flags"
                default-value="0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-results.c"
             line="852">A #PkBitfield containing #PkTransactionFlagEnum for this result.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ResultsPrivate" c:type="PkResultsPrivate*"/>
      </field>
    </class>
    <record name="ResultsClass"
            c:type="PkResultsClass"
            glib:is-gtype-struct-for="Results">
      <source-position filename="lib/packagekit-glib2/pk-results.h" line="79"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_pk_reserved1" introspectable="0">
        <callback name="_pk_reserved1">
          <source-position filename="lib/packagekit-glib2/pk-results.h"
                           line="74"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved2" introspectable="0">
        <callback name="_pk_reserved2">
          <source-position filename="lib/packagekit-glib2/pk-results.h"
                           line="75"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved3" introspectable="0">
        <callback name="_pk_reserved3">
          <source-position filename="lib/packagekit-glib2/pk-results.h"
                           line="76"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved4" introspectable="0">
        <callback name="_pk_reserved4">
          <source-position filename="lib/packagekit-glib2/pk-results.h"
                           line="77"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved5" introspectable="0">
        <callback name="_pk_reserved5">
          <source-position filename="lib/packagekit-glib2/pk-results.h"
                           line="78"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ResultsPrivate"
            c:type="PkResultsPrivate"
            disguised="1"
            opaque="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-results.c"
           line="44">Private #PkResults data</doc>
      <source-position filename="lib/packagekit-glib2/pk-results.h" line="56"/>
    </record>
    <enumeration name="RoleEnum"
                 glib:type-name="PkRoleEnum"
                 glib:get-type="pk_role_enum_get_type"
                 c:type="PkRoleEnum">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.h"
           line="45">What we were asked to do, this never changes for the lifetime of the
transaction.
Icons that have to represent the whole "aim" of the transaction will use
these constants</doc>
      <member name="unknown"
              value="0"
              c:identifier="PK_ROLE_ENUM_UNKNOWN"
              glib:nick="unknown"
              glib:name="PK_ROLE_ENUM_UNKNOWN">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="47">Unknow request</doc>
      </member>
      <member name="cancel"
              value="1"
              c:identifier="PK_ROLE_ENUM_CANCEL"
              glib:nick="cancel"
              glib:name="PK_ROLE_ENUM_CANCEL">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="48">Cancel transaction</doc>
      </member>
      <member name="depends_on"
              value="2"
              c:identifier="PK_ROLE_ENUM_DEPENDS_ON"
              glib:nick="depends-on"
              glib:name="PK_ROLE_ENUM_DEPENDS_ON">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="49">Get package dependencies</doc>
      </member>
      <member name="get_details"
              value="3"
              c:identifier="PK_ROLE_ENUM_GET_DETAILS"
              glib:nick="get-details"
              glib:name="PK_ROLE_ENUM_GET_DETAILS">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="50">Get package details</doc>
      </member>
      <member name="get_files"
              value="4"
              c:identifier="PK_ROLE_ENUM_GET_FILES"
              glib:nick="get-files"
              glib:name="PK_ROLE_ENUM_GET_FILES">
      </member>
      <member name="get_packages"
              value="5"
              c:identifier="PK_ROLE_ENUM_GET_PACKAGES"
              glib:nick="get-packages"
              glib:name="PK_ROLE_ENUM_GET_PACKAGES">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="52">Get available packages</doc>
      </member>
      <member name="get_repo_list"
              value="6"
              c:identifier="PK_ROLE_ENUM_GET_REPO_LIST"
              glib:nick="get-repo-list"
              glib:name="PK_ROLE_ENUM_GET_REPO_LIST">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="53">Get repository list</doc>
      </member>
      <member name="required_by"
              value="7"
              c:identifier="PK_ROLE_ENUM_REQUIRED_BY"
              glib:nick="required-by"
              glib:name="PK_ROLE_ENUM_REQUIRED_BY">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="54">Get packages required by given package</doc>
      </member>
      <member name="get_update_detail"
              value="8"
              c:identifier="PK_ROLE_ENUM_GET_UPDATE_DETAIL"
              glib:nick="get-update-detail"
              glib:name="PK_ROLE_ENUM_GET_UPDATE_DETAIL">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="55">Get update details</doc>
      </member>
      <member name="get_updates"
              value="9"
              c:identifier="PK_ROLE_ENUM_GET_UPDATES"
              glib:nick="get-updates"
              glib:name="PK_ROLE_ENUM_GET_UPDATES">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="56">Get available updates</doc>
      </member>
      <member name="install_files"
              value="10"
              c:identifier="PK_ROLE_ENUM_INSTALL_FILES"
              glib:nick="install-files"
              glib:name="PK_ROLE_ENUM_INSTALL_FILES">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="57">Install package files</doc>
      </member>
      <member name="install_packages"
              value="11"
              c:identifier="PK_ROLE_ENUM_INSTALL_PACKAGES"
              glib:nick="install-packages"
              glib:name="PK_ROLE_ENUM_INSTALL_PACKAGES">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="58">Install packages</doc>
      </member>
      <member name="install_signature"
              value="12"
              c:identifier="PK_ROLE_ENUM_INSTALL_SIGNATURE"
              glib:nick="install-signature"
              glib:name="PK_ROLE_ENUM_INSTALL_SIGNATURE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="59">Install signature</doc>
      </member>
      <member name="refresh_cache"
              value="13"
              c:identifier="PK_ROLE_ENUM_REFRESH_CACHE"
              glib:nick="refresh-cache"
              glib:name="PK_ROLE_ENUM_REFRESH_CACHE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="60">Refresh cache</doc>
      </member>
      <member name="remove_packages"
              value="14"
              c:identifier="PK_ROLE_ENUM_REMOVE_PACKAGES"
              glib:nick="remove-packages"
              glib:name="PK_ROLE_ENUM_REMOVE_PACKAGES">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="61">Remove packages</doc>
      </member>
      <member name="repo_enable"
              value="15"
              c:identifier="PK_ROLE_ENUM_REPO_ENABLE"
              glib:nick="repo-enable"
              glib:name="PK_ROLE_ENUM_REPO_ENABLE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="62">Enable repository</doc>
      </member>
      <member name="repo_set_data"
              value="16"
              c:identifier="PK_ROLE_ENUM_REPO_SET_DATA"
              glib:nick="repo-set-data"
              glib:name="PK_ROLE_ENUM_REPO_SET_DATA">
      </member>
      <member name="resolve"
              value="17"
              c:identifier="PK_ROLE_ENUM_RESOLVE"
              glib:nick="resolve"
              glib:name="PK_ROLE_ENUM_RESOLVE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="64">Resolve depdencies</doc>
      </member>
      <member name="search_details"
              value="18"
              c:identifier="PK_ROLE_ENUM_SEARCH_DETAILS"
              glib:nick="search-details"
              glib:name="PK_ROLE_ENUM_SEARCH_DETAILS">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="65">Search for details</doc>
      </member>
      <member name="search_file"
              value="19"
              c:identifier="PK_ROLE_ENUM_SEARCH_FILE"
              glib:nick="search-file"
              glib:name="PK_ROLE_ENUM_SEARCH_FILE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="66">Search for file</doc>
      </member>
      <member name="search_group"
              value="20"
              c:identifier="PK_ROLE_ENUM_SEARCH_GROUP"
              glib:nick="search-group"
              glib:name="PK_ROLE_ENUM_SEARCH_GROUP">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="67">Search for group</doc>
      </member>
      <member name="search_name"
              value="21"
              c:identifier="PK_ROLE_ENUM_SEARCH_NAME"
              glib:nick="search-name"
              glib:name="PK_ROLE_ENUM_SEARCH_NAME">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="68">Search for package name</doc>
      </member>
      <member name="update_packages"
              value="22"
              c:identifier="PK_ROLE_ENUM_UPDATE_PACKAGES"
              glib:nick="update-packages"
              glib:name="PK_ROLE_ENUM_UPDATE_PACKAGES">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="69">Update packages</doc>
      </member>
      <member name="what_provides"
              value="23"
              c:identifier="PK_ROLE_ENUM_WHAT_PROVIDES"
              glib:nick="what-provides"
              glib:name="PK_ROLE_ENUM_WHAT_PROVIDES">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="70">Get what a package provides</doc>
      </member>
      <member name="accept_eula"
              value="24"
              c:identifier="PK_ROLE_ENUM_ACCEPT_EULA"
              glib:nick="accept-eula"
              glib:name="PK_ROLE_ENUM_ACCEPT_EULA">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="71">Accept an EULA</doc>
      </member>
      <member name="download_packages"
              value="25"
              c:identifier="PK_ROLE_ENUM_DOWNLOAD_PACKAGES"
              glib:nick="download-packages"
              glib:name="PK_ROLE_ENUM_DOWNLOAD_PACKAGES">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="72">Download packages</doc>
      </member>
      <member name="get_distro_upgrades"
              value="26"
              c:identifier="PK_ROLE_ENUM_GET_DISTRO_UPGRADES"
              glib:nick="get-distro-upgrades"
              glib:name="PK_ROLE_ENUM_GET_DISTRO_UPGRADES">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="73">Get available distribution upgrades</doc>
      </member>
      <member name="get_categories"
              value="27"
              c:identifier="PK_ROLE_ENUM_GET_CATEGORIES"
              glib:nick="get-categories"
              glib:name="PK_ROLE_ENUM_GET_CATEGORIES">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="74">Get available categories</doc>
      </member>
      <member name="get_old_transactions"
              value="28"
              c:identifier="PK_ROLE_ENUM_GET_OLD_TRANSACTIONS"
              glib:nick="get-old-transactions"
              glib:name="PK_ROLE_ENUM_GET_OLD_TRANSACTIONS">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="75">Get old transation information</doc>
      </member>
      <member name="repair_system"
              value="29"
              c:identifier="PK_ROLE_ENUM_REPAIR_SYSTEM"
              glib:nick="repair-system"
              glib:name="PK_ROLE_ENUM_REPAIR_SYSTEM">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="76">Repair system</doc>
      </member>
      <member name="get_details_local"
              value="30"
              c:identifier="PK_ROLE_ENUM_GET_DETAILS_LOCAL"
              glib:nick="get-details-local"
              glib:name="PK_ROLE_ENUM_GET_DETAILS_LOCAL">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="77">Get details on local package</doc>
      </member>
      <member name="get_files_local"
              value="31"
              c:identifier="PK_ROLE_ENUM_GET_FILES_LOCAL"
              glib:nick="get-files-local"
              glib:name="PK_ROLE_ENUM_GET_FILES_LOCAL">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="78">Get files provided by local package</doc>
      </member>
      <member name="repo_remove"
              value="32"
              c:identifier="PK_ROLE_ENUM_REPO_REMOVE"
              glib:nick="repo-remove"
              glib:name="PK_ROLE_ENUM_REPO_REMOVE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="79">Remove repository</doc>
      </member>
      <member name="upgrade_system"
              value="33"
              c:identifier="PK_ROLE_ENUM_UPGRADE_SYSTEM"
              glib:nick="upgrade-system"
              glib:name="PK_ROLE_ENUM_UPGRADE_SYSTEM">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="80">Upgrade system</doc>
      </member>
      <member name="last"
              value="34"
              c:identifier="PK_ROLE_ENUM_LAST"
              glib:nick="last"
              glib:name="PK_ROLE_ENUM_LAST">
      </member>
      <function name="from_string"
                c:identifier="pk_role_enum_from_string"
                version="0.5.0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="634">Converts a text enumerated type to its unsigned integer representation</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="818"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="640">the enumerated constant value, e.g. PK_SIGTYPE_ENUM_GPG</doc>
          <type name="RoleEnum" c:type="PkRoleEnum"/>
        </return-value>
        <parameters>
          <parameter name="role" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="636">Text describing the enumerated type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_localised_present"
                c:identifier="pk_role_enum_to_localised_present"
                version="0.7.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="1115">Converts a enumerated type to its localized description</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="851"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="1121">the translated text</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="role" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="1117">The enumerated type value</doc>
            <type name="RoleEnum" c:type="PkRoleEnum"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_string"
                c:identifier="pk_role_enum_to_string"
                version="0.5.0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="650">Converts a enumerated type to its text representation</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="819"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="656">the enumerated constant value, e.g. "available"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="role" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="652">The enumerated type value</doc>
            <type name="RoleEnum" c:type="PkRoleEnum"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <function-macro name="SOURCE" c:identifier="PK_SOURCE" introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-source.h" line="34"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_CLASS"
                    c:identifier="PK_SOURCE_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-source.h" line="35"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_GET_CLASS"
                    c:identifier="PK_SOURCE_GET_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-source.h" line="38"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="SYSTEM_PACKAGE_CACHE_FILENAME"
              value="/var/lib/PackageKit/package-cache.db"
              c:type="PK_SYSTEM_PACKAGE_CACHE_FILENAME">
      <source-position filename="lib/packagekit-glib2/pk-common.h" line="88"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SYSTEM_PACKAGE_LIST_FILENAME"
              value="/var/lib/PackageKit/system.package-list"
              c:type="PK_SYSTEM_PACKAGE_LIST_FILENAME">
      <source-position filename="lib/packagekit-glib2/pk-common.h" line="78"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <enumeration name="SigTypeEnum"
                 glib:type-name="PkSigTypeEnum"
                 glib:get-type="pk_sig_type_enum_get_type"
                 c:type="PkSigTypeEnum">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.h"
           line="700">The signature type type</doc>
      <member name="unknown"
              value="0"
              c:identifier="PK_SIGTYPE_ENUM_UNKNOWN"
              glib:nick="unknown"
              glib:name="PK_SIGTYPE_ENUM_UNKNOWN">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="702">Unkwown signature type</doc>
      </member>
      <member name="gpg"
              value="1"
              c:identifier="PK_SIGTYPE_ENUM_GPG"
              glib:nick="gpg"
              glib:name="PK_SIGTYPE_ENUM_GPG">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="703">GPG signature</doc>
      </member>
      <member name="last"
              value="2"
              c:identifier="PK_SIGTYPE_ENUM_LAST"
              glib:nick="last"
              glib:name="PK_SIGTYPE_ENUM_LAST">
      </member>
      <function name="from_string" c:identifier="pk_sig_type_enum_from_string">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="444">Converts a text enumerated type to its unsigned integer representation</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="800"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="450">the enumerated constant value, e.g. PK_SIGTYPE_ENUM_GPG</doc>
          <type name="SigTypeEnum" c:type="PkSigTypeEnum"/>
        </return-value>
        <parameters>
          <parameter name="sig_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="446">Text describing the enumerated type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_string"
                c:identifier="pk_sig_type_enum_to_string"
                version="0.5.0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="458">Converts a enumerated type to its text representation</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="801"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="464">the enumerated constant value, e.g. "available"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="sig_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="460">The enumerated type value</doc>
            <type name="SigTypeEnum" c:type="PkSigTypeEnum"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <class name="Source"
           c:symbol-prefix="source"
           c:type="PkSource"
           parent="GObject.Object"
           glib:type-name="PkSource"
           glib:get-type="pk_source_get_type"
           glib:type-struct="SourceClass">
      <source-position filename="lib/packagekit-glib2/pk-source.h" line="63"/>
      <constructor name="new" c:identifier="pk_source_new" version="0.6.0">
        <source-position filename="lib/packagekit-glib2/pk-source.h"
                         line="66"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-source.c"
               line="168">a new #PkSource object.</doc>
          <type name="Source" c:type="PkSource*"/>
        </return-value>
      </constructor>
      <property name="role"
                version="0.6.0"
                writable="1"
                transfer-ownership="none"
                default-value="PK_ROLE_ENUM_UNKNOWN">
        <type name="RoleEnum"/>
      </property>
      <property name="transaction-id"
                version="0.6.0"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="SourcePrivate" c:type="PkSourcePrivate*"/>
      </field>
    </class>
    <record name="SourceClass"
            c:type="PkSourceClass"
            glib:is-gtype-struct-for="Source">
      <source-position filename="lib/packagekit-glib2/pk-source.h" line="63"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_pk_reserved1" introspectable="0">
        <callback name="_pk_reserved1">
          <source-position filename="lib/packagekit-glib2/pk-source.h"
                           line="58"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved2" introspectable="0">
        <callback name="_pk_reserved2">
          <source-position filename="lib/packagekit-glib2/pk-source.h"
                           line="59"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved3" introspectable="0">
        <callback name="_pk_reserved3">
          <source-position filename="lib/packagekit-glib2/pk-source.h"
                           line="60"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved4" introspectable="0">
        <callback name="_pk_reserved4">
          <source-position filename="lib/packagekit-glib2/pk-source.h"
                           line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved5" introspectable="0">
        <callback name="_pk_reserved5">
          <source-position filename="lib/packagekit-glib2/pk-source.h"
                           line="62"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="SourcePrivate"
            c:type="PkSourcePrivate"
            disguised="1"
            opaque="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-source.c"
           line="42">Private #PkSource data</doc>
      <source-position filename="lib/packagekit-glib2/pk-source.h" line="40"/>
    </record>
    <enumeration name="StatusEnum"
                 glib:type-name="PkStatusEnum"
                 glib:get-type="pk_status_enum_get_type"
                 c:type="PkStatusEnum">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.h"
           line="126">What status we are now; this can change for each transaction giving a
status of what sort of thing is happening
Icons that change to represent the current status of the transaction will
use these constants
If you add to these, make sure you add filenames in gpk-watch.c also

A typical transaction will do:
- schedule task
WAIT
- run task
SETUP
- wait for lock
RUNNING

This means that backends should run pk_backend_set_status (backend, PK_STATUS_ENUM_RUNNING)
when they are ready to start running the transaction and after a lock has been got.</doc>
      <member name="unknown"
              value="0"
              c:identifier="PK_STATUS_ENUM_UNKNOWN"
              glib:nick="unknown"
              glib:name="PK_STATUS_ENUM_UNKNOWN">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="128">Unknown status</doc>
      </member>
      <member name="wait"
              value="1"
              c:identifier="PK_STATUS_ENUM_WAIT"
              glib:nick="wait"
              glib:name="PK_STATUS_ENUM_WAIT">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="129">Waiting</doc>
      </member>
      <member name="setup"
              value="2"
              c:identifier="PK_STATUS_ENUM_SETUP"
              glib:nick="setup"
              glib:name="PK_STATUS_ENUM_SETUP">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="130">Setting up</doc>
      </member>
      <member name="running"
              value="3"
              c:identifier="PK_STATUS_ENUM_RUNNING"
              glib:nick="running"
              glib:name="PK_STATUS_ENUM_RUNNING">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="131">Running</doc>
      </member>
      <member name="query"
              value="4"
              c:identifier="PK_STATUS_ENUM_QUERY"
              glib:nick="query"
              glib:name="PK_STATUS_ENUM_QUERY">
      </member>
      <member name="info"
              value="5"
              c:identifier="PK_STATUS_ENUM_INFO"
              glib:nick="info"
              glib:name="PK_STATUS_ENUM_INFO">
      </member>
      <member name="remove"
              value="6"
              c:identifier="PK_STATUS_ENUM_REMOVE"
              glib:nick="remove"
              glib:name="PK_STATUS_ENUM_REMOVE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="134">Removing</doc>
      </member>
      <member name="refresh_cache"
              value="7"
              c:identifier="PK_STATUS_ENUM_REFRESH_CACHE"
              glib:nick="refresh-cache"
              glib:name="PK_STATUS_ENUM_REFRESH_CACHE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="135">Refreshing cache</doc>
      </member>
      <member name="download"
              value="8"
              c:identifier="PK_STATUS_ENUM_DOWNLOAD"
              glib:nick="download"
              glib:name="PK_STATUS_ENUM_DOWNLOAD">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="136">Downloading</doc>
      </member>
      <member name="install"
              value="9"
              c:identifier="PK_STATUS_ENUM_INSTALL"
              glib:nick="install"
              glib:name="PK_STATUS_ENUM_INSTALL">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="137">Installing</doc>
      </member>
      <member name="update"
              value="10"
              c:identifier="PK_STATUS_ENUM_UPDATE"
              glib:nick="update"
              glib:name="PK_STATUS_ENUM_UPDATE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="138">Updating</doc>
      </member>
      <member name="cleanup"
              value="11"
              c:identifier="PK_STATUS_ENUM_CLEANUP"
              glib:nick="cleanup"
              glib:name="PK_STATUS_ENUM_CLEANUP">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="139">Cleaning up</doc>
      </member>
      <member name="obsolete"
              value="12"
              c:identifier="PK_STATUS_ENUM_OBSOLETE"
              glib:nick="obsolete"
              glib:name="PK_STATUS_ENUM_OBSOLETE">
      </member>
      <member name="dep_resolve"
              value="13"
              c:identifier="PK_STATUS_ENUM_DEP_RESOLVE"
              glib:nick="dep-resolve"
              glib:name="PK_STATUS_ENUM_DEP_RESOLVE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="141">Resolving dependencies</doc>
      </member>
      <member name="sig_check"
              value="14"
              c:identifier="PK_STATUS_ENUM_SIG_CHECK"
              glib:nick="sig-check"
              glib:name="PK_STATUS_ENUM_SIG_CHECK">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="142">Checking signatures</doc>
      </member>
      <member name="test_commit"
              value="15"
              c:identifier="PK_STATUS_ENUM_TEST_COMMIT"
              glib:nick="test-commit"
              glib:name="PK_STATUS_ENUM_TEST_COMMIT">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="143">Testing commit</doc>
      </member>
      <member name="commit"
              value="16"
              c:identifier="PK_STATUS_ENUM_COMMIT"
              glib:nick="commit"
              glib:name="PK_STATUS_ENUM_COMMIT">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="144">Committing</doc>
      </member>
      <member name="request"
              value="17"
              c:identifier="PK_STATUS_ENUM_REQUEST"
              glib:nick="request"
              glib:name="PK_STATUS_ENUM_REQUEST">
      </member>
      <member name="finished"
              value="18"
              c:identifier="PK_STATUS_ENUM_FINISHED"
              glib:nick="finished"
              glib:name="PK_STATUS_ENUM_FINISHED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="146">Finished</doc>
      </member>
      <member name="cancel"
              value="19"
              c:identifier="PK_STATUS_ENUM_CANCEL"
              glib:nick="cancel"
              glib:name="PK_STATUS_ENUM_CANCEL">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="147">Cancelling</doc>
      </member>
      <member name="download_repository"
              value="20"
              c:identifier="PK_STATUS_ENUM_DOWNLOAD_REPOSITORY"
              glib:nick="download-repository"
              glib:name="PK_STATUS_ENUM_DOWNLOAD_REPOSITORY">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="148">Downloading respository</doc>
      </member>
      <member name="download_packagelist"
              value="21"
              c:identifier="PK_STATUS_ENUM_DOWNLOAD_PACKAGELIST"
              glib:nick="download-packagelist"
              glib:name="PK_STATUS_ENUM_DOWNLOAD_PACKAGELIST">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="149">Donwloading package list</doc>
      </member>
      <member name="download_filelist"
              value="22"
              c:identifier="PK_STATUS_ENUM_DOWNLOAD_FILELIST"
              glib:nick="download-filelist"
              glib:name="PK_STATUS_ENUM_DOWNLOAD_FILELIST">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="150">Downloading file list</doc>
      </member>
      <member name="download_changelog"
              value="23"
              c:identifier="PK_STATUS_ENUM_DOWNLOAD_CHANGELOG"
              glib:nick="download-changelog"
              glib:name="PK_STATUS_ENUM_DOWNLOAD_CHANGELOG">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="151">Downloading changelog information</doc>
      </member>
      <member name="download_group"
              value="24"
              c:identifier="PK_STATUS_ENUM_DOWNLOAD_GROUP"
              glib:nick="download-group"
              glib:name="PK_STATUS_ENUM_DOWNLOAD_GROUP">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="152">Downloading group information</doc>
      </member>
      <member name="download_updateinfo"
              value="25"
              c:identifier="PK_STATUS_ENUM_DOWNLOAD_UPDATEINFO"
              glib:nick="download-updateinfo"
              glib:name="PK_STATUS_ENUM_DOWNLOAD_UPDATEINFO">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="153">Downloading update information</doc>
      </member>
      <member name="repackaging"
              value="26"
              c:identifier="PK_STATUS_ENUM_REPACKAGING"
              glib:nick="repackaging"
              glib:name="PK_STATUS_ENUM_REPACKAGING">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="154">Repackaging</doc>
      </member>
      <member name="loading_cache"
              value="27"
              c:identifier="PK_STATUS_ENUM_LOADING_CACHE"
              glib:nick="loading-cache"
              glib:name="PK_STATUS_ENUM_LOADING_CACHE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="155">Loading cache</doc>
      </member>
      <member name="scan_applications"
              value="28"
              c:identifier="PK_STATUS_ENUM_SCAN_APPLICATIONS"
              glib:nick="scan-applications"
              glib:name="PK_STATUS_ENUM_SCAN_APPLICATIONS">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="156">Scanning for applications</doc>
      </member>
      <member name="generate_package_list"
              value="29"
              c:identifier="PK_STATUS_ENUM_GENERATE_PACKAGE_LIST"
              glib:nick="generate-package-list"
              glib:name="PK_STATUS_ENUM_GENERATE_PACKAGE_LIST">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="157">Generating package list</doc>
      </member>
      <member name="waiting_for_lock"
              value="30"
              c:identifier="PK_STATUS_ENUM_WAITING_FOR_LOCK"
              glib:nick="waiting-for-lock"
              glib:name="PK_STATUS_ENUM_WAITING_FOR_LOCK">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="158">Waiting for lock</doc>
      </member>
      <member name="waiting_for_auth"
              value="31"
              c:identifier="PK_STATUS_ENUM_WAITING_FOR_AUTH"
              glib:nick="waiting-for-auth"
              glib:name="PK_STATUS_ENUM_WAITING_FOR_AUTH">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="159">Waiting for authentication/authorization</doc>
      </member>
      <member name="scan_process_list"
              value="32"
              c:identifier="PK_STATUS_ENUM_SCAN_PROCESS_LIST"
              glib:nick="scan-process-list"
              glib:name="PK_STATUS_ENUM_SCAN_PROCESS_LIST">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="160">Scanning running processes</doc>
      </member>
      <member name="check_executable_files"
              value="33"
              c:identifier="PK_STATUS_ENUM_CHECK_EXECUTABLE_FILES"
              glib:nick="check-executable-files"
              glib:name="PK_STATUS_ENUM_CHECK_EXECUTABLE_FILES">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="161">Checking executable files</doc>
      </member>
      <member name="check_libraries"
              value="34"
              c:identifier="PK_STATUS_ENUM_CHECK_LIBRARIES"
              glib:nick="check-libraries"
              glib:name="PK_STATUS_ENUM_CHECK_LIBRARIES">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="162">Checking libraries</doc>
      </member>
      <member name="copy_files"
              value="35"
              c:identifier="PK_STATUS_ENUM_COPY_FILES"
              glib:nick="copy-files"
              glib:name="PK_STATUS_ENUM_COPY_FILES">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="163">Copying files</doc>
      </member>
      <member name="run_hook"
              value="36"
              c:identifier="PK_STATUS_ENUM_RUN_HOOK"
              glib:nick="run-hook"
              glib:name="PK_STATUS_ENUM_RUN_HOOK">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="164">Running package hook</doc>
      </member>
      <member name="last"
              value="37"
              c:identifier="PK_STATUS_ENUM_LAST"
              glib:nick="last"
              glib:name="PK_STATUS_ENUM_LAST">
      </member>
      <function name="from_string"
                c:identifier="pk_status_enum_from_string"
                version="0.5.0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="602">Converts a text enumerated type to its unsigned integer representation</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="815"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="608">the enumerated constant value, e.g. PK_SIGTYPE_ENUM_GPG</doc>
          <type name="StatusEnum" c:type="PkStatusEnum"/>
        </return-value>
        <parameters>
          <parameter name="status" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="604">Text describing the enumerated type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_localised_text"
                c:identifier="pk_status_enum_to_localised_text">
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="848"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="status" transfer-ownership="none">
            <type name="StatusEnum" c:type="PkStatusEnum"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_string"
                c:identifier="pk_status_enum_to_string"
                version="0.5.0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="618">Converts a enumerated type to its text representation</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="816"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="624">the enumerated constant value, e.g. "available"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="status" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="620">The enumerated type value</doc>
            <type name="StatusEnum" c:type="PkStatusEnum"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <function-macro name="TASK" c:identifier="PK_TASK" introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-task.h" line="39"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TASK_CLASS"
                    c:identifier="PK_TASK_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-task.h" line="40"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TASK_GET_CLASS"
                    c:identifier="PK_TASK_GET_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-task.h" line="43"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TRANSACTION_LIST"
                    c:identifier="PK_TRANSACTION_LIST"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-transaction-list.h"
                       line="34"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TRANSACTION_LIST_CLASS"
                    c:identifier="PK_TRANSACTION_LIST_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-transaction-list.h"
                       line="35"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TRANSACTION_LIST_GET_CLASS"
                    c:identifier="PK_TRANSACTION_LIST_GET_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-transaction-list.h"
                       line="38"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TRANSACTION_PAST"
                    c:identifier="PK_TRANSACTION_PAST"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-transaction-past.h"
                       line="37"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TRANSACTION_PAST_CLASS"
                    c:identifier="PK_TRANSACTION_PAST_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-transaction-past.h"
                       line="38"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TRANSACTION_PAST_GET_CLASS"
                    c:identifier="PK_TRANSACTION_PAST_GET_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-transaction-past.h"
                       line="41"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Task"
           c:symbol-prefix="task"
           c:type="PkTask"
           parent="Client"
           glib:type-name="PkTask"
           glib:get-type="pk_task_get_type"
           glib:type-struct="TaskClass">
      <source-position filename="lib/packagekit-glib2/pk-task.h" line="86"/>
      <constructor name="new" c:identifier="pk_task_new" version="0.5.2">
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="89"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task.c"
               line="2665">a new #PkTask object.</doc>
          <type name="Task" c:type="PkTask*"/>
        </return-value>
      </constructor>
      <virtual-method name="eula_question">
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="request" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="results" transfer-ownership="none">
            <type name="Results" c:type="PkResults*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="key_question">
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="request" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="results" transfer-ownership="none">
            <type name="Results" c:type="PkResults*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="media_change_question">
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="request" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="results" transfer-ownership="none">
            <type name="Results" c:type="PkResults*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="repair_question">
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="request" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="results" transfer-ownership="none">
            <type name="Results" c:type="PkResults*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="simulate_question">
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="request" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="results" transfer-ownership="none">
            <type name="Results" c:type="PkResults*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="untrusted_question">
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="request" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="results" transfer-ownership="none">
            <type name="Results" c:type="PkResults*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="depends_on_async"
              c:identifier="pk_task_depends_on_async"
              version="0.6.5">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="1794">Get the list of dependant packages.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="194"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1796">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1797">a bitfield of filters that can be used to limit the results</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1798">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="recursive" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1799">if we should recurse to packages that depend on other packages</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1800">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1801">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1802">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1803">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1804">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="depends_on_sync"
              c:identifier="pk_task_depends_on_sync"
              version="0.6.5"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task-sync.c"
             line="740">Get the list of dependent packages.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task-sync.h"
                         line="135"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task-sync.c"
               line="753">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="742">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="743">a bitfield of filters that can be used to limit the results</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="744">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="recursive" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="745">if we should recurse to packages that depend on other packages</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="746">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="747">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="748">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="download_packages_async"
              c:identifier="pk_task_download_packages_async"
              version="0.6.5">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="1694">Downloads packages</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="179"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1696">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1697">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="directory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1698">the destination directory</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1699">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1700">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1701">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1702">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1703">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="download_packages_sync"
              c:identifier="pk_task_download_packages_sync"
              version="0.6.5"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task-sync.c"
             line="637">Downloads packages</doc>
        <source-position filename="lib/packagekit-glib2/pk-task-sync.h"
                         line="120"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task-sync.c"
               line="649">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="639">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="640">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="directory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="641">the destination directory</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="642">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="643">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="644">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="generic_finish"
              c:identifier="pk_task_generic_finish"
              version="0.5.2"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="2299">Gets the result from the asynchronous function.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="91"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task.c"
               line="2307">The #PkResults of the transaction.</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2301">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2302">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_allow_downgrade"
              c:identifier="pk_task_get_allow_downgrade"
              glib:get-property="allow-downgrade"
              version="1.0.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="2450">Gets if we are allow packages to be downgraded.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="291"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task.c"
               line="2456">%TRUE if package downgrades are allowed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2452">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_allow_reinstall"
              c:identifier="pk_task_get_allow_reinstall"
              glib:get-property="allow-reinstall"
              version="1.0.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="2484">Gets if we allow packages to be reinstalled.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="294"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task.c"
               line="2490">%TRUE if package reinstallation is allowed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2486">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_categories_async"
              c:identifier="pk_task_get_categories_async"
              version="0.6.5">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="2050">Get the categories available.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="234"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2052">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2053">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2054">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2055">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2056">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2057">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_categories_sync"
              c:identifier="pk_task_get_categories_sync"
              version="0.6.5"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task-sync.c"
             line="1001">Get the categories available.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task-sync.h"
                         line="175"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task-sync.c"
               line="1011">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="1003">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="1004">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="1005">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="1006">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_details_async"
              c:identifier="pk_task_get_details_async"
              version="0.6.5">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="1596">Gets details about packages.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="165"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1598">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1599">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1600">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1601">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1602">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1603">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1604">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_details_sync"
              c:identifier="pk_task_get_details_sync"
              version="0.6.5"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task-sync.c"
             line="535">Gets details about packages.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task-sync.h"
                         line="106"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task-sync.c"
               line="546">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="537">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="538">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="539">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="540">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="541">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_files_async"
              c:identifier="pk_task_get_files_async"
              version="0.6.5">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="2001">Get the files in a package.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="227"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2003">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2004">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2005">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2006">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2007">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2008">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2009">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_files_sync"
              c:identifier="pk_task_get_files_sync"
              version="0.6.5"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task-sync.c"
             line="950">Get the files in a package.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task-sync.h"
                         line="168"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task-sync.c"
               line="961">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="952">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="953">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="954">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="955">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="956">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_only_download"
              c:identifier="pk_task_get_only_download"
              glib:get-property="only-download"
              version="0.8.1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="2380">Gets if we are just preparing the transaction for later.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="288"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task.c"
               line="2386">%TRUE if only downloading</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2382">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_only_trusted"
              c:identifier="pk_task_get_only_trusted"
              glib:get-property="only-trusted"
              version="0.9.5">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="2416">Gets if we allow only authenticated packages in the transactoin.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="297"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task.c"
               line="2422">%TRUE if we allow only authenticated packages</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2418">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_packages_async"
              c:identifier="pk_task_get_packages_async"
              version="0.6.5">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="1847">Gets the list of packages.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="203"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1849">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1850">a bitfield of filters that can be used to limit the results</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1851">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1852">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1853">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1854">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1855">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_packages_sync"
              c:identifier="pk_task_get_packages_sync"
              version="0.6.5"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task-sync.c"
             line="793">Gets the list of packages.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task-sync.h"
                         line="144"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task-sync.c"
               line="804">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="795">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="796">a bitfield of filters that can be used to limit the results</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="797">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="798">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="799">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_repo_list_async"
              c:identifier="pk_task_get_repo_list_async"
              version="0.6.5">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="2146">Get the list of available repositories.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="247"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2148">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2149">a bitfield of filters that can be used to limit the results</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2150">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2151">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2152">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2153">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2154">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_repo_list_sync"
              c:identifier="pk_task_get_repo_list_sync"
              version="0.6.5"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task-sync.c"
             line="1102">Get the list of available repositories.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task-sync.h"
                         line="188"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task-sync.c"
               line="1113">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="1104">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="1105">a bitfield of filters that can be used to limit the results</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="1106">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="1107">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="1108">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_simulate"
              c:identifier="pk_task_get_simulate"
              glib:get-property="simulate"
              version="0.6.10">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="2345">Gets if we are simulating.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="285"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task.c"
               line="2351">%TRUE if we are simulating</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2347">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_update_detail_async"
              c:identifier="pk_task_get_update_detail_async"
              version="0.6.5">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="1645">Gets details about updates.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="172"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1647">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1648">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1649">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1650">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1651">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1652">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1653">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_update_detail_sync"
              c:identifier="pk_task_get_update_detail_sync"
              version="0.6.5"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task-sync.c"
             line="586">Gets details about updates.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task-sync.h"
                         line="113"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task-sync.c"
               line="597">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="588">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="589">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="590">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="591">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="592">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_updates_async"
              c:identifier="pk_task_get_updates_async"
              version="0.6.5">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="1745">Gets the update lists.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="187"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1747">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1748">a bitfield of filters that can be used to limit the results</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1749">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1750">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1751">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1752">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1753">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_updates_sync"
              c:identifier="pk_task_get_updates_sync"
              version="0.6.5"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task-sync.c"
             line="689">Gets the update lists.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task-sync.h"
                         line="128"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task-sync.c"
               line="700">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="691">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="692">a bitfield of filters that can be used to limit the results</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="693">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="694">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="695">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_files_async"
              c:identifier="pk_task_install_files_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="1278">Install a file locally, and get the deps from the repositories.
This is useful for double clicking on a .rpm or .deb file.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="118"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1280">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="files" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1281">a file such as "/home/hughsie/Desktop/hal-devel-0.10.0.rpm"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1282">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1283">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1284">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1285">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1286">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_files_sync"
              c:identifier="pk_task_install_files_sync"
              version="0.5.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task-sync.c"
             line="221">Install a file locally, and get the deps from the repositories.
This is useful for double clicking on a .rpm or .deb file.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task-sync.h"
                         line="59"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task-sync.c"
               line="236">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="223">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="files" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="224">a file such as "/home/hughsie/Desktop/hal-devel-0.10.0.rpm"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="225">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="226">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="227">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_packages_async"
              c:identifier="pk_task_install_packages_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="1047">Merges in details about packages using resolve.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1049">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1050">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1051">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1052">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1053">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1054">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1055">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_packages_sync"
              c:identifier="pk_task_install_packages_sync"
              version="0.5.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task-sync.c"
             line="115">Install a package of the newest and most correct version.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task-sync.h"
                         line="45"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task-sync.c"
               line="129">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="117">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="118">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="119">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="120">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="121">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_cache_async"
              c:identifier="pk_task_refresh_cache_async"
              version="0.6.5">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="2097">Refresh the package cache.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="240"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2099">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="force" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2100">if the metadata should be deleted and re-downloaded even if it is correct</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2101">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2102">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2103">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2104">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2105">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_cache_sync"
              c:identifier="pk_task_refresh_cache_sync"
              version="0.6.5"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task-sync.c"
             line="1051">Refresh the package cache.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task-sync.h"
                         line="181"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task-sync.c"
               line="1062">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="1053">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="force" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="1054">if the metadata should be deleted and re-downloaded even if it is correct</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="1055">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="1056">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="1057">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_packages_async"
              c:identifier="pk_task_remove_packages_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="1221">Remove a package (optionally with dependancies) from the system.
If @allow_deps is set to %FALSE, and other packages would have to be removed,
then the transaction would fail.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1223">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1224">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="allow_deps" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1225">if other dependent packages are allowed to be removed from the computer</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="autoremove" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1226">if other packages installed at the same time should be tried to remove</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1227">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1228">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1229">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1230">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1231">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_packages_sync"
              c:identifier="pk_task_remove_packages_sync"
              version="0.5.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task-sync.c"
             line="58">Remove a package (optionally with dependancies) from the system.
If @allow_deps is set to %FALSE, and other packages would have to be removed,
then the transaction would fail.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task-sync.h"
                         line="36"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task-sync.c"
               line="76">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="60">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="61">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="allow_deps" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="62">if other dependent packages are allowed to be removed from the computer</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="autoremove" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="63">if other packages installed at the same time should be tried to remove</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="64">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="65">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="66">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="repair_system_async"
              c:identifier="pk_task_repair_system_async"
              version="0.7.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="2246">Recover the system from broken dependencies and aborted installations.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="270"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2248">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2249">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2250">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2251">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2252">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2253">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="repair_system_sync"
              c:identifier="pk_task_repair_system_sync"
              version="0.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task-sync.c"
             line="1263">Recover from broken dependencies of installed packages or incomplete
installations.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task-sync.h"
                         line="211"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task-sync.c"
               line="1277">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="1265">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="1266">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="1267">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="1268">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="repo_enable_async"
              c:identifier="pk_task_repo_enable_async"
              version="0.6.5">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="2195">Enable or disable a specific repo.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="254"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2197">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="repo_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2198">The software repository ID</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2199">%TRUE or %FALSE</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2200">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2201">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2202">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2203">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2204">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="repo_enable_sync"
              c:identifier="pk_task_repo_enable_sync"
              version="0.6.5"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task-sync.c"
             line="1153">Enable or disable a specific repo.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task-sync.h"
                         line="195"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task-sync.c"
               line="1165">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="1155">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="repo_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="1156">The software repository ID</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="1157">%TRUE or %FALSE</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="1158">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="1159">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="1160">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="required_by_async"
              c:identifier="pk_task_required_by_async"
              version="0.6.5">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="1896">Get the packages this package requires.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="210"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1898">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1899">a bitfield of filters that can be used to limit the results</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1900">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="recursive" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1901">if we should return packages that depend on the ones we do</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1902">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1903">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1904">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1905">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1906">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="required_by_sync"
              c:identifier="pk_task_required_by_sync"
              version="0.6.5"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task-sync.c"
             line="844">Get the packages this package requires.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task-sync.h"
                         line="151"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task-sync.c"
               line="857">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="846">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="847">a bitfield of filters that can be used to limit the results</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="848">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="recursive" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="849">if we should return packages that depend on the ones we do</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="850">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="851">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="852">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="resolve_async"
              c:identifier="pk_task_resolve_async"
              version="0.6.5">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="1334">Resolves a package name to a package-id.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="125"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1336">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1337">a bitfield of filters that can be used to limit the results</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="packages" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1338">package names to find</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1339">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1340">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1341">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1342">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1343">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="resolve_sync"
              c:identifier="pk_task_resolve_sync"
              version="0.6.5"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task-sync.c"
             line="275">Resolves a package name to a package-id.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task-sync.h"
                         line="66"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task-sync.c"
               line="289">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="277">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="278">a bitfield of filters that can be used to limit the results</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="packages" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="279">package names to find</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="280">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="281">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="282">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_details_async"
              c:identifier="pk_task_search_details_async"
              version="0.6.5">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="1443">Searches for some package details.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="141"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1445">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1446">a bitfield of filters that can be used to limit the results</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1447">search values</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1448">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1449">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1450">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1451">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1452">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_details_sync"
              c:identifier="pk_task_search_details_sync"
              version="0.6.5"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task-sync.c"
             line="379">Searches for some package details.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task-sync.h"
                         line="82"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task-sync.c"
               line="393">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="381">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="382">a bitfield of filters that can be used to limit the results</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="383">search values</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="384">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="385">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="386">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_files_async"
              c:identifier="pk_task_search_files_async"
              version="0.6.5">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="1545">Searches for specific files.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="157"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1547">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1548">a bitfield of filters that can be used to limit the results</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1549">search values</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1550">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1551">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1552">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1553">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1554">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_files_sync"
              c:identifier="pk_task_search_files_sync"
              version="0.6.5"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task-sync.c"
             line="483">Searches for specific files.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task-sync.h"
                         line="98"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task-sync.c"
               line="495">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="485">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="486">a bitfield of filters that can be used to limit the results</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="487">search values</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="488">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="489">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="490">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_groups_async"
              c:identifier="pk_task_search_groups_async"
              version="0.6.5">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="1494">Searches the group lists.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="149"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1496">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1497">a bitfield of filters that can be used to limit the results</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1498">search values</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1499">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1500">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1501">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1502">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1503">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_groups_sync"
              c:identifier="pk_task_search_groups_sync"
              version="0.6.5"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task-sync.c"
             line="431">Searches the group lists.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task-sync.h"
                         line="90"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task-sync.c"
               line="443">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="433">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="434">a bitfield of filters that can be used to limit the results</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="435">search values</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="436">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="437">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="438">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_names_async"
              c:identifier="pk_task_search_names_async"
              version="0.6.5">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="1392">Searches for a package name.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="133"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1394">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1395">a bitfield of filters that can be used to limit the results</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1396">search values</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1397">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1398">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1399">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1400">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1401">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_names_sync"
              c:identifier="pk_task_search_names_sync"
              version="0.6.5"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task-sync.c"
             line="327">Searches for a package name.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task-sync.h"
                         line="74"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task-sync.c"
               line="341">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="329">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="330">a bitfield of filters that can be used to limit the results</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="331">search values</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="332">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="333">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="334">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_allow_downgrade"
              c:identifier="pk_task_set_allow_downgrade"
              glib:set-property="allow-downgrade"
              version="1.0.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="2433">If package downgrades shall be allowed during transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="289"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2435">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="allow_downgrade" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2436">%TRUE to allow packages to be downgraded.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_allow_reinstall"
              c:identifier="pk_task_set_allow_reinstall"
              glib:set-property="allow-reinstall"
              version="1.0.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="2467">If package reinstallation shall be allowed during transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="292"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2469">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="allow_reinstall" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2470">%TRUE to allow packages to be reinstalled.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_only_download"
              c:identifier="pk_task_set_only_download"
              glib:set-property="only-download"
              version="0.8.1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="2362">If the transaction should be prepared (depsolved, packages
downloaded, etc) but not committed.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="286"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2364">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="only_download" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2365">%FALSE to actually commit the transaction</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_only_trusted"
              c:identifier="pk_task_set_only_trusted"
              glib:set-property="only-trusted"
              version="0.9.5">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="2398">If only authenticated packages should be allowed in the
transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="295"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2400">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="only_trusted" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2401">%TRUE to allow only authenticated packages</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_simulate"
              c:identifier="pk_task_set_simulate"
              glib:set-property="simulate"
              version="0.6.10">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="2328">If the simulate step should be run without the actual transaction.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="283"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2330">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="simulate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="2331">the simulate mode</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_packages_async"
              c:identifier="pk_task_update_packages_async"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="1108">Update specific packages to the newest available versions.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="102"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1110">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1111">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1112">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1113">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1114">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1115">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1116">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_packages_sync"
              c:identifier="pk_task_update_packages_sync"
              version="0.5.3"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task-sync.c"
             line="168">Update specific packages to the newest available versions.

Warning: this function is synchronous, and may block. Do not use it in GUI
applications.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task-sync.h"
                         line="52"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task-sync.c"
               line="182">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="170">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="171">a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="172">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="173">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="174">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="upgrade_system_async"
              c:identifier="pk_task_upgrade_system_async"
              version="1.0.12">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="1160">This transaction will update the distro to the next version, which may
involve just downloading the installer and setting up the boot device,
or may involve doing an on-line upgrade.

The backend will decide what is best to do.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="262"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1162">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="distro_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1163">a distro ID such as "fedora-14"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="upgrade_kind" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1164">a #PkUpgradeKindEnum such as %PK_UPGRADE_KIND_ENUM_COMPLETE</doc>
            <type name="UpgradeKindEnum" c:type="PkUpgradeKindEnum"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1165">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1166">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1167">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1168">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1169">the data to pass to @callback_ready</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="upgrade_system_sync"
              c:identifier="pk_task_upgrade_system_sync"
              version="1.0.12"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task-sync.c"
             line="1205">This transaction will update the distro to the next version, which may
involve just downloading the installer and setting up the boot device,
or may involve doing an on-line upgrade.

The backend will decide what is best to do.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task-sync.h"
                         line="203"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task-sync.c"
               line="1221">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="1207">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="distro_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="1208">a distro ID such as "fedora-14"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="upgrade_kind" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="1209">a #PkUpgradeKindEnum such as %PK_UPGRADE_KIND_ENUM_COMPLETE</doc>
            <type name="UpgradeKindEnum" c:type="PkUpgradeKindEnum"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="1210">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="1211">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="1212">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="user_accepted"
              c:identifier="pk_task_user_accepted"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="772">Mark a EULA as accepted by the user.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="277"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task.c"
               line="779">%TRUE if @request is valid.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="774">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="775">request ID for EULA.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="user_declined"
              c:identifier="pk_task_user_declined"
              version="0.5.2">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="829">Mark a EULA as declined by the user.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="279"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task.c"
               line="836">%TRUE if @request is valid.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="831">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="832">request ID for EULA.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="what_provides_async"
              c:identifier="pk_task_what_provides_async"
              version="0.6.5">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="1949">Find the package that provides some resource.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task.h" line="219"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1951">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1952">a bitfield of filters that can be used to limit the results</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1953">values to search for</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1954">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1955">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1956">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1957">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task.c"
                 line="1958">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="what_provides_sync"
              c:identifier="pk_task_what_provides_sync"
              version="0.6.5"
              throws="1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task-sync.c"
             line="897">Find the package that provides some resource.</doc>
        <source-position filename="lib/packagekit-glib2/pk-task-sync.h"
                         line="160"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-task-sync.c"
               line="909">a #PkResults object, or %NULL for error</doc>
          <type name="Results" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="899">a valid #PkTask instance</doc>
            <type name="Task" c:type="PkTask*"/>
          </instance-parameter>
          <parameter name="filters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="900">a bitfield of filters that can be used to limit the results</doc>
            <type name="Bitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="901">values to search for</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="902">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="903">the function to run when the progress changes</doc>
            <type name="ProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-task-sync.c"
                 line="904">data to pass to @progress_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <property name="allow-downgrade"
                version="1.0.2"
                writable="1"
                transfer-ownership="none"
                setter="set_allow_downgrade"
                getter="get_allow_downgrade"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="2623">%TRUE if package downgrades are allowed.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="allow-reinstall"
                version="1.0.2"
                writable="1"
                transfer-ownership="none"
                setter="set_allow_reinstall"
                getter="get_allow_reinstall"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="2611">%TRUE if package reinstallation shall be allowed during transaction.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="only-download"
                version="0.8.1"
                writable="1"
                transfer-ownership="none"
                setter="set_only_download"
                getter="get_only_download"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="2587">%TRUE if we are just preparing the transaction for later.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="only-trusted"
                version="0.9.5"
                writable="1"
                transfer-ownership="none"
                setter="set_only_trusted"
                getter="get_only_trusted"
                default-value="TRUE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="2599">%TRUE if only authenticated packages should be allowed in the transaction.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="simulate"
                version="0.5.2"
                writable="1"
                transfer-ownership="none"
                setter="set_simulate"
                getter="get_simulate"
                default-value="TRUE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-task.c"
             line="2575">%TRUE if we are simulating.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="Client" c:type="PkClient"/>
      </field>
      <field name="priv">
        <type name="TaskPrivate" c:type="PkTaskPrivate*"/>
      </field>
    </class>
    <record name="TaskClass"
            c:type="PkTaskClass"
            glib:is-gtype-struct-for="Task">
      <source-position filename="lib/packagekit-glib2/pk-task.h" line="86"/>
      <field name="parent_class">
        <type name="ClientClass" c:type="PkClientClass"/>
      </field>
      <field name="untrusted_question">
        <callback name="untrusted_question">
          <source-position filename="lib/packagekit-glib2/pk-task.h"
                           line="63"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="task" transfer-ownership="none">
              <type name="Task" c:type="PkTask*"/>
            </parameter>
            <parameter name="request" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="results" transfer-ownership="none">
              <type name="Results" c:type="PkResults*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="key_question">
        <callback name="key_question">
          <source-position filename="lib/packagekit-glib2/pk-task.h"
                           line="66"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="task" transfer-ownership="none">
              <type name="Task" c:type="PkTask*"/>
            </parameter>
            <parameter name="request" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="results" transfer-ownership="none">
              <type name="Results" c:type="PkResults*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eula_question">
        <callback name="eula_question">
          <source-position filename="lib/packagekit-glib2/pk-task.h"
                           line="69"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="task" transfer-ownership="none">
              <type name="Task" c:type="PkTask*"/>
            </parameter>
            <parameter name="request" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="results" transfer-ownership="none">
              <type name="Results" c:type="PkResults*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="media_change_question">
        <callback name="media_change_question">
          <source-position filename="lib/packagekit-glib2/pk-task.h"
                           line="72"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="task" transfer-ownership="none">
              <type name="Task" c:type="PkTask*"/>
            </parameter>
            <parameter name="request" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="results" transfer-ownership="none">
              <type name="Results" c:type="PkResults*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="simulate_question">
        <callback name="simulate_question">
          <source-position filename="lib/packagekit-glib2/pk-task.h"
                           line="75"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="task" transfer-ownership="none">
              <type name="Task" c:type="PkTask*"/>
            </parameter>
            <parameter name="request" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="results" transfer-ownership="none">
              <type name="Results" c:type="PkResults*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="repair_question">
        <callback name="repair_question">
          <source-position filename="lib/packagekit-glib2/pk-task.h"
                           line="78"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="task" transfer-ownership="none">
              <type name="Task" c:type="PkTask*"/>
            </parameter>
            <parameter name="request" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="results" transfer-ownership="none">
              <type name="Results" c:type="PkResults*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_pk_reserved1" introspectable="0">
        <callback name="_pk_reserved1">
          <source-position filename="lib/packagekit-glib2/pk-task.h"
                           line="82"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved2" introspectable="0">
        <callback name="_pk_reserved2">
          <source-position filename="lib/packagekit-glib2/pk-task.h"
                           line="83"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved3" introspectable="0">
        <callback name="_pk_reserved3">
          <source-position filename="lib/packagekit-glib2/pk-task.h"
                           line="84"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved4" introspectable="0">
        <callback name="_pk_reserved4">
          <source-position filename="lib/packagekit-glib2/pk-task.h"
                           line="85"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="TaskPrivate" c:type="PkTaskPrivate" disguised="1" opaque="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-task.c"
           line="43">Private #PkTask data</doc>
      <source-position filename="lib/packagekit-glib2/pk-task.h" line="46"/>
    </record>
    <enumeration name="TransactionFlagEnum"
                 glib:type-name="PkTransactionFlagEnum"
                 glib:get-type="pk_transaction_flag_enum_get_type"
                 c:type="PkTransactionFlagEnum">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.h"
           line="768">The transaction flags that alter how the transaction is handled</doc>
      <member name="none"
              value="0"
              c:identifier="PK_TRANSACTION_FLAG_ENUM_NONE"
              glib:nick="none"
              glib:name="PK_TRANSACTION_FLAG_ENUM_NONE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="770">No transaction flag</doc>
      </member>
      <member name="only_trusted"
              value="1"
              c:identifier="PK_TRANSACTION_FLAG_ENUM_ONLY_TRUSTED"
              glib:nick="only-trusted"
              glib:name="PK_TRANSACTION_FLAG_ENUM_ONLY_TRUSTED">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="771">Only allow trusted packages</doc>
      </member>
      <member name="simulate"
              value="2"
              c:identifier="PK_TRANSACTION_FLAG_ENUM_SIMULATE"
              glib:nick="simulate"
              glib:name="PK_TRANSACTION_FLAG_ENUM_SIMULATE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="772">Simulate transaction</doc>
      </member>
      <member name="only_download"
              value="3"
              c:identifier="PK_TRANSACTION_FLAG_ENUM_ONLY_DOWNLOAD"
              glib:nick="only-download"
              glib:name="PK_TRANSACTION_FLAG_ENUM_ONLY_DOWNLOAD">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="773">Only download packages</doc>
      </member>
      <member name="allow_reinstall"
              value="4"
              c:identifier="PK_TRANSACTION_FLAG_ENUM_ALLOW_REINSTALL"
              glib:nick="allow-reinstall"
              glib:name="PK_TRANSACTION_FLAG_ENUM_ALLOW_REINSTALL">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="774">Allow package reinstallation</doc>
      </member>
      <member name="just_reinstall"
              value="5"
              c:identifier="PK_TRANSACTION_FLAG_ENUM_JUST_REINSTALL"
              glib:nick="just-reinstall"
              glib:name="PK_TRANSACTION_FLAG_ENUM_JUST_REINSTALL">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="775">Only allow package reinstallation</doc>
      </member>
      <member name="allow_downgrade"
              value="6"
              c:identifier="PK_TRANSACTION_FLAG_ENUM_ALLOW_DOWNGRADE"
              glib:nick="allow-downgrade"
              glib:name="PK_TRANSACTION_FLAG_ENUM_ALLOW_DOWNGRADE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="776">Allow packages to be downgraded</doc>
      </member>
      <member name="last"
              value="7"
              c:identifier="PK_TRANSACTION_FLAG_ENUM_LAST"
              glib:nick="last"
              glib:name="PK_TRANSACTION_FLAG_ENUM_LAST">
      </member>
      <function name="from_string"
                c:identifier="pk_transaction_flag_enum_from_string"
                version="0.8.1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="922">Converts a text enumerated type to its unsigned integer representation</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="845"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="928">the enumerated constant value, e.g. %PK_TRANSACTION_FLAG_ENUM_SIMULATE</doc>
          <type name="TransactionFlagEnum" c:type="PkTransactionFlagEnum"/>
        </return-value>
        <parameters>
          <parameter name="transaction_flag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="924">Text describing the enumerated type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_string"
                c:identifier="pk_transaction_flag_enum_to_string"
                version="0.8.1">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="938">Converts a enumerated type to its text representation</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="846"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="944">the enumerated constant value, e.g. "simulate"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="transaction_flag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="940">The enumerated type value</doc>
            <type name="TransactionFlagEnum" c:type="PkTransactionFlagEnum"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <class name="TransactionList"
           c:symbol-prefix="transaction_list"
           c:type="PkTransactionList"
           parent="GObject.Object"
           glib:type-name="PkTransactionList"
           glib:get-type="pk_transaction_list_get_type"
           glib:type-struct="TransactionListClass">
      <source-position filename="lib/packagekit-glib2/pk-transaction-list.h"
                       line="61"/>
      <constructor name="new"
                   c:identifier="pk_transaction_list_new"
                   version="0.5.3">
        <source-position filename="lib/packagekit-glib2/pk-transaction-list.h"
                         line="64"/>
        <return-value transfer-ownership="full">
          <type name="TransactionList" c:type="PkTransactionList*"/>
        </return-value>
      </constructor>
      <virtual-method name="added">
        <source-position filename="lib/packagekit-glib2/pk-transaction-list.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tlist" transfer-ownership="none">
            <type name="TransactionList" c:type="PkTransactionList*"/>
          </instance-parameter>
          <parameter name="tid" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="removed">
        <source-position filename="lib/packagekit-glib2/pk-transaction-list.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tlist" transfer-ownership="none">
            <type name="TransactionList" c:type="PkTransactionList*"/>
          </instance-parameter>
          <parameter name="tid" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_ids"
              c:identifier="pk_transaction_list_get_ids"
              version="0.5.3">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-transaction-list.c"
             line="181">Gets the string lists of transaction IDs recognised as pending, running or finished by the daemon.</doc>
        <source-position filename="lib/packagekit-glib2/pk-transaction-list.h"
                         line="66"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-transaction-list.c"
               line="187">the array of strings, free with g_strfreev()</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="tlist" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-transaction-list.c"
                 line="183">a valid #PkTransactionList instance</doc>
            <type name="TransactionList" c:type="PkTransactionList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="TransactionListPrivate"
              c:type="PkTransactionListPrivate*"/>
      </field>
      <glib:signal name="added" when="last">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-transaction-list.c"
             line="208">The ::added signal is emitted when a tid has been added to the transaction list</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="tid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-transaction-list.c"
                 line="211">the transaction id</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="removed" when="last">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-transaction-list.c"
             line="222">The ::removed signal is emitted when a tid has been removed from the transaction list</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="tid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-transaction-list.c"
                 line="225">the transaction id</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="TransactionListClass"
            c:type="PkTransactionListClass"
            glib:is-gtype-struct-for="TransactionList">
      <source-position filename="lib/packagekit-glib2/pk-transaction-list.h"
                       line="61"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="added">
        <callback name="added">
          <source-position filename="lib/packagekit-glib2/pk-transaction-list.h"
                           line="57"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tlist" transfer-ownership="none">
              <type name="TransactionList" c:type="PkTransactionList*"/>
            </parameter>
            <parameter name="tid" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="removed">
        <callback name="removed">
          <source-position filename="lib/packagekit-glib2/pk-transaction-list.h"
                           line="59"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tlist" transfer-ownership="none">
              <type name="TransactionList" c:type="PkTransactionList*"/>
            </parameter>
            <parameter name="tid" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="TransactionListPrivate"
            c:type="PkTransactionListPrivate"
            disguised="1"
            opaque="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-transaction-list.c"
           line="43">Private #PkTransactionList data</doc>
      <source-position filename="lib/packagekit-glib2/pk-transaction-list.h"
                       line="40"/>
    </record>
    <class name="TransactionPast"
           c:symbol-prefix="transaction_past"
           c:type="PkTransactionPast"
           parent="Source"
           glib:type-name="PkTransactionPast"
           glib:get-type="pk_transaction_past_get_type"
           glib:type-struct="TransactionPastClass">
      <source-position filename="lib/packagekit-glib2/pk-transaction-past.h"
                       line="66"/>
      <constructor name="new"
                   c:identifier="pk_transaction_past_new"
                   version="0.5.4">
        <source-position filename="lib/packagekit-glib2/pk-transaction-past.h"
                         line="69"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-transaction-past.c"
               line="465">a new #PkTransactionPast object.</doc>
          <type name="TransactionPast" c:type="PkTransactionPast*"/>
        </return-value>
      </constructor>
      <method name="get_cmdline"
              c:identifier="pk_transaction_past_get_cmdline"
              glib:get-property="cmdline"
              version="0.8.11">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-transaction-past.c"
             line="240">Gets the past transaction cmdline value;</doc>
        <source-position filename="lib/packagekit-glib2/pk-transaction-past.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-transaction-past.c"
               line="246">The transaction data</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="past" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-transaction-past.c"
                 line="242">a valid #PkTransactionPast instance</doc>
            <type name="TransactionPast" c:type="PkTransactionPast*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_data"
              c:identifier="pk_transaction_past_get_data"
              glib:get-property="data"
              version="0.8.11">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-transaction-past.c"
             line="206">Gets the past transaction data;</doc>
        <source-position filename="lib/packagekit-glib2/pk-transaction-past.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-transaction-past.c"
               line="212">The transaction data</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="past" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-transaction-past.c"
                 line="208">a valid #PkTransactionPast instance</doc>
            <type name="TransactionPast" c:type="PkTransactionPast*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_datetime"
              c:identifier="pk_transaction_past_get_datetime"
              version="0.8.11">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-transaction-past.c"
             line="110">Gets the past transaction date &amp; time value;</doc>
        <source-position filename="lib/packagekit-glib2/pk-transaction-past.h"
                         line="74"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-transaction-past.c"
               line="116">The transaction data, or %NULL if it's not available</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="past" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-transaction-past.c"
                 line="112">a valid #PkTransactionPast instance</doc>
            <type name="TransactionPast" c:type="PkTransactionPast*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_duration"
              c:identifier="pk_transaction_past_get_duration"
              glib:get-property="duration"
              version="0.8.11">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-transaction-past.c"
             line="189">Gets the past transaction duration;</doc>
        <source-position filename="lib/packagekit-glib2/pk-transaction-past.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-transaction-past.c"
               line="195">The transaction duration in ms</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="past" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-transaction-past.c"
                 line="191">a valid #PkTransactionPast instance</doc>
            <type name="TransactionPast" c:type="PkTransactionPast*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="pk_transaction_past_get_id"
              version="0.8.11">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-transaction-past.c"
             line="76">Gets the past transaction ID value;</doc>
        <source-position filename="lib/packagekit-glib2/pk-transaction-past.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-transaction-past.c"
               line="82">The transaction data</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="past" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-transaction-past.c"
                 line="78">a valid #PkTransactionPast instance</doc>
            <type name="TransactionPast" c:type="PkTransactionPast*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_role"
              c:identifier="pk_transaction_past_get_role"
              glib:get-property="role"
              version="0.8.11">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-transaction-past.c"
             line="172">Gets the past transaction role;</doc>
        <source-position filename="lib/packagekit-glib2/pk-transaction-past.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-transaction-past.c"
               line="178">The transaction data</doc>
          <type name="RoleEnum" c:type="PkRoleEnum"/>
        </return-value>
        <parameters>
          <instance-parameter name="past" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-transaction-past.c"
                 line="174">a valid #PkTransactionPast instance</doc>
            <type name="TransactionPast" c:type="PkTransactionPast*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_succeeded"
              c:identifier="pk_transaction_past_get_succeeded"
              glib:get-property="succeeded"
              version="0.8.11">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-transaction-past.c"
             line="155">Gets the past transaction succeeded value;</doc>
        <source-position filename="lib/packagekit-glib2/pk-transaction-past.h"
                         line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-transaction-past.c"
               line="161">The transaction data</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="past" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-transaction-past.c"
                 line="157">a valid #PkTransactionPast instance</doc>
            <type name="TransactionPast" c:type="PkTransactionPast*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_timespec"
              c:identifier="pk_transaction_past_get_timespec"
              glib:get-property="timespec"
              version="0.8.11">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-transaction-past.c"
             line="93">Gets the past transaction timespec value;</doc>
        <source-position filename="lib/packagekit-glib2/pk-transaction-past.h"
                         line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-transaction-past.c"
               line="99">The transaction data</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="past" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-transaction-past.c"
                 line="95">a valid #PkTransactionPast instance</doc>
            <type name="TransactionPast" c:type="PkTransactionPast*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_timestamp"
              c:identifier="pk_transaction_past_get_timestamp"
              version="0.8.11">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-transaction-past.c"
             line="129">Gets the past transaction timestamp</doc>
        <source-position filename="lib/packagekit-glib2/pk-transaction-past.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-transaction-past.c"
               line="135">The transaction data, or 0 if it's not available</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="past" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-transaction-past.c"
                 line="131">a valid #PkTransactionPast instance</doc>
            <type name="TransactionPast" c:type="PkTransactionPast*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uid"
              c:identifier="pk_transaction_past_get_uid"
              glib:get-property="uid"
              version="0.8.11">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-transaction-past.c"
             line="223">Gets the past transaction uid;</doc>
        <source-position filename="lib/packagekit-glib2/pk-transaction-past.h"
                         line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-transaction-past.c"
               line="229">The transaction data</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="past" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-transaction-past.c"
                 line="225">a valid #PkTransactionPast instance</doc>
            <type name="TransactionPast" c:type="PkTransactionPast*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="cmdline"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                getter="get_cmdline"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="data"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                getter="get_data"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="duration"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                getter="get_duration"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="role"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                getter="get_role"
                default-value="PK_ROLE_ENUM_UNKNOWN">
        <type name="RoleEnum"/>
      </property>
      <property name="succeeded"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                getter="get_succeeded"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="tid"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="timespec"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                getter="get_timespec"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="uid"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                getter="get_uid"
                default-value="4294967295">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="Source" c:type="PkSource"/>
      </field>
      <field name="priv">
        <type name="TransactionPastPrivate"
              c:type="PkTransactionPastPrivate*"/>
      </field>
    </class>
    <record name="TransactionPastClass"
            c:type="PkTransactionPastClass"
            glib:is-gtype-struct-for="TransactionPast">
      <source-position filename="lib/packagekit-glib2/pk-transaction-past.h"
                       line="66"/>
      <field name="parent_class">
        <type name="SourceClass" c:type="PkSourceClass"/>
      </field>
      <field name="_pk_reserved1" introspectable="0">
        <callback name="_pk_reserved1">
          <source-position filename="lib/packagekit-glib2/pk-transaction-past.h"
                           line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved2" introspectable="0">
        <callback name="_pk_reserved2">
          <source-position filename="lib/packagekit-glib2/pk-transaction-past.h"
                           line="62"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved3" introspectable="0">
        <callback name="_pk_reserved3">
          <source-position filename="lib/packagekit-glib2/pk-transaction-past.h"
                           line="63"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved4" introspectable="0">
        <callback name="_pk_reserved4">
          <source-position filename="lib/packagekit-glib2/pk-transaction-past.h"
                           line="64"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved5" introspectable="0">
        <callback name="_pk_reserved5">
          <source-position filename="lib/packagekit-glib2/pk-transaction-past.h"
                           line="65"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="TransactionPastPrivate"
            c:type="PkTransactionPastPrivate"
            disguised="1"
            opaque="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-transaction-past.c"
           line="44">Private #PkTransactionPast data</doc>
      <source-position filename="lib/packagekit-glib2/pk-transaction-past.h"
                       line="43"/>
    </record>
    <function-macro name="UPDATE_DETAIL"
                    c:identifier="PK_UPDATE_DETAIL"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-update-detail.h"
                       line="37"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="UPDATE_DETAIL_CLASS"
                    c:identifier="PK_UPDATE_DETAIL_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-update-detail.h"
                       line="38"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="UPDATE_DETAIL_GET_CLASS"
                    c:identifier="PK_UPDATE_DETAIL_GET_CLASS"
                    introspectable="0">
      <source-position filename="lib/packagekit-glib2/pk-update-detail.h"
                       line="41"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <class name="UpdateDetail"
           c:symbol-prefix="update_detail"
           c:type="PkUpdateDetail"
           parent="Source"
           glib:type-name="PkUpdateDetail"
           glib:get-type="pk_update_detail_get_type"
           glib:type-struct="UpdateDetailClass">
      <source-position filename="lib/packagekit-glib2/pk-update-detail.h"
                       line="66"/>
      <constructor name="new"
                   c:identifier="pk_update_detail_new"
                   version="0.5.4">
        <source-position filename="lib/packagekit-glib2/pk-update-detail.h"
                         line="69"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-update-detail.c"
               line="569">a new #PkUpdateDetail object.</doc>
          <type name="UpdateDetail" c:type="PkUpdateDetail*"/>
        </return-value>
      </constructor>
      <method name="get_bugzilla_urls"
              c:identifier="pk_update_detail_get_bugzilla_urls"
              glib:get-property="bugzilla-urls"
              version="0.8.8">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-update-detail.c"
             line="149">Gets the update detail bugzilla URLs.</doc>
        <source-position filename="lib/packagekit-glib2/pk-update-detail.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-update-detail.c"
               line="155">string values</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="update_detail" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-update-detail.c"
                 line="151">a #PkUpdateDetail instance</doc>
            <type name="UpdateDetail" c:type="PkUpdateDetail*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_changelog"
              c:identifier="pk_update_detail_get_changelog"
              glib:get-property="changelog"
              version="0.8.8">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-update-detail.c"
             line="217">Gets the update detail changelog.</doc>
        <source-position filename="lib/packagekit-glib2/pk-update-detail.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-update-detail.c"
               line="223">string values</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="update_detail" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-update-detail.c"
                 line="219">a #PkUpdateDetail instance</doc>
            <type name="UpdateDetail" c:type="PkUpdateDetail*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cve_urls"
              c:identifier="pk_update_detail_get_cve_urls"
              glib:get-property="cve-urls"
              version="0.8.8">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-update-detail.c"
             line="166">Gets the update detail CVE URLs.</doc>
        <source-position filename="lib/packagekit-glib2/pk-update-detail.h"
                         line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-update-detail.c"
               line="172">string values</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="update_detail" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-update-detail.c"
                 line="168">a #PkUpdateDetail instance</doc>
            <type name="UpdateDetail" c:type="PkUpdateDetail*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_issued"
              c:identifier="pk_update_detail_get_issued"
              glib:get-property="issued"
              version="0.8.8">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-update-detail.c"
             line="251">Gets the update detail issued string.</doc>
        <source-position filename="lib/packagekit-glib2/pk-update-detail.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-update-detail.c"
               line="257">string values</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="update_detail" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-update-detail.c"
                 line="253">a #PkUpdateDetail instance</doc>
            <type name="UpdateDetail" c:type="PkUpdateDetail*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_obsoletes"
              c:identifier="pk_update_detail_get_obsoletes"
              glib:get-property="obsoletes"
              version="0.8.8">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-update-detail.c"
             line="115">Gets the update detail obsoletes IDs.</doc>
        <source-position filename="lib/packagekit-glib2/pk-update-detail.h"
                         line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-update-detail.c"
               line="121">string values</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="update_detail" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-update-detail.c"
                 line="117">a #PkUpdateDetail instance</doc>
            <type name="UpdateDetail" c:type="PkUpdateDetail*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_package_id"
              c:identifier="pk_update_detail_get_package_id"
              glib:get-property="package-id"
              version="0.8.8">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-update-detail.c"
             line="81">Gets the update detail package ID.</doc>
        <source-position filename="lib/packagekit-glib2/pk-update-detail.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-update-detail.c"
               line="87">string values</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="update_detail" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-update-detail.c"
                 line="83">a #PkUpdateDetail instance</doc>
            <type name="UpdateDetail" c:type="PkUpdateDetail*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_restart"
              c:identifier="pk_update_detail_get_restart"
              glib:get-property="restart"
              version="0.8.8">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-update-detail.c"
             line="183">Gets the update detail restart kind.</doc>
        <source-position filename="lib/packagekit-glib2/pk-update-detail.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-update-detail.c"
               line="189">enum values</doc>
          <type name="RestartEnum" c:type="PkRestartEnum"/>
        </return-value>
        <parameters>
          <instance-parameter name="update_detail" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-update-detail.c"
                 line="185">a #PkUpdateDetail instance</doc>
            <type name="UpdateDetail" c:type="PkUpdateDetail*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state"
              c:identifier="pk_update_detail_get_state"
              glib:get-property="state"
              version="0.8.8">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-update-detail.c"
             line="234">Gets the update detail state.</doc>
        <source-position filename="lib/packagekit-glib2/pk-update-detail.h"
                         line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-update-detail.c"
               line="240">enum value</doc>
          <type name="UpdateStateEnum" c:type="PkUpdateStateEnum"/>
        </return-value>
        <parameters>
          <instance-parameter name="update_detail" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-update-detail.c"
                 line="236">a #PkUpdateDetail instance</doc>
            <type name="UpdateDetail" c:type="PkUpdateDetail*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_update_text"
              c:identifier="pk_update_detail_get_update_text"
              glib:get-property="update-text"
              version="0.8.8">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-update-detail.c"
             line="200">Gets the update detail update text.</doc>
        <source-position filename="lib/packagekit-glib2/pk-update-detail.h"
                         line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-update-detail.c"
               line="206">string values</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="update_detail" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-update-detail.c"
                 line="202">a #PkUpdateDetail instance</doc>
            <type name="UpdateDetail" c:type="PkUpdateDetail*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_updated"
              c:identifier="pk_update_detail_get_updated"
              glib:get-property="updated"
              version="0.8.8">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-update-detail.c"
             line="268">Gets the update detail updated string.</doc>
        <source-position filename="lib/packagekit-glib2/pk-update-detail.h"
                         line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-update-detail.c"
               line="274">string values</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="update_detail" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-update-detail.c"
                 line="270">a #PkUpdateDetail instance</doc>
            <type name="UpdateDetail" c:type="PkUpdateDetail*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_updates"
              c:identifier="pk_update_detail_get_updates"
              glib:get-property="updates"
              version="0.8.8">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-update-detail.c"
             line="98">Gets the update detail updates IDs.</doc>
        <source-position filename="lib/packagekit-glib2/pk-update-detail.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-update-detail.c"
               line="104">string values</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="update_detail" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-update-detail.c"
                 line="100">a #PkUpdateDetail instance</doc>
            <type name="UpdateDetail" c:type="PkUpdateDetail*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vendor_urls"
              c:identifier="pk_update_detail_get_vendor_urls"
              glib:get-property="vendor-urls"
              version="0.8.8">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-update-detail.c"
             line="132">Gets the update detail vendor URLs.</doc>
        <source-position filename="lib/packagekit-glib2/pk-update-detail.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-update-detail.c"
               line="138">string values</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="update_detail" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-update-detail.c"
                 line="134">a #PkUpdateDetail instance</doc>
            <type name="UpdateDetail" c:type="PkUpdateDetail*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="bugzilla-urls"
                version="0.8.1"
                writable="1"
                transfer-ownership="none"
                getter="get_bugzilla_urls">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="changelog"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                getter="get_changelog"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="cve-urls"
                version="0.8.1"
                writable="1"
                transfer-ownership="none"
                getter="get_cve_urls">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="issued"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                getter="get_issued"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="obsoletes"
                version="0.8.1"
                writable="1"
                transfer-ownership="none"
                getter="get_obsoletes">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="package-id"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                getter="get_package_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="restart"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                getter="get_restart"
                default-value="PK_RESTART_ENUM_UNKNOWN">
        <type name="RestartEnum"/>
      </property>
      <property name="state"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                getter="get_state"
                default-value="PK_UPDATE_STATE_ENUM_UNKNOWN">
        <type name="UpdateStateEnum"/>
      </property>
      <property name="update-text"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                getter="get_update_text"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="updated"
                version="0.5.4"
                writable="1"
                transfer-ownership="none"
                getter="get_updated"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="updates"
                version="0.8.1"
                writable="1"
                transfer-ownership="none"
                getter="get_updates">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="vendor-urls"
                version="0.8.1"
                writable="1"
                transfer-ownership="none"
                getter="get_vendor_urls">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <field name="parent">
        <type name="Source" c:type="PkSource"/>
      </field>
      <field name="priv">
        <type name="UpdateDetailPrivate" c:type="PkUpdateDetailPrivate*"/>
      </field>
    </class>
    <record name="UpdateDetailClass"
            c:type="PkUpdateDetailClass"
            glib:is-gtype-struct-for="UpdateDetail">
      <source-position filename="lib/packagekit-glib2/pk-update-detail.h"
                       line="66"/>
      <field name="parent_class">
        <type name="SourceClass" c:type="PkSourceClass"/>
      </field>
      <field name="_pk_reserved1" introspectable="0">
        <callback name="_pk_reserved1">
          <source-position filename="lib/packagekit-glib2/pk-update-detail.h"
                           line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved2" introspectable="0">
        <callback name="_pk_reserved2">
          <source-position filename="lib/packagekit-glib2/pk-update-detail.h"
                           line="62"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved3" introspectable="0">
        <callback name="_pk_reserved3">
          <source-position filename="lib/packagekit-glib2/pk-update-detail.h"
                           line="63"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved4" introspectable="0">
        <callback name="_pk_reserved4">
          <source-position filename="lib/packagekit-glib2/pk-update-detail.h"
                           line="64"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pk_reserved5" introspectable="0">
        <callback name="_pk_reserved5">
          <source-position filename="lib/packagekit-glib2/pk-update-detail.h"
                           line="65"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="UpdateDetailPrivate"
            c:type="PkUpdateDetailPrivate"
            disguised="1"
            opaque="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-update-detail.c"
           line="42">Private #PkUpdateDetail data</doc>
      <source-position filename="lib/packagekit-glib2/pk-update-detail.h"
                       line="43"/>
    </record>
    <enumeration name="UpdateStateEnum"
                 glib:type-name="PkUpdateStateEnum"
                 glib:get-type="pk_update_state_enum_get_type"
                 c:type="PkUpdateStateEnum">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.h"
           line="601">What state the update is in</doc>
      <member name="unknown"
              value="0"
              c:identifier="PK_UPDATE_STATE_ENUM_UNKNOWN"
              glib:nick="unknown"
              glib:name="PK_UPDATE_STATE_ENUM_UNKNOWN">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="603">Update stability unknown</doc>
      </member>
      <member name="stable"
              value="1"
              c:identifier="PK_UPDATE_STATE_ENUM_STABLE"
              glib:nick="stable"
              glib:name="PK_UPDATE_STATE_ENUM_STABLE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="604">Update is a stable release</doc>
      </member>
      <member name="unstable"
              value="2"
              c:identifier="PK_UPDATE_STATE_ENUM_UNSTABLE"
              glib:nick="unstable"
              glib:name="PK_UPDATE_STATE_ENUM_UNSTABLE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="605">Update is an unstable release</doc>
      </member>
      <member name="testing"
              value="3"
              c:identifier="PK_UPDATE_STATE_ENUM_TESTING"
              glib:nick="testing"
              glib:name="PK_UPDATE_STATE_ENUM_TESTING">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="606">Update is a testing release</doc>
      </member>
      <member name="last"
              value="4"
              c:identifier="PK_UPDATE_STATE_ENUM_LAST"
              glib:nick="last"
              glib:name="PK_UPDATE_STATE_ENUM_LAST">
      </member>
      <function name="from_string"
                c:identifier="pk_update_state_enum_from_string"
                version="0.5.0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="762">Converts a text enumerated type to its unsigned integer representation</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="806"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="768">the enumerated constant value, e.g. %PK_UPDATE_STATE_ENUM_STABLE</doc>
          <type name="UpdateStateEnum" c:type="PkUpdateStateEnum"/>
        </return-value>
        <parameters>
          <parameter name="update_state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="764">Text describing the enumerated type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_string"
                c:identifier="pk_update_state_enum_to_string"
                version="0.5.0">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="778">Converts a enumerated type to its text representation</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="807"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="784">the enumerated constant value, e.g. "testing"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="update_state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="780">The enumerated type value</doc>
            <type name="UpdateStateEnum" c:type="PkUpdateStateEnum"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <enumeration name="UpgradeKindEnum"
                 glib:type-name="PkUpgradeKindEnum"
                 glib:get-type="pk_upgrade_kind_enum_get_type"
                 c:type="PkUpgradeKindEnum">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.h"
           line="750">The type of distribution upgrade to perform</doc>
      <member name="unknown"
              value="0"
              c:identifier="PK_UPGRADE_KIND_ENUM_UNKNOWN"
              glib:nick="unknown"
              glib:name="PK_UPGRADE_KIND_ENUM_UNKNOWN">
      </member>
      <member name="minimal"
              value="1"
              c:identifier="PK_UPGRADE_KIND_ENUM_MINIMAL"
              glib:nick="minimal"
              glib:name="PK_UPGRADE_KIND_ENUM_MINIMAL">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="753">Perform minimal upgrade</doc>
      </member>
      <member name="default"
              value="2"
              c:identifier="PK_UPGRADE_KIND_ENUM_DEFAULT"
              glib:nick="default"
              glib:name="PK_UPGRADE_KIND_ENUM_DEFAULT">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="754">Perform default upgrade</doc>
      </member>
      <member name="complete"
              value="3"
              c:identifier="PK_UPGRADE_KIND_ENUM_COMPLETE"
              glib:nick="complete"
              glib:name="PK_UPGRADE_KIND_ENUM_COMPLETE">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.h"
             line="755">Perform complete upgrade</doc>
      </member>
      <member name="last"
              value="4"
              c:identifier="PK_UPGRADE_KIND_ENUM_LAST"
              glib:nick="last"
              glib:name="PK_UPGRADE_KIND_ENUM_LAST">
      </member>
      <function name="from_string"
                c:identifier="pk_upgrade_kind_enum_from_string"
                version="0.6.11">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="890">Converts a text enumerated type to its unsigned integer representation</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="842"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="896">the enumerated constant value, e.g. %PK_UPGRADE_KIND_ENUM_MINIMAL</doc>
          <type name="UpgradeKindEnum" c:type="PkUpgradeKindEnum"/>
        </return-value>
        <parameters>
          <parameter name="upgrade_kind" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="892">Text describing the enumerated type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_string"
                c:identifier="pk_upgrade_kind_enum_to_string"
                version="0.6.11">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="906">Converts a enumerated type to its text representation</doc>
        <source-position filename="lib/packagekit-glib2/pk-enum.h" line="843"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="912">the enumerated constant value, e.g. "minimal"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="upgrade_kind" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/packagekit-glib2/pk-enum.c"
                 line="908">The enumerated type value</doc>
            <type name="UpgradeKindEnum" c:type="PkUpgradeKindEnum"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <function name="authorize_type_enum_from_string"
              c:identifier="pk_authorize_type_enum_from_string"
              version="0.5.0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="858">Converts a text enumerated type to its unsigned integer representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="839"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="864">the enumerated constant value, e.g. %PK_AUTHORIZE_ENUM_YES</doc>
        <type name="AuthorizeEnum" c:type="PkAuthorizeEnum"/>
      </return-value>
      <parameters>
        <parameter name="authorize_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="860">Text describing the enumerated type</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="authorize_type_enum_to_string"
              c:identifier="pk_authorize_type_enum_to_string"
              version="0.5.0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="874">Converts a enumerated type to its text representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="840"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="880">the enumerated constant value, e.g. "yes"</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="authorize_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="876">The enumerated type value</doc>
          <type name="AuthorizeEnum" c:type="PkAuthorizeEnum"/>
        </parameter>
      </parameters>
    </function>
    <function-macro name="bitfield_add"
                    c:identifier="pk_bitfield_add"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-bitfield.h"
           line="49">Set a value in a bitfield</doc>
      <source-position filename="lib/packagekit-glib2/pk-bitfield.h"
                       line="56"/>
      <parameters>
        <parameter name="bitfield">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-bitfield.h"
               line="51">a #PkBitfield</doc>
        </parameter>
        <parameter name="enum">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-bitfield.h"
               line="52">value to add</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="bitfield_contain"
                    c:identifier="pk_bitfield_contain"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-bitfield.h"
           line="76">Check if a bitfield contains a value</doc>
      <source-position filename="lib/packagekit-glib2/pk-bitfield.h"
                       line="85"/>
      <parameters>
        <parameter name="bitfield">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-bitfield.h"
               line="78">a #PkBitfield</doc>
        </parameter>
        <parameter name="enum">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-bitfield.h"
               line="79">value to check</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function name="bitfield_contain_priority"
              c:identifier="pk_bitfield_contain_priority"
              version="0.5.2"
              introspectable="0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-bitfield.c"
           line="36">Finds elements in a list, but with priority going to the preceeding entry</doc>
      <source-position filename="lib/packagekit-glib2/pk-bitfield.h"
                       line="97"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-bitfield.c"
             line="44">The return enumerated type, or -1 if none are found</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-bitfield.c"
               line="38">a valid bitfield instance</doc>
          <type name="Bitfield" c:type="PkBitfield"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-bitfield.c"
               line="39">the first value we are searching for</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-bitfield.c"
               line="40">additional values to search for, terminated by -1</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="bitfield_from_enums"
              c:identifier="pk_bitfield_from_enums"
              version="0.5.2"
              introspectable="0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-bitfield.c"
           line="78">Create a bitfield with the suppied values set.</doc>
      <source-position filename="lib/packagekit-glib2/pk-bitfield.h"
                       line="99"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-bitfield.c"
             line="85">a #PkBitfield, or 0 if invalid</doc>
        <type name="Bitfield" c:type="PkBitfield"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-bitfield.c"
               line="80">the first value we want to add to the bitfield</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-bitfield.c"
               line="81">other values to add, terminated by -1</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function-macro name="bitfield_invert"
                    c:identifier="pk_bitfield_invert"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-bitfield.h"
           line="67">Invert a value in a bitfield</doc>
      <source-position filename="lib/packagekit-glib2/pk-bitfield.h"
                       line="74"/>
      <parameters>
        <parameter name="bitfield">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-bitfield.h"
               line="69">a #PkBitfield</doc>
        </parameter>
        <parameter name="enum">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-bitfield.h"
               line="70">value to invert</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="bitfield_remove"
                    c:identifier="pk_bitfield_remove"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-bitfield.h"
           line="58">Remove a value from a bitfield</doc>
      <source-position filename="lib/packagekit-glib2/pk-bitfield.h"
                       line="65"/>
      <parameters>
        <parameter name="bitfield">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-bitfield.h"
               line="60">a #PkBitfield</doc>
        </parameter>
        <parameter name="enum">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-bitfield.h"
               line="61">value to remove</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="bitfield_value"
                    c:identifier="pk_bitfield_value"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-bitfield.h"
           line="87">Convert an enumerated value to a bitfield value</doc>
      <source-position filename="lib/packagekit-glib2/pk-bitfield.h"
                       line="95"/>
      <parameters>
        <parameter name="enum">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-bitfield.h"
               line="89">enumerated valued to convert</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function name="client_error_quark"
              c:identifier="pk_client_error_quark"
              moved-to="ClientError.quark"
              version="0.5.2">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-client.c"
           line="400">An error quark for #PkClientError.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-client.c"
             line="405">an error quark.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="control_error_quark"
              c:identifier="pk_control_error_quark"
              moved-to="ControlError.quark"
              version="0.5.2">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-control.c"
           line="125">We are a GObject that sets errors</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-control.c"
             line="130">Our personal error quark.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="debug_add_log_domain"
              c:identifier="pk_debug_add_log_domain">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-debug.c"
           line="151">Add a log domain to the debug output.</doc>
      <source-position filename="lib/packagekit-glib2/pk-debug.h" line="35"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="log_domain" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-debug.c"
               line="153">a log domain</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_get_option_group"
              c:identifier="pk_debug_get_option_group"
              introspectable="0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-debug.c"
           line="202">Returns a #GOptionGroup for the commandline arguments recognized
by debugging. You should add this group to your #GOptionContext
with g_option_context_add_group(), if you are using
g_option_context_parse() to parse your commandline arguments.</doc>
      <source-position filename="lib/packagekit-glib2/pk-debug.h" line="34"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-debug.c"
             line="210">a #GOptionGroup for the commandline arguments</doc>
        <type name="GLib.OptionGroup" c:type="GOptionGroup*"/>
      </return-value>
    </function>
    <function name="debug_is_verbose" c:identifier="pk_debug_is_verbose">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-debug.c"
           line="33">Check if verbose debugging is enabled.</doc>
      <source-position filename="lib/packagekit-glib2/pk-debug.h" line="33"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-debug.c"
             line="38">%TRUE if we have debugging enabled</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="debug_set_verbose" c:identifier="pk_debug_set_verbose">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-debug.c"
           line="176">Set if verbose debugging is enabled.</doc>
      <source-position filename="lib/packagekit-glib2/pk-debug.h" line="36"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="verbose" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-debug.c"
               line="178">%TRUE if verbose debugging should be enabled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="distro_upgrade_enum_from_string"
              c:identifier="pk_distro_upgrade_enum_from_string"
              moved-to="DistroUpgradeEnum.from_string"
              version="0.5.0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="474">Converts a text enumerated type to its unsigned integer representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="833"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="480">the enumerated constant value, e.g. PK_DISTRO_UPGRADE_ENUM_STABLE</doc>
        <type name="DistroUpgradeEnum" c:type="PkDistroUpgradeEnum"/>
      </return-value>
      <parameters>
        <parameter name="upgrade" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="476">Text describing the enumerated type</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="distro_upgrade_enum_to_string"
              c:identifier="pk_distro_upgrade_enum_to_string"
              moved-to="DistroUpgradeEnum.to_string"
              version="0.5.0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="490">Converts a enumerated type to its text representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="834"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="496">the enumerated constant value, e.g. "stable"</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="upgrade" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="492">The enumerated type value</doc>
          <type name="DistroUpgradeEnum" c:type="PkDistroUpgradeEnum"/>
        </parameter>
      </parameters>
    </function>
    <function name="enum_find_string" c:identifier="pk_enum_find_string">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="417">Search for a enum value in a table of constants.</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="796"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="424">the string constant, e.g. "desktop-gnome"</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="table" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="419">A #PkEnumMatch enum table of values</doc>
          <type name="EnumMatch" c:type="const PkEnumMatch*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="420">the enumerated constant value, e.g. PK_SIGTYPE_ENUM_GPG</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="enum_find_value" c:identifier="pk_enum_find_value">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="387">Search for a string value in a table of constants.</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="793"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="394">the enumerated constant value, e.g. PK_SIGTYPE_ENUM_GPG</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="table" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="389">A #PkEnumMatch enum table of values</doc>
          <type name="EnumMatch" c:type="const PkEnumMatch*"/>
        </parameter>
        <parameter name="string" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="390">the string constant to search for, e.g. "desktop-gnome"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="error_enum_from_string"
              c:identifier="pk_error_enum_from_string"
              moved-to="ErrorEnum.from_string"
              version="0.5.0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="666">Converts a text enumerated type to its unsigned integer representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="821"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="672">the enumerated constant value, e.g. PK_SIGTYPE_ENUM_GPG</doc>
        <type name="ErrorEnum" c:type="PkErrorEnum"/>
      </return-value>
      <parameters>
        <parameter name="code" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="668">Text describing the enumerated type</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="error_enum_to_string"
              c:identifier="pk_error_enum_to_string"
              moved-to="ErrorEnum.to_string"
              version="0.5.0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="682">Converts a enumerated type to its text representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="822"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="688">the enumerated constant value, e.g. "available"</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="code" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="684">The enumerated type value</doc>
          <type name="ErrorEnum" c:type="PkErrorEnum"/>
        </parameter>
      </parameters>
    </function>
    <function name="exit_enum_from_string"
              c:identifier="pk_exit_enum_from_string"
              moved-to="ExitEnum.from_string"
              version="0.5.0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="538">Converts a text enumerated type to its unsigned integer representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="809"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="544">the enumerated constant value, e.g. PK_SIGTYPE_ENUM_GPG</doc>
        <type name="ExitEnum" c:type="PkExitEnum"/>
      </return-value>
      <parameters>
        <parameter name="exit" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="540">Text describing the enumerated type</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="exit_enum_to_string"
              c:identifier="pk_exit_enum_to_string"
              moved-to="ExitEnum.to_string"
              version="0.5.0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="554">Converts a enumerated type to its text representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="810"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="560">the enumerated constant value, e.g. "available"</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="exit" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="556">The enumerated type value</doc>
          <type name="ExitEnum" c:type="PkExitEnum"/>
        </parameter>
      </parameters>
    </function>
    <function name="filter_bitfield_from_string"
              c:identifier="pk_filter_bitfield_from_string"
              version="0.5.2">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-bitfield.c"
           line="284">Converts text representation to its enumerated type bitfield, or 0 for invalid</doc>
      <source-position filename="lib/packagekit-glib2/pk-bitfield.h"
                       line="104"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-bitfield.c"
             line="290">The enumerated type values</doc>
        <type name="Bitfield" c:type="PkBitfield"/>
      </return-value>
      <parameters>
        <parameter name="filters" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-bitfield.c"
               line="286">the enumerated constant value, e.g. "available;~gui"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="filter_bitfield_to_string"
              c:identifier="pk_filter_bitfield_to_string"
              version="0.5.2">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-bitfield.c"
           line="247">Converts a enumerated type bitfield to its text representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-bitfield.h"
                       line="105"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-bitfield.c"
             line="253">the enumerated constant value, e.g. "available;~gui"</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="filters" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-bitfield.c"
               line="249">The enumerated type values</doc>
          <type name="Bitfield" c:type="PkBitfield"/>
        </parameter>
      </parameters>
    </function>
    <function name="filter_enum_from_string"
              c:identifier="pk_filter_enum_from_string"
              moved-to="FilterEnum.from_string"
              version="0.5.0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="794">Converts a text enumerated type to its unsigned integer representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="830"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="800">the enumerated constant value, e.g. PK_SIGTYPE_ENUM_GPG</doc>
        <type name="FilterEnum" c:type="PkFilterEnum"/>
      </return-value>
      <parameters>
        <parameter name="filter" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="796">Text describing the enumerated type</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="filter_enum_to_string"
              c:identifier="pk_filter_enum_to_string"
              moved-to="FilterEnum.to_string"
              version="0.5.0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="810">Converts a enumerated type to its text representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="831"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="816">the enumerated constant value, e.g. "available"</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="filter" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="812">The enumerated type value</doc>
          <type name="FilterEnum" c:type="PkFilterEnum"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_distro_id" c:identifier="pk_get_distro_id">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-common.c"
           line="294">Get the distribution ID for the current host, typically "distro;version;arch"</doc>
      <source-position filename="lib/packagekit-glib2/pk-common.h" line="97"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-common.c"
             line="299">a distribution ID</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="group_bitfield_from_string"
              c:identifier="pk_group_bitfield_from_string"
              version="0.5.2">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-bitfield.c"
           line="213">Converts text representation to its enumerated type bitfield</doc>
      <source-position filename="lib/packagekit-glib2/pk-bitfield.h"
                       line="102"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-bitfield.c"
             line="219">The enumerated type values, or 0 for invalid</doc>
        <type name="Bitfield" c:type="PkBitfield"/>
      </return-value>
      <parameters>
        <parameter name="groups" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-bitfield.c"
               line="215">the enumerated constant value, e.g. "available;~gui"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="group_bitfield_to_string"
              c:identifier="pk_group_bitfield_to_string"
              version="0.5.2">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-bitfield.c"
           line="180">Converts a enumerated type bitfield to its text representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-bitfield.h"
                       line="103"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-bitfield.c"
             line="186">the enumerated constant value, e.g. "gnome;kde"</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="groups" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-bitfield.c"
               line="182">The enumerated type values</doc>
          <type name="Bitfield" c:type="PkBitfield"/>
        </parameter>
      </parameters>
    </function>
    <function name="group_enum_from_string"
              c:identifier="pk_group_enum_from_string"
              moved-to="GroupEnum.from_string"
              version="0.5.0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="730">Converts a text enumerated type to its unsigned integer representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="827"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="736">the enumerated constant value, e.g. PK_SIGTYPE_ENUM_GPG</doc>
        <type name="GroupEnum" c:type="PkGroupEnum"/>
      </return-value>
      <parameters>
        <parameter name="group" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="732">Text describing the enumerated type</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="group_enum_to_string"
              c:identifier="pk_group_enum_to_string"
              moved-to="GroupEnum.to_string"
              version="0.5.0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="746">Converts a enumerated type to its text representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="828"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="752">the enumerated constant value, e.g. "available"</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="group" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="748">The enumerated type value</doc>
          <type name="GroupEnum" c:type="PkGroupEnum"/>
        </parameter>
      </parameters>
    </function>
    <function name="info_enum_from_string"
              c:identifier="pk_info_enum_from_string"
              moved-to="InfoEnum.from_string"
              version="0.5.0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="506">Converts a text enumerated type to its unsigned integer representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="803"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="512">the enumerated constant value, e.g. PK_SIGTYPE_ENUM_GPG</doc>
        <type name="InfoEnum" c:type="PkInfoEnum"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="508">Text describing the enumerated type</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="info_enum_to_localised_past"
              c:identifier="pk_info_enum_to_localised_past"
              moved-to="InfoEnum.to_localised_past"
              version="0.7.2">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="1066">Converts a enumerated type to its localized description</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="849"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="1072">the translated text</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="1068">The enumerated type value</doc>
          <type name="InfoEnum" c:type="PkInfoEnum"/>
        </parameter>
      </parameters>
    </function>
    <function name="info_enum_to_localised_present"
              c:identifier="pk_info_enum_to_localised_present"
              moved-to="InfoEnum.to_localised_present"
              version="0.7.2">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="1017">Converts a enumerated type to its localized description</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="850"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="1023">the translated text</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="1019">The enumerated type value</doc>
          <type name="InfoEnum" c:type="PkInfoEnum"/>
        </parameter>
      </parameters>
    </function>
    <function name="info_enum_to_string"
              c:identifier="pk_info_enum_to_string"
              moved-to="InfoEnum.to_string"
              version="0.5.0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="522">Converts a enumerated type to its text representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="804"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="528">the enumerated constant value, e.g. "available"</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="524">The enumerated type value</doc>
          <type name="InfoEnum" c:type="PkInfoEnum"/>
        </parameter>
      </parameters>
    </function>
    <function name="iso8601_from_date"
              c:identifier="pk_iso8601_from_date"
              version="0.5.2">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-common.c"
           line="65">Convert a date into an ISO8601 data string.</doc>
      <source-position filename="lib/packagekit-glib2/pk-common.h" line="94"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-common.c"
             line="71">If valid then a new ISO8601 date, else %NULL</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="date" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-common.c"
               line="67">a #GDate to convert</doc>
          <type name="GLib.Date" c:type="const GDate*"/>
        </parameter>
      </parameters>
    </function>
    <function name="iso8601_present"
              c:identifier="pk_iso8601_present"
              version="0.5.2">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-common.c"
           line="43">Get the current date / time as an ISO8601 string.</doc>
      <source-position filename="lib/packagekit-glib2/pk-common.h" line="92"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-common.c"
             line="48">The current iso8601 date and time</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="iso8601_to_date"
              c:identifier="pk_iso8601_to_date"
              version="0.5.2"
              introspectable="0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-common.c"
           line="89">Convert an ISO8601 date string to a #GDate.</doc>
      <source-position filename="lib/packagekit-glib2/pk-common.h" line="95"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-common.c"
             line="95">If valid then a new %GDate, else NULL</doc>
        <type name="GLib.Date" c:type="GDate*"/>
      </return-value>
      <parameters>
        <parameter name="iso_date" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-common.c"
               line="91">The ISO8601 date to convert</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="iso8601_to_datetime"
              c:identifier="pk_iso8601_to_datetime"
              version="0.8.11"
              introspectable="0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-common.c"
           line="141">Convert an ISO8601 date string to a #GDateTime.</doc>
      <source-position filename="lib/packagekit-glib2/pk-common.h" line="96"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-common.c"
             line="147">If valid then a new %GDateTime, else NULL</doc>
        <type name="GLib.DateTime" c:type="GDateTime*"/>
      </return-value>
      <parameters>
        <parameter name="iso_date" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-common.c"
               line="143">The ISO8601 date to convert</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="media_type_enum_from_string"
              c:identifier="pk_media_type_enum_from_string"
              moved-to="MediaTypeEnum.from_string"
              version="0.5.0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="826">Converts a text enumerated type to its unsigned integer representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="836"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="832">the enumerated constant value, e.g. PK_MEDIA_TYPE_ENUM_CD</doc>
        <type name="MediaTypeEnum" c:type="PkMediaTypeEnum"/>
      </return-value>
      <parameters>
        <parameter name="media_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="828">Text describing the enumerated type</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="media_type_enum_to_string"
              c:identifier="pk_media_type_enum_to_string"
              moved-to="MediaTypeEnum.to_string"
              version="0.5.0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="842">Converts a enumerated type to its text representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="837"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="848">the enumerated constant value, e.g. "dvd"</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="media_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="844">The enumerated type value</doc>
          <type name="MediaTypeEnum" c:type="PkMediaTypeEnum"/>
        </parameter>
      </parameters>
    </function>
    <function name="network_enum_from_string"
              c:identifier="pk_network_enum_from_string"
              moved-to="NetworkEnum.from_string"
              version="0.5.0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="570">Converts a text enumerated type to its unsigned integer representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="812"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="576">the enumerated constant value, e.g. PK_SIGTYPE_ENUM_GPG</doc>
        <type name="NetworkEnum" c:type="PkNetworkEnum"/>
      </return-value>
      <parameters>
        <parameter name="network" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="572">Text describing the enumerated type</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="network_enum_to_string"
              c:identifier="pk_network_enum_to_string"
              moved-to="NetworkEnum.to_string"
              version="0.5.0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="586">Converts a enumerated type to its text representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="813"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="592">the enumerated constant value, e.g. "available"</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="network" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="588">The enumerated type value</doc>
          <type name="NetworkEnum" c:type="PkNetworkEnum"/>
        </parameter>
      </parameters>
    </function>
    <function name="offline_action_from_string"
              c:identifier="pk_offline_action_from_string"
              moved-to="OfflineAction.from_string"
              version="0.9.6">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-offline.c"
           line="74">Converts the string to the enumerated value.</doc>
      <source-position filename="lib/packagekit-glib2/pk-offline.h" line="91"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.c"
             line="80">A #PkOfflineAction, or %PK_OFFLINE_ACTION_UNKNOWN for invalid</doc>
        <type name="OfflineAction" c:type="PkOfflineAction"/>
      </return-value>
      <parameters>
        <parameter name="action" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-offline.c"
               line="76">a string representation of a #PkOfflineAction, e.g. "reboot"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="offline_action_to_string"
              c:identifier="pk_offline_action_to_string"
              moved-to="OfflineAction.to_string"
              version="0.9.6">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-offline.c"
           line="50">Converts the enumerated value to a string.</doc>
      <source-position filename="lib/packagekit-glib2/pk-offline.h" line="90"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.c"
             line="56">string value, or %NULL for invalid</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="action" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-offline.c"
               line="52">a #PkOfflineAction, e.g. %PK_OFFLINE_ACTION_REBOOT</doc>
          <type name="OfflineAction" c:type="PkOfflineAction"/>
        </parameter>
      </parameters>
    </function>
    <function name="offline_auth_cancel"
              c:identifier="pk_offline_auth_cancel"
              throws="1">
      <source-position filename="lib/packagekit-glib2/pk-offline-private.h"
                       line="64"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="offline_auth_clear_results"
              c:identifier="pk_offline_auth_clear_results"
              throws="1">
      <source-position filename="lib/packagekit-glib2/pk-offline-private.h"
                       line="65"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="offline_auth_invalidate"
              c:identifier="pk_offline_auth_invalidate"
              throws="1">
      <source-position filename="lib/packagekit-glib2/pk-offline-private.h"
                       line="81"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="offline_auth_set_action"
              c:identifier="pk_offline_auth_set_action"
              throws="1">
      <source-position filename="lib/packagekit-glib2/pk-offline-private.h"
                       line="62"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="action" transfer-ownership="none">
          <type name="OfflineAction" c:type="PkOfflineAction"/>
        </parameter>
      </parameters>
    </function>
    <function name="offline_auth_set_prepared_ids"
              c:identifier="pk_offline_auth_set_prepared_ids"
              throws="1">
      <source-position filename="lib/packagekit-glib2/pk-offline-private.h"
                       line="71"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="package_ids" transfer-ownership="none">
          <type name="utf8" c:type="gchar**"/>
        </parameter>
      </parameters>
    </function>
    <function name="offline_auth_set_prepared_upgrade"
              c:identifier="pk_offline_auth_set_prepared_upgrade"
              throws="1">
      <source-position filename="lib/packagekit-glib2/pk-offline-private.h"
                       line="73"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="release_ver" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="offline_auth_set_results"
              c:identifier="pk_offline_auth_set_results"
              throws="1">
      <source-position filename="lib/packagekit-glib2/pk-offline-private.h"
                       line="82"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="results" transfer-ownership="none">
          <type name="Results" c:type="PkResults*"/>
        </parameter>
      </parameters>
    </function>
    <function name="offline_auth_trigger"
              c:identifier="pk_offline_auth_trigger"
              throws="1">
      <source-position filename="lib/packagekit-glib2/pk-offline-private.h"
                       line="66"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="action" transfer-ownership="none">
          <type name="OfflineAction" c:type="PkOfflineAction"/>
        </parameter>
      </parameters>
    </function>
    <function name="offline_auth_trigger_upgrade"
              c:identifier="pk_offline_auth_trigger_upgrade"
              throws="1">
      <source-position filename="lib/packagekit-glib2/pk-offline-private.h"
                       line="68"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="action" transfer-ownership="none">
          <type name="OfflineAction" c:type="PkOfflineAction"/>
        </parameter>
      </parameters>
    </function>
    <function name="offline_cancel"
              c:identifier="pk_offline_cancel"
              version="0.9.6"
              throws="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-offline.c"
           line="106">Cancels the offline operation that has been scheduled. If there is no
scheduled offline operation then this method returns with success.
The function always allows user interaction. To change the behavior,
use pk_offline_cancel_with_flags().</doc>
      <source-position filename="lib/packagekit-glib2/pk-offline.h"
                       line="108"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.c"
             line="116">%TRUE for success, else %FALSE and @error set</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-offline.c"
               line="108">A #GCancellable or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="offline_cancel_with_flags"
              c:identifier="pk_offline_cancel_with_flags"
              version="1.2.5"
              throws="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-offline.c"
           line="126">Cancels the offline operation that has been scheduled. If there is no
scheduled offline operation then this method returns with success.</doc>
      <source-position filename="lib/packagekit-glib2/pk-offline.h"
                       line="110"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.c"
             line="135">%TRUE for success, else %FALSE and @error set</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-offline.c"
               line="128">bit-or of #PkOfflineFlags</doc>
          <type name="OfflineFlags" c:type="PkOfflineFlags"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-offline.c"
               line="129">A #GCancellable or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="offline_clear_results"
              c:identifier="pk_offline_clear_results"
              version="0.9.6"
              throws="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-offline.c"
           line="166">Clears the last offline operation report, which may be success or failure.
If the report does not exist then this method returns success.
The function always allows user interaction. To change the behavior,
use pk_offline_clear_results_with_flags().</doc>
      <source-position filename="lib/packagekit-glib2/pk-offline.h"
                       line="113"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.c"
             line="176">%TRUE for success, else %FALSE and @error set</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-offline.c"
               line="168">A #GCancellable or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="offline_clear_results_with_flags"
              c:identifier="pk_offline_clear_results_with_flags"
              version="1.2.5"
              throws="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-offline.c"
           line="186">Clears the last offline operation report, which may be success or failure.
If the report does not exist then this method returns success.</doc>
      <source-position filename="lib/packagekit-glib2/pk-offline.h"
                       line="115"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.c"
             line="195">%TRUE for success, else %FALSE and @error set</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-offline.c"
               line="188">bit-or of #PkOfflineFlags</doc>
          <type name="OfflineFlags" c:type="PkOfflineFlags"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-offline.c"
               line="189">A #GCancellable or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="offline_error_quark"
              c:identifier="pk_offline_error_quark"
              moved-to="OfflineError.quark"
              version="0.9.6">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-offline.c"
           line="39">An error quark for #PkOfflineError.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.c"
             line="44">an error quark.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="offline_get_action"
              c:identifier="pk_offline_get_action"
              version="0.9.6"
              throws="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-offline.c"
           line="354">Gets the action that will be taken after the offline action has completed.

An error is set if the the value %PK_OFFLINE_ACTION_UNKNOWN is returned.</doc>
      <source-position filename="lib/packagekit-glib2/pk-offline.h" line="92"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.c"
             line="362">a #PkOfflineAction, e.g. %PK_OFFLINE_ACTION_REBOOT</doc>
        <type name="OfflineAction" c:type="PkOfflineAction"/>
      </return-value>
    </function>
    <function name="offline_get_action_monitor"
              c:identifier="pk_offline_get_action_monitor"
              version="0.9.6"
              throws="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-offline.c"
           line="575">Gets a file monitor for the trigger.</doc>
      <source-position filename="lib/packagekit-glib2/pk-offline.h"
                       line="104"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.c"
             line="582">A #GFileMonitor, or %NULL</doc>
        <type name="Gio.FileMonitor" c:type="GFileMonitor*"/>
      </return-value>
      <parameters>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-offline.c"
               line="577">A #GCancellable or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="offline_get_prepared_ids"
              c:identifier="pk_offline_get_prepared_ids"
              version="0.9.6"
              throws="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-offline.c"
           line="434">Gets the package-ids in the prepared transaction.</doc>
      <source-position filename="lib/packagekit-glib2/pk-offline.h" line="93"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.c"
             line="440">array of package-ids, or %NULL</doc>
        <array c:type="gchar**">
          <type name="utf8"/>
        </array>
      </return-value>
    </function>
    <function name="offline_get_prepared_monitor"
              c:identifier="pk_offline_get_prepared_monitor"
              version="0.9.6"
              throws="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-offline.c"
           line="535">Gets a file monitor for the prepared transaction.</doc>
      <source-position filename="lib/packagekit-glib2/pk-offline.h" line="99"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.c"
             line="542">A #GFileMonitor, or %NULL</doc>
        <type name="Gio.FileMonitor" c:type="GFileMonitor*"/>
      </return-value>
      <parameters>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-offline.c"
               line="537">A #GCancellable or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="offline_get_prepared_sack"
              c:identifier="pk_offline_get_prepared_sack"
              version="0.9.6"
              throws="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-offline.c"
           line="401">Gets a package sack of the packages in the prepared transaction.</doc>
      <source-position filename="lib/packagekit-glib2/pk-offline.h" line="98"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.c"
             line="407">A new #PkPackageSack, or %NULL</doc>
        <type name="PackageSack" c:type="PkPackageSack*"/>
      </return-value>
    </function>
    <function name="offline_get_prepared_upgrade"
              c:identifier="pk_offline_get_prepared_upgrade"
              throws="1">
      <source-position filename="lib/packagekit-glib2/pk-offline-private.h"
                       line="77"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="release_ver" transfer-ownership="none">
          <type name="utf8" c:type="gchar**"/>
        </parameter>
      </parameters>
    </function>
    <function name="offline_get_prepared_upgrade_monitor"
              c:identifier="pk_offline_get_prepared_upgrade_monitor"
              version="1.0.12"
              throws="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-offline.c"
           line="555">Gets a file monitor for the prepared system upgrade transaction.</doc>
      <source-position filename="lib/packagekit-glib2/pk-offline.h"
                       line="101"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.c"
             line="562">A #GFileMonitor, or %NULL</doc>
        <type name="Gio.FileMonitor" c:type="GFileMonitor*"/>
      </return-value>
      <parameters>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-offline.c"
               line="557">A #GCancellable or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="offline_get_prepared_upgrade_name"
              c:identifier="pk_offline_get_prepared_upgrade_name"
              version="1.1.2"
              throws="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-offline.c"
           line="489">Gets the name of the prepared system upgrade in the prepared transaction.</doc>
      <source-position filename="lib/packagekit-glib2/pk-offline.h" line="94"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.c"
             line="495">the name, or %NULL if unset, free with g_free()</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="offline_get_prepared_upgrade_version"
              c:identifier="pk_offline_get_prepared_upgrade_version"
              version="1.0.12"
              throws="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-offline.c"
           line="512">Gets the version of the prepared system upgrade in the prepared transaction.</doc>
      <source-position filename="lib/packagekit-glib2/pk-offline.h" line="96"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.c"
             line="518">the version, or %NULL if unset, free with g_free()</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="offline_get_results"
              c:identifier="pk_offline_get_results"
              version="0.9.6"
              throws="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-offline.c"
           line="640">Gets the last result of the offline transaction.</doc>
      <source-position filename="lib/packagekit-glib2/pk-offline.h"
                       line="106"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.c"
             line="646">A #PkResults, or %NULL</doc>
        <type name="Results" c:type="PkResults*"/>
      </return-value>
    </function>
    <function name="offline_get_results_mtime"
              c:identifier="pk_offline_get_results_mtime"
              version="0.9.6"
              throws="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-offline.c"
           line="595">Gets the modification time of the prepared transaction.</doc>
      <source-position filename="lib/packagekit-glib2/pk-offline.h"
                       line="107"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.c"
             line="601">a unix time, or 0 for error.</doc>
        <type name="guint64" c:type="guint64"/>
      </return-value>
    </function>
    <function name="offline_trigger"
              c:identifier="pk_offline_trigger"
              version="0.9.6"
              throws="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-offline.c"
           line="226">Triggers the offline update so that the next reboot will perform the
pending transaction.
The function always allows user interaction. To change the behavior,
use pk_offline_trigger_with_flags().</doc>
      <source-position filename="lib/packagekit-glib2/pk-offline.h"
                       line="119"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.c"
             line="237">%TRUE for success, else %FALSE and @error set</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="action" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-offline.c"
               line="228">a #PkOfflineAction, e.g. %PK_OFFLINE_ACTION_REBOOT</doc>
          <type name="OfflineAction" c:type="PkOfflineAction"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-offline.c"
               line="229">A #GCancellable or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="offline_trigger_upgrade"
              c:identifier="pk_offline_trigger_upgrade"
              version="1.0.12"
              throws="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-offline.c"
           line="290">Triggers the offline system upgrade so that the next reboot will perform the
pending transaction.
The function always allows user interaction. To change the behavior,
use pk_offline_trigger_upgrade_with_flags().</doc>
      <source-position filename="lib/packagekit-glib2/pk-offline.h"
                       line="126"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.c"
             line="301">%TRUE for success, else %FALSE and @error set</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="action" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-offline.c"
               line="292">a #PkOfflineAction, e.g. %PK_OFFLINE_ACTION_REBOOT</doc>
          <type name="OfflineAction" c:type="PkOfflineAction"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-offline.c"
               line="293">A #GCancellable or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="offline_trigger_upgrade_with_flags"
              c:identifier="pk_offline_trigger_upgrade_with_flags"
              version="1.2.5"
              throws="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-offline.c"
           line="311">Triggers the offline system upgrade so that the next reboot will perform the
pending transaction.</doc>
      <source-position filename="lib/packagekit-glib2/pk-offline.h"
                       line="129"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.c"
             line="321">%TRUE for success, else %FALSE and @error set</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="action" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-offline.c"
               line="313">a #PkOfflineAction, e.g. %PK_OFFLINE_ACTION_REBOOT</doc>
          <type name="OfflineAction" c:type="PkOfflineAction"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-offline.c"
               line="314">bit-or of #PkOfflineFlags</doc>
          <type name="OfflineFlags" c:type="PkOfflineFlags"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-offline.c"
               line="315">A #GCancellable or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="offline_trigger_with_flags"
              c:identifier="pk_offline_trigger_with_flags"
              version="1.2.5"
              throws="1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-offline.c"
           line="247">Triggers the offline update so that the next reboot will perform the
pending transaction.</doc>
      <source-position filename="lib/packagekit-glib2/pk-offline.h"
                       line="122"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-offline.c"
             line="257">%TRUE for success, else %FALSE and @error set</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="action" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-offline.c"
               line="249">a #PkOfflineAction, e.g. %PK_OFFLINE_ACTION_REBOOT</doc>
          <type name="OfflineAction" c:type="PkOfflineAction"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-offline.c"
               line="250">bit-or of #PkOfflineFlags</doc>
          <type name="OfflineFlags" c:type="PkOfflineFlags"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-offline.c"
               line="251">A #GCancellable or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="pk-bitfield">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-bitfield.c"
           line="22">#PkBitfield provides a method of using enumerations in a bitfield.</doc>
    </docsection>
    <docsection name="pk-category">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-category.c"
           line="22">This GObject represents a category in the group system.</doc>
    </docsection>
    <docsection name="pk-client">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-client.c"
           line="22">A GObject to use for accessing PackageKit asynchronously. If you're
using #PkClient to install, remove, or update packages, be prepared that
the eula, gpg and trusted callbacks need to be rescheduled manually, as in
https://www.freedesktop.org/software/PackageKit/gtk-doc/introduction-ideas-transactions.html</doc>
    </docsection>
    <docsection name="pk-client-helper">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-client-helper.c"
           line="26">This GObject can be used to run a session helper program out of band
with the normal PackageKit transaction. This allows an external program
such as debconf to be used that needs direct console access.


  client ----&gt; packagekit-glib ---&gt; dbus ---&gt; packagekitd ---&gt; apt
         .------------^                                         ^
  debconf ___________________               (SetHints)          |
   | \___|  PkClientHelper   \__.____.____.______/_.____.____.__/
   ^-----|___________________/         (socket in tmp)
  (stdin &amp; stdout )

 \------------.------------------/          \------------.---------/
              |                                          |
         user session                              system context</doc>
    </docsection>
    <docsection name="pk-common">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-common.c"
           line="22">This file contains functions that may be useful.</doc>
    </docsection>
    <docsection name="pk-control">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-control.c"
           line="22">A GObject to use for accessing PackageKit asynchronously.</doc>
    </docsection>
    <docsection name="pk-desktop">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-desktop.c"
           line="22">Desktop metadata such as icon name and localised summary may be stored in
a local sqlite cache, and this module allows applications to query this.</doc>
    </docsection>
    <docsection name="pk-details">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-details.c"
           line="22">This GObject represents a details from a transaction.
These objects represent single items of data from the transaction, and are
often present in lists (#PkResults) or just refcounted in client programs.</doc>
    </docsection>
    <docsection name="pk-distro-upgrade">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-distro-upgrade.c"
           line="22">This GObject represents a distro_upgrade from a transaction.
These objects represent single items of data from the transaction, and are
often present in lists (#PkResults) or just refcounted in client programs.</doc>
    </docsection>
    <docsection name="pk-enum">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="22">Enumerated values used in packagekit-glib2 and functions for using these.</doc>
    </docsection>
    <docsection name="pk-error">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-error.c"
           line="22">This GObject represents a error_code from a transaction.
These objects represent single items of data from the transaction, and are
often present in lists (#PkResults) or just refcounted in client programs.</doc>
    </docsection>
    <docsection name="pk-eula-required">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-eula-required.c"
           line="22">This GObject represents a eula_required from a transaction.
These objects represent single items of data from the transaction, and are
often present in lists (#PkResults) or just refcounted in client programs.</doc>
    </docsection>
    <docsection name="pk-files">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-files.c"
           line="22">This GObject represents a files from a transaction.
These objects represent single items of data from the transaction, and are
often present in lists (#PkResults) or just refcounted in client programs.</doc>
    </docsection>
    <docsection name="pk-item-progress">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-item-progress.c"
           line="22">This GObject represents a item_progress from a transaction.
These objects represent single items of data from the transaction, and are
often present in lists (#PkResults) or just refcounted in client programs.</doc>
    </docsection>
    <docsection name="pk-media-change-required">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-media-change-required.c"
           line="22">This GObject represents a media_change_required from a transaction.
These objects represent single items of data from the transaction, and are
often present in lists (#PkResults) or just refcounted in client programs.</doc>
    </docsection>
    <docsection name="pk-offline">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-offline.c"
           line="31">Functions for perform offline updates.</doc>
    </docsection>
    <docsection name="pk-package">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-package.c"
           line="22">This GObject represents a package from a transaction.
These objects represent single items of data from the transaction, and are
often present in lists (#PkResults) or just refcounted in client programs.</doc>
    </docsection>
    <docsection name="pk-package-sack">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-package-sack.c"
           line="22">A package sack is a set of packages that can have operations done on them
in parallel. This might be adding summary text for bare package ID's, or
to add package or update details.</doc>
    </docsection>
    <docsection name="pk-progress">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-progress.c"
           line="22">This GObject is available to clients to be able to query details about
the transaction. All of the details on this object are stored as properties.</doc>
    </docsection>
    <docsection name="pk-repo-detail">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-repo-detail.c"
           line="22">This GObject represents a repo_detail from a transaction.
These objects represent single items of data from the transaction, and are
often present in lists (#PkResults) or just refcounted in client programs.</doc>
    </docsection>
    <docsection name="pk-repo-signature-required">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-repo-signature-required.c"
           line="22">This GObject represents a repo_signature_required from a transaction.
These objects represent single items of data from the transaction, and are
often present in lists (#PkResults) or just refcounted in client programs.</doc>
    </docsection>
    <docsection name="pk-require-restart">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-require-restart.c"
           line="22">This GObject represents a requirement of restart from a transaction.
These objects represent single items of data from the transaction, and are
often present in lists (#PkResults) or just refcounted in client programs.</doc>
    </docsection>
    <docsection name="pk-results">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-results.c"
           line="22">This GObject allows a client program to query the results sent from
PackageKit. This will include Package(), ErrorCode() and all the other types
of objects. Everything is refcounted, so ensure you unref when done with the
data.</doc>
    </docsection>
    <docsection name="pk-source">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-source.c"
           line="22">This GObject holds details about the source of the transaction object, and
are therefore shared properties that all data objects have.</doc>
    </docsection>
    <docsection name="pk-transaction-list">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-transaction-list.c"
           line="22">These provide a good way to keep a list of the jobs being processed so we
can see what type of jobs and thier status easily.</doc>
    </docsection>
    <docsection name="pk-transaction-past">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-transaction-past.c"
           line="22">This GObject represents a transaction_past from a transaction_past.
These objects represent single items of data from the transaction, and are
often present in lists (#PkResults) or just refcounted in client programs.</doc>
    </docsection>
    <docsection name="pk-update-detail">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-update-detail.c"
           line="22">This GObject represents a update_detail from a transaction.
These objects represent single items of data from the transaction, and are
often present in lists (#PkResults) or just refcounted in client programs.</doc>
    </docsection>
    <function name="polkit_agent_close" c:identifier="pk_polkit_agent_close">
      <source-position filename="lib/packagekit-glib2/pk-spawn-polkit-agent.h"
                       line="26"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="polkit_agent_open" c:identifier="pk_polkit_agent_open">
      <source-position filename="lib/packagekit-glib2/pk-spawn-polkit-agent.h"
                       line="25"/>
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
    </function>
    <function name="ptr_array_to_strv"
              c:identifier="pk_ptr_array_to_strv"
              version="0.5.2">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-common.c"
           line="187">Form a composite string array of strings.
The data in the GPtrArray is copied.</doc>
      <source-position filename="lib/packagekit-glib2/pk-common.h" line="90"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-common.c"
             line="194">the string array, or %NULL if invalid</doc>
        <array c:type="gchar**">
          <type name="utf8"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="array" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-common.c"
               line="189">the GPtrArray of strings</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="utf8"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="restart_enum_from_string"
              c:identifier="pk_restart_enum_from_string"
              moved-to="RestartEnum.from_string"
              version="0.5.0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="698">Converts a text enumerated type to its unsigned integer representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="824"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="704">the enumerated constant value, e.g. PK_SIGTYPE_ENUM_GPG</doc>
        <type name="RestartEnum" c:type="PkRestartEnum"/>
      </return-value>
      <parameters>
        <parameter name="restart" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="700">Text describing the enumerated type</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="restart_enum_to_string"
              c:identifier="pk_restart_enum_to_string"
              moved-to="RestartEnum.to_string"
              version="0.5.0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="714">Converts a enumerated type to its text representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="825"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="720">the enumerated constant value, e.g. "available"</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="restart" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="716">The enumerated type value</doc>
          <type name="RestartEnum" c:type="PkRestartEnum"/>
        </parameter>
      </parameters>
    </function>
    <function name="role_bitfield_from_string"
              c:identifier="pk_role_bitfield_from_string"
              version="0.5.2">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-bitfield.c"
           line="146">Converts text representation to its enumerated type bitfield</doc>
      <source-position filename="lib/packagekit-glib2/pk-bitfield.h"
                       line="100"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-bitfield.c"
             line="152">The enumerated type values, or 0 for invalid</doc>
        <type name="Bitfield" c:type="PkBitfield"/>
      </return-value>
      <parameters>
        <parameter name="roles" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-bitfield.c"
               line="148">the enumerated constant value, e.g. "search-file;update-system"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="role_bitfield_to_string"
              c:identifier="pk_role_bitfield_to_string"
              version="0.5.2">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-bitfield.c"
           line="113">Converts a enumerated type bitfield to its text representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-bitfield.h"
                       line="101"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-bitfield.c"
             line="119">the enumerated constant value, e.g. "install-file;update-system"</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="roles" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-bitfield.c"
               line="115">The enumerated type values</doc>
          <type name="Bitfield" c:type="PkBitfield"/>
        </parameter>
      </parameters>
    </function>
    <function name="role_enum_from_string"
              c:identifier="pk_role_enum_from_string"
              moved-to="RoleEnum.from_string"
              version="0.5.0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="634">Converts a text enumerated type to its unsigned integer representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="818"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="640">the enumerated constant value, e.g. PK_SIGTYPE_ENUM_GPG</doc>
        <type name="RoleEnum" c:type="PkRoleEnum"/>
      </return-value>
      <parameters>
        <parameter name="role" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="636">Text describing the enumerated type</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="role_enum_to_localised_present"
              c:identifier="pk_role_enum_to_localised_present"
              moved-to="RoleEnum.to_localised_present"
              version="0.7.2">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="1115">Converts a enumerated type to its localized description</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="851"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="1121">the translated text</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="role" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="1117">The enumerated type value</doc>
          <type name="RoleEnum" c:type="PkRoleEnum"/>
        </parameter>
      </parameters>
    </function>
    <function name="role_enum_to_string"
              c:identifier="pk_role_enum_to_string"
              moved-to="RoleEnum.to_string"
              version="0.5.0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="650">Converts a enumerated type to its text representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="819"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="656">the enumerated constant value, e.g. "available"</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="role" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="652">The enumerated type value</doc>
          <type name="RoleEnum" c:type="PkRoleEnum"/>
        </parameter>
      </parameters>
    </function>
    <function name="sig_type_enum_from_string"
              c:identifier="pk_sig_type_enum_from_string"
              moved-to="SigTypeEnum.from_string">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="444">Converts a text enumerated type to its unsigned integer representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="800"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="450">the enumerated constant value, e.g. PK_SIGTYPE_ENUM_GPG</doc>
        <type name="SigTypeEnum" c:type="PkSigTypeEnum"/>
      </return-value>
      <parameters>
        <parameter name="sig_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="446">Text describing the enumerated type</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sig_type_enum_to_string"
              c:identifier="pk_sig_type_enum_to_string"
              moved-to="SigTypeEnum.to_string"
              version="0.5.0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="458">Converts a enumerated type to its text representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="801"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="464">the enumerated constant value, e.g. "available"</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="sig_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="460">The enumerated type value</doc>
          <type name="SigTypeEnum" c:type="PkSigTypeEnum"/>
        </parameter>
      </parameters>
    </function>
    <function name="status_enum_from_string"
              c:identifier="pk_status_enum_from_string"
              moved-to="StatusEnum.from_string"
              version="0.5.0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="602">Converts a text enumerated type to its unsigned integer representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="815"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="608">the enumerated constant value, e.g. PK_SIGTYPE_ENUM_GPG</doc>
        <type name="StatusEnum" c:type="PkStatusEnum"/>
      </return-value>
      <parameters>
        <parameter name="status" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="604">Text describing the enumerated type</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="status_enum_to_localised_text"
              c:identifier="pk_status_enum_to_localised_text"
              moved-to="StatusEnum.to_localised_text">
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="848"/>
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="status" transfer-ownership="none">
          <type name="StatusEnum" c:type="PkStatusEnum"/>
        </parameter>
      </parameters>
    </function>
    <function name="status_enum_to_string"
              c:identifier="pk_status_enum_to_string"
              moved-to="StatusEnum.to_string"
              version="0.5.0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="618">Converts a enumerated type to its text representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="816"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="624">the enumerated constant value, e.g. "available"</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="status" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="620">The enumerated type value</doc>
          <type name="StatusEnum" c:type="PkStatusEnum"/>
        </parameter>
      </parameters>
    </function>
    <function name="transaction_flag_bitfield_from_string"
              c:identifier="pk_transaction_flag_bitfield_from_string"
              version="0.8.1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-bitfield.c"
           line="355">Converts text representation to its enumerated type bitfield, or 0 for invalid</doc>
      <source-position filename="lib/packagekit-glib2/pk-bitfield.h"
                       line="106"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-bitfield.c"
             line="361">The enumerated type values</doc>
        <type name="Bitfield" c:type="PkBitfield"/>
      </return-value>
      <parameters>
        <parameter name="transaction_flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-bitfield.c"
               line="357">the enumerated constant value, e.g. "only-trusted;simulate"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="transaction_flag_bitfield_to_string"
              c:identifier="pk_transaction_flag_bitfield_to_string"
              version="0.8.1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-bitfield.c"
           line="318">Converts a enumerated type bitfield to its text representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-bitfield.h"
                       line="107"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-bitfield.c"
             line="324">the enumerated constant value, e.g. "only-trusted;simulate"</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="transaction_flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-bitfield.c"
               line="320">The enumerated type values</doc>
          <type name="Bitfield" c:type="PkBitfield"/>
        </parameter>
      </parameters>
    </function>
    <function name="transaction_flag_enum_from_string"
              c:identifier="pk_transaction_flag_enum_from_string"
              moved-to="TransactionFlagEnum.from_string"
              version="0.8.1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="922">Converts a text enumerated type to its unsigned integer representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="845"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="928">the enumerated constant value, e.g. %PK_TRANSACTION_FLAG_ENUM_SIMULATE</doc>
        <type name="TransactionFlagEnum" c:type="PkTransactionFlagEnum"/>
      </return-value>
      <parameters>
        <parameter name="transaction_flag" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="924">Text describing the enumerated type</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="transaction_flag_enum_to_string"
              c:identifier="pk_transaction_flag_enum_to_string"
              moved-to="TransactionFlagEnum.to_string"
              version="0.8.1">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="938">Converts a enumerated type to its text representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="846"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="944">the enumerated constant value, e.g. "simulate"</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="transaction_flag" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="940">The enumerated type value</doc>
          <type name="TransactionFlagEnum" c:type="PkTransactionFlagEnum"/>
        </parameter>
      </parameters>
    </function>
    <function name="update_state_enum_from_string"
              c:identifier="pk_update_state_enum_from_string"
              moved-to="UpdateStateEnum.from_string"
              version="0.5.0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="762">Converts a text enumerated type to its unsigned integer representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="806"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="768">the enumerated constant value, e.g. %PK_UPDATE_STATE_ENUM_STABLE</doc>
        <type name="UpdateStateEnum" c:type="PkUpdateStateEnum"/>
      </return-value>
      <parameters>
        <parameter name="update_state" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="764">Text describing the enumerated type</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="update_state_enum_to_string"
              c:identifier="pk_update_state_enum_to_string"
              moved-to="UpdateStateEnum.to_string"
              version="0.5.0">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="778">Converts a enumerated type to its text representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="807"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="784">the enumerated constant value, e.g. "testing"</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="update_state" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="780">The enumerated type value</doc>
          <type name="UpdateStateEnum" c:type="PkUpdateStateEnum"/>
        </parameter>
      </parameters>
    </function>
    <function name="upgrade_kind_enum_from_string"
              c:identifier="pk_upgrade_kind_enum_from_string"
              moved-to="UpgradeKindEnum.from_string"
              version="0.6.11">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="890">Converts a text enumerated type to its unsigned integer representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="842"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="896">the enumerated constant value, e.g. %PK_UPGRADE_KIND_ENUM_MINIMAL</doc>
        <type name="UpgradeKindEnum" c:type="PkUpgradeKindEnum"/>
      </return-value>
      <parameters>
        <parameter name="upgrade_kind" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="892">Text describing the enumerated type</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="upgrade_kind_enum_to_string"
              c:identifier="pk_upgrade_kind_enum_to_string"
              moved-to="UpgradeKindEnum.to_string"
              version="0.6.11">
      <doc xml:space="preserve"
           filename="lib/packagekit-glib2/pk-enum.c"
           line="906">Converts a enumerated type to its text representation</doc>
      <source-position filename="lib/packagekit-glib2/pk-enum.h" line="843"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="lib/packagekit-glib2/pk-enum.c"
             line="912">the enumerated constant value, e.g. "minimal"</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="upgrade_kind" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/packagekit-glib2/pk-enum.c"
               line="908">The enumerated type value</doc>
          <type name="UpgradeKindEnum" c:type="PkUpgradeKindEnum"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
